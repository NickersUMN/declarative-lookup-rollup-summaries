BEGIN TRANSACTION;
CREATE TABLE "Account" (
	id INTEGER NOT NULL, 
	"Name" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "Account" VALUES(1,'Last 1');
INSERT INTO "Account" VALUES(2,'Last 2');
INSERT INTO "Account" VALUES(3,'Last 3');
INSERT INTO "Account" VALUES(4,'Last 4');
INSERT INTO "Account" VALUES(5,'Last 5');
INSERT INTO "Account" VALUES(6,'Last 6');
INSERT INTO "Account" VALUES(7,'Last 7');
INSERT INTO "Account" VALUES(8,'Last 8');
INSERT INTO "Account" VALUES(9,'Last 9');
INSERT INTO "Account" VALUES(10,'Last 10');
INSERT INTO "Account" VALUES(11,'Last 11');
INSERT INTO "Account" VALUES(12,'Last 12');
INSERT INTO "Account" VALUES(13,'Last 13');
INSERT INTO "Account" VALUES(14,'Last 14');
INSERT INTO "Account" VALUES(15,'Last 15');
INSERT INTO "Account" VALUES(16,'Last 16');
INSERT INTO "Account" VALUES(17,'Last 17');
INSERT INTO "Account" VALUES(18,'Last 18');
INSERT INTO "Account" VALUES(19,'Last 19');
INSERT INTO "Account" VALUES(20,'Last 20');
INSERT INTO "Account" VALUES(21,'Last 21');
INSERT INTO "Account" VALUES(22,'Last 22');
INSERT INTO "Account" VALUES(23,'Last 23');
INSERT INTO "Account" VALUES(24,'Last 24');
INSERT INTO "Account" VALUES(25,'Last 25');
INSERT INTO "Account" VALUES(26,'Last 26');
INSERT INTO "Account" VALUES(27,'Last 27');
INSERT INTO "Account" VALUES(28,'Last 28');
INSERT INTO "Account" VALUES(29,'Last 29');
INSERT INTO "Account" VALUES(30,'Last 30');
INSERT INTO "Account" VALUES(31,'Last 31');
INSERT INTO "Account" VALUES(32,'Last 32');
INSERT INTO "Account" VALUES(33,'Last 33');
INSERT INTO "Account" VALUES(34,'Last 34');
INSERT INTO "Account" VALUES(35,'Last 35');
INSERT INTO "Account" VALUES(36,'Last 36');
INSERT INTO "Account" VALUES(37,'Last 37');
INSERT INTO "Account" VALUES(38,'Last 38');
INSERT INTO "Account" VALUES(39,'Last 39');
INSERT INTO "Account" VALUES(40,'Last 40');
INSERT INTO "Account" VALUES(41,'Last 41');
INSERT INTO "Account" VALUES(42,'Last 42');
INSERT INTO "Account" VALUES(43,'Last 43');
INSERT INTO "Account" VALUES(44,'Last 44');
INSERT INTO "Account" VALUES(45,'Last 45');
INSERT INTO "Account" VALUES(46,'Last 46');
INSERT INTO "Account" VALUES(47,'Last 47');
INSERT INTO "Account" VALUES(48,'Last 48');
INSERT INTO "Account" VALUES(49,'Last 49');
INSERT INTO "Account" VALUES(50,'Last 50');
INSERT INTO "Account" VALUES(51,'Last 51');
INSERT INTO "Account" VALUES(52,'Last 52');
INSERT INTO "Account" VALUES(53,'Last 53');
INSERT INTO "Account" VALUES(54,'Last 54');
INSERT INTO "Account" VALUES(55,'Last 55');
INSERT INTO "Account" VALUES(56,'Last 56');
INSERT INTO "Account" VALUES(57,'Last 57');
INSERT INTO "Account" VALUES(58,'Last 58');
INSERT INTO "Account" VALUES(59,'Last 59');
INSERT INTO "Account" VALUES(60,'Last 60');
INSERT INTO "Account" VALUES(61,'Last 61');
INSERT INTO "Account" VALUES(62,'Last 62');
INSERT INTO "Account" VALUES(63,'Last 63');
INSERT INTO "Account" VALUES(64,'Last 64');
INSERT INTO "Account" VALUES(65,'Last 65');
INSERT INTO "Account" VALUES(66,'Last 66');
INSERT INTO "Account" VALUES(67,'Last 67');
INSERT INTO "Account" VALUES(68,'Last 68');
INSERT INTO "Account" VALUES(69,'Last 69');
INSERT INTO "Account" VALUES(70,'Last 70');
INSERT INTO "Account" VALUES(71,'Last 71');
INSERT INTO "Account" VALUES(72,'Last 72');
INSERT INTO "Account" VALUES(73,'Last 73');
INSERT INTO "Account" VALUES(74,'Last 74');
INSERT INTO "Account" VALUES(75,'Last 75');
INSERT INTO "Account" VALUES(76,'Last 76');
INSERT INTO "Account" VALUES(77,'Last 77');
INSERT INTO "Account" VALUES(78,'Last 78');
INSERT INTO "Account" VALUES(79,'Last 79');
INSERT INTO "Account" VALUES(80,'Last 80');
INSERT INTO "Account" VALUES(81,'Last 81');
INSERT INTO "Account" VALUES(82,'Last 82');
INSERT INTO "Account" VALUES(83,'Last 83');
INSERT INTO "Account" VALUES(84,'Last 84');
INSERT INTO "Account" VALUES(85,'Last 85');
INSERT INTO "Account" VALUES(86,'Last 86');
INSERT INTO "Account" VALUES(87,'Last 87');
INSERT INTO "Account" VALUES(88,'Last 88');
INSERT INTO "Account" VALUES(89,'Last 89');
INSERT INTO "Account" VALUES(90,'Last 90');
INSERT INTO "Account" VALUES(91,'Last 91');
INSERT INTO "Account" VALUES(92,'Last 92');
INSERT INTO "Account" VALUES(93,'Last 93');
INSERT INTO "Account" VALUES(94,'Last 94');
INSERT INTO "Account" VALUES(95,'Last 95');
INSERT INTO "Account" VALUES(96,'Last 96');
INSERT INTO "Account" VALUES(97,'Last 97');
INSERT INTO "Account" VALUES(98,'Last 98');
INSERT INTO "Account" VALUES(99,'Last 99');
INSERT INTO "Account" VALUES(100,'Last 100');
CREATE TABLE "ApexClass" (
	id INTEGER NOT NULL, 
	"ApiVersion" VARCHAR(255), 
	"Body" VARCHAR(255), 
	"BodyCrc" VARCHAR(255), 
	"IsValid" VARCHAR(255), 
	"Name" VARCHAR(255), 
	"LengthWithoutComments" VARCHAR(255), 
	"Status" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "ApexClass" VALUES(1,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class CustomMetadataServiceTest {
}','3126618418.0','True','CustomMetadataServiceTest','52','Active');
INSERT INTO "ApexClass" VALUES(2,'57.0','/*
Copyright (c) tgerm.com
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/**
    LREngine("L"ookup "R"ollup Engine) : This class simplifies rolling up on the child records in lookup relationship.
*/
public class LREngine {
  /*
        Tempalte tokens
            0 : Fields to project
            1 : Object to query
            2 : Optional WHERE clause filter to add
            3 : Group By field name
            4 : ALL ROWS or empty string
    */
  static String SOQL_AGGREGATE_TEMPLATE = ''SELECT {0} FROM {1} WHERE {3} in :masterIds {2} GROUP BY {3} {4}'';

  /*
        Tempalte tokens
            0 : Fields to project
            1 : Object to query
            2 : Parent lookup field
            3 : Optional WHERE clause filter to add
            4 : Order by clause
            5 : ALL ROWS or empty string
    */
  static String SOQL_QUERY_TEMPLATE = ''SELECT {0} FROM {1} WHERE {2} in :masterIds {3} ORDER BY {4} {5}'';

  /*
    Support for multi-currency orgs
    */
  static String MASTERCURRENCYALIAS = ''mastercc'';
  public static String CURRENCYISOCODENAME = ''CurrencyIsoCode'';
  //http://advancedapex.com/2013/07/07/optional-features/
  private static Boolean m_IsMultiCurrency = null;
  public static Boolean IsMultiCurrencyOrg() {
    if (m_IsMultiCurrency != null)
      return m_IsMultiCurrency;
    m_IsMultiCurrency = UserInfo.isMultiCurrencyOrganization();
    return m_IsMultiCurrency;
  }

  // Currency lookup
  static final Map<String, Decimal> currencyConversionMap = new Map<String, Decimal>();
  private static Decimal convertCurrency(String iso, Decimal val) {
    return new ConvertCurrencyHelper().convertCurrencyWithoutSharing(iso, val);
  }

  /**
   * See here for the reason why this has to run "without sharing" https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/454
   **/
  private without sharing class ConvertCurrencyHelper {
    private Decimal convertCurrencyWithoutSharing(String iso, Decimal val) {
      if (currencyConversionMap.isEmpty()) {
        String query = ''select IsoCode, ConversionRate from CurrencyType where IsActive = true'';
        for (sObject ct : Database.query(query))
          currencyConversionMap.put(
            (String) ct.get(''IsoCode''),
            (Decimal) ct.get(''ConversionRate'')
          );
      }
      return val != null ? val * currencyConversionMap.get(iso) : 0;
    }
  }

  /**
        Key driver method that rolls up lookup fields based on the context. This is specially useful in Trigger context.
        
        @param ctx Context the complete context required to rollup
        @param detailRecordsFromTrigger child/detail records which are modified/created/deleted during the Trigger 
        @returns Array of in memory master objects. These objects are not updated back to the database
                because we want client or calling code to have this freedom to do some post processing and update when required.
    */
  public static Sobject[] rollUp(
    Context ctx,
    Sobject[] detailRecordsFromTrigger
  ) {
    // API name of the lookup field on detail sobject
    String lookUpFieldName = ctx.lookupField.getName();

    Set<Id> masterRecordIds = new Set<Id>();
    for (Sobject kid : detailRecordsFromTrigger) {
      masterRecordIds.add((Id) kid.get(lookUpFieldName));
    }
    return rollUp(ctx, masterRecordIds);
  }

  /**
        Key driver method that rolls up lookup fields based on the context. This is meant to be called from non trigger contexts like
        scheduled/batch apex, where we want to rollup on some master record ids.
        
        @param Context the complete context required to rollup
        @param masterIds Master record IDs whose child records should be rolled up. 
        @returns Array of in memory master objects. These objects are not updated back to the database
                because we want client or calling code to have this freedom to do some post processing and update when required.
    */
  public static Sobject[] rollUp(Context ctx, Set<Id> masterIds) {
    return rollUp(ctx, masterIds, false);
  }

  /**
        Key driver method that rolls up lookup fields based on the context. This is meant to be called from non trigger contexts like
        scheduled/batch apex, where we want to rollup on some master record ids.
        
        @param Context the complete context required to rollup
        @param masterIds Master record IDs whose child records should be rolled up. 
        @param validateOnly Checks the SOQL query is valid, throws an exception if not, returns null if valid
        @returns Array of in memory master objects. These objects are not updated back to the database
                because we want client or calling code to have this freedom to do some post processing and update when required.
    */
  public static Sobject[] rollUp(
    Context ctx,
    Set<Id> masterIds,
    Boolean validateOnly
  ) {
    // Clone this since we are about to modify it later
    masterIds = masterIds.clone();
    // K: Id of master record
    // V: Empty sobject with ID field, this will be used for updating the masters
    Map<Id, Sobject> masterRecordsMap = new Map<Id, Sobject>();
    for (Id mId : masterIds) {
      masterRecordsMap.put(mId, ctx.master.newSobject(mId));
    }

    // #0 token : SOQL projection
    String soqlProjection = ctx.lookupField.getName();

    // k: detail field name, v: master field name
    Integer exprIdx = 0;
    Boolean needsCurrency = false;
    Boolean builtAggregateQuery = false;
    Set<String> selectedFields = new Set<String>();
    Map<String, RollupSummaryField> rsfByAlais = new Map<String, RollupSummaryField>();
    for (RollupSummaryField rsf : ctx.fieldsToRoll) {
      if (
        rsf.operation == RollupOperation.Sum ||
        rsf.operation == RollupOperation.Max ||
        rsf.operation == RollupOperation.Min ||
        rsf.operation == RollupOperation.Avg ||
        rsf.operation == RollupOperation.Count ||
        rsf.operation == RollupOperation.Count_Distinct
      ) {
        // create aggreate projection with alias for easy fetching via AggregateResult class
        // i.e. SUM(Amount) Amount
        builtAggregateQuery = true;
        String alias = ''lre'' + exprIdx++; // Calculate an alias, using field name blew the 25 character limit in some cases
        soqlProjection +=
          '', '' +
          rsf.operation +
          ''('' +
          rsf.detail.getName() +
          '') '' +
          alias;
        rsfByAlais.put(alias, rsf);
        if (
          IsMultiCurrencyOrg() == true &&
          needsCurrency == false &&
          rsf.isMasterTypeCurrency
        ) {
          needsCurrency = true;
        }
      } else {
        // create field projection
        // i.e. Amount
        String selectField = rsf.detail.getName();
        if (!selectedFields.contains(selectField)) {
          soqlProjection += '', '' + selectField;
          selectedFields.add(selectField);
        }
      }
    }

    // Add a field selection to get the currency from the parent record if we are depositing values into a currency field
    if (IsMultiCurrencyOrg() == true && needsCurrency == true) {
      String lookupRelationshipName = ctx.lookupField.getRelationshipName();
      soqlProjection +=
        '', '' +
        RollupOperation.Max +
        ''('' +
        lookupRelationshipName +
        ''.'' +
        CURRENCYISOCODENAME +
        '') '' +
        MASTERCURRENCYALIAS;
    }

    // #1 token for SOQL_TEMPLATE
    String detailTblName = ctx.detail.getDescribe().getName();

    // #2 Where clause
    String whereClause = '''';
    if (
      ctx.detailWhereClause != null &&
      ctx.detailWhereClause.trim().length() > 0
    ) {
      whereClause = ''AND ('' + ctx.detailWhereClause + '')'';
    }

    // #3 Group by field
    String grpByFld = ctx.lookupField.getName();

    // #4 Order by clause fields
    // i.e. Amount ASC NULLS FIRST, Name DESC NULL LAST
    String orderByClause =
      ctx.lookupField.getName() +
      (String.isBlank(ctx.detailOrderByClause)
        ? ''''
        : ('','' + ctx.detailOrderByClause));

    // #5 ALL ROWS
    String allRows = ctx.AllRows ? ''ALL ROWS'' : '''';

    // build approprite soql for this rollup context
    String soql = builtAggregateQuery
      ? String.format(
          SOQL_AGGREGATE_TEMPLATE,
          new List<String>{
            soqlProjection,
            detailTblName,
            whereClause,
            grpByFld,
            allRows
          }
        )
      : String.format(
          SOQL_QUERY_TEMPLATE,
          new List<String>{
            soqlProjection,
            detailTblName,
            ctx.lookupField.getName(),
            whereClause,
            orderByClause,
            allRows
          }
        );
    System.debug(''SOQL is '' + soql);

    // validate only?
    if (validateOnly) {
      Database.getQueryLocator(soql);
      return null;
    }

    // consider sharing rules or not?
    QueryExecutor qe = null;
    if (ctx.SharingMode == SharingMode.User)
      qe = new WithSharingQueryExecutor();
    else if (ctx.SharingMode == SharingMode.System_x)
      qe = new WithoutSharingQueryExecutor();
    else
      // Default
      qe = new WithSharingQueryExecutor();

    // query results
    Object queryResults = qe.query(soql, masterIds);
    if (queryResults instanceof List<AggregateResult>) {
      // Process Aggregate query results from RollupOperations related to Aggergate operations
      List<AggregateResult> results = (List<AggregateResult>) queryResults;
      for (AggregateResult res : results) {
        Id masterRecId = (Id) res.get(grpByFld);
        Sobject masterObj = masterRecordsMap.get(masterRecId);
        if (masterObj == null) {
          System.debug(
            Logginglevel.WARN,
            ''No master record found for ID :'' + masterRecId
          );
          continue;
        }

        for (String alias : rsfByAlais.keySet()) {
          RollupSummaryField rsf = rsfByAlais.get(alias);
          Object aggregatedDetailVal = res.get(alias);
          System.debug(
            LoggingLevel.INFO,
            ''New aggregarte value '' +
            aggregatedDetailVal +
            '' for master '' +
            masterRecId
          );
          // Should also test for necessity
          if (IsMultiCurrencyOrg() == true && rsf.isMasterTypeCurrency) {
            masterObj.put(
              rsf.master.getName(),
              convertCurrency(
                (String) res.get(MASTERCURRENCYALIAS),
                (Decimal) aggregatedDetailVal
              )
            );
          } else {
            if (rsf.master.getType() == Schema.Displaytype.Integer) {
              // Explicit down cast avoids runtime error
              masterObj.put(
                rsf.master.getName(),
                Integer.valueOf(aggregatedDetailVal)
              );
            } else {
              masterObj.put(rsf.master.getName(), aggregatedDetailVal);
            }
          }
        }
        // Remove master Id record as its been processed
        masterIds.remove(masterRecId);
      }
    } else if (queryResults instanceof List<SObject>) {
      // Group detail records by master Id
      List<SObject> detailRecords = (List<SObject>) queryResults;
      Map<Id, List<SObject>> detailRecordsByMasterId = new Map<Id, List<SObject>>();
      Id lastMasterId = null;
      List<SObject> currentDetailRecords = null;
      for (SObject detailRecord : detailRecords) {
        Id masterId = (Id) detailRecord.get(ctx.lookupField.getName());
        if (masterId != lastMasterId) {
          currentDetailRecords = new List<SObject>();
          detailRecordsByMasterId.put(masterId, currentDetailRecords);
        }
        currentDetailRecords.add(detailRecord);
        lastMasterId = masterId;
      }

      // Process rollup fields
      for (Id masterId : detailRecordsByMasterId.keySet()) {
        for (RollupSummaryField rsf : ctx.fieldsToRoll) {
          List<SObject> childDetailRecords = detailRecordsByMasterId.get(
            masterId
          );
          if (
            rsf.operation == RollupOperation.Concatenate ||
            rsf.operation == RollupOperation.Concatenate_Distinct
          ) {
            Concatenator concatenator = new Concatenator(
              rsf.operation == RollupOperation.Concatenate_Distinct,
              rsf.concatenateDelimiter
            );
            Integer rowIdx = 0;
            for (SObject childDetailRecord : childDetailRecords) {
              rowIdx++;
              String childFieldValue = String.valueOf(
                childDetailRecord.get(rsf.detail.getName())
              );
              if (childFieldValue != null) {
                if (rsf.detail.getType() == Schema.DisplayType.MultiPicklist) {
                  for (String mspValue : childFieldValue.split('';'')) {
                    concatenator.add(mspValue);
                  }
                } else {
                  concatenator.add(childFieldValue);
                }
              }
              if (
                rsf.RowLimit != null &&
                rsf.RowLimit > 0 &&
                rowIdx == rsf.RowLimit
              ) {
                break;
              }
            }
            String concatenatedValues = concatenator.toString();
            concatenatedValues = concatenatedValues.abbreviate(
              rsf.master.getLength()
            );
            masterRecordsMap.get(masterId)
              .put(rsf.master.getName(), concatenatedValues);
          } else if (rsf.operation == RollupOperation.First) {
            masterRecordsMap.get(masterId)
              .put(
                rsf.master.getName(),
                childDetailRecords[0].get(rsf.detail.getName())
              );
          } else if (rsf.operation == RollupOperation.Last) {
            Integer recordSetSize = childDetailRecords.size();
            Integer index = rsf.RowLimit != null &&
              rsf.RowLimit > 0
              ? (rsf.RowLimit < recordSetSize
                  ? rsf.RowLimit - 1
                  : recordSetSize - 1)
              : recordSetSize - 1;
            masterRecordsMap.get(masterId)
              .put(
                rsf.master.getName(),
                childDetailRecords[index].get(rsf.detail.getName())
              );
          }
          // Remove master Id record as its been processed
          masterIds.remove(masterId);
        }
      }
    }

    // Zero rollups for unprocessed master records (those with no longer any child relationships)
    for (Id masterRecId : masterIds)
      for (RollupSummaryField rsf : ctx.fieldsToRoll) {
        Object nullValue = null;
        if (rsf.isMasterTypeNumber) {
          nullValue = 0;
        } else if (rsf.isMasterTypeCheckbox) {
          nullValue = false;
        }
        masterRecordsMap.get(masterRecId).put(rsf.master.getName(), nullValue);
      }

    return masterRecordsMap.values();
  }

  private final static Map<Pattern, String> delimiterTokens = new Map<Pattern, String>{
    Pattern.compile(''BR\\(\\)'') => ''\n'',
    Pattern.compile(''SP\\(\\)'') => '' '',
    Pattern.compile(''TB\\(\\)'') => ''\t''
  };

  /**
   * Concatenates strings (removes duplicates)
   **/
  private class Concatenator {
    private Boolean distinct;
    private List<String> listOfString;
    private Set<String> setOfStrings;
    private String delimiter;

    public Concatenator(Boolean distinct, String delimiter) {
      this.distinct = distinct;
      if (delimiter != null) {
        for (Pattern p : delimiterTokens.keySet()) {
          delimiter = p.matcher(delimiter)
            .replaceAll((String) delimiterTokens.get(p));
        }
        this.delimiter = delimiter;
      }
      setOfStrings = new Set<String>();
      listOfString = new List<String>();
    }

    public void add(String value) {
      Boolean exists = setOfStrings.contains(value);
      if (!exists)
        setOfStrings.add(value);
      if (distinct ? !exists : true)
        listOfString.add(value);
    }

    public override String toString() {
      return String.join(listOfString, delimiter == null ? '''' : delimiter);
    }
  }

  /**
        Exception throwed if Rollup Summary field is in bad state
    */
  public class BadRollUpSummaryStateException extends Exception {
  }

  /**
       Which rollup operation you want to perform 
    */
  public enum RollupOperation {
    Sum,
    Max,
    Min,
    Avg,
    Count,
    Count_Distinct,
    Concatenate,
    Concatenate_Distinct,
    First,
    Last
  }

  /**
        Represents a "Single" roll up field, it contains
        - Master field where the rolled up info will be saved
        - Detail field that will be rolled up via any operation i.e. sum, avg etc 
        - Operation to perform i.e. sum, avg, count etc
            
    */
  public class RollupSummaryField {
    public Schema.Describefieldresult master;
    public Schema.Describefieldresult detail;
    public RollupOperation operation;
    public String concatenateDelimiter;
    public Integer rowLimit;

    // derived fields, kept like this to save script lines later, by saving the same
    // computations over and over again
    public boolean isMasterTypeNumber;
    public boolean isDetailTypeNumber;
    public boolean isMasterTypeDateOrTime;
    public boolean isDetailTypeDateOrTime;
    public boolean isMasterTypeCurrency;
    public boolean isMasterTypeText;
    public boolean isDetailTypeText;
    public boolean isMasterTypeId;
    public boolean isDetailTypeId;
    public boolean isMasterTypeCheckbox;
    public boolean isDetailTypeCheckbox;

    public RollupSummaryField(
      Schema.Describefieldresult m,
      Schema.Describefieldresult d,
      RollupOperation op
    ) {
      this(m, d, op, null);
    }

    public RollupSummaryField(
      Schema.Describefieldresult m,
      Schema.Describefieldresult d,
      RollupOperation op,
      String concatenateDelimiter
    ) {
      this(m, d, op, concatenateDelimiter, null);
    }

    public RollupSummaryField(
      Schema.Describefieldresult m,
      Schema.Describefieldresult d,
      RollupOperation op,
      String concatenateDelimiter,
      Integer rowLimit
    ) {
      this.master = m;
      this.detail = d;
      this.operation = op;
      this.concatenateDelimiter = concatenateDelimiter;
      this.rowLimit = rowLimit;
      // caching these derived attrbutes for once
      // as their is no view state involved here
      // and this caching will lead to saving in script lines later on
      this.isMasterTypeNumber = isNumber(master.getType());
      this.isDetailTypeNumber = isNumber(detail.getType());
      this.isMasterTypeDateOrTime = isDateOrTime(master.getType());
      this.isDetailTypeDateOrTime = isDateOrTime(detail.getType());
      this.isMasterTypeCurrency = isCurrency(master.getType());
      this.isMasterTypeText = isText(master.getType());
      this.isDetailTypeText = isText(detail.getType());
      this.isMasterTypeId = isIdOrReference(master.getType());
      this.isDetailTypeId = isIdOrReference(detail.getType());
      this.isMasterTypeCheckbox = isCheckbox(master.getType());
      this.isDetailTypeCheckbox = isCheckbox(detail.getType());
      // validate if field is good to work on later
      validate();
    }

    void validate() {
      if (master == null || detail == null || operation == null)
        throw new BadRollUpSummaryStateException(
          ''All of Master/Detail Describefieldresult and RollupOperation info is mandantory''
        );

      if (
        operation == RollupOperation.Concatenate ||
        operation == RollupOperation.Concatenate_Distinct
      ) {
        if (!isMasterTypeText) {
          throw new BadRollUpSummaryStateException(
            ''Only Text/Text Area fields are allowed for Concatenate and Concatenate Distinct''
          );
        }
      }

      if (
        operation == RollupOperation.First ||
        operation == RollupOperation.Last
      ) {
        if (
          (this.master.getType() != this.detail.getType()) &&
          ((!isDetailTypeText && !isDetailTypeId) ||
          (!isMasterTypeText && !isMasterTypeId))
        ) {
          throw new BadRollUpSummaryStateException(
            ''Master and detail fields must be the same field type (or text/Id based) for First or Last operations''
          );
        }
      }

      if (
        operation == RollupOperation.Sum ||
        operation == RollupOperation.Max ||
        operation == RollupOperation.Min ||
        operation == RollupOperation.Avg
      ) {
        if (
          (!isMasterTypeDateOrTime && !isMasterTypeNumber) ||
          (!isDetailTypeDateOrTime && !isDetailTypeNumber)
        ) {
          throw new BadRollUpSummaryStateException(
            ''Only Date/DateTime/Time/Numeric fields are allowed for Sum, Max, Min and Avg''
          );
        }
      }

      if (
        isMasterTypeDateOrTime &&
        (RollupOperation.Sum == operation ||
        RollupOperation.Avg == operation)
      ) {
        throw new BadRollUpSummaryStateException(
          ''Sum/Avg doesnt looks like valid for dates ! Still want, then implement the IRollerCoaster yourself and change this class as required.''
        );
      }
    }

    boolean isText(Schema.Displaytype dt) {
      return dt == Schema.Displaytype.TextArea ||
        dt == Schema.Displaytype.String ||
        dt == Schema.Displaytype.Picklist ||
        dt == Schema.Displaytype.MultiPicklist;
    }

    boolean isIdOrReference(Schema.Displaytype dt) {
      return dt == Schema.DisplayType.ID || dt == Schema.DisplayType.REFERENCE;
    }

    boolean isNumber(Schema.Displaytype dt) {
      return dt == Schema.Displaytype.Currency ||
        dt == Schema.Displaytype.Integer ||
        dt == Schema.Displaytype.Percent ||
        dt == Schema.Displaytype.Double;
    }

    boolean isDateOrTime(Schema.DisplayType dt) {
      return dt == Schema.Displaytype.Time ||
        dt == Schema.Displaytype.Date ||
        dt == Schema.Displaytype.Datetime;
    }

    boolean isCurrency(Schema.DisplayType dt) {
      return dt == Schema.Displaytype.Currency;
    }

    boolean isCheckbox(Schema.Displaytype dt) {
      return dt == Schema.DisplayType.Boolean;
    }

    public boolean isAggregateBasedRollup() {
      return isAggregateBasedRollup(operation);
    }

    public boolean isQueryBasedRollup() {
      return isQueryBasedRollup(operation);
    }
  }

  public enum SharingMode {
    User,
    System_x
  }

  public static boolean isAggregateBasedRollup(RollupOperation operation) {
    return operation == RollupOperation.Sum ||
      operation == RollupOperation.Min ||
      operation == RollupOperation.Max ||
      operation == RollupOperation.Avg ||
      operation == RollupOperation.Count ||
      operation == RollupOperation.Count_Distinct;
  }

  public static boolean isQueryBasedRollup(RollupOperation operation) {
    return operation == RollupOperation.Concatenate ||
      operation == RollupOperation.Concatenate_Distinct ||
      operation == RollupOperation.First ||
      operation == RollupOperation.Last;
  }

  /**
        Context having all the information about the rollup to be done. 
        Please note : This class encapsulates many rollup summary fields with different operations.
    */
  public class Context {
    // Sharing mode
    public SharingMode sharingMode;
    // Master Sobject Type
    public Schema.Sobjecttype master;
    // Child/Details Sobject Type
    public Schema.Sobjecttype detail;
    // Lookup field on Child/Detail Sobject
    public Schema.Describefieldresult lookupField;
    // various fields to rollup on
    public List<RollupSummaryField> fieldsToRoll;
    // include all rows
    public Boolean allRows;
    // what type of rollups does this context contain
    private Boolean isAggregateBased = null;
    private Boolean isQueryBased = null;

    // Where clause or filters to apply while aggregating detail records
    public String detailWhereClause;

    // Order By clause to apply while aggregating detail records
    public String detailOrderByClause;

    public Context(
      Schema.Sobjecttype m,
      Schema.Sobjecttype d,
      Schema.Describefieldresult lf
    ) {
      this(m, d, lf, '''');
    }

    public Context(
      Schema.Sobjecttype m,
      Schema.Sobjecttype d,
      Schema.Describefieldresult lf,
      String detailWhereClause
    ) {
      this(m, d, lf, detailWhereClause, (SharingMode) null);
    }

    public Context(
      Schema.Sobjecttype m,
      Schema.Sobjecttype d,
      Schema.Describefieldresult lf,
      String detailWhereClause,
      SharingMode sharingMode
    ) {
      this(m, d, lf, detailWhereClause, sharingMode, null);
    }

    public Context(
      Schema.Sobjecttype m,
      Schema.Sobjecttype d,
      Schema.Describefieldresult lf,
      String detailWhereClause,
      String detailOrderByClause
    ) {
      this(m, d, lf, detailWhereClause, null, detailOrderByClause);
    }

    public Context(
      Schema.Sobjecttype m,
      Schema.Sobjecttype d,
      Schema.Describefieldresult lf,
      String detailWhereClause,
      SharingMode sharingMode,
      String detailOrderByClause
    ) {
      this(m, d, lf, detailWhereClause, null, detailOrderByClause, false);
    }

    public Context(
      Schema.Sobjecttype m,
      Schema.Sobjecttype d,
      Schema.Describefieldresult lf,
      String detailWhereClause,
      SharingMode sharingMode,
      String detailOrderByClause,
      Boolean allRows
    ) {
      this.master = m;
      this.detail = d;
      this.lookupField = lf;
      this.detailWhereClause = detailWhereClause;
      this.detailOrderByClause = detailOrderByClause;
      this.fieldsToRoll = new List<RollupSummaryField>();
      this.sharingMode = sharingMode;
      this.allRows = allRows;
    }

    /**
            Adds new rollup summary fields to the context
        */
    public void add(RollupSummaryField fld) {
      // The type of query this context is based is driven by the first summary field added
      if (isQueryBased == null && isAggregateBased == null) {
        isAggregateBased = fld.isAggregateBasedRollup();
        isQueryBased = fld.isQueryBasedRollup();
      }

      // A context cannot support summary fields with operations that mix the use of underlying query types
      if (
        isAggregateBased && !fld.isAggregateBasedRollup() ||
        isQueryBased && !fld.isQueryBasedRollup()
      )
        throw new BadRollUpSummaryStateException(
          ''Cannot mix Sum, Max, Min, Avg, Count, Count_Distinct operations with Concatenate, Concatenate_Distinct, First, Last operations''
        );

      this.fieldsToRoll.add(fld);
    }
  }

  /**
   * Wraps platform query executor to permit override of sharing rule consideration or not
   **/
  public abstract class QueryExecutor {
    public virtual List<SObject> query(String query, Set<Id> masterIds) {
      if (masterIds == null || masterIds.isEmpty()) {
        return new List<SObject>();
      }
      return Database.query(query);
    }
  }

  /**
   * Query executor that considers sharing rules
   **/
  public with sharing class WithSharingQueryExecutor extends QueryExecutor {
    public override List<SObject> query(String query, Set<Id> masterIds) {
      return super.query(query, masterIds);
    }
  }

  /**
   * QUery executor that ignores sharing rules
   **/
  public without sharing class WithoutSharingQueryExecutor extends QueryExecutor {
    public override List<SObject> query(String query, Set<Id> masterIds) {
      return super.query(query, masterIds);
    }
  }
}','416093300.0','True','LREngine','21328','Active');
INSERT INTO "ApexClass" VALUES(3,'57.0','@IsTest
public with sharing class MLRSControllerTest {
  @IsTest
  public static void get_next_scheduled_time() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    String sch = ''20 30 8 10 2 ?'';
    String expectedMinuteValue = ''30'';
    Id scheduleID = ''m007A0000000Ua6QAE'';
    System.schedule(scheduleID.to15(), sch, new mockSchedule());
    controller.LookupRollupSummary = testrollupdata();

    Test.startTest();
    String resultDate = controller.getRollupSchedule();
    Test.stopTest();

    system.assertEquals(
      true,
      resultDate.contains(expectedMinuteValue),
      ''Should correctly pull schedule from string; string is checked against minute part of configuration to avoid formatting issues and date issue''
    );
  }

  @IsTest
  public static void get_schedule_if_null_id() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    System.assertEquals(
      ''No Schedule for Rollup'',
      controller.getRollupSchedule(),
      ''Null lookupRollupSummary id should return string: No Schedule for Rollup''
    );
  }

  @IsTest
  public static void get_schedule_if_empty_query_return() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    controller.LookupRollupSummary = testRollupData();
    System.assertEquals(
      ''No Schedule for Rollup'',
      controller.getRollupSchedule(),
      ''Empty SOQL query lookupRollupSummary should return string: No Schedule for Rollup''
    );
  }

  @IsTest
  public static void get_schedule_if_caught_error() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    controller.LookupRollupSummary = testRollupData();

    try {
      controller.LookupRollupSummary.id = ''BadRecordID'';
      controller.getRollupSchedule();
    } catch (Exception e) {
      System.assertEquals(
        ''No Schedule for Rollup'',
        controller.getRollupSchedule(),
        ''should return string on error: No Schedule for Rollup''
      );
    }
  }

  @IsTest
  public static void has_both_triggers_present() {
    if (!TestContext.isSupported()) {
      return;
    }
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    controller.LookupRollupSummary = testRollupData();
    controller.hasChildTriggers();
    System.assertEquals(
      ''Rollup has child and parent triggers deployed.'',
      Apexpages.getMessages()[0].getSummary(),
      ''Should return message indicating parent and child trigger are deployed''
    );
  }

  @IsTest
  public static void has_one_trigger_present() {
    if (!TestContext.isSupported()) {
      return;
    }
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    LookupRollupSummary2__mdt noParent = testRollupData();
    noParent.ParentObject__c = ''objectNotInDatabase'';
    controller.LookupRollupSummary = noParent;
    controller.hasChildTriggers();

    System.assertEquals(
      ''Rollup has only one trigger deployed.'',
      Apexpages.getMessages()[0].getSummary(),
      ''Should return message indicating only one trigger is deployed''
    );
  }

  @IsTest
  public static void has_no_trigger_present() {
    if (!TestContext.isSupported()) {
      return;
    }
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    LookupRollupSummary2__mdt noTrigger = testRollupData();
    noTrigger.ParentObject__c = ''objectNotInDatabase'';
    noTrigger.ChildObject__c = ''ChildObjectNotInDatabase'';
    controller.LookupRollupSummary = noTrigger;
    controller.hasChildTriggers();

    System.assertEquals(
      ''Rollup does not have any triggers deployed.'',
      Apexpages.getMessages()[0].getSummary(),
      ''Should return message indicating no triggers are deployed''
    );
  }

  @IsTest
  public static void clone_on_id_parameter() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    Pagereference currentPage = Page.managelookuprollupsummaries;
    currentPage.getParameters().put(''id'', ''testID'');

    Test.startTest();
    Test.setCurrentPage(currentPage);
    Pagereference returnPage = controller.cloneX();
    Test.stopTest();

    String actualID = ''testID'';
    String returnID = returnPage.getParameters().get(''cloneID'');

    System.assertEquals(
      actualID,
      returnID,
      ''CloneID parameter should return the testID''
    );
  }

  @IsTest
  public static void clone_on_developerName_parameter() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    Pagereference currentPage = Page.managelookuprollupsummaries;
    currentPage.getParameters().put(''developerName'', ''testID'');

    Test.startTest();
    Test.setCurrentPage(currentPage);
    controller.LookupRollupSummary = testRollupData();
    Pagereference returnPage = controller.cloneX();
    Test.stopTest();

    String actualID = testRollupData().id;
    String expectedID = returnPage.getParameters().get(''cloneID'');

    System.assertEquals(
      actualID,
      expectedID,
      ''CloneID parameter should populate if pagereference parameter is set to DeveloperName="testID"''
    );
  }

  @IsTest
  public static void clone_on_bad_parameter() {
    ManageLookupRollupSummariesController controller = new ManageLookupRollupSummariesController();
    Pagereference currentPage = Page.managelookuprollupsummaries;
    currentPage.getParameters().put(''testBadParameter'', ''1234'');

    Test.startTest();
    Test.setCurrentPage(currentPage);
    controller.LookupRollupSummary = testRollupData();
    Pagereference returnPage = controller.cloneX();
    Test.stopTest();

    String actualID = null;
    String expectedID = returnPage.getParameters().get(''cloneID'');

    System.assertEquals(
      actualID,
      expectedID,
      ''Should return Page.managelookuprollupsummaries with null parameters''
    );
  }

  //helper method to generate mdt record
  private static LookupRollupSummary2__mdt testRollupData() {
    LookupRollupSummary2__mdt rollupSummaryA = new LookupRollupSummary2__mdt();

    rollupSummaryA.id = ''m007A0000000Ua6QAE'';
    rollupSummaryA.Label = ''test10'';
    rollupSummaryA.DeveloperName = ''test10'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = ''Sum'';
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    rollupSummaryA.CalculationSharingMode__c = ''User'';
    rollupSummaryA.RowLimit__c = 0;
    rollupSummaryA.AggregateAllRows__c = false;
    rollupSummaryA.Active__c = false;
    rollupSummaryA.TestCodeSeeAllData__c = false;

    return rollupSummaryA;
  }

  public class MockSchedule implements Schedulable {
    public void execute(SchedulableContext sc) {
      String test = ''nothingToExecute'';
    }
  }
}','3643608842.0','False','MLRSControllerTest','7073','Active');
INSERT INTO "ApexClass" VALUES(4,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public with sharing class ManageLookupRollupSummariesController {
  public LookupRollupSummary2__mdt LookupRollupSummary { get; set; }

  public String selectedLookup { get; set; }

  public Boolean MetadataConnectionError { get; set; }

  public String cloneLookup { get; set; }

  public ManageLookupRollupSummariesController() {
    LookupRollupSummary = new LookupRollupSummary2__mdt();
  }

  public List<SelectOption> getLookups() {
    // List current rollup custom metadata configs
    List<SelectOption> options = new List<SelectOption>();
    options.add(new SelectOption(''[new]'', ''Create new...''));
    for (
      RollupSummary rollup : new RollupSummariesSelector.CustomMetadataSelector(
          false,
          false
        )
        .selectAll()
    )
      options.add(new SelectOption(rollup.Id, rollup.Name));
    return options;
  }

  public PageReference init() {
    // Metadata API connection?
    MetadataConnectionError = !RollupService.checkMetadataAPIConnection();
    if (MetadataConnectionError) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Error,
          ''Salesforce Metadata API connection failure, click the link below to configure.''
        )
      );
      return null;
    }

    // URL parameter?
    selectedLookup = (Id) ApexPages.currentPage().getParameters().get(''id'');
    cloneLookup = (Id) ApexPages.currentPage().getParameters().get(''cloneID'');

    if (cloneLookup != null) {
      cloneRollupSummary();
    }
    if (selectedLookup != null) {
      LookupRollupSummary = (LookupRollupSummary2__mdt) new RollupSummariesSelector.CustomMetadataSelector(
            false,
            true
          )
          .selectById(new Set<String>{ selectedLookup })[0]
        .Record;
    } else {
      selectedLookup = ApexPages.currentPage()
        .getParameters()
        .get(''developerName'');
      if (selectedLookup != null) {
        LookupRollupSummary = (LookupRollupSummary2__mdt) new RollupSummariesSelector.CustomMetadataSelector(
              false,
              true
            )
            .selectByDeveloperName(new Set<String>{ selectedLookup })[0]
          .Record;
        selectedLookup = LookupRollupSummary.Id;
      }
    }
    hasChildTriggers();
    return null;
  }

  public PageReference load() {
    // Reload the page
    PageReference newPage = Page.managelookuprollupsummaries;
    newPage.setRedirect(true);
    if (selectedLookup != ''[new]'')
      newPage.getParameters().put(''id'', selectedLookup);
    return newPage;
  }

  public PageReference save() {
    try {
      // Insert / Update the rollup custom metadata
      if (LookupRollupSummary.Id == null)
        RollupService.create(new List<SObject>{ LookupRollupSummary });
      else
        RollupService.update_x(new List<SObject>{ LookupRollupSummary });
      // Reload this page (and thus the rollup list in a new request, metadata changes are not visible until this request ends)
      PageReference newPage = Page.managelookuprollupsummaries;
      newPage.setRedirect(true);
      newPage.getParameters()
        .put(''developerName'', LookupRollupSummary.DeveloperName);
      return newPage;
    } catch (RollupService.RollupValidationException e) {
      // Extract errors from exception and display on the page
      for (
        RollupService.RollupRecordValidationError recordError : e.RecordErrors
      ) {
        if (recordError.Error != null) {
          ApexPages.addMessage(
            new ApexPages.Message(ApexPages.Severity.Error, recordError.Error)
          );
        }
        for (String fieldError : recordError.FieldErrors) {
          if (fieldError.contains(''Active'')) {
            ApexPages.addMessage(
              new ApexPages.Message(ApexPages.Severity.ERROR, fieldError)
            );

            ApexPages.addMessage(
              new ApexPages.Message(
                ApexPages.Severity.INFO,
                ''You must deploy \''Child Triggers\'' before activating Lookup Rollup Summary.''
              )
            );
            ApexPages.addMessage(
              new ApexPages.Message(
                ApexPages.Severity.INFO,
                ''Click \''Manage Child Trigger\'' to deploy triggers. Then return to this page and check \''Active\'' box. ''
              )
            );
          }
          ApexPages.addMessage(
            new ApexPages.Message(ApexPages.Severity.Error, fieldError)
          );
        }
      }
    } catch (Exception e) {
      ApexPages.addMessages(e);
    }
    return null;
  }

  public PageReference deleteX() {
    try {
      // Delete the rollup custom metadata
      RollupService.delete_X(
        new List<String>{ LookupRollupSummary.DeveloperName }
      );
      // Reload this page (and thus the rollup list in a new request, metadata changes are not visible until this request ends)
      PageReference newPage = Page.managelookuprollupsummaries;
      newPage.setRedirect(true);
      return newPage;
    } catch (Exception e) {
      ApexPages.addMessages(e);
    }
    return null;
  }

  public void hasChildTriggers() {
    if (LookupRollupSummary == null) {
      return;
    }

    try {
      //quickly return if user does not want prompts or rollup is already active
      if (
        LookupRollupSummary.Active__c == true ||
        DeclarativeLookupRollupSummaries__c.getOrgDefaults()
          .HideManageLookupRollupSummariesInfo__c == true
      ) {
        return;
      }
      RollupSummary rs = new RollupSummary(LookupRollupSummary);
      String childTrigger = RollupSummaries.makeTriggerName(rs);
      String parentTrigger = RollupSummaries.makeParentTriggerName(rs);
      ApexTriggersSelector selector = new ApexTriggersSelector();
      Map<String, ApexTrigger> loadTriggers = selector.selectByName(
        new Set<String>{ ChildTrigger, ParentTrigger }
      );

      switch on loadTriggers.size() {
        when 2 {
          Apexpages.addMessage(
            new Apexpages.Message(
              Apexpages.severity.CONFIRM,
              ''Rollup has child and parent triggers deployed.''
            )
          );
        }
        when 1 {
          Apexpages.addMessage(
            new Apexpages.Message(
              Apexpages.severity.INFO,
              ''Rollup has only one trigger deployed.''
            )
          );
        }
        when else {
          Apexpages.addMessage(
            new Apexpages.Message(
              Apexpages.severity.INFO,
              ''Rollup does not have any triggers deployed.''
            )
          );
        }
      }
    } catch (Exception e) {
      //This method is intended to be informational.
      //If it fails for some reason(soql query) it should not effect the functionality of the Visualforce Page.
    }
  }

  public String getRollupSchedule() {
    if (LookupRollupSummary.id == null) {
      return ''No Schedule for Rollup'';
    }

    try {
      String id = (LookupRollupSummary.id).to15();
      List<CronTrigger> ct = new CronTriggersSelector()
        .selectScheduledApexById(id);

      if (ct.isEmpty()) {
        return ''No Schedule for Rollup'';
      } else {
        return ct[0].NextFireTime.format();
      }
    } catch (Exception e) {
      return ''No Schedule for Rollup'';
    }
  }

  //TO cloneRollupSummary, we query the database for the rollup summary with passed cloneLookup,
  //then set clonesummary with empty values on known values to edit.
  public void cloneRollupSummary() {
    LookupRollupSummary2__mdt cloneSummary = (LookupRollupSummary2__mdt) new RollupSummariesSelector(
          false,
          true
        )
        .selectById(new Set<String>{ cloneLookup })[0]
      .Record;

    cloneSummary.label = '''';
    cloneSummary.developerName = '''';
    cloneSummary.id = null;
    LookupRollupSummary = cloneSummary;
  }

  //TO clonex, we check if page has record id, if so return create[new] page with cloned record to save.
  public Pagereference cloneX() {
    PageReference newPage = Page.managelookuprollupsummaries;
    newPage.setRedirect(true);

    //Checks against lookup from options list on first entry
    if (ApexPages.currentPage().getParameters().get(''id'') != null) {
      newPage.getParameters()
        .put(
          ''cloneID'',
          ApexPages.currentPage().getParameters().get(''id'').escapeHtml4()
        );
    }
    //if developername is not null, then there is a rollup in memory we can key off of
    if (ApexPages.currentPage().getParameters().get(''developerName'') != null) {
      newPage.getParameters().put(''cloneID'', LookupRollupSummary.Id);
    }

    return newPage;
  }

  public PageReference hideMessage() {
    DeclarativeLookupRollupSummaries__c settings = DeclarativeLookupRollupSummaries__c.getOrgDefaults();
    settings.HideManageLookupRollupSummariesInfo__c = true;
    upsert settings;
    return null;
  }

  public List<SelectOption> getCalculationModes() {
    List<SelectOption> options = new List<SelectOption>();
    for (
      Schema.Picklistentry picklistEntry : LookupRollupSummary__c.fields.CalculationMode__c.getDescribe()
        .getPickListValues()
    ) {
      options.add(
        new SelectOption(picklistEntry.getValue(), picklistEntry.getLabel())
      );
    }
    return options;
  }

  public List<SelectOption> getAggregateOperations() {
    List<SelectOption> options = new List<SelectOption>();
    for (
      Schema.Picklistentry picklistEntry : LookupRollupSummary__c.fields.AggregateOperation__c.getDescribe()
        .getPickListValues()
    ) {
      options.add(
        new SelectOption(picklistEntry.getValue(), picklistEntry.getLabel())
      );
    }
    return options;
  }

  public List<SelectOption> getCalculationSharingModes() {
    List<SelectOption> options = new List<SelectOption>();
    for (
      Schema.Picklistentry picklistEntry : LookupRollupSummary__c.fields.CalculationSharingMode__c.getDescribe()
        .getPickListValues()
    ) {
      options.add(
        new SelectOption(picklistEntry.getValue(), picklistEntry.getLabel())
      );
    }
    return options;
  }

  public PageReference newWizard() {
    try {
      PageReference newPage = Page.managelookuprollupsummaries_New;
      newPage.setRedirect(true);
      return newPage;
    } catch (Exception e) {
      ApexPages.addMessages(e);
    }
    return null;
  }
}','803587439.0','True','ManageLookupRollupSummariesController','9123','Active');
INSERT INTO "ApexClass" VALUES(5,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Wraps the Apex Metadata API to provide create, update and delete operations around Custom Metadata SObject''s
 *
 *  NOTE: Upsert is currently not supported by the Metadata API
 *
 * TODO: Support bulk requests
 * TODO: Support All Or Nothing (new for Metadata API v34.0)
 **/
public class CustomMetadataService {
  public static void createMetadata(
    SObjectType mdtType,
    List<Map<SObjectField, Object>> records
  ) {
  }

  /**
   * Insert the given Custom Metadata records into the orgs config
   **/
  public static void createMetadata(List<SObject> records) {
    // Call Metadata API and handle response
    MetadataService.MetadataPort service = createService();
    List<MetadataService.SaveResult> results = service.createMetadata(
      new List<MetadataService.Metadata>{ toCustomMetadata(records[0]) }
    );
    handleSaveResults(results[0]);
  }

  /**
   * Update the given Custom Metadata records in the orgs config
   **/
  public static void updateMetadata(List<SObject> records) {
    // Call Metadata API and handle response
    MetadataService.MetadataPort service = createService();
    List<MetadataService.SaveResult> results = service.updateMetadata(
      new List<MetadataService.Metadata>{ toCustomMetadata(records[0]) }
    );
    handleSaveResults(results[0]);
  }

  /**
   * Delete the given Custom Metadata records from the orgs config
   **/
  public static void deleteMetadata(
    SObjectType qualifiedMetadataType,
    List<String> customMetadataFullNames
  ) {
    MetadataService.MetadataPort service = createService();
    List<String> qualifiedFullNames = new List<String>();
    for (String customMetadataFullName : customMetadataFullNames)
      qualifiedFullNames.add(
        qualifiedMetadataType.getDescribe().getName() +
        ''.'' +
        customMetadataFullName
      );
    List<MetadataService.DeleteResult> results = service.deleteMetadata(
      ''CustomMetadata'',
      qualifiedFullNames
    );
    handleDeleteResults(results[0]);
  }

  public class CustomMetadataServiceException extends Exception {
  }

  /**
   * Takes the SObject instance of the Custom Metadata Type and translates to a Metadata API Custmo Metadata Type
   **/
  private static MetadataService.CustomMetadata toCustomMetadata(
    SObject customMetadataRecord
  ) {
    MetadataService.CustomMetadata cm = new MetadataService.CustomMetadata();
    cm.values = new List<MetadataService.CustomMetadataValue>();
    SObjectType recordType = customMetadataRecord.getSObjectType();
    cm.fullName =
      recordType.getDescribe().getName().replace(''__mdt'', '''') +
      ''.'' +
      customMetadataRecord.get(''DeveloperName'');
    cm.label = (String) customMetadataRecord.get(''Label'');
    for (
      SObjectField sObjectField : recordType.getDescribe()
        .fields.getMap()
        .values()
    ) {
      DescribeFieldResult dsr = sObjectField.getDescribe();
      if (!dsr.isCustom())
        continue;
      Object fieldValue = customMetadataRecord.get(sObjectField);
      MetadataService.CustomMetadataValue cmdv = new MetadataService.CustomMetadataValue();
      cmdv.field = dsr.getName();
      if (dsr.getType() == Schema.DisplayType.Double) {
        if (fieldValue != null) {
          Decimal fieldValueNumber = (Decimal) fieldValue;
          // TODO: Bit of a hack, MDT Number fields seem to be populated with zeros when the VF bound field is emptied by the user?!?
          if (fieldValueNumber != 0) {
            fieldValueNumber = fieldValueNumber.setScale(dsr.getScale());
            cmdv.value = fieldValueNumber.format();
          }
        }
      } else if (dsr.getType() == Schema.DisplayType.String) {
        cmdv.value = fieldValue == null ? '''' : (String) fieldValue;
      } else if (dsr.getType() == Schema.DisplayType.TextArea) {
        cmdv.value = fieldValue == null ? '''' : (String) fieldValue;
      } else {
        cmdv.value = fieldValue + ''''; // TODO: More work here, type conversion
      }
      cm.values.add(cmdv);
    }
    return cm;
  }

  /**
   * Connect to the Metadata API
   **/
  private static MetadataService.MetadataPort createService() {
    MetadataService.MetadataPort service = new MetadataService.MetadataPort();
    service.SessionHeader = new MetadataService.SessionHeader_element();
    service.SessionHeader.sessionId = UserInfo.getSessionId();
    return service;
  }

  /**
   * Example helper method to interpret a SaveResult, throws an exception if errors are found
   **/
  private static void handleSaveResults(MetadataService.SaveResult saveResult) {
    // Nothing to see?
    if (saveResult == null || saveResult.success)
      return;
    // Construct error message and throw an exception
    if (saveResult.errors != null) {
      List<String> messages = new List<String>();
      messages.add(
        (saveResult.errors.size() == 1 ? ''Error '' : ''Errors '') +
        ''occured processing component '' +
        saveResult.fullName +
        ''.''
      );
      for (MetadataService.Error error : saveResult.errors)
        messages.add(
          error.message +
          '' ('' +
          error.statusCode +
          '').'' +
          (error.fields != null &&
            error.fields.size() > 0
            ? '' Fields '' + String.join(error.fields, '','') + ''.''
            : '''')
        );
      if (messages.size() > 0)
        throw new CustomMetadataServiceException(String.join(messages, '' ''));
    }
    if (!saveResult.success)
      throw new CustomMetadataServiceException(
        ''Request failed with no specified error.''
      );
  }

  /**
   * Example helper method to interpret a SaveResult, throws an exception if errors are found
   **/
  private static void handleDeleteResults(
    MetadataService.DeleteResult deleteResult
  ) {
    // Nothing to see?
    if (deleteResult == null || deleteResult.success)
      return;
    // Construct error message and throw an exception
    if (deleteResult.errors != null) {
      List<String> messages = new List<String>();
      messages.add(
        (deleteResult.errors.size() == 1 ? ''Error '' : ''Errors '') +
        ''occured processing component '' +
        deleteResult.fullName +
        ''.''
      );
      for (MetadataService.Error error : deleteResult.errors)
        messages.add(
          error.message +
          '' ('' +
          error.statusCode +
          '').'' +
          (error.fields != null &&
            error.fields.size() > 0
            ? '' Fields '' + String.join(error.fields, '','') + ''.''
            : '''')
        );
      if (messages.size() > 0)
        throw new CustomMetadataServiceException(String.join(messages, '' ''));
    }
    if (!deleteResult.success)
      throw new CustomMetadataServiceException(
        ''Request failed with no specified error.''
      );
  }
}','2858667543.0','True','CustomMetadataService','5444','Active');
INSERT INTO "ApexClass" VALUES(6,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public with sharing class RollupCalculateController {
  private ApexPages.StandardController standardController;
  public String masterObjectWhere { get; set; }

  public RollupCalculateController(
    ApexPages.StandardController standardController
  ) {
    this.standardController = standardController;

    // Deprication warning
    if (standardController.getRecord() instanceof LookupRollupSummary__c) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Warning,
          ''Use of the Lookup Rollup Summaries tab is still functional but no longer being enhanced. Consider using the Manage Lookup Rollup Summaries tab.''
        )
      );
    }

    // Page load messages
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        ''Clicking the Run Full Calculate Job will start a background rebuild for this rollup only.''
      )
    );
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        ''Once the job completes any failed rollups will be shown in the Rollup Summary Logs tab.''
      )
    );
  }

  public PageReference runCalculateJob() {
    try {
      // Kickoff the calculate job for this lookup
      RollupService.runJobToCalculate(
        standardController.getId(),
        this.masterObjectWhere
      );
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Calculate job started for this lookup.''
        )
      );
    } catch (Exception e) {
      ApexPages.addMessages(e);
      return null;
    }

    // Custom Metadata backed rollup?
    if (standardController.getRecord() instanceof LookupRollupSummary2__mdt) {
      PageReference manageRollupsPage = Page.managelookuprollupsummaries;
      manageRollupsPage.getParameters().put(''id'', standardController.getId());
      return manageRollupsPage;
    }

    return standardController.view();
  }
}','82255568.0','True','RollupCalculateController','1798','Active');
INSERT INTO "ApexClass" VALUES(7,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupActionCalculateTest {
  private testMethod static void testCalculateAction() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.UniqueName__c = ''RollupAnnualRevenue'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Process Builder'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Call Process Builder action
    RollupActionCalculate.RollupToCalculate rollupToCalc = new RollupActionCalculate.RollupToCalculate();
    rollupToCalc.parentId = account.Id;
    rollupToCalc.rollupSummaryUniqueName = ''RollupAnnualRevenue'';
    RollupActionCalculate.calculate(
      new List<RollupActionCalculate.RollupToCalculate>{ rollupToCalc }
    );

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }
}','2970295848.0','False','RollupActionCalculateTest','1679','Active');
INSERT INTO "ApexClass" VALUES(8,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupServiceTest4 {
  private testMethod static void testDefaultUserSharingRollup() {
    testSharingMode(10, 10, null);
  }

  private testMethod static void testUserUserSharingRollup() {
    testSharingMode(10, 10, ''User'');
  }

  private testMethod static void testSystemUserSharingRollup() {
    testSharingMode(10, 20, ''System'');
  }

  private static void testSharingMode(
    Decimal expectedValue1,
    Decimal expectedValue2,
    String sharingMode
  ) {
    // Create test user A
    User testUserA = null;
    System.runAs(new User(Id = UserInfo.getUserId())) {
      testUserA = createUser(1);
    }

    // Create test user B
    User testUserB = null;
    System.runAs(new User(Id = UserInfo.getUserId())) {
      testUserB = createUser(2);
    }

    // Rollup from child LookupChildAReallyReallyReallyBigBigName__c (set to private sharing)
    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total2__c.getDescribe()
      .getName();

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    rollupSummary.CalculationSharingMode__c = sharingMode;
    insert rollupSummary;

    // User A inserts parent and some children
    Id parentId = null;
    System.runAs(testUserA) {
      // Insert parents
      SObject parentA = parentType.newSObject();
      parentA.put(''Name'', ''ParentA'');
      parentA.put(LookupParent__c.Total__c.getDescribe().getName(), 42);
      insert parentA;
      parentId = parentA.Id;
      // Insert children
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parentId);
      child1.put(aggregateField, 10);
      insert child1;
      // Assert rollup
      Map<Id, SObject> assertParents = new Map<Id, SObject>(
        Database.query(
          String.format(
            ''select id, {0} from {1}'',
            new List<String>{ aggregateResultField, parentObjectName }
          )
        )
      );
      System.assertEquals(
        expectedValue1,
        (Decimal) assertParents.get(parentId).get(aggregateResultField)
      );
    }

    // User B inserts some children of its own
    System.runAs(testUserB) {
      // Insert children
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parentId);
      child1.put(aggregateField, 10);
      insert child1;
      // Assert rollup
      Map<Id, SObject> assertParents = new Map<Id, SObject>(
        Database.query(
          String.format(
            ''select id, {0} from {1}'',
            new List<String>{ aggregateResultField, parentObjectName }
          )
        )
      );
      System.assertEquals(
        expectedValue2,
        (Decimal) assertParents.get(parentId).get(aggregateResultField)
      );
    }
  }

  /**
   * Create test user
   **/
  private static User createUser(Integer seed) {
    // Can only proceed with test if we have a suitable profile
    List<Profile> testProfiles = [
      SELECT Id
      FROM Profile
      WHERE Name = ''Standard User''
      LIMIT 1
    ];
    if (testProfiles.size() != 1)
      return null;

    // Can only proceed with test if we can successfully insert a test user
    String testUsername = seed + ''@testorg.com'';
    User testUser = new User(
      Alias = ''test1'',
      Email = ''testuser1@testorg.com'',
      EmailEncodingKey = ''UTF-8'',
      LastName = ''Testing'',
      LanguageLocaleKey = ''en_US'',
      LocaleSidKey = ''en_US'',
      ProfileId = testProfiles[0].Id,
      TimeZoneSidKey = ''America/Los_Angeles'',
      UserName = testUsername
    );
    try {
      insert testUser;

      // Assign permission sets
      Set<String> psNames = new Set<String>{ ''LookupRollupSummariesReadOnly'' };
      List<PermissionSet> ps = [
        SELECT Id
        FROM PermissionSet
        WHERE Name IN :psNames
      ];
      insert new List<PermissionSetAssignment>{
        new PermissionSetAssignment(
          AssigneeId = testUser.Id,
          PermissionSetId = ps[0].Id
        )
      };
    } catch (Exception e) {
      return null;
    }
    return testUser;
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two identical Aggregate (Sum) rollups
   *		- Effective values for all fields except for AggregateResultField__c are same
   *		- Field values differ by case only
   *		- Field value of RelationShipCriteria__c is identical including case
   *		only by case used for rollups summary field values except RelationShipCriteria__c which are identical including case
   *	Should result in a single context used, a single SOQL for the rollup itself and 3 DML rows (1 for each parent)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleAggregateRollupsDifferByCaseOnlySameCriteriaSameCase() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Total__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 2);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c
    // + Three for Parents
    System.assertEquals(beforeRows + 14, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c (from rollup processing)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two identical Aggregate (Sum) rollups
   *		- Effective values for all fields except AggregateResultField__c are same
   *		- Field values differ only by case
   *		- Field value of RelationShipCriteria__c differs by case
   *	Should result in Two (2) contexts used, two SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleAggregateRollupsDifferByCaseOnlySameCriteriaDiffCase() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Total__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition.toLowerCase();
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields.toLowerCase();
    rollupSummaryA.FieldToAggregate__c = aggregateField.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 2);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A
    // + One query on LookupChild__c for rollup B
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 4, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A
    // + Nine rows for LookupChild__c for rollup B
    // + Three for Parents
    System.assertEquals(beforeRows + 23, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c for rollup A & B (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two identical Query (Last) rollups
   *		- Effective values for all fields except for AggregateResultField__c are same
   *		- Field values differ by case only
   *		- Field value of RelationShipCriteria__c is identical including case
   *		only by case used for rollups summary field values except RelationShipCriteria__c which are identical including case
   *	Should result in a single context used, a single SOQL for the rollup itself and 3 DML rows (1 for each parent)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByCaseOnlySameCriteriaSameCase() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Total__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 10);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 10);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c
    // + Three for Parents
    System.assertEquals(beforeRows + 14, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c (from rollup processing)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two identical Query (Last) rollups
   *		- Effective values for all fields except AggregateResultField__c are same
   *		- Field values differ only by case
   *		- Field value of RelationShipCriteria__c differs by case
   *	Should result in Two (2) contexts used, two SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByCaseOnlySameCriteriaDiffCase() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Total__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition.toLowerCase();
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields.toLowerCase();
    rollupSummaryA.FieldToAggregate__c = aggregateField.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 10);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 10);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A
    // + One query on LookupChild__c for rollup B
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 4, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A
    // + Nine rows for LookupChild__c for rollup B
    // + Three for Parents
    System.assertEquals(beforeRows + 23, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c for rollup A & B (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two similar rollups
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different FieldToAggregate__c
   *		- Field value of RelationShipCriteria__c is identical including case
   *		- Effective values for all other fields same differing only by case used
   *	Should result in a single context used, a single SOQL for the rollup itself and 3 DML rows (1 for each parent)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationFieldAndCaseSameCriteriaSameCase() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''Red'');
      child1.put(aggregateField2, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''Yellow'');
      child2.put(aggregateField2, 15);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''Blue'');
      child3.put(aggregateField2, 10);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c
    // + Three for Parents
    System.assertEquals(beforeRows + 14, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c (from rollup processing)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two similar rollups
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different FieldToAggregate__c
   *		- Field value of RelationShipCriteria__c differs by case
   *		- Effective values for all other fields same differing only by case used
   *	Should result in Two (2) contexts used, two SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationFieldAndCaseSameCriteriaDiffCase() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition.toLowerCase();
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields.toLowerCase();
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''Red'');
      child1.put(aggregateField2, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''Yellow'');
      child2.put(aggregateField2, 15);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''Blue'');
      child3.put(aggregateField2, 10);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A
    // + One query on LookupChild__c for rollup B
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 4, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A
    // + Nine rows for LookupChild__c for rollup B
    // + Three for Parents
    System.assertEquals(beforeRows + 23, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c for rollup A & B (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Two similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different Order By
   *		- Effective values for all other fields same differing only by case used
   *	Should result in Two (2) contexts used, two SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationFieldCaseOrderBy() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy1 = LookupChild__c.Amount__c.getDescribe().getName();
    String fieldToOrderBy2 = LookupChild__c.Name.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy1.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy2;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''Red'');
      child1.put(aggregateField2, 42);
      child1.put(''Name'', ''ChildZ'');
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''Yellow'');
      child2.put(aggregateField2, 15);
      child1.put(''Name'', ''ChildY'');
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''Blue'');
      child3.put(aggregateField2, 10);
      child1.put(''Name'', ''ChildX'');
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A
    // + One query on LookupChild__c for rollup B
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 4, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A
    // + Nine rows for LookupChild__c for rollup B
    // + Three for Parents
    System.assertEquals(beforeRows + 23, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c for rollup A & B (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/239
   *	Two similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different FieldToAggregate__c
   *		- Different Order By one that has no order by specified
   *		- Effective values for all other fields same differing only by case used
   *	Should result in One (1) context used, one SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   *
   * The Context will be shared because the rollup that doesn''t have an orderby (Rollup B) matches all other criteria
   * on the other rollup (Rollup A) and therefore its added to Context for that rollup
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationAggResultFieldAggFieldCaseOrderByOneOrderByIsNull() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = null;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''Red'');
      child1.put(aggregateField2, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''Yellow'');
      child2.put(aggregateField2, 15);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''Blue'');
      child3.put(aggregateField2, 10);
      children.add(child3);
    }

    // Sample various limits prior to an insert
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // insert child records
    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A & B (single query because orderby matches even though one is not specified)
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A
    // + Three for Parents
    System.assertEquals(beforeRows + 14, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the insert statement itself)
    // + Three rows for LookupParent__c for rollup A & B (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    // Note that we are able to reliably assert rollup B even though it does not
    // have orderby specified because it will end up using the same context as Rollup A because Rollup B''s FieldToAggregate__c
    // matches the first field in the orderby of Rollup A
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/239
   *	Three similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different FieldToAggregate__c
   *		- Different Order By two that have no order by specified
   *		- Effective values for all other fields same differing only by case used
   *	Should result in One (1) context used, one SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   *
   * The Context will be shared because the two rollups that do not have an orderby (Rollup B and C) matches all other criteria
   * on the other rollup (Rollup A) and therefore are added to Context for that rollup
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationAggResultFieldAggFieldCaseOrderByTwoOrderByIsNullSameFieldToAggregate() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Description__c.getDescribe()
      .getName();
    String aggregateField3 = LookupChild__c.Description__c.getDescribe()
      .getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Descriptions__c.getDescribe()
      .getName();
    String aggregateResultField3 = LookupParent__c.Descriptions2__c.getDescribe()
      .getName();
    String condition = ''Description__c != null'';
    String relationshipCriteriaFields = ''Description__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Name.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = null;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    LookupRollupSummary__c rollupSummaryC = new LookupRollupSummary__c();
    rollupSummaryC.Name = ''Test Rollup C'';
    rollupSummaryC.ParentObject__c = parentObjectName;
    rollupSummaryC.ChildObject__c = childObjectName;
    rollupSummaryC.RelationShipField__c = relationshipField;
    rollupSummaryC.RelationShipCriteria__c = condition;
    rollupSummaryC.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryC.FieldToAggregate__c = aggregateField3;
    rollupSummaryC.FieldToOrderBy__c = null;
    rollupSummaryC.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryC.AggregateResultField__c = aggregateResultField3;
    rollupSummaryC.Active__c = true;
    rollupSummaryC.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryC.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB,
      rollupSummaryC
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(''Name'', ''tom'');
      child1.put(aggregateField1, ''Red'');
      child1.put(aggregateField2, ''lemon'');
      // aggregateField3 is same SObjectField as aggregateField2
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(''Name'', ''charlie'');
      child2.put(aggregateField1, ''Yellow'');
      child2.put(aggregateField2, ''pear'');
      // aggregateField3 is same SObjectField as aggregateField2
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(''Name'', ''samantha'');
      child3.put(aggregateField1, ''Blue'');
      child3.put(aggregateField2, ''apple'');
      // aggregateField3 is same SObjectField as aggregateField2
      children.add(child3);
    }

    // Sample various limits prior to an insert
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // insert child records
    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A, B & C
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Three rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A, B & C
    // + Three for Parents
    System.assertEquals(beforeRows + 15, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the insert statement itself)
    // + Three rows for LookupParent__c for rollup A & B & C (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    // Note that we are able to reliably assert rollups B & C even though they do not have an order by specified
    // because they same the same criteria as A and therefore will be added to the same context that was created for A
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1}, {2} from {3}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            aggregateResultField3,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Yellow'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      ''lemon'',
      (String) assertParents.get(parentA.id).get(aggregateResultField2)
    );
    System.assertEquals(
      ''pear'',
      (String) assertParents.get(parentA.id).get(aggregateResultField3)
    );

    System.assertEquals(
      ''Yellow'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      ''lemon'',
      (String) assertParents.get(parentB.id).get(aggregateResultField2)
    );
    System.assertEquals(
      ''pear'',
      (String) assertParents.get(parentB.id).get(aggregateResultField3)
    );

    System.assertEquals(
      ''Yellow'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      ''lemon'',
      (String) assertParents.get(parentC.id).get(aggregateResultField2)
    );
    System.assertEquals(
      ''pear'',
      (String) assertParents.get(parentC.id).get(aggregateResultField3)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/239
   *	Three similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different Order By two that have no order by specified
   *		- Effective values for all other fields same differing only by case used
   *	Should result in One (1) context used, one SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   *
   * The Context will be shared because the two rollups that do not have an orderby (Rollup B and C) matches all other criteria
   * on the other rollup (Rollup A) and therefore are added to Context for that rollup
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationFieldCaseOrderByTwoOrderByIsNullDifferentFieldToAggregate() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Description__c.getDescribe()
      .getName();
    String aggregateField2 = LookupChild__c.Description__c.getDescribe()
      .getName();
    String aggregateField3 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Descriptions__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Descriptions2__c.getDescribe()
      .getName();
    String aggregateResultField3 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String condition = ''Description__c != null'';
    String relationshipCriteriaFields = ''Description__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = LookupChild__c.Description__c.getDescribe()
      .getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = null;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    LookupRollupSummary__c rollupSummaryC = new LookupRollupSummary__c();
    rollupSummaryC.Name = ''Test Rollup C'';
    rollupSummaryC.ParentObject__c = parentObjectName;
    rollupSummaryC.ChildObject__c = childObjectName;
    rollupSummaryC.RelationShipField__c = relationshipField;
    rollupSummaryC.RelationShipCriteria__c = condition;
    rollupSummaryC.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryC.FieldToAggregate__c = aggregateField3;
    rollupSummaryC.FieldToOrderBy__c = null;
    rollupSummaryC.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryC.AggregateResultField__c = aggregateResultField3;
    rollupSummaryC.Active__c = true;
    rollupSummaryC.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryC.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB,
      rollupSummaryC
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''lemon'');
      // aggregateField2 is same SObjectField as aggregateField1
      child1.put(aggregateField3, ''Red'');
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''pear'');
      // aggregateField2 is same SObjectField as aggregateField1
      child2.put(aggregateField3, ''Yellow'');
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''apple'');
      // aggregateField2 is same SObjectField as aggregateField1
      child3.put(aggregateField3, ''Blue'');
      children.add(child3);
    }

    // Sample various limits prior to an insert
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // insert child records
    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A, B & C
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Three rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A, B & C
    // + Three for Parents
    System.assertEquals(beforeRows + 15, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the insert statement itself)
    // + Three rows for LookupParent__c for rollup A & B & C (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    // Note that we are able to reliably assert rollups B & C even though they do not have an order by specified
    // because they same the same criteria as A and therefore will be added to the same context that was created for A
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1}, {2} from {3}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            aggregateResultField3,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''apple'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      ''pear'',
      (String) assertParents.get(parentA.id).get(aggregateResultField2)
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField3)
    );

    System.assertEquals(
      ''apple'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      ''pear'',
      (String) assertParents.get(parentB.id).get(aggregateResultField2)
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField3)
    );

    System.assertEquals(
      ''apple'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      ''pear'',
      (String) assertParents.get(parentC.id).get(aggregateResultField2)
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentC.id).get(aggregateResultField3)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/239
   *	Three similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different Order By two that have no order by specified
   *		- Effective values for all other fields same differing only by case used
   *	Should result in a single context used, a single SOQL for all rollups and 3 DML rows (1 for each parent)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsNoOrderByShareSingleContext() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Description__c.getDescribe()
      .getName();
    String aggregateField2 = LookupChild__c.Description2__c.getDescribe()
      .getName();
    String aggregateField3 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField4 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateField5 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Descriptions__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Descriptions2__c.getDescribe()
      .getName();
    String aggregateResultField3 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField4 = LookupParent__c.Total__c.getDescribe()
      .getName();
    String aggregateResultField5 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Description__c != null'';
    String relationshipCriteriaFields = ''Description__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = null;

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    LookupRollupSummary__c rollupSummaryC = new LookupRollupSummary__c();
    rollupSummaryC.Name = ''Test Rollup C'';
    rollupSummaryC.ParentObject__c = parentObjectName;
    rollupSummaryC.ChildObject__c = childObjectName;
    rollupSummaryC.RelationShipField__c = relationshipField;
    rollupSummaryC.RelationShipCriteria__c = condition;
    rollupSummaryC.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryC.FieldToAggregate__c = aggregateField3;
    rollupSummaryC.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryC.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryC.AggregateResultField__c = aggregateResultField3;
    rollupSummaryC.Active__c = true;
    rollupSummaryC.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryC.CalculationSharingMode__c = sharingMode;

    LookupRollupSummary__c rollupSummaryD = new LookupRollupSummary__c();
    rollupSummaryD.Name = ''Test Rollup D'';
    rollupSummaryD.ParentObject__c = parentObjectName;
    rollupSummaryD.ChildObject__c = childObjectName;
    rollupSummaryD.RelationShipField__c = relationshipField;
    rollupSummaryD.RelationShipCriteria__c = condition;
    rollupSummaryD.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryD.FieldToAggregate__c = aggregateField4;
    rollupSummaryD.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryD.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryD.AggregateResultField__c = aggregateResultField4;
    rollupSummaryD.Active__c = true;
    rollupSummaryD.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryD.CalculationSharingMode__c = sharingMode;

    LookupRollupSummary__c rollupSummaryE = new LookupRollupSummary__c();
    rollupSummaryE.Name = ''Test Rollup E'';
    rollupSummaryE.ParentObject__c = parentObjectName;
    rollupSummaryE.ChildObject__c = childObjectName;
    rollupSummaryE.RelationShipField__c = relationshipField;
    rollupSummaryE.RelationShipCriteria__c = condition;
    rollupSummaryE.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryE.FieldToAggregate__c = aggregateField5;
    rollupSummaryE.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryE.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryE.AggregateResultField__c = aggregateResultField5;
    rollupSummaryE.Active__c = true;
    rollupSummaryE.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryE.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB,
      rollupSummaryC,
      rollupSummaryD,
      rollupSummaryE
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''lemon'');
      child1.put(aggregateField2, ''tom'');
      child1.put(aggregateField3, ''Red'');
      child1.put(aggregateField4, 42);
      // aggregateField5 is same SObjectField as aggregateField4
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''pear'');
      child2.put(aggregateField2, ''charlie'');
      child2.put(aggregateField3, ''Yellow'');
      child2.put(aggregateField4, 42);
      // aggregateField5 is same SObjectField as aggregateField4
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''apple'');
      child3.put(aggregateField2, ''samantha'');
      child3.put(aggregateField3, ''Blue'');
      child3.put(aggregateField4, 42);
      // aggregateField5 is same SObjectField as aggregateField4
      children.add(child3);
    }

    // Sample various limits prior to an insert
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // insert child records
    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A, B, C, D & E
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Five rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A, B, C, D & E
    // + Three for Parents
    System.assertEquals(beforeRows + 17, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the insert statement itself)
    // + Three rows for LookupParent__c for rollup A & B & C & D & E (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    // Note that we are not able to reliably assert rollups A, B, C, D & E because they do not have orderby specified
    // and will share a context.  Contexts generated for "no orderby specified" do not have an orderby
    // and therefore we cannot assert values since order is non-deterministic
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(parents.size(), assertParents.size());
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/216
   *	Two similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Different Order By each containing multiple fields
   *		- Effective values for all other fields same differing only by case used
   *	Should result in Two (2) contexts used, two SOQL for the rollup itself and 3 DML rows (1 for each
   *		parent - DLRS combines updates to identical master record ids)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationFieldCaseMultipleFieldsOrderBy() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String orderBy1 = ''Amount__c ASC NULLS FIRST, Color__c ASC NULLS FIRST'';
    String orderBy2 = ''Amount__c ASC NULLS FIRST, Color__c DESC NULLS FIRST'';

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = orderBy1;
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = orderBy2;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''Red'');
      child1.put(aggregateField2, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''Yellow'');
      child2.put(aggregateField2, 15);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''Blue'');
      child3.put(aggregateField2, 10);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup A
    // + One query on LookupChild__c for rollup B
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 4, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c for rollup A
    // + Nine rows for LookupChild__c for rollup B
    // + Three for Parents
    System.assertEquals(beforeRows + 23, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c for rollup A & B (DLRS combined updates to identical master ids)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      ''Blue'',
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/239
   *	Two similar rollups differing by:
   *		- Different AggregateOperation__c (both use Query rollup - First/Last)
   *		- Different AggregateResultField__c
   *		- Neither rollup has any Order by specified (this will result in non-deterministic rolled up values)
   *		- Effective values for all other fields same differing only by case used
   *	Should result in a single context used, a single SOQL for the rollup itself and 3 DML rows (1 for each parent)
   **/
  private testMethod static void testLimitsAndContextsUsedMultipleQueryRollupsDifferByOperationFieldAndCaseSameCriteriaSameCaseNoOrderBy() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();
    String condition = ''Amount__c > 1'';
    String relationshipCriteriaFields = ''Amount__c'';
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy = null;

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup A'';
    rollupSummaryA.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummaryA.ChildObject__c = childObjectName.toLowerCase();
    rollupSummaryA.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummaryA.RelationShipCriteria__c = condition;
    rollupSummaryA.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryA.FieldToAggregate__c = aggregateField1.toLowerCase();
    rollupSummaryA.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1.toLowerCase();
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryA.CalculationSharingMode__c = sharingMode.toLowerCase();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup B'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField;
    rollupSummaryB.RelationShipCriteria__c = condition;
    rollupSummaryB.RelationShipCriteriaFields__c = relationshipCriteriaFields;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.FieldToOrderBy__c = fieldToOrderBy;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    rollupSummaryB.CalculationSharingMode__c = sharingMode;

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField1, ''orange'');
      child1.put(aggregateField2, 42);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField1, ''purple'');
      child2.put(aggregateField2, 15);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField1, ''cyan'');
      child3.put(aggregateField2, 10);
      children.add(child3);
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    insert children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Two rows for Rollup object
    // + Nine rows for LookupChild__c
    // + Three for Parents
    System.assertEquals(beforeRows + 14, Limits.getQueryRows());

    // + Nine rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c (from rollup processing)
    System.assertEquals(beforeDMLRows + 12, Limits.getDMLRows());

    // Unable to reliably assert rollups in this test because
    // no order by was specified therefore result is non-deterministic
    // this test is focused on limits and contexts to ensure a single context is used
  }

  /**
   *	Test for issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/229
   *	Ensure that any field on LookupRollupSummary__c that is describable is updated with describe info
   **/
  private testMethod static void testLookupRollupSummaryFieldsMatchDescribeInfo() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    String rollupName = ''Test Rollup'';
    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String condition =
      LookupChild__c.Amount__c.getDescribe().getName() + '' > 1'';
    List<String> relationshipCriteriaFields = new List<String>{
      LookupChild__c.Amount__c.getDescribe().getName(),
      ''Name'',
      ''Id'',
      ''IsDeleted''
    };
    String sharingMode = LREngine.SharingMode.User.name();
    String fieldToOrderBy =
      LookupChild__c.Amount__c.getDescribe().getName() +
      '','' +
      LookupChild__c.Color__c.getDescribe().getName() +
      '' ASC,Name NULLS LAST,Id DESC NULLS FIRST'';

    // Configure rollups
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = rollupName.toLowerCase();
    rollupSummary.ParentObject__c = parentObjectName.toLowerCase();
    rollupSummary.ChildObject__c = childObjectName.toLowerCase();
    rollupSummary.RelationShipField__c = relationshipField.toLowerCase();
    rollupSummary.RelationShipCriteria__c = condition.toLowerCase();
    rollupSummary.RelationShipCriteriaFields__c = String.join(
        relationshipCriteriaFields,
        ''\r\n''
      )
      .toLowerCase();
    rollupSummary.FieldToAggregate__c = aggregateField.toLowerCase();
    rollupSummary.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name()
      .toLowerCase();
    rollupSummary.AggregateResultField__c = aggregateResultField.toLowerCase();
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name()
      .toLowerCase();
    rollupSummary.CalculationSharingMode__c = sharingMode.toLowerCase();
    insert rollupSummary;

    // Assert field values were updated to describe info
    LookupRollupSummary__c existingSummary = [
      SELECT
        Id,
        Name,
        ParentObject__c,
        ChildObject__c,
        RelationshipField__c,
        RelationShipCriteria__c,
        RelationShipCriteriaFields__c,
        FieldToAggregate__c,
        FieldToOrderBy__c,
        AggregateOperation__c,
        AggregateResultField__c,
        CalculationMode__c,
        CalculationSharingMode__c
      FROM LookupRollupSummary__c
      WHERE Name = :rollupName
    ];

    // name & condition are not updated with describe info
    System.assertEquals(rollupName.toLowerCase(), existingSummary.Name);
    System.assertEquals(
      condition.toLowerCase(),
      existingSummary.RelationShipCriteria__c
    );
    // all remaining fields should match describe
    System.assertEquals(parentObjectName, existingSummary.ParentObject__c);
    System.assertEquals(childObjectName, existingSummary.ChildObject__c);
    System.assertEquals(
      relationshipField,
      existingSummary.RelationShipField__c
    );
    System.assertEquals(
      String.join(relationshipCriteriaFields, ''\r\n''),
      existingSummary.RelationShipCriteriaFields__c
    );
    System.assertEquals(aggregateField, existingSummary.FieldToAggregate__c);
    System.assertEquals(fieldToOrderBy, existingSummary.FieldToOrderBy__c);
    System.assertEquals(
      RollupSummaries.AggregateOperation.First.name(),
      existingSummary.AggregateOperation__c
    );
    System.assertEquals(
      aggregateResultField,
      existingSummary.AggregateResultField__c
    );
    System.assertEquals(
      RollupSummaries.CalculationMode.Realtime.name(),
      existingSummary.CalculationMode__c
    );
    System.assertEquals(sharingMode, existingSummary.CalculationSharingMode__c);

    // Set summary values to lowered and update
    existingSummary.Name = rollupName.toLowerCase();
    existingSummary.ParentObject__c = parentObjectName.toLowerCase();
    existingSummary.ChildObject__c = childObjectName.toLowerCase();
    existingSummary.RelationShipField__c = relationshipField.toLowerCase();
    existingSummary.RelationShipCriteria__c = condition.toLowerCase();
    existingSummary.RelationShipCriteriaFields__c = String.join(
        relationshipCriteriaFields,
        ''\r\n''
      )
      .toLowerCase();
    existingSummary.FieldToAggregate__c = aggregateField.toLowerCase();
    existingSummary.FieldToOrderBy__c = fieldToOrderBy.toLowerCase();
    existingSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name()
      .toLowerCase();
    existingSummary.AggregateResultField__c = aggregateResultField.toLowerCase();
    existingSummary.Active__c = true;
    existingSummary.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name()
      .toLowerCase();
    existingSummary.CalculationSharingMode__c = sharingMode.toLowerCase();
    update rollupSummary;

    // Assert field values were updated to describe info
    existingSummary = [
      SELECT
        Id,
        Name,
        ParentObject__c,
        ChildObject__c,
        RelationshipField__c,
        RelationShipCriteria__c,
        RelationShipCriteriaFields__c,
        FieldToAggregate__c,
        FieldToOrderBy__c,
        AggregateOperation__c,
        AggregateResultField__c,
        CalculationMode__c,
        CalculationSharingMode__c
      FROM LookupRollupSummary__c
      WHERE Name = :rollupName
    ];

    // name & condition are not updated with describe info
    System.assertEquals(rollupName.toLowerCase(), existingSummary.Name);
    System.assertEquals(
      condition.toLowerCase(),
      existingSummary.RelationShipCriteria__c
    );
    // all remaining fields should match describe
    System.assertEquals(parentObjectName, existingSummary.ParentObject__c);
    System.assertEquals(childObjectName, existingSummary.ChildObject__c);
    System.assertEquals(
      relationshipField,
      existingSummary.RelationShipField__c
    );
    System.assertEquals(
      String.join(relationshipCriteriaFields, ''\r\n''),
      existingSummary.RelationShipCriteriaFields__c
    );
    System.assertEquals(aggregateField, existingSummary.FieldToAggregate__c);
    System.assertEquals(fieldToOrderBy, existingSummary.FieldToOrderBy__c);
    System.assertEquals(
      RollupSummaries.AggregateOperation.First.name(),
      existingSummary.AggregateOperation__c
    );
    System.assertEquals(
      aggregateResultField,
      existingSummary.AggregateResultField__c
    );
    System.assertEquals(
      RollupSummaries.CalculationMode.Realtime.name(),
      existingSummary.CalculationMode__c
    );
    System.assertEquals(sharingMode, existingSummary.CalculationSharingMode__c);
  }
}','4197109853.0','False','RollupServiceTest4','87513','Active');
INSERT INTO "ApexClass" VALUES(9,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupServiceTest5 {
  @IsTest
  private static void testPolymorphicRelationshipsRealtime() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Polymorphic lookup between Task and Account
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Task'';
    rollupSummaryA.RelationShipField__c = ''WhatId'';
    rollupSummaryA.FieldToAggregate__c = ''Id'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Polymorphic lookup between Task and Opportunity
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = ''Opportunity'';
    rollupSummary.ChildObject__c = ''Task'';
    rollupSummary.RelationShipField__c = ''WhatId'';
    rollupSummary.FieldToAggregate__c = ''Id'';
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummary.AggregateResultField__c = ''TotalOpportunityQuantity'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert rollupSummary;

    // Setup parent test records
    Account accountParent = new Account(Name = ''Test Account'');
    insert accountParent;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = accountParent.Id;
    insert opp;

    // Insert a Task for Account and assert
    Task task1 = new Task();
    task1.Subject = ''Task A'';
    task1.WhatId = accountParent.Id;
    insert task1;
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParent.Id][0]
      .AnnualRevenue
    );
    System.assertEquals(
      null,
      [SELECT TotalOpportunityQuantity FROM Opportunity WHERE id = :opp.Id][0]
      .TotalOpportunityQuantity
    );

    // Insert a Task for Oppoortunity and assert
    Task task2 = new Task();
    task2.Subject = ''Task A'';
    task2.WhatId = opp.Id;
    insert task2;
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParent.Id][0]
      .AnnualRevenue
    );
    System.assertEquals(
      1,
      [SELECT TotalOpportunityQuantity FROM Opportunity WHERE id = :opp.Id][0]
      .TotalOpportunityQuantity
    );
  }

  @IsTest
  private static void testPolymorphicRelationshipsScheduled() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Polymorphic lookup between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Polymorphic lookup between Task and Opportunity
    LookupRollupSummary__c rollupSummaryOpp = new LookupRollupSummary__c();
    rollupSummaryOpp.Name = ''Test Rollup'';
    rollupSummaryOpp.ParentObject__c = ''Opportunity'';
    rollupSummaryOpp.ChildObject__c = ''Task'';
    rollupSummaryOpp.RelationShipField__c = ''WhatId'';
    rollupSummaryOpp.FieldToAggregate__c = ''Id'';
    rollupSummaryOpp.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryOpp.AggregateResultField__c = ''TotalOpportunityQuantity'';
    rollupSummaryOpp.Active__c = true;
    rollupSummaryOpp.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryOpp;

    // Setup parent test records
    Account accountParent = new Account(Name = ''Test Account'');
    insert accountParent;
    Opportunity oppParent = new Opportunity();
    oppParent.Name = ''Test Opportunity'';
    oppParent.StageName = ''Open'';
    oppParent.CloseDate = System.today();
    oppParent.AccountId = accountParent.Id;
    insert oppParent;

    // Insert Tasks to generated scheduled job work items
    Task task1 = new Task();
    task1.Subject = ''Task A'';
    task1.WhatId = accountParent.Id;
    Task task2 = new Task();
    task2.Subject = ''Task A'';
    task2.WhatId = oppParent.Id;
    insert new List<Task>{ task1, task2 };

    // Should have two scheduled job work items
    System.assertEquals(
      2,
      [SELECT Id FROM LookupRollupSummaryScheduleItems__c].size()
    ); // Assert a scheduled item has been created
    System.assertEquals(
      rollupSummaryAccount.Id,
      [
        SELECT LookupRollupSummary2__c
        FROM LookupRollupSummaryScheduleItems__c
        WHERE ParentId__c = :accountParent.Id
      ][0]
      .LookupRollupSummary2__c
    );
    System.assertEquals(
      rollupSummaryOpp.Id,
      [
        SELECT LookupRollupSummary2__c
        FROM LookupRollupSummaryScheduleItems__c
        WHERE ParentId__c = :oppParent.Id
      ][0]
      .LookupRollupSummary2__c
    );

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Assert scheduled rollup job did its thing!
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParent.Id][0]
      .AnnualRevenue
    );
    System.assertEquals(
      1,
      [
        SELECT TotalOpportunityQuantity
        FROM Opportunity
        WHERE id = :oppParent.Id
      ][0]
      .TotalOpportunityQuantity
    );
  }

  @IsTest
  private static void testPolymorphicRelationshipsScheduledIgnoreBadScheduleItems() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Setup parent test records
    Account accountParent = new Account(Name = ''Test Account'');
    insert accountParent;
    Opportunity oppParent = new Opportunity();
    oppParent.Name = ''Test Opportunity'';
    oppParent.StageName = ''Open'';
    oppParent.CloseDate = System.today();
    oppParent.AccountId = accountParent.Id;
    insert oppParent;

    // Insert Tasks to generated scheduled job work items
    Task task1 = new Task();
    task1.Subject = ''Task A'';
    task1.WhatId = accountParent.Id;
    Task task2 = new Task();
    task2.Subject = ''Task A'';
    task2.WhatId = oppParent.Id;
    insert new List<Task>{ task1, task2 };

    // Polymorphic lookup between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Polymorphic lookup between Task and Opportunity
    LookupRollupSummary__c rollupSummaryOpp = new LookupRollupSummary__c();
    rollupSummaryOpp.Name = ''Test Rollup'';
    rollupSummaryOpp.ParentObject__c = ''Opportunity'';
    rollupSummaryOpp.ChildObject__c = ''Task'';
    rollupSummaryOpp.RelationShipField__c = ''WhatId'';
    rollupSummaryOpp.FieldToAggregate__c = ''Id'';
    rollupSummaryOpp.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryOpp.AggregateResultField__c = ''TotalOpportunityQuantity'';
    rollupSummaryOpp.Active__c = true;
    rollupSummaryOpp.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryOpp;

    // Inject a valid schedule item record
    LookupRollupSummaryScheduleItems__c lrssiAccount = new LookupRollupSummaryScheduleItems__c();
    lrssiAccount.LookupRollupSummary2__c = rollupSummaryAccount.Id;
    lrssiAccount.ParentId__c = accountParent.Id;
    lrssiAccount.QualifiedParentID__c =
      lrssiAccount.ParentId__c +
      ''#'' +
      LookupRollupSummary__c.Id;
    insert lrssiAccount;

    // Inject invalid schedule item reocrd, past bug would allow this to be written against
    //   the wrong lookup rule or user changing the lookup after schedule item written woudl cause an error
    LookupRollupSummaryScheduleItems__c lrssiOpp = new LookupRollupSummaryScheduleItems__c();
    lrssiOpp.LookupRollupSummary2__c = rollupSummaryAccount.Id; // Emulate invalid entry
    lrssiOpp.ParentId__c = oppParent.Id;
    lrssiOpp.QualifiedParentID__c =
      lrssiOpp.ParentId__c +
      ''#'' +
      LookupRollupSummary__c.Id;
    insert lrssiOpp;

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Assert scheduled rollup for account worked, but the invalided schedule item was silently swallowed and deleted
    System.assertEquals(
      0,
      [SELECT Id FROM LookupRollupSummaryScheduleItems__c].size()
    );
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParent.Id][0]
      .AnnualRevenue
    );
    System.assertEquals(
      null,
      [
        SELECT TotalOpportunityQuantity
        FROM Opportunity
        WHERE id = :oppParent.Id
      ][0]
      .TotalOpportunityQuantity
    );
  }

  private static void assertOrdering(
    List<Utilities.Ordering> order,
    Integer numFields,
    List<String> fields,
    List<Utilities.SortOrder> directions,
    List<Boolean> nullsLast
  ) {
    System.assertNotEquals(null, order);
    System.assertEquals(numFields, order.size());
    for (Integer i = 0; i < numFields; i++) {
      assertOrdering(order[i], fields[i], directions[i], nullsLast[i]);
    }
  }

  private static void assertOrdering(
    Utilities.Ordering o,
    String field,
    Utilities.SortOrder direction,
    Boolean nullsLast
  ) {
    System.assertEquals(field, o.getField());
    System.assertEquals(direction, o.getDirection());
    System.assertEquals(nullsLast, o.getNullsLast());
  }

  @IsTest
  private static void testParseOrderByFieldOnly() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(''Amount__c'');
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldOnlyLowered() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(''amount__c'');
    assertOrdering(
      order,
      1,
      new List<String>{ ''amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldOnlyMixedCase() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(''aMoUnT__c'');
    assertOrdering(
      order,
      1,
      new List<String>{ ''aMoUnT__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndASCDirection() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c ASC''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndASCDirectionLowered() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c asc''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndDESCDirection() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c DESC''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.DESCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndDESCDirectionLowered() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c desc''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.DESCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndNullsFirst() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c NULLS FIRST''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndNullsFirstLowered() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c nulls first''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndNullsLast() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c NULLS LAST''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ true }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndNullsLastLowered() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c nulls last''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ true }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndASCDirectionAndNullsFirst() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c ASC NULLS FIRST''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndASCDirectionAndNullsLast() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c ASC NULLS LAST''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ true }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndDESCDirectionAndNullsFirst() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c DESC NULLS FIRST''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.DESCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByFieldAndDESCDirectionAndNullsLast() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c DESC NULLS LAST''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''Amount__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.DESCENDING },
      new List<Boolean>{ true }
    );
  }

  @IsTest
  private static void testParseOrderByMultipleFieldOnly() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c, Color__c, Name''
    );
    assertOrdering(
      order,
      3,
      new List<String>{ ''Amount__c'', ''Color__c'', ''Name'' },
      new List<Utilities.SortOrder>{
        Utilities.SortOrder.ASCENDING,
        Utilities.SortOrder.ASCENDING,
        Utilities.SortOrder.ASCENDING
      },
      new List<Boolean>{ false, false, false }
    );
  }

  @IsTest
  private static void testParseOrderByMultipleFieldAndMixedDirection() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c ASC, Color__c DESC, Name ASC''
    );
    assertOrdering(
      order,
      3,
      new List<String>{ ''Amount__c'', ''Color__c'', ''Name'' },
      new List<Utilities.SortOrder>{
        Utilities.SortOrder.ASCENDING,
        Utilities.SortOrder.DESCENDING,
        Utilities.SortOrder.ASCENDING
      },
      new List<Boolean>{ false, false, false }
    );
  }

  @IsTest
  private static void testParseOrderByMultipleFieldAndMixedDirectionAndNulls() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''Amount__c ASC NULLS LAST, Color__c DESC NULLS FIRST, Name ASC NULLS LAST''
    );
    assertOrdering(
      order,
      3,
      new List<String>{ ''Amount__c'', ''Color__c'', ''Name'' },
      new List<Utilities.SortOrder>{
        Utilities.SortOrder.ASCENDING,
        Utilities.SortOrder.DESCENDING,
        Utilities.SortOrder.ASCENDING
      },
      new List<Boolean>{ true, false, true }
    );
  }

  @IsTest
  private static void testParseOrderByBadField() {
    // parsing will succeed - validation of field name is done in RollupSummaries
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''BadField__c''
    );
    assertOrdering(
      order,
      1,
      new List<String>{ ''BadField__c'' },
      new List<Utilities.SortOrder>{ Utilities.SortOrder.ASCENDING },
      new List<Boolean>{ false }
    );
  }

  @IsTest
  private static void testParseOrderByBadDirection() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c BAD''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByBadNulls() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC BAD''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByMissingNulls() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC LAST''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByBadNullsType() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC NULLS BAD''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByMissingNullsType() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC NULLS''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByInvalidStart() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''BAD Amount__c ASC NULLS FIRST''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByInvalidMiddle() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC BAD NULLS FIRST''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByInvalidEnd() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC NULLS FIRST BAD''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByMultipleSecondFieldInvalid() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC NULLS FIRST, Color__c ASC NULLS BAD, Name ASC NULLS FIRST''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByMultipleThirdFieldInvalid() {
    try {
      List<Utilities.Ordering> order = Utilities.parseOrderByClause(
        ''Amount__c ASC NULLS FIRST, Color__c ASC NULLS LAST, Name ASC FIRST''
      );
      System.assert(false, ''Expected exception'');
    } catch (Utilities.OrderByInvalidException e) {
      System.assertEquals(''Invalid order by clause.'', e.getMessage());
    }
  }

  @IsTest
  private static void testParseOrderByMultipleFieldWhitespaceEverywhere() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(
      ''  	           Amount__c      		ASC        	 NULLS       	 LAST      ,   	Color__c	  DESC    NULLS      FIRST        	''
    );
    assertOrdering(
      order,
      2,
      new List<String>{ ''Amount__c'', ''Color__c'' },
      new List<Utilities.SortOrder>{
        Utilities.SortOrder.ASCENDING,
        Utilities.SortOrder.DESCENDING
      },
      new List<Boolean>{ true, false }
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/379
   **/
  @IsTest
  private static void testCheckboxRollupWithNoChildren() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Lookup between Task and Opportunity
    LookupRollupSummary__c rollupSummaryOpp = new LookupRollupSummary__c();
    rollupSummaryOpp.Name = ''Test Rollup'';
    rollupSummaryOpp.ParentObject__c = ''Lead'';
    rollupSummaryOpp.ChildObject__c = ''Task'';
    rollupSummaryOpp.RelationShipField__c = ''WhoId'';
    rollupSummaryOpp.RelationShipCriteriaFields__c = ''Priority'';
    rollupSummaryOpp.FieldToAggregate__c = ''IsHighPriority'';
    rollupSummaryOpp.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryOpp.AggregateResultField__c = ''HasOptedOutOfEmail'';
    rollupSummaryOpp.Active__c = true;
    rollupSummaryOpp.CalculationMode__c = ''Realtime'';
    insert rollupSummaryOpp;

    // Setup parent test records
    Lead lead = new Lead();
    lead.LastName = ''Bob'';
    lead.Company = ''Lego'';
    insert lead;

    // Insert Tasks to generated scheduled job work items
    Task task = new Task();
    task.Subject = ''Task A'';
    task.Priority = ''High'';
    task.WhoId = lead.Id;
    insert task;

    // Assert HasOptedOutOfEmail is True
    System.assertEquals(
      true,
      [SELECT HasOptedOutOfEmail FROM Lead WHERE Id = :lead.Id]
      .HasOptedOutOfEmail
    );

    // Update Task
    task.Priority = ''Low'';
    update task;

    // Assert HasOptedOutOfEmail is False
    System.assertEquals(
      false,
      [SELECT HasOptedOutOfEmail FROM Lead WHERE Id = :lead.Id]
      .HasOptedOutOfEmail
    );

    // Now delete the Task (so there is no children)
    delete task;

    // Assert HasOptedOutOfEmail is False
    System.assertEquals(
      false,
      [SELECT HasOptedOutOfEmail FROM Lead WHERE Id = :lead.Id]
      .HasOptedOutOfEmail
    );
  }

  @IsTest
  private static void testParseOrderByBlankClause() {
    List<Utilities.Ordering> order = Utilities.parseOrderByClause(null);
    System.assertEquals(null, order);

    order = Utilities.parseOrderByClause('''');
    System.assertEquals(null, order);

    order = Utilities.parseOrderByClause(''		 	   '');
    System.assertEquals(null, order);
  }
}','2589211434.0','False','RollupServiceTest5','22953','Active');
INSERT INTO "ApexClass" VALUES(10,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupServiceTest6 {
  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/326
   **/
  @IsTest
  private static void testAccountHierarchySumNumberOfEmployees() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Account'';
    rollupSummaryA.RelationShipField__c = ''ParentId'';
    rollupSummaryA.FieldToAggregate__c = ''NumberOfEmployees'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = ''NumberOfEmployees'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParent = new Account();
    accountParent.Name = ''Test Opportunity'';
    insert accountParent;
    Account accountChild = new Account();
    accountChild.Name = ''Test Opportunity'';
    accountChild.NumberOfEmployees = 1;
    accountChild.ParentId = accountParent.Id;
    insert accountChild;

    // Assert
    System.assertEquals(
      1,
      [SELECT NumberOfEmployees FROM Account WHERE id = :accountParent.Id][0]
      .NumberOfEmployees
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/39
   **/
  @IsTest
  private static void testParentDeletedByChildTriggerToleranceParentsDeleted() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentA'');
    List<SObject> parents = new List<SObject>{ parentA, parentB };
    insert parents;

    // Insert children
    SObject child1 = childType.newSObject();
    child1.put(relationshipField, parentA.Id);
    child1.put(aggregateField, 42);
    SObject child2 = childType.newSObject();
    child2.put(relationshipField, parentB.Id);
    child2.put(aggregateField, 42);
    insert new List<SObject>{ child1, child2 };

    // Attempt to delete and ask child trigger to delete its parents also BEFORE calling rollup
    TestContext.DeleteParentRecord = true;
    delete new List<SObject>{ child1, child2 };

    // Assert no parent records
    System.assertEquals(0, [SELECT Id FROM LookupParent__c].size());
  }

  /**
   * See issue comments for more information https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/375
   **/
  @IsTest
  private static void testParentIdsVaryOnlyByCaseTolerated() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Tasks
    Id accountAId = ''001b0000008RmID''; // Safe since the key prefix for Account is the same accross all orgs
    Id taskAId = fflib_IDGenerator.generate(Task.SObjectType);
    Task taskA = new Task(WhatId = accountAId);
    Id accountBId = ''001b0000008rmID''; // Safe since the key prefix for Account is the same accross all orgs
    Id taskBId = fflib_IDGenerator.generate(Task.SObjectType);
    Task taskB = new Task(WhatId = accountBId);

    // Given
    Map<Id, SObject> existingRecords = new Map<Id, SObject>(); // Insert only test is fine for this test
    Map<Id, SObject> newRecords = new Map<Id, SObject>{
      taskAId => taskA,
      taskBId => taskB
    };
    Schema.SObjectType sObjectType = Task.SObjectType;
    List<RollupSummaries.CalculationMode> calculationModes = new List<RollupSummaries.CalculationMode>{
      RollupSummaries.CalculationMode.Scheduled
    };

    // When
    RollupService.handleRollups(
      existingRecords,
      newRecords,
      sObjectType,
      calculationModes
    );

    // Then
    // System.assertEquals(2, [select Id, ParentId__c from LookupRollupSummaryScheduleItems__c].size());
    System.debug(
      [SELECT Id, ParentId__c FROM LookupRollupSummaryScheduleItems__c]
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/39
   **/
  @IsTest
  private static void selfRollupInsert() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Opportunity'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''Id'';
    rollupSummaryA.FieldToAggregate__c = ''CreatedDate'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryA.AggregateResultField__c = ''Amount'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.Amount = 100;
    insert opp;

    // Assert
    System.assertEquals(
      1,
      [SELECT Amount FROM Opportunity WHERE id = :opp.Id][0]
      .Amount
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/39
   **/
  @IsTest
  private static void selfRollupDelete() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Opportunity'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''Id'';
    rollupSummaryA.FieldToAggregate__c = ''CreatedDate'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryA.AggregateResultField__c = ''Amount'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.Amount = 100;
    insert opp;
    delete opp;

    // Assert this doesn''t result in an exception, as it once did
    // ENTITY_IS_DELETED, entity is deleted: []: Class.dlrs.RollupService.Updater.updateRecords: line 1159, column 1
  }

  private testMethod static void testSingleRollupWithInsertThenDelete() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.AggregateAllRows__c = true;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }

  private testMethod static void testSingleRollupWithInsertThenDeleteThenUnDelete() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.AggregateAllRows__c = false;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      0,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );

    // Undelete Opportunity
    undelete opp;

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/303
   **/
  @IsTest
  private static void testAccountMergeAsParent() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Task'';
    rollupSummaryA.RelationShipField__c = ''WhatId'';
    rollupSummaryA.FieldToAggregate__c = ''Id'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParentA = new Account(Name = ''Test Account A'');
    insert accountParentA;
    // Setup parent test records
    Account accountParentB = new Account(Name = ''Test Account B'');
    insert accountParentB;

    // Insert a Task for Account and assert
    Task task1 = new Task();
    task1.Subject = ''Task A'';
    task1.WhatId = accountParentA.Id;
    insert task1;

    // Insert a Task for Account and assert
    Task task2 = new Task();
    task2.Subject = ''Task B'';
    task2.WhatId = accountParentB.Id;
    insert task2;

    // Real time working?
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParentA.Id][0]
      .AnnualRevenue
    );
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParentB.Id][0]
      .AnnualRevenue
    );

    // Enable the Account (Parent) Trigger
    TestContext.AccountTestTriggerEnabled = true;

    // Merge?
    Database.merge(accountParentA, accountParentB.Id);

    // Assert Schedule items are added
    System.assertEquals(
      accountParentA.Id,
      [SELECT Id, ParentId__c FROM LookupRollupSummaryScheduleItems__c][0]
      .ParentId__c
    );

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Schedule items triggered refresh of rollups?
    System.assertEquals(
      2,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParentA.Id][0]
      .AnnualRevenue
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/303
   **/
  @IsTest
  private static void testAccountMergeAsParentWithoutParentTriggerDeployed() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Task'';
    rollupSummaryA.RelationShipField__c = ''WhatId'';
    rollupSummaryA.FieldToAggregate__c = ''Id'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParentA = new Account(Name = ''Test Account A'');
    insert accountParentA;
    // Setup parent test records
    Account accountParentB = new Account(Name = ''Test Account B'');
    insert accountParentB;

    // Insert a Task for Account and assert
    Task task1 = new Task();
    task1.Subject = ''Task A'';
    task1.WhatId = accountParentA.Id;
    insert task1;

    // Insert a Task for Account and assert
    Task task2 = new Task();
    task2.Subject = ''Task B'';
    task2.WhatId = accountParentB.Id;
    insert task2;

    // Real time working?
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParentA.Id][0]
      .AnnualRevenue
    );
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParentB.Id][0]
      .AnnualRevenue
    );

    // Disable the Account (Parent) Trigger, this prevents the rollups from being recalculated
    TestContext.AccountTestTriggerEnabled = false;

    // Merge?
    Database.merge(accountParentA, accountParentB.Id);

    // Assert no Schedule items are added
    System.assertEquals(
      0,
      [SELECT Id, ParentId__c FROM LookupRollupSummaryScheduleItems__c].size()
    );

    // Schedule items triggered refresh of rollups? No
    System.assertEquals(
      1,
      [SELECT AnnualRevenue FROM Account WHERE id = :accountParentA.Id][0]
      .AnnualRevenue
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/303
   **/
  @IsTest
  private static void testContactMergeAsChild() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Contact'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = null;
    rollupSummaryA.FieldToAggregate__c = ''FirstName'';
    rollupSummaryA.ConcatenateDelimiter__c = '','';
    rollupSummaryA.AggregateOperation__c = ''Concatenate'';
    rollupSummaryA.AggregateResultField__c = ''Description'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Test data
    Account accountA = new Account();
    accountA.Name = ''Test Account'';
    accountA.AnnualRevenue = 0;
    insert accountA;
    Contact contactA = new Contact();
    contactA.FirstName = ''Fred'';
    contactA.LastName = ''Smith'';
    contactA.AccountId = accountA.Id;
    insert contactA;
    Contact contactB = new Contact();
    contactB.FirstName = ''Bob'';
    contactB.LastName = ''Smith'';
    contactB.AccountId = accountA.Id;
    insert contactB;

    // Assert realtime rollup
    System.assertEquals(
      ''Fred,Bob'',
      [SELECT Description FROM Account WHERE Id = :accountA.Id][0]
      .Description
    );

    // Disable the Account (Parent) Trigger (just to prove we don''t need it as its a child merge)
    TestContext.AccountTestTriggerEnabled = false;

    // Merge contacts
    Database.merge(contactA, contactB.Id);

    // Assert Schedule items are added
    System.assertEquals(
      accountA.Id,
      [SELECT Id, ParentId__c FROM LookupRollupSummaryScheduleItems__c][0]
      .ParentId__c
    );

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    System.assertEquals(
      ''Fred'',
      [SELECT Description FROM Account WHERE Id = :accountA.Id][0]
      .Description
    );
  }

  @IsTest
  static void testRollupPreventUnecessaryParentDmlRealtime() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Account'';
    rollupSummaryA.RelationShipField__c = ''ParentId'';
    rollupSummaryA.FieldToAggregate__c = ''NumberOfEmployees'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = ''NumberOfEmployees'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParent = new Account();
    accountParent.Name = ''Test Account Parent'';
    accountParent.NumberOfEmployees = 1;
    insert accountParent;

    Test.startTest();
    Account accountChild = new Account();
    accountChild.Name = ''Test Account Child'';
    accountChild.NumberOfEmployees = 1;
    accountChild.ParentId = accountParent.Id;
    insert accountChild;
    // Account insert statement above, no additional DML performed
    Assert.areEqual(1, Limits.getDmlRows());
    // No additional rows or unexpected DML
    Assert.areEqual(1, Limits.getDmlStatements());
    Test.stopTest();

    // Assert
    System.assertEquals(
      1,
      [SELECT NumberOfEmployees FROM Account WHERE id = :accountParent.Id][0]
      .NumberOfEmployees
    );
  }

  @IsTest
  static void testRollupPreventUnecessaryParentDmlRealtimeRespectDisable() {
    DeclarativeLookupRollupSummaries__c settings = new DeclarativeLookupRollupSummaries__c(
      DisableParentDMLCheck__c = true
    );
    insert settings;
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Account'';
    rollupSummaryA.RelationShipField__c = ''ParentId'';
    rollupSummaryA.FieldToAggregate__c = ''NumberOfEmployees'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = ''NumberOfEmployees'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParent = new Account();
    accountParent.Name = ''Test Account Parent'';
    accountParent.NumberOfEmployees = 1;
    insert accountParent;

    Test.startTest();
    Account accountChild = new Account();
    accountChild.Name = ''Test Account Child'';
    accountChild.NumberOfEmployees = 1;
    accountChild.ParentId = accountParent.Id;
    insert accountChild;
    // Account insert statement above, rollup should have rolled up because setting prevented additional checks
    Assert.areEqual(2, Limits.getDmlRows());
    // Expected account to be updated again because setting disabled prevention metrics
    Assert.areEqual(2, Limits.getDmlStatements());
    Test.stopTest();

    // Assert
    System.assertEquals(
      1,
      [SELECT NumberOfEmployees FROM Account WHERE id = :accountParent.Id][0]
      .NumberOfEmployees
    );
  }

  @IsTest
  static void testRollupPreventUnecessaryParentDmlScheduled() {
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Account'';
    rollupSummaryA.RelationShipField__c = ''ParentId'';
    rollupSummaryA.FieldToAggregate__c = ''NumberOfEmployees'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = ''NumberOfEmployees'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParent = new Account();
    accountParent.Name = ''Test Opportunity'';
    accountParent.NumberOfEmployees = 1;
    insert accountParent;

    accountParent = [
      SELECT Id, LastModifiedDate
      FROM Account
      WHERE Id = :accountParent.Id
    ];

    Test.startTest();
    Account accountChild = new Account();
    accountChild.Name = ''Test Opportunity'';
    accountChild.NumberOfEmployees = 1;
    accountChild.ParentId = accountParent.Id;
    insert accountChild;

    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    Account accountParentAfterChild = [
      SELECT Id, LastModifiedDate
      FROM Account
      WHERE Id = :accountParent.Id
    ];
    Assert.areEqual(
      accountParent.LastModifiedDate,
      accountParentAfterChild.LastModifiedDate
    );

    // Assert
    Assert.areEqual(
      1,
      [SELECT NumberOfEmployees FROM Account WHERE id = :accountParent.Id][0]
      .NumberOfEmployees
    );
  }

  @IsTest
  static void testRollupPreventUnecessaryParentDmlScheduledRespectDisable() {
    DeclarativeLookupRollupSummaries__c settings = new DeclarativeLookupRollupSummaries__c(
      DisableParentDMLCheck__c = true
    );
    insert settings;
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Account'';
    rollupSummaryA.RelationShipField__c = ''ParentId'';
    rollupSummaryA.FieldToAggregate__c = ''NumberOfEmployees'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = ''NumberOfEmployees'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryA;

    // Setup parent test records
    Account accountParent = new Account();
    accountParent.Name = ''Test Opportunity'';
    accountParent.NumberOfEmployees = 1;
    insert accountParent;

    accountParent = [
      SELECT Id, LastModifiedDate
      FROM Account
      WHERE Id = :accountParent.Id
    ];

    Test.startTest();
    Account accountChild = new Account();
    accountChild.Name = ''Test Opportunity'';
    accountChild.NumberOfEmployees = 1;
    accountChild.ParentId = accountParent.Id;
    insert accountChild;

    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    Account accountParentAfterChild = [
      SELECT Id, LastModifiedDate
      FROM Account
      WHERE Id = :accountParent.Id
    ];

    // Assert
    Assert.areEqual(
      1,
      [SELECT NumberOfEmployees FROM Account WHERE id = :accountParent.Id][0]
      .NumberOfEmployees
    );
  }
}','3926677676.0','False','RollupServiceTest6','21620','Active');
INSERT INTO "ApexClass" VALUES(11,'57.0','/**
 * Copyright (c) 2018, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupCalculateControllerTest {
  static Schema.SObjectField ACCOUNT_SLA_EXPIRATION_DATE;
  static Schema.SObjectField ACCOUNT_NUMBER_OF_LOCATIONS;
  static {
    // Dynamically resolve these fields, if they are not present when the test runs, the test will return as passed to avoid failures in subscriber org when packaged
    fflib_SObjectDescribe describe = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    ACCOUNT_SLA_EXPIRATION_DATE = describe.getField(''SLAExpirationDate__c'');
    ACCOUNT_NUMBER_OF_LOCATIONS = describe.getField(''NumberOfLocations__c'');
  }

  @IsTest
  private static void testMasterUpdatesSkipped() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 600;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Process Builder'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA };

    // Test data
    Account account1 = new Account();
    account1.Name = ''Test Account 1'';
    Account account2 = new Account();
    account2.Name = ''Test Account 2'';
    List<Account> accounts = new List<Account>{ account1, account2 };
    insert accounts;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account1.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollups are null
    Id accountId = account1.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(null, accountResult.AnnualRevenue);

    // Run a full calculate for the given master records (used by the Full Recalc mode)
    RollupService.updateMasterRollups(
      new Set<String>{ rollupSummaryA.Id },
      new Set<Id>{ account1.Id, account2.Id }
    );

    // Assert rollups are calculated
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);

    // Capture query and dml rows used up so far
    Integer queryRows = Limits.getQueryRows();
    Integer dmlRows = Limits.getDmlRows();

    // Run a full calculate for the given master records (used by the Full Recalc mode)
    RollupService.updateMasterRollups(
      new Set<String>{ rollupSummaryA.Id },
      new Set<Id>{ account1.Id, account2.Id }
    );

    // Assert what has been done DML and Query rows wise
    System.assertEquals(
      /* Expected no further DML rows to be updated*/ 0,
      Limits.getDmlRows() - dmlRows
    );
    System.assertEquals(
      /* Expected following additional query rows */
      /* Lookup row **/ +1 +
      /* Rollup query rows (children) **/ rollups.size() +
      /* Master query rows (parents) */ accounts.size(),
      Limits.getQueryRows() - queryRows
    );

    // Assert rollups are still ok
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);

    // Modify child record and thus expected rollup value (which will now be different from the one on the db)
    expectedResultA = 550;
    opps[0].Amount = 200;
    update opps[0];

    // Capture query and dml rows used up so far
    queryRows = Limits.getQueryRows();
    dmlRows = Limits.getDmlRows();

    // Run the Calculate job (inlined as Limits stats are not available for Apex jobs run in tests)
    RollupService.updateMasterRollups(
      new Set<String>{ rollupSummaryA.Id },
      new Set<Id>{ account1.Id, account2.Id }
    );

    // Assert what has been done DML and Query rows wise
    System.assertEquals(
      /* Expected one DML row to be updated*/ 1,
      Limits.getDmlRows() - dmlRows
    );
    System.assertEquals(
      /* Expected following additional query rows */
      /* Lookup row **/ +1 +
      /* Rollup query rows (children) **/ rollups.size() +
      /* Master query rows (parents) */ accounts.size(),
      Limits.getQueryRows() - queryRows
    );

    // Assert rollups are still ok
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
  }

  @IsTest
  private static void testJobRecordCleanedUp() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = false;
    rollupSummaryAccount.CalculationMode__c = ''Realtime'';
    insert rollupSummaryAccount;

    // Test default behaviour
    Test.startTest();
    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummaryAccount
    );
    RollupCalculateController controller = new RollupCalculateController(
      standardController
    );
    controller.runCalculateJob();
    Test.stopTest();

    // Tried to run
    System.assertEquals(
      0,
      Database.countQuery(''select Count() from LookupRollupCalculateJob__c'')
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/619
   **/
  @IsTest
  private static void testUserRollup() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''User'';
    rollupSummaryAccount.ChildObject__c = ''Account'';
    rollupSummaryAccount.RelationShipField__c = ''OwnerId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Name'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummaryAccount.AggregateResultField__c = ''EmployeeNumber'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Process Builder'';
    insert rollupSummaryAccount;

    // Test default behaviour
    Test.startTest();
    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummaryAccount
    );
    RollupCalculateController controller = new RollupCalculateController(
      standardController
    );
    controller.runCalculateJob();
    Test.stopTest();

    // Tried to run
    System.assertEquals(
      0,
      Database.countQuery(''select Count() from LookupRollupCalculateJob__c'')
    );
  }
}','3337480864.0','False','RollupCalculateControllerTest','6265','Active');
INSERT INTO "ApexClass" VALUES(12,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Job recaculates a given rollup for all master records
 **/
public with sharing class RollupCalculateJob implements Database.Batchable<sObject> {
  private String lookupId;
  private String masterWhereClause;

  public RollupCalculateJob(String lookupId) {
    this.lookupId = lookupId;
  }

  public RollupCalculateJob(String lookupId, String masterWhereClause) {
    this.lookupId = lookupId;
    this.masterWhereClause = masterWhereClause;
  }

  public Database.QueryLocator start(Database.BatchableContext BC) {
    // Query all the parent records as per the lookup definition
    return RollupService.masterRecordsAsQueryLocator(
      lookupId,
      masterWhereClause
    );
  }

  public void execute(
    Database.BatchableContext BC,
    List<sObject> masterRecords
  ) {
    try {
      // Update the master records as per the lookup definition
      RollupService.updateMasterRollups(
        new Set<String>{ lookupId },
        new Map<Id, Sobject>(masterRecords).keySet()
      );
    } catch (Exception e) {
      // Ids in scope
      List<String> ids = new List<String>();
      for (Id recordId : new Map<Id, SObject>(masterRecords).keySet()) {
        ids.add(recordId);
      }
      // Retrieve organization info to put in the email
      Organization org = [SELECT Id, Name FROM Organization];

      // Errors are emailed to the user that scheduled this job
      Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
      mail.setToAddresses(new List<String>{ UserInfo.getUserId() });
      mail.setSubject(
        String.format(
          ''Apex job {0} failed to update rollups in {1} ({2})'',
          new List<String>{ BC.getJobId(), org.Name, org.Id }
        )
      );
      mail.setPlainTextBody(
        String.format(
          ''Error: {0}. Parent record Ids {1}'',
          new List<String>{ e.getMessage(), String.join(ids, '','') }
        )
      );
      Messaging.sendEmail(new List<Messaging.SingleEmailMessage>{ mail });
    }
  }

  public void finish(Database.BatchableContext BC) {
    // Clear the Job Id which was preventing another calculate job running while this one was running
    RollupService.clearCalculateJobId(new Set<String>{ lookupId });
  }
}','3496928269.0','True','RollupCalculateJob','1783','Active');
INSERT INTO "ApexClass" VALUES(13,'57.0','public with sharing class RollupCalculateJobSchedulable implements Schedulable {
  private String rollupRecordId;
  private String masterWhereClause;

  public RollupCalculateJobSchedulable(
    String rollupRecordId,
    String masterWhereClause
  ) {
    this.rollupRecordId = rollupRecordId;
    this.masterWhereClause = masterWhereClause;
  }

  public void execute(SchedulableContext sc) {
    try {
      // Enqueue the job to recalcualte the given rollup parent records
      RollupService.runJobToCalculate(rollupRecordId, masterWhereClause);
    } catch (Exception e) {
      // Resolve the name of this job
      Id triggerId = sc.getTriggerId();
      Map<Id, String> jobNameByTriggerId = new CronJobDetailsSelector()
        .selectJobNameByCronTriggerId(new Set<Id>{ triggerId });
      String jobRef = jobNameByTriggerId.size() == 0
        ? ''id '' + triggerId
        : ''named '' + jobNameByTriggerId.get(triggerId) + '' ('' + triggerId + '')'';
      // Errors are emailed to the user that scheduled this job
      Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
      mail.setToAddresses(new List<String>{ UserInfo.getUserId() });
      mail.setSubject(
        String.format(
          ''Apex scheduled job {0} failed to run rolllup'',
          new List<String>{ jobRef }
        )
      );
      mail.setPlainTextBody(
        String.format(
          ''Error: {0} '' +
          ''Review the error, rollup definition and/or delete the Apex Scheduled job under Setup. '' +
          ''Check if the rollup still exists via the Manage Rollup Summaries and/or Lookup Rollup Summaries tabs. '',
          new List<String>{ e.getMessage() }
        )
      );
      Messaging.sendEmail(new List<Messaging.SingleEmailMessage>{ mail });
    }
  }
}','1121618001.0','False','RollupCalculateJobSchedulable','1597','Active');
INSERT INTO "ApexClass" VALUES(14,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Handles the Manage Trigger and Calculate Custom Buttons
 **/
public with sharing class RollupController {
  public static String API_VERSION = ''51.0'';

  public String ZipData { get; set; }

  public MetadataService.AsyncResult AsyncResult { get; private set; }

  public RollupSummary RollupSummary { get; set; }

  public String RollupTriggerName { get; set; }

  public String RollupTriggerTestName { get; set; }

  public String RollupParentTriggerName { get; set; }

  public String RollupParentTriggerTestName { get; set; }

  public Boolean Deployed { get; set; }

  public Boolean ParentMergeable { get; set; }

  public Boolean ParentTriggerRequired { get; set; }

  public ApexTrigger RollupTrigger { get; private set; }

  public ApexClass RollupTriggerTest { get; private set; }

  public ApexTrigger RollupParentTrigger { get; private set; }

  public ApexClass RollupParentTriggerTest { get; private set; }

  public Integer deployCount;

  public Boolean MetadataConnectionError { get; set; }

  public RollupController(ApexPages.StandardController standardController) {
    // Query Lookup Rollup Summary record
    this(
      new RollupSummariesSelector(true, true)
        .selectById(new Set<String>{ (String) standardController.getId() })[0]
    );
  }

  @TestVisible
  private RollupController(RollupSummary rollupSummary) {
    this.RollupSummary = rollupSummary;

    // Generate names for test and triggers to deploy / undeploy
    RollupTriggerName = RollupSummaries.makeTriggerName(RollupSummary);
    RollupTriggerTestName = RollupSummaries.makeTriggerTestName(RollupSummary);
    RollupParentTriggerName = RollupSummaries.makeParentTriggerName(
      RollupSummary
    );
    RollupParentTriggerTestName = RollupSummaries.makeParentTriggerTestName(
      RollupSummary
    );

    // Does the parent object support merge?
    Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
    SObjectType parentObjectType = gd.get(RollupSummary.ParentObject);
    ParentTriggerRequired = ParentMergeable = parentObjectType.getDescribe()
      .isMergeable();

    // Initialise view state
    init();
  }

  public String getPackageXml() {
    if (Deployed)
      // package.xml for undeploy
      return ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<Package xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<version>'' +
        API_VERSION +
        ''</version>'' +
        ''</Package>'';
    else
      // package.xml for deploy
      return ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<Package xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<types>'' +
        ''<members>'' +
        RollupTriggerName +
        ''</members>'' +
        ''<name>ApexTrigger</name>'' +
        ''</types>'' +
        ''<types>'' +
        ''<members>'' +
        RollupTriggerTestName +
        ''</members>'' +
        ''<name>ApexClass</name>'' +
        ''</types>'' +
        (ParentTriggerRequired
          ? (''<types>'' +
            ''<members>'' +
            RollupParentTriggerName +
            ''</members>'' +
            ''<name>ApexTrigger</name>'' +
            ''</types>'' +
            ''<types>'' +
            ''<members>'' +
            RollupParentTriggerTestName +
            ''</members>'' +
            ''<name>ApexClass</name>'' +
            ''</types>'')
          : '''') +
        ''<version>'' +
        API_VERSION +
        ''</version>'' +
        ''</Package>'';
  }

  public String getDestructiveChangesXml() {
    return ''<?xml version="1.0" encoding="UTF-8"?>'' +
      ''<Package xmlns="http://soap.sforce.com/2006/04/metadata">'' +
      ''<types>'' +
      ''<members>'' +
      RollupTriggerName +
      ''</members>'' +
      ''<name>ApexTrigger</name>'' +
      ''</types>'' +
      ''<types>'' +
      ''<members>'' +
      RollupTriggerTestName +
      ''</members>'' +
      ''<name>ApexClass</name>'' +
      ''</types>'' +
      (ParentTriggerRequired
        ? (''<types>'' +
          ''<members>'' +
          RollupParentTriggerName +
          ''</members>'' +
          ''<name>ApexTrigger</name>'' +
          ''</types>'' +
          ''<types>'' +
          ''<members>'' +
          RollupParentTriggerTestName +
          ''</members>'' +
          ''<name>ApexClass</name>'' +
          ''</types>'')
        : '''') +
      ''<version>'' +
      API_VERSION +
      ''</version>'' +
      ''</Package>'';
  }

  /**
   * CHILD OBJECT CODE
   **/

  public String getTriggerTestCodeMetadata() {
    return ''<?xml version="1.0" encoding="UTF-8"?>'' +
      ''<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">'' +
      ''<apiVersion>'' +
      API_VERSION +
      ''</apiVersion>'' +
      ''<status>Active</status>'' +
      ''</ApexClass>'';
  }

  public String getTriggerTestCode() {
    if (Deployed && RollupTriggerTest != null)
      // Display currently deployed code for confirmation
      return RollupTriggerTest.Body;
    else {
      // Deploy generated code
      return ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''@IsTest\n'' +
        ''private class '' +
        RollupTriggerTestName +
        ''\n'' +
        ''{\n'' +
        (RollupSummary.TestCodeSeeAllData == true
          ? ''    @IsTest(SeeAllData=true)\n''
          : ''    @IsTest\n'') +
        ''    private static void testTrigger()\n'' +
        ''    {\n'' +
        ((RollupSummary.TestCode != null &&
          RollupSummary.TestCode.length() > 0)
          ? RollupSummary.TestCode + ''\n''
          : (''        // Force the '' +
            RollupTriggerName +
            '' to be invoked, fails the test if org config or other Apex code prevents this.\n'' +
            ''        '' +
            Utilities.classPrefix() +
            ''RollupService.testHandler(new '' +
            RollupSummary.ChildObject +
            ''());\n'')) +
        ''    }\n'' +
        ''}'';
    }
  }

  public String getTriggerCodeMetadata() {
    return ''<?xml version="1.0" encoding="UTF-8"?>'' +
      ''<ApexTrigger xmlns="http://soap.sforce.com/2006/04/metadata">'' +
      ''<apiVersion>'' +
      API_VERSION +
      ''</apiVersion>'' +
      ''<status>Active</status>'' +
      ''</ApexTrigger>'';
  }

  public String getTriggerCode() {
    if (Deployed && RollupTrigger != null) {
      // Display currently deployed code for confirmation
      return RollupTrigger.Body;
    } else {
      // Namespace?
      String namespace = Utilities.namespace();
      // Deploy generated code
      return ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''trigger '' +
        RollupTriggerName +
        '' on '' +
        RollupSummary.ChildObject +
        ''\n'' +
        ''    (before delete, before insert, before update, after delete, after insert, after undelete, after update)\n'' +
        ''{\n'' +
        ''    '' +
        (namespace.length() > 0 ? namespace + ''.'' : '''') +
        ''RollupService.triggerHandler('' +
        RollupSummary.ChildObject +
        ''.SObjectType);\n'' +
        ''}\n'';
    }
  }

  /**
   * PARENT OBJECT CODE
   **/

  public String getParentTriggerTestCodeMetadata() {
    return ''<?xml version="1.0" encoding="UTF-8"?>'' +
      ''<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">'' +
      ''<apiVersion>'' +
      API_VERSION +
      ''</apiVersion>'' +
      ''<status>Active</status>'' +
      ''</ApexClass>'';
  }

  public String getParentTriggerTestCode() {
    if (Deployed && RollupTriggerTest != null)
      // Display currently deployed code for confirmation
      return RollupParentTriggerTest.Body;
    else {
      // Namespace?
      String namespace = Utilities.namespace();
      // Deploy generated code
      return ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''@IsTest\n'' +
        ''private class '' +
        RollupParentTriggerTestName +
        ''\n'' +
        ''{\n'' +
        (RollupSummary.TestCodeSeeAllData == true
          ? ''    @IsTest(SeeAllData=true)\n''
          : ''    @IsTest\n'') +
        ''    private static void testTrigger()\n'' +
        ''    {\n'' +
        ((RollupSummary.TestCodeParent != null &&
          RollupSummary.TestCodeParent.length() > 0)
          ? RollupSummary.TestCodeParent + ''\n''
          : (''        // Force the '' +
            RollupTriggerName +
            '' to be invoked, fails the test if org config or other Apex code prevents this.\n'' +
            ''        '' +
            (namespace.length() > 0 ? namespace + ''.'' : '''') +
            ''RollupService.testHandler(new '' +
            RollupSummary.ParentObject +
            ''());\n'')) +
        ''    }\n'' +
        ''}'';
    }
  }

  public String getParentTriggerCodeMetadata() {
    return ''<?xml version="1.0" encoding="UTF-8"?>'' +
      ''<ApexTrigger xmlns="http://soap.sforce.com/2006/04/metadata">'' +
      ''<apiVersion>'' +
      API_VERSION +
      ''</apiVersion>'' +
      ''<status>Active</status>'' +
      ''</ApexTrigger>'';
  }

  public String getParentTriggerCode() {
    if (Deployed && RollupTrigger != null) {
      // Display currently deployed code for confirmation
      return RollupParentTrigger.Body;
    } else {
      // Namespace?
      String namespace = Utilities.namespace();
      // Deploy generated code
      return ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''trigger '' +
        RollupParentTriggerName +
        '' on '' +
        RollupSummary.ParentObject +
        ''\n'' +
        ''    (before delete, before insert, before update, after delete, after insert, after undelete, after update)\n'' +
        ''{\n'' +
        ''    '' +
        (namespace.length() > 0 ? namespace + ''.'' : '''') +
        ''RollupService.triggerHandler();\n'' +
        ''}\n'';
    }
  }

  public PageReference deployZip() {
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        Deployed ? ''Removing...'' : ''Deploying...''
      )
    );

    // Deploy zip file posted back from the page action function
    MetadataService.MetadataPort service = createService();
    MetadataService.DeployOptions deployOptions = new MetadataService.DeployOptions();
    deployOptions.testLevel = ''RunSpecifiedTests'';
    deployOptions.runTests = new List<String>{ RollupTriggerTestName };
    if (ParentTriggerRequired) {
      deployOptions.runTests.add(RollupParentTriggerTestName);
    }
    deployOptions.allowMissingFiles = false;
    deployOptions.autoUpdatePackage = false;
    deployOptions.checkOnly = false;
    deployOptions.ignoreWarnings = false;
    deployOptions.performRetrieve = false;
    deployOptions.purgeOnDelete = false;
    deployOptions.rollbackOnError = true;
    deployOptions.singlePackage = true;
    AsyncResult = service.deploy(ZipData, DeployOptions);
    return null;
  }

  public PageReference checkAsyncRequest() {
    // Check the status of the retrieve request
    MetadataService.MetadataPort service = createService();
    MetadataService.DeployResult deployResult = service.checkDeployStatus(
      AsyncResult.Id,
      true
    );
    if (deployResult.done) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          Deployed ? ''Remove complete.'' : ''Deployment complete.''
        )
      );

      // Deployment errors?
      if (
        deployResult.details != null &&
        deployResult.details.componentFailures != null
      )
        for (
          MetadataService.DeployMessage deployMessage : deployResult.details.componentFailures
        )
          if (deployMessage.problem != null)
            ApexPages.addMessage(
              new ApexPages.Message(
                ApexPages.Severity.Error,
                deployMessage.fileName +
                '' (Line: '' +
                deployMessage.lineNumber +
                '': Column:'' +
                deployMessage.columnNumber +
                '') : '' +
                deployMessage.problem
              )
            );
      // Test errors?
      MetadataService.RunTestsResult runTestResult = deployResult.details.runTestResult;
      if (runTestResult.numFailures > 0)
        for (
          MetadataService.RunTestFailure testFailure : runTestResult.failures
        )
          ApexPages.addMessage(
            new ApexPages.Message(
              ApexPages.Severity.Error,
              testFailure.name +
              ''.'' +
              testFailure.methodName +
              '' '' +
              testFailure.message +
              '' '' +
              testFailure.stackTrace
            )
          );
      // Code coverage warnings?
      if (runTestResult.codeCoverageWarnings != null)
        for (
          MetadataService.CodeCoverageWarning codeCoverageWarning : runTestResult.codeCoverageWarnings
        )
          ApexPages.addMessage(
            new ApexPages.Message(
              ApexPages.Severity.Warning,
              (codeCoverageWarning.namespace != null
                ? codeCoverageWarning.namespace + ''.''
                : '''') +
              codeCoverageWarning.name +
              '':'' +
              codeCoverageWarning.message
            )
          );

      AsyncResult = null;

      // If this was an undeploy and was successful?
      if (Deployed && !ApexPages.hasMessages(ApexPages.Severity.Error)) {
        // Determine active rollups for this child and deactivate them
        List<RollupSummary> rollups = new RollupSummariesSelector()
          .selectActiveByChildObject(
            RollupSummaries.CalculationMode.Realtime,
            new Set<String>{ RollupSummary.ChildObject }
          );
        List<LookupRollupSummary__c> recordsToUpdate = new List<LookupRollupSummary__c>();
        for (RollupSummary rollup : rollups) {
          // TODO: Can only auto deactivate Custom Object based rollups
          if (rollup.Record instanceof LookupRollupSummary__c) {
            rollup.Active = false;
            recordsToUpdate.add((LookupRollupSummary__c) rollup.Record);
          }
        }
        update recordsToUpdate;
      }

      // Initialise view state to try again
      init();
    } else {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          (Deployed ? ''Removing...'' : ''Deploying...'') +
          ''.''.repeat(deployCount++)
        )
      );
    }
    return null;
  }

  private void init() {
    // Metadata API connection?
    MetadataConnectionError = !RollupService.checkMetadataAPIConnection();
    if (MetadataConnectionError) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Error,
          ''Salesforce Metadata API connection failure, click the link below to configure.''
        )
      );
      return;
    }

    // Already deployed?
    Set<String> triggerNames = new Set<String>{ RollupTriggerName };
    Set<String> testNames = new Set<String>{ RollupTriggerTestName };
    if (ParentMergeable) {
      triggerNames.add(RollupParentTriggerName);
      testNames.add(RollupParentTriggerTestName);
    }
    Map<String, ApexTrigger> apexTriggers = new ApexTriggersSelector()
      .selectByName(triggerNames);
    Map<String, ApexClass> apexClasses = new ApexClassesSelector()
      .selectByName(testNames);
    Deployed =
      apexTriggers.containsKey(RollupTriggerName) &&
      apexClasses.containsKey(RollupTriggerTestName);
    RollupTrigger = Deployed ? apexTriggers.get(RollupTriggerName) : null;
    RollupTriggerTest = Deployed
      ? apexClasses.get(RollupTriggerTestName)
      : null;
    RollupParentTrigger = Deployed
      ? apexTriggers.get(RollupParentTriggerName)
      : null;
    RollupParentTriggerTest = Deployed
      ? apexClasses.get(RollupParentTriggerTestName)
      : null;
    ParentTriggerRequired = Deployed
      ? RollupParentTrigger != null && RollupParentTriggerTest != null
      : ParentTriggerRequired;
    deployCount = 0;

    // Deprication warning
    if (RollupSummary.Record instanceof LookupRollupSummary__c) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Warning,
          ''Use of the Lookup Rollup Summaries tab is still functional but no longer being enhanced. Consider using the Manage Lookup Rollup Summaries tab.''
        )
      );
    }

    // Message to confirm current status
    if (Deployed) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Apex Trigger <b>'' +
          RollupTriggerName +
          ''</b> is installed.''
        )
      );
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Apex Class <b>'' +
          RollupTriggerTestName +
          ''</b> is installed.''
        )
      );
      if (RollupParentTrigger != null) {
        ApexPages.addMessage(
          new ApexPages.Message(
            ApexPages.Severity.Info,
            ''Apex Trigger <b>'' +
            RollupParentTriggerName +
            ''</b> is installed.''
          )
        );
      }
      if (RollupParentTriggerTest != null) {
        ApexPages.addMessage(
          new ApexPages.Message(
            ApexPages.Severity.Info,
            ''Apex Trigger <b>'' +
            RollupParentTriggerTestName +
            ''</b> is installed.''
          )
        );
      }
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Click <b>Remove</b> to uninstall the Apex Trigger and Apex Class for this child object.''
        )
      );
    } else {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Click <b>Deploy</b> to install the Apex Trigger and Apex Class for this child object.''
        )
      );
    }
  }

  private static MetadataService.MetadataPort createService() {
    MetadataService.MetadataPort service = new MetadataService.MetadataPort();
    service.SessionHeader = new MetadataService.SessionHeader_element();
    service.SessionHeader.sessionId = UserInfo.getSessionId();
    return service;
  }
}','3929577378.0','True','RollupController','16811','Active');
INSERT INTO "ApexClass" VALUES(15,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupControllerTest {
  private testMethod static void testDeployedStatus() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    System.runAs(setupTestUser()) {
      // Metadata API web Service mock implementation for tests
      Test.setMock(WebServiceMock.class, new WebServiceMockImpl());

      // Test data
      LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
      rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
      rollupSummaryA.ParentObject__c = ''Account'';
      rollupSummaryA.ChildObject__c = ''Opportunity'';
      rollupSummaryA.RelationShipField__c = ''AccountId'';
      rollupSummaryA.RelationShipCriteria__c = null;
      rollupSummaryA.FieldToAggregate__c = ''Amount'';
      rollupSummaryA.AggregateOperation__c = ''Sum'';
      rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
      rollupSummaryA.Active__c = true;
      rollupSummaryA.CalculationMode__c = ''Realtime'';
      LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
      rollupSummaryB.Name = ''Total Opportunities into Number Of Locations on Accountt'';
      rollupSummaryB.ParentObject__c = ''Account'';
      rollupSummaryB.ChildObject__c = ''Opportunity'';
      rollupSummaryB.RelationShipField__c = ''AccountId'';
      rollupSummaryB.RelationShipCriteria__c = null;
      rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
      rollupSummaryB.AggregateOperation__c = ''Count'';
      rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
      rollupSummaryB.Active__c = true;
      rollupSummaryB.CalculationMode__c = ''Realtime'';
      insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

      // Open test context, permits callouts following DML
      Test.startTest();

      // Assert initial state of controller when the trigger for the child object is deployed
      RollupController controller = new RollupController(
        new ApexPages.StandardController(rollupSummaryA)
      );
      System.assertEquals(true, controller.Deployed);
      System.assertEquals(
        ''UnpackagedRollupServiceTestTrigger'',
        controller.RollupTriggerName
      );
      System.assertEquals(
        ''RollupSummariesTest'',
        controller.RollupTriggerTestName
      );
      System.assertEquals(
        ''UnpackagedRollupServiceTestTrigger'',
        controller.RollupTrigger.Name
      );
      System.assertEquals(
        ''RollupSummariesTest'',
        controller.RollupTriggerTest.Name
      );
      System.assertEquals(
        controller.RollupTrigger.Body,
        controller.getTriggerCode()
      );
      System.assertEquals(
        controller.RollupTriggerTest.Body,
        controller.getTriggerTestCode()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<Package xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<version>'' +
        RollupController.API_VERSION +
        ''</version>'' +
        ''</Package>'',
        controller.getPackageXml()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<Package xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<types>'' +
        ''<members>'' +
        controller.RollupTriggerName +
        ''</members>'' +
        ''<name>ApexTrigger</name>'' +
        ''</types>'' +
        ''<types>'' +
        ''<members>'' +
        controller.RollupTriggerTestName +
        ''</members>'' +
        ''<name>ApexClass</name>'' +
        ''</types>'' +
        ''<version>'' +
        RollupController.API_VERSION +
        ''</version>'' +
        ''</Package>'',
        controller.getDestructiveChangesXml()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<ApexTrigger xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<apiVersion>'' +
        RollupController.API_VERSION +
        ''</apiVersion>'' +
        ''<status>Active</status>'' +
        ''</ApexTrigger>'',
        controller.getTriggerCodeMetadata()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<apiVersion>'' +
        RollupController.API_VERSION +
        ''</apiVersion>'' +
        ''<status>Active</status>'' +
        ''</ApexClass>'',
        controller.getTriggerTestCodeMetadata()
      );

      // Undeploy (no need to emulate the zip contents prepared by the client as mock service does not bother with this)
      controller.deployZip();

      // Check deployment (mock service impl emulates a positive response)
      // TODO: Revist this, broken since started making HTTP callouts in the init function
      // controller.checkAsyncRequest();

      Test.stopTest();

      // Assert Active__c is false on lookups referencing this child object
      // TODO: Revist this, broken since started making HTTP callouts in the init function
      /*
			List<LookupRollupSummary__c> lookups = [select Active__c from LookupRollupSummary__c];
			System.assertEquals(false, lookups[0].Active__c);
			System.assertEquals(false, lookups[1].Active__c);
			*/
    }
  }

  private testMethod static void testNotDeployedStatus() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    System.runAs(setupTestUser()) {
      // Metadata API web Service mock implementation for tests
      Test.setMock(WebServiceMock.class, new WebServiceMockImpl());

      // Test data
      LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
      rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
      rollupSummary.ParentObject__c = ''Account'';
      rollupSummary.ChildObject__c = ''Contact'';
      rollupSummary.RelationShipField__c = ''AccountId'';
      rollupSummary.RelationShipCriteria__c = null;
      rollupSummary.FieldToAggregate__c = ''LastCURequestDate'';
      rollupSummary.AggregateOperation__c = ''Count'';
      rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
      rollupSummary.Active__c = false;
      rollupSummary.CalculationMode__c = ''Realtime'';
      insert rollupSummary;

      // Open test context, permits callouts following DML
      Test.startTest();

      // Assert initial state of controller when the trigger for the child object is deployed
      RollupController controller = new RollupController(
        new ApexPages.StandardController(rollupSummary)
      );
      System.assertEquals(false, controller.Deployed);
      System.assertEquals(null, controller.RollupTrigger);
      System.assertEquals(null, controller.RollupTriggerTest);
      System.assertEquals(
        ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''trigger '' +
        controller.RollupTriggerName +
        '' on '' +
        rollupSummary.ChildObject__c +
        ''\n'' +
        ''    (before delete, before insert, before update, after delete, after insert, after undelete, after update)\n'' +
        ''{\n'' +
        ''    '' +
        Utilities.classPrefix() +
        ''RollupService.triggerHandler(Contact.SObjectType);\n'' +
        ''}\n'',
        controller.getTriggerCode()
      );
      System.assertEquals(
        ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''@IsTest\n'' +
        ''private class '' +
        controller.RollupTriggerTestName +
        ''\n'' +
        ''{\n'' +
        ''    @IsTest\n'' +
        ''    private static void testTrigger()\n'' +
        ''    {\n'' +
        ''        // Force the '' +
        controller.RollupTriggerName +
        '' to be invoked, fails the test if org config or other Apex code prevents this.\n'' +
        ''        '' +
        Utilities.classPrefix() +
        ''RollupService.testHandler(new '' +
        rollupSummary.ChildObject__c +
        ''());\n'' +
        ''    }\n'' +
        ''}'',
        controller.getTriggerTestCode()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<Package xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<types>'' +
        ''<members>'' +
        controller.RollupTriggerName +
        ''</members>'' +
        ''<name>ApexTrigger</name>'' +
        ''</types>'' +
        ''<types>'' +
        ''<members>'' +
        controller.RollupTriggerTestName +
        ''</members>'' +
        ''<name>ApexClass</name>'' +
        ''</types>'' +
        ''<types>'' +
        ''<members>'' +
        controller.RollupParentTriggerName +
        ''</members>'' +
        ''<name>ApexTrigger</name>'' +
        ''</types>'' +
        ''<types>'' +
        ''<members>'' +
        controller.RollupParentTriggerTestName +
        ''</members>'' +
        ''<name>ApexClass</name>'' +
        ''</types>'' +
        ''<version>'' +
        RollupController.API_VERSION +
        ''</version>'' +
        ''</Package>'',
        controller.getPackageXml()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<ApexTrigger xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<apiVersion>'' +
        RollupController.API_VERSION +
        ''</apiVersion>'' +
        ''<status>Active</status>'' +
        ''</ApexTrigger>'',
        controller.getTriggerCodeMetadata()
      );
      System.assertEquals(
        ''<?xml version="1.0" encoding="UTF-8"?>'' +
        ''<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">'' +
        ''<apiVersion>'' +
        RollupController.API_VERSION +
        ''</apiVersion>'' +
        ''<status>Active</status>'' +
        ''</ApexClass>'',
        controller.getTriggerTestCodeMetadata()
      );

      Test.stopTest();
    }
  }

  private testMethod static void testWithCustomTestCode() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    System.runAs(setupTestUser()) {
      // Metadata API web Service mock implementation for tests
      Test.setMock(WebServiceMock.class, new WebServiceMockImpl());

      // Test data
      LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
      rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
      rollupSummary.ParentObject__c = ''Account'';
      rollupSummary.ChildObject__c = ''Contact'';
      rollupSummary.RelationShipField__c = ''AccountId'';
      rollupSummary.RelationShipCriteria__c = null;
      rollupSummary.FieldToAggregate__c = ''LastCURequestDate'';
      rollupSummary.AggregateOperation__c = ''Count'';
      rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
      rollupSummary.Active__c = false;
      rollupSummary.CalculationMode__c = ''Realtime'';
      rollupSummary.TestCode__c = ''System.assertEquals(1,1);'';
      rollupSummary.TestCodeSeeAllData__c = true;
      insert rollupSummary;

      // Open test context, permits callouts following DML
      Test.startTest();

      // Assert initial state of controller when the trigger for the child object is deployed
      RollupController controller = new RollupController(
        new ApexPages.StandardController(rollupSummary)
      );
      System.assertEquals(
        ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''@IsTest\n'' +
        ''private class '' +
        controller.RollupTriggerTestName +
        ''\n'' +
        ''{\n'' +
        ''    @IsTest(SeeAllData=true)\n'' +
        ''    private static void testTrigger()\n'' +
        ''    {\n'' +
        ''System.assertEquals(1,1);\n'' +
        ''    }\n'' +
        ''}'',
        controller.getTriggerTestCode()
      );
    }
  }

  private testMethod static void testWithCustomParentTestCode() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    System.runAs(setupTestUser()) {
      // Metadata API web Service mock implementation for tests
      Test.setMock(WebServiceMock.class, new WebServiceMockImpl());

      // Custom Metadata test data
      LookupRollupSummary2__mdt rollupSummary = new LookupRollupSummary2__mdt();
      Map<String, Object> fields = (Map<String, Object>) JSON.deserializeUntyped(
        JSON.serializePretty(rollupSummary)
      );
      fields.put(
        LookupRollupSummary2__mdt.Label.getDescribe().getName(),
        ''Total Opportunities greater than 200 into Annual Revenue on Account''
      );
      fields.put(
        LookupRollupSummary2__mdt.DeveloperName.getDescribe().getName(),
        ''AccountRollup''
      );
      fields.put(
        LookupRollupSummary2__mdt.ParentObject__c.getDescribe().getName(),
        ''Account''
      );
      fields.put(
        LookupRollupSummary2__mdt.ChildObject__c.getDescribe().getName(),
        ''Contact''
      );
      fields.put(
        LookupRollupSummary2__mdt.RelationShipField__c.getDescribe().getName(),
        ''AccountId''
      );
      fields.put(
        LookupRollupSummary2__mdt.RelationShipCriteria__c.getDescribe()
          .getName(),
        null
      );
      fields.put(
        LookupRollupSummary2__mdt.FieldToAggregate__c.getDescribe().getName(),
        ''LastCURequestDate''
      );
      fields.put(
        LookupRollupSummary2__mdt.AggregateOperation__c.getDescribe().getName(),
        ''Count''
      );
      fields.put(
        LookupRollupSummary2__mdt.AggregateResultField__c.getDescribe()
          .getName(),
        ''AnnualRevenue''
      );
      fields.put(
        LookupRollupSummary2__mdt.Active__c.getDescribe().getName(),
        false
      );
      fields.put(
        LookupRollupSummary2__mdt.CalculationMode__c.getDescribe().getName(),
        ''Realtime''
      );
      fields.put(
        LookupRollupSummary2__mdt.TestCodeParent__c.getDescribe().getName(),
        ''System.assertEquals(1,1);''
      );
      fields.put(
        LookupRollupSummary2__mdt.TestCodeSeeAllData__c.getDescribe().getName(),
        true
      );
      rollupSummary = (LookupRollupSummary2__mdt) JSON.deserialize(
        JSON.serialize(fields),
        LookupRollupSummary2__mdt.class
      );

      // Open test context, permits callouts following DML
      Test.startTest();

      // Assert initial state of controller when the trigger for the child object is deployed
      RollupController controller = new RollupController(
        new RollupSummary(rollupSummary)
      );
      System.assertEquals(
        ''/**\n'' +
        '' * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)\n'' +
        '' **/\n'' +
        ''@IsTest\n'' +
        ''private class '' +
        controller.RollupParentTriggerTestName +
        ''\n'' +
        ''{\n'' +
        ''    @IsTest(SeeAllData=true)\n'' +
        ''    private static void testTrigger()\n'' +
        ''    {\n'' +
        ''System.assertEquals(1,1);\n'' +
        ''    }\n'' +
        ''}'',
        controller.getParentTriggerTestCode()
      );
    }
  }

  /**
   * Metadata API web service mock class for tests above
   **/
  private class WebServiceMockImpl implements WebServiceMock {
    public void doInvoke(
      Object stub,
      Object request,
      Map<String, Object> response,
      String endpoint,
      String soapAction,
      String requestName,
      String responseNS,
      String responseName,
      String responseType
    ) {
      if (request instanceof MetadataService.deploy_element) {
        MetadataService.deployResponse_element response_x = new MetadataService.deployResponse_element();
        response_x.result = new MetadataService.AsyncResult();
        response_x.result.id = ''someid'';
        response_x.result.done = true;
        response_x.result.state = ''Complete'';
        response.put(''response_x'', response_x);
      } else if (request instanceof MetadataService.checkDeployStatus_element) {
        System.assertEquals(
          ''someid'',
          ((MetadataService.checkDeployStatus_element) request).asyncProcessId
        );
        MetadataService.checkDeployStatusResponse_element response_x = new MetadataService.checkDeployStatusResponse_element();
        response_x.result = new MetadataService.DeployResult();
        response_x.result.details = new MetadataService.DeployDetails();
        response_x.result.details.runTestResult = new MetadataService.RunTestsResult();
        response_x.result.details.runTestResult.numFailures = 0;
        response_x.result.details.componentFailures = new List<MetadataService.DeployMessage>();
        response.put(''response_x'', response_x);
      } else if (request instanceof MetadataService.checkDeployStatus_element) {
        System.assertEquals(
          ''someid'',
          ((MetadataService.checkDeployStatus_element) request).asyncProcessId
        );
        MetadataService.checkDeployStatusResponse_element response_x = new MetadataService.checkDeployStatusResponse_element();
        response_x.result = new MetadataService.DeployResult();
        response_x.result.details = new MetadataService.DeployDetails();
        response_x.result.details.runTestResult = new MetadataService.RunTestsResult();
        response_x.result.details.runTestResult.numFailures = 0;
        response_x.result.details.componentFailures = new List<MetadataService.DeployMessage>();
        response.put(''response_x'', response_x);
      } else if (request instanceof MetadataService.listMetadata_element) {
        MetadataService.listMetadataResponse_element response_x = new MetadataService.listMetadataResponse_element();
        response_x.result = new List<MetadataService.FileProperties>();
        response.put(''response_x'', response_x);
      }
      return;
    }
  }

  static User setupTestUser() {
    //username global uniqueness is still enforced in tests
    //make sure we get something unique to avoid issues with parallel tests
    String uniqueness = DateTime.now() + '':'' + Math.random();
    uniqueness += new NullPointerException().getStackTraceString(); //includes the top level test method name without having to pass it

    // officially, there is no Read Only Profile anymore; 
    // its present for packaging org and scratch org support 
    List<Profile> profiles = [
      SELECT id, Name
      FROM Profile
      WHERE
        Name = ''Read Only''
        OR Name = ''ReadOnly''
        OR Name = ''Standard User''
      ORDER BY Name ASC
    ];
    system.assert(
      profiles.size() > 0,
      ''setupTestUser() requires either Read Only or Standard User Profile''
    );
    User result = new User(
      username = UserInfo.getUserId() +
        ''.'' +
        uniqueness.HashCode() +
        ''@'' +
        UserInfo.getOrganizationId() +
        ''.sfdcOrg'',
      alias = ''testExec'',
      email = ''apextests@example.com'',
      emailencodingkey = ''UTF-8'',
      lastname = ''Testing'',
      languagelocalekey = ''en_US'',
      localesidkey = ''en_US'',
      profileid = profiles[0].Id,
      timezonesidkey = ''America/Los_Angeles''
    );
    insert result;

    // Grant permissions to DLRS
    PermissionSetAssignment psa = new PermissionSetAssignment();
    psa.AssigneeId = result.Id;
    psa.PermissionSetId = [
      SELECT Id
      FROM PermissionSet
      WHERE Name = ''LookupRollupSummariesFull''
    ]
    .Id;
    insert psa;

    // Account permission set
    PermissionSet ps = new PermissionSet(Name = ''Account'', Label = ''Account'');
    insert ps;
    ObjectPermissions accountPerm = new ObjectPermissions(
      SobjectType = ''Account'',
      ParentId = ps.Id,
      PermissionsCreate = true,
      PermissionsDelete = true,
      PermissionsEdit = true,
      PermissionsRead = true
    );
    insert accountPerm;

    // Grant permissions to Account
    PermissionSetAssignment psa2 = new PermissionSetAssignment();
    psa2.AssigneeId = result.Id;
    psa2.PermissionSetId = ps.Id;
    insert psa2;

    return result;
  }
}','887751207.0','False','RollupControllerTest','17633','Active');
INSERT INTO "ApexClass" VALUES(16,'56.0','public with sharing class RollupDmlGuard {
  /**
   * Take a set of contexts and proposed changes
   * Filter down the records to only those that differ from the database
   */
  public List<SObject> getOnlyRecordsNeedingDml(
    List<LREngine.Context> contexts,
    Map<Id, SObject> records
  ) {
    DeclarativeLookupRollupSummaries__c configSettings = DeclarativeLookupRollupSummaries__c.getInstance();
    if (configSettings.DisableParentDMLCheck__c) {
      // config disables additional checks to validate DML is necessary,
      // return the list and behave as though they all need DML
      // this setting is to allow the org to avoid the SOQL cost of querying records
      // and the CPU time of performing the compare
      return records.values();
    }
    Map<Schema.SObjectType, Set<Schema.DescribeFieldResult>> parentTypeListOfFields = new Map<Schema.SObjectType, Set<Schema.DescribeFieldResult>>();
    // Collect parent objects and fields to query them from database
    Map<Schema.SObjectType, List<SObject>> masterRecordsByType = new Map<Schema.SObjectType, List<SObject>>();
    for (LREngine.Context ctx : contexts) {
      // stage object to be filled later
      masterRecordsByType.put(ctx.master, new List<SObject>());
      // build up list of parent objects and their fields
      if (!parentTypeListOfFields.containsKey(ctx.master)) {
        parentTypeListOfFields.put(
          ctx.master,
          new Set<Schema.DescribeFieldResult>()
        );
      }
      for (LREngine.RollupSummaryField f : ctx.fieldsToRoll) {
        parentTypeListOfFields.get(ctx.master).add(f.master);
      }
    }
    for (SObject obj : records.values()) {
      Schema.SObjectType t = obj.getSObjectType();
      masterRecordsByType.get(t).add(obj);
    }

    // take all parent records of a given type, pull their current state from the database and store it in a map
    Map<Schema.SObjectType, Map<Id, SObject>> parentsByType = new Map<Schema.SObjectType, Map<Id, SObject>>();
    for (Schema.SObjectType type : parentTypeListOfFields.keySet()) {
      parentsByType.put(
        type,
        getParentRecords(
          type,
          parentTypeListOfFields.get(type),
          masterRecordsByType.get(type)
        )
      );
    }

    // for each object type, compare the database values and the proposed values
    // if all values are equal, discard that proposed DML as unecessary
    List<SObject> masterRecordsToUpdate = new List<SObject>();
    for (Schema.SObjectType t : masterRecordsByType.keySet()) {
      masterRecordsToUpdate.addAll(
        filterParentRecords(masterRecordsByType.get(t), parentsByType.get(t))
      );
    }
    // return a list of all needed changes, might be empty
    return masterRecordsToUpdate;
  }

  /**
   * Retrieve a set of fields for a given SObject whose IDs are present in parents
   */
  private Map<Id, SObject> getParentRecords(
    Schema.SObjectType sobjectType,
    Set<Schema.DescribeFieldResult> fields,
    List<SObject> parents
  ) {
    // build a SOQL query and retrieve the parent records
    // return the parent records
    fflib_QueryFactory queryFactory = new fflib_QueryFactory(sobjectType)
      .selectField(''Id'');
    for (Schema.DescribeFieldResult f : fields) {
      queryFactory.selectField(f.getName());
    }
    queryFactory.setCondition(''Id IN :parents'');
    // Opting not to LOCK the parent records for this action
    // don''t lock them normally in these scenarios and concerned about
    // what adding a lock would do
    // at some future point we can add a setting to enable locking here if needed
    String query = queryFactory.toSOQL();
    return new Map<Id, SObject>(Database.query(query));
  }

  /**
   * compare two sets of SObjects, return records that are not identical
   * Favoring expectedParents for non-mutual items
   */
  private List<SObject> filterParentRecords(
    List<SObject> expectedParents,
    Map<Id, SObject> currentParents
  ) {
    List<SObject> parentsNeedingUpdate = new List<SObject>();

    for (SObject expP : expectedParents) {
      if (!currentParents.containsKey(expP.Id)) {
        // don''t know why this parent wasn''t pulled from the database, but assume it needs to be committed
        parentsNeedingUpdate.add(expP);
        continue;
      }
      // get all fields on the proposed change record
      Map<String, Object> fieldsMap = expP.getPopulatedFieldsAsMap();
      // pull the current database snapshot
      SObject curP = currentParents.get(expP.Id);
      // for each field on the proposed changes, see if that matches the DB value
      for (String key : fieldsMap.keySet()) {
        // if any of the values don''t match between objects
        // enqueue for DML
        if (expP.get(key) != curP.get(key)) {
          parentsNeedingUpdate.add(expP);
          break;
        }
      }
    }
    return parentsNeedingUpdate;
  }
}','2555379790.0','True','RollupDmlGuard','3048','Active');
INSERT INTO "ApexClass" VALUES(17,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Trigger bypass handler class that stores information regarding which rollups are to be ignored in a transaction.
 * The rollups in the specified set attribute are to be ignored by the rollup service.
 *
 * The bypass and removebypass method return the result of the default Set object operations.
 **/
public without sharing class BypassHandler {
  private static Set<String> bypassedRollups;

  /**
   * Initialize the set if necessary for adding rollups to the bypass list.
   */
  private static void init() {
    if (bypassedRollups == null) {
      bypassedRollups = new Set<String>();
    }
  }

  /**
   * Checks if the rollup is bypassed or not. Returns true if it is. False otherwise.
   */
  public static Boolean isBypassed(String handlerName) {
    return bypassedRollups != null && bypassedRollups.contains(handlerName);
  }

  /**
   * Adds a rollup to the bypassed rollups list.
   */
  public static Boolean bypass(String handlerName) {
    init();

    if (handlerName != null) {
      System.debug(
        LoggingLevel.INFO,
        ''DLRS trigger handler is now bypassed: '' + handlerName
      );
      return bypassedRollups.add(handlerName);
    }

    System.debug(
      LoggingLevel.WARN,
      ''Tried to add a rollup to the bypass list, but its name was null.''
    );

    return false;
  }

  /**
   * Clears the bypass for a single rollup.
   */
  public static Boolean clearBypass(String handlerName) {
    if (bypassedRollups != null && handlerName != null) {
      System.debug(
        LoggingLevel.INFO,
        ''DLRS trigger handler is no longer bypassed: '' + handlerName
      );
      return bypassedRollups.remove(handlerName);
    }

    System.debug(
      LoggingLevel.WARN,
      ''Tried to remove a rollup to the bypass list, but its name was null or it was not on the list at all.''
    );

    return false;
  }

  /**
   * Clears all bypasses, if any.
   */
  public static void clearAllBypasses() {
    if (bypassedRollups != null) {
      bypassedRollups.clear();
    }
  }
}','400422115.0','True','BypassHandler','1359','Active');
INSERT INTO "ApexClass" VALUES(18,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
@IsTest
private class BypassHandlerTest {
  @IsTest
  static void testApi() {
    String rollupUniqueName = ''SampleRollup'';
    Boolean bypassResult;

    Test.startTest();
    System.assertEquals(
      false,
      BypassHandler.isBypassed(rollupUniqueName),
      ''The rollup should not be bypassed yet.''
    );
    bypassResult = BypassHandler.bypass(rollupUniqueName);
    System.assert(
      bypassResult,
      ''Should have modified the bypassed rollups set.''
    );
    System.assertEquals(
      true,
      BypassHandler.isBypassed(rollupUniqueName),
      ''The rollup should be bypassed.''
    );
    bypassResult = BypassHandler.clearBypass(rollupUniqueName);
    System.assert(
      bypassResult,
      ''Should have modified the bypassed rollups set.''
    );
    System.assertEquals(
      false,
      BypassHandler.isBypassed(rollupUniqueName),
      ''The rollup should not be bypassed anymore.''
    );
    BypassHandler.bypass(rollupUniqueName);
    BypassHandler.clearAllBypasses();
    System.assertEquals(
      false,
      BypassHandler.isBypassed(rollupUniqueName),
      ''The rollup should not be bypassed anymore.''
    );

    bypassResult = BypassHandler.bypass(null);
    System.assertEquals(
      false,
      bypassResult,
      ''Should return "false" for a null rollup name.''
    );
    bypassResult = BypassHandler.clearBypass(null);
    System.assertEquals(
      false,
      bypassResult,
      ''Should return "false" for a null rollup name.''
    );
    Test.stopTest();
  }
}','2661824544.0','True','BypassHandlerTest','1510','Active');
INSERT INTO "ApexClass" VALUES(19,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public class CronJobDetailsSelector extends fflib_SObjectSelector {
  List<Schema.SObjectField> getSObjectFieldList() {
    return new List<Schema.SObjectField>{
      CronJobDetail.Id,
      CronJobDetail.JobType,
      CronJobDetail.Name
    };
  }

  Schema.SObjectType getSObjectType() {
    return AsyncApexJob.sObjectType;
  }

  public Map<Id, String> selectJobNameByCronTriggerId(Set<Id> triggerIds) {
    // Resolve the CronJobDetail record ids via CronTrigger
    Map<Id, String> jobNameByCronTriggerId = new Map<Id, String>();
    for (
      CronTrigger cronTrigger : Database.query(
        new fflib_QueryFactory(CronTrigger.SObjectType)
          .selectField(''CronJobDetail.Name'')
          .setCondition(''id in :triggerIds'')
          .toSOQL()
      )
    ) {
      jobNameByCronTriggerId.put(
        cronTrigger.Id,
        cronTrigger.CronJobDetail.Name
      );
    }
    return jobNameByCronTriggerId;
  }
}','1248701013.0','True','CronJobDetailsSelector','869','Active');
INSERT INTO "ApexClass" VALUES(20,'57.0','public with sharing class CronTriggersSelector extends fflib_SObjectSelector {
  public List<Schema.SObjectField> getSObjectFieldList() {
    return new List<Schema.SObjectField>{
      CronTrigger.CronExpression,
      CronTrigger.CronJobDetailId,
      CronTrigger.EndTime,
      CronTrigger.NextFireTime,
      CronTrigger.OwnerId,
      CronTrigger.PreviousFireTime,
      CronTrigger.StartTime,
      CronTrigger.State,
      CronTrigger.TimesTriggered,
      CronTrigger.TimeZoneSidKey
    };
  }

  public Schema.SObjectType getSObjectType() {
    return CronTrigger.sObjectType;
  }

  public List<CronTrigger> selectAllScheduledApex() {
    List<String> omittedStates = new List<String>{''DELETED''};

    List<CronTrigger> ct = Database.query(
      newQueryFactory()
        .selectfield(''CronJobDetail.Name'')
        .setCondition(''CronJobDetail.JobType = \''7\'' AND State NOT IN :omittedStates'')
        .tosoql()
    );

    return ct;
  }

  public List<CronTrigger> selectScheduledApexById(String id) {
    id = ''%'' + id + ''%'';

    List<CronTrigger> ct = Database.query(
      newQueryFactory()
        .selectfield(''CronJobDetail.Name'')
        .setCondition(''CronJobDetail.JobType = \''7\'' AND CronJobDetail.Name LIKE :id'')
        .setLimit(1)
        .tosoql()
    );

    return ct;
  }
}','545370278.0','True','CronTriggersSelector','1300','Active');
INSERT INTO "ApexClass" VALUES(21,'56.0','@IsTest
public class RollupDmlGuardTest {
  @IsTest
  static void testRollupDmlGuardChangeNeeded() {
    RollupDmlGuard g = new RollupDmlGuard();
    Account a = new Account(Name = ''Test'', NumberOfEmployees = 0);
    insert a;
    a = new Account(Id = a.Id, NumberOfEmployees = 0);

    List<LREngine.Context> ctxList = new List<LREngine.Context>();
    LREngine.Context ctx = new LREngine.Context(
      Account.SObjectType,
      Contact.SObjectType,
      Contact.AccountId.getDescribe()
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        Account.NumberOfEmployees.getDescribe(),
        Contact.Id.getDescribe(),
        LREngine.RollupOperation.Count
      )
    );
    ctxList.add(ctx);
    List<SObject> records = g.getOnlyRecordsNeedingDml(
      ctxList,
      new Map<Id, SObject>{ a.Id => a }
    );
    System.assertEquals(0, records.size());
  }

  @IsTest
  static void testRollupDmlGuardChangeNotNeeded() {
    RollupDmlGuard g = new RollupDmlGuard();
    Account a = new Account(Name = ''Test'', NumberOfEmployees = 1);
    insert a;
    a = new Account(Id = a.Id, NumberOfEmployees = 0);

    List<LREngine.Context> ctxList = new List<LREngine.Context>();
    LREngine.Context ctx = new LREngine.Context(
      Account.SObjectType,
      Contact.SObjectType,
      Contact.AccountId.getDescribe()
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        Account.NumberOfEmployees.getDescribe(),
        Contact.Id.getDescribe(),
        LREngine.RollupOperation.Count
      )
    );
    ctxList.add(ctx);
    List<SObject> records = g.getOnlyRecordsNeedingDml(
      ctxList,
      new Map<Id, SObject>{ a.Id => a }
    );
    System.assertEquals(1, records.size());
    System.assertEquals(a.Id, records[0].Id);
    System.assertEquals(0, a.NumberOfEmployees);
  }

  @IsTest
  static void testRollupGuardDisableViaSettings() {
    DeclarativeLookupRollupSummaries__c settings = new DeclarativeLookupRollupSummaries__c(
      DisableParentDMLCheck__c = true
    );
    insert settings;

    RollupDmlGuard g = new RollupDmlGuard();
    Account a = new Account(Name = ''Test'', NumberOfEmployees = 0);
    insert a;
    a = new Account(Id = a.Id, NumberOfEmployees = 0);

    List<LREngine.Context> ctxList = new List<LREngine.Context>();
    LREngine.Context ctx = new LREngine.Context(
      Account.SObjectType,
      Contact.SObjectType,
      Contact.AccountId.getDescribe()
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        Account.NumberOfEmployees.getDescribe(),
        Contact.Id.getDescribe(),
        LREngine.RollupOperation.Count
      )
    );
    ctxList.add(ctx);
    List<SObject> records = g.getOnlyRecordsNeedingDml(
      ctxList,
      new Map<Id, SObject>{ a.Id => a }
    );
    System.assertEquals(1, records.size());
    System.assertEquals(a.Id, records[0].Id);
    System.assertEquals(0, a.NumberOfEmployees);
  }
}','4076958589.0','True','RollupDmlGuardTest','2894','Active');
INSERT INTO "ApexClass" VALUES(22,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Processes chunks of Rollup Summary Schedule records on a scheduled basis
 **/
global with sharing class RollupJob implements Schedulable, Database.Batchable<sObject> {
  global void execute(SchedulableContext sc) {
    // Run the job to process the scheduled records for rolling up
    RollupService.runJobToProcessScheduledItems();
  }

  public Database.QueryLocator start(Database.BatchableContext BC) {
    // Query all the currently available scheduled records indicating records requiring rollups
    return new RollupSummaryScheduleItemsSelector().selectAllQueryLocator();
  }

  public void execute(
    Database.BatchableContext BC,
    List<sObject> rollupSummaryScheduleItems
  ) {
    try {
      // Process the given schedule item rollups
      RollupService.processScheduleItems(
        (List<LookupRollupSummaryScheduleItems__c>) rollupSummaryScheduleItems
      );
    } catch (Exception e) {
      // Ids in scope
      List<String> ids = new List<String>();
      for (
        Id recordId : new Map<Id, SObject>(rollupSummaryScheduleItems).keySet()
      ) {
        ids.add(recordId);
      }
      // Retrieve organization info to put in the email
      Organization org = [SELECT Id, Name FROM Organization];

      // Errors are emailed to the user that scheduled this job
      //  (note parent record update errors are routed via Lookup Rollup Summmary Log via the service code)
      Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
      mail.setToAddresses(new List<String>{ UserInfo.getUserId() });
      mail.setSubject(
        String.format(
          ''Scheduled Apex job {0} failed to update rollups in {1} ({2})'',
          new List<String>{ BC.getJobId(), org.Name, org.Id }
        )
      );
      mail.setPlainTextBody(
        String.format(
          ''Error: {0}. Review Rollup Summary Schedule Items {1}'',
          new List<String>{ e.getMessage(), String.join(ids, '','') }
        )
      );
      Messaging.sendEmail(new List<Messaging.SingleEmailMessage>{ mail });
    }
  }

  public void finish(Database.BatchableContext BC) {
  }
}','1687692340.0','True','RollupJob','1559','Active');
INSERT INTO "ApexClass" VALUES(23,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupJobTest {
}','1834766956.0','True','RollupJobTest','40','Active');
INSERT INTO "ApexClass" VALUES(24,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public with sharing class RollupScheduledCalculateController {
  private ApexPages.StandardController standardController;
  public String masterObjectWhere { get; set; }
  public String minute { get; set; }
  public List<SelectOption> minutes { get; set; }
  public List<String> hour { get; set; }
  public List<String> day { get; set; }
  public List<String> month { get; set; }
  public List<String> weekday { get; set; }
  public String uniqueNameForJob { get; set; }

  public RollupScheduledCalculateController(
    ApexPages.StandardController standardController
  ) {
    // Since thie controller is shared between custom object and custom mestadata, determine the applicable unique field
    String uniqueNameField = ((Id) standardController.getId())
        .getSObjectType() == Schema.LookupRollupSummary2__mdt.SObjectType
      ? ''DeveloperName''
      : ''UniqueName__c'';

    // Ensure the unique name field is included in the standard controller read fields
    this.standardController = standardController;
    if (!Test.isRunningTest()) {
      // See https://developer.salesforce.com/forums/?id=906F00000008ytQIAQ
      this.standardController.addFields(new List<String>{ uniqueNameField });
    }

    // Calculate unique name
    String rollupUniqueName = (String) standardController.getRecord()
      .get(uniqueNameField);
    uniqueNameForJob =
      ''rollup_'' +
      (rollupUniqueName == null || rollupUniqueName.equals('''')
        ? standardController.getId()
        : rollupUniqueName + '' ('' + standardController.getId() + '')'');

    // Deprication warning
    if (standardController.getRecord() instanceof LookupRollupSummary__c) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Warning,
          ''Use of the Lookup Rollup Summaries tab is still functional but no longer being enhanced. Consider using the Manage Lookup Rollup Summaries tab.''
        )
      );
    }

    // Page load messages
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        ''Clicking the Schedule Full Calculate Job will schedule a recurring background rebuild for this rollup only.''
      )
    );
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        ''The default shown below will run the Calculate job at 2am every day.''
      )
    );
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        ''Once the job completes any failed rollups will be shown in the Rollup Summary Logs tab.''
      )
    );
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Info,
        ''The Calculate job can be managed at Setup -> Jobs -> Scheduled Jobs; its name will be '' +
        uniqueNameForJob
      )
    );

    // Minutes
    minutes = new List<SelectOption>();
    for (Integer minute = 0; minute < 60; minute++) {
      minutes.add(new SelectOption(minute + '''', minute + ''''));
    }

    // Default is 2am everyday
    minute = ''0'';
    hour = new List<String>{ ''2'' };
    day = new List<String>{ ''*'' };
    month = new List<String>{ ''*'' };
    weekday = new List<String>{ ''?'' };
  }

  public PageReference scheduleCalculateJob() {
    try {
      // Build the CRON string
      String cronString = String.join(
        new List<String>{
          ''0'',
          minute,
          String.join(hour, '',''),
          String.join(day, '',''),
          String.join(month, '',''),
          String.join(weekday, '','')
        },
        '' ''
      );

      // Kickoff the calculate job for this lookup
      System.schedule(
        uniqueNameForJob,
        cronString,
        new RollupCalculateJobSchedulable(
          standardController.getId(),
          masterObjectWhere
        )
      );
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Calculate job scheduled for this lookup.''
        )
      );
    } catch (Exception e) {
      ApexPages.addMessages(e);
      return null;
    }

    // Custom Metadata backed rollup?
    if (standardController.getRecord() instanceof LookupRollupSummary2__mdt) {
      PageReference manageRollupsPage = Page.managelookuprollupsummaries;
      manageRollupsPage.getParameters().put(''id'', standardController.getId());
      return manageRollupsPage;
    }

    return standardController.view();
  }
}','1917594156.0','False','RollupScheduledCalculateController','3843','Active');
INSERT INTO "ApexClass" VALUES(25,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupScheduledCalculateControllerTest {
  @IsTest
  private static void testCronHelperDefault() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Test default behaviour
    Test.startTest();
    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummaryAccount
    );
    RollupScheduledCalculateController controller = new RollupScheduledCalculateController(
      standardController
    );
    controller.scheduleCalculateJob();
    Test.stopTest();

    // Assert correct Cron job has been inserted
    CronTrigger cronTrigger = [
      SELECT Id, CronJobDetail.Name, CronExpression
      FROM CronTrigger
      WHERE CronJobDetail.JobType = ''7''
      LIMIT 1
    ][0];
    System.assertEquals(''0 0 2 * * ?'', cronTrigger.CronExpression);
    System.assertEquals(
      ''rollup_'' + standardController.getId(),
      cronTrigger.CronJobDetail.Name
    );
  }

  @IsTest
  private static void testCronHelperDefaultWithUniqueName() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.UniqueName__c = ''TestRollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Test default behaviour
    Test.startTest();
    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummaryAccount
    );
    RollupScheduledCalculateController controller = new RollupScheduledCalculateController(
      standardController
    );
    controller.scheduleCalculateJob();
    Test.stopTest();

    // Assert correct Cron job has been inserted
    CronTrigger cronTrigger = [
      SELECT Id, CronJobDetail.Name, CronExpression
      FROM CronTrigger
      WHERE CronJobDetail.JobType = ''7''
      LIMIT 1
    ][0];
    System.assertEquals(''0 0 2 * * ?'', cronTrigger.CronExpression);
    System.assertEquals(
      ''rollup_TestRollup ('' +
      standardController.getId() +
      '')'',
      cronTrigger.CronJobDetail.Name
    );
  }

  @IsTest
  private static void testCronHelperError() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Test default behaviour
    Test.startTest();
    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummaryAccount
    );
    RollupScheduledCalculateController controller = new RollupScheduledCalculateController(
      standardController
    );
    controller.day = new List<String>{ ''?'' };
    controller.scheduleCalculateJob();
    Test.stopTest();

    // Assert nothing has been scheduled and we got an error
    System.assertEquals(
      0,
      [
          SELECT Id, CronJobDetail.Name, CronExpression
          FROM CronTrigger
          WHERE CronJobDetail.JobType = ''7''
        ]
        .size()
    );
    System.assert(ApexPages.hasMessages(ApexPages.Severity.Error));
    System.assertEquals(
      ''\''?\'' can only be specified for Day-of-Month -OR- Day-of-Week.'',
      ApexPages.getMessages()[5].getDetail()
    );
  }

  @IsTest
  private static void testCronHelperCustomised() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Between Task and Account
    LookupRollupSummary__c rollupSummaryAccount = new LookupRollupSummary__c();
    rollupSummaryAccount.Name = ''Test Rollup'';
    rollupSummaryAccount.ParentObject__c = ''Account'';
    rollupSummaryAccount.ChildObject__c = ''Task'';
    rollupSummaryAccount.RelationShipField__c = ''WhatId'';
    rollupSummaryAccount.FieldToAggregate__c = ''Id'';
    rollupSummaryAccount.AggregateOperation__c = RollupSummaries.AggregateOperation.Count.name();
    rollupSummaryAccount.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryAccount.Active__c = true;
    rollupSummaryAccount.CalculationMode__c = ''Scheduled'';
    insert rollupSummaryAccount;

    // Test default behaviour
    Test.startTest();
    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummaryAccount
    );
    RollupScheduledCalculateController controller = new RollupScheduledCalculateController(
      standardController
    );
    controller.hour = new List<String>{ ''4'' };
    controller.day = new List<String>{ ''2'' };
    controller.scheduleCalculateJob();
    Test.stopTest();

    // Assert correct Cron job has been inserted
    CronTrigger cronTrigger = [
      SELECT Id, CronJobDetail.Name, CronExpression
      FROM CronTrigger
      WHERE CronJobDetail.JobType = ''7''
      LIMIT 1
    ][0];
    System.assertEquals(''0 0 4 2 * ?'', cronTrigger.CronExpression);
    System.assertEquals(
      ''rollup_'' + standardController.getId(),
      cronTrigger.CronJobDetail.Name
    );
  }
}','4071149528.0','False','RollupScheduledCalculateControllerTest','6117','Active');
INSERT INTO "ApexClass" VALUES(26,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Service class implements rollup functionality using LREngine library and based on lookups described in RollupSummary
 *
 *   TODO: This class could do with using the fflib_Describe util class, it would cut down on describe cahcing logic and make things cleaner
 *
 *   TODO: As this class has developed to support schedule and develoepr API entry points some further refactoring for reuse can be done
 **/
global with sharing class RollupService {
  global static Exception LastMetadataAPIConnectionException {
    get;
    private set;
  }

  global static Boolean checkMetadataAPIConnection() {
    try {
      MetadataService.MetadataPort service = new MetadataService.MetadataPort();
      service.SessionHeader = new MetadataService.SessionHeader_element();
      service.SessionHeader.sessionId = UserInfo.getSessionId();
      List<MetadataService.ListMetadataQuery> queries = new List<MetadataService.ListMetadataQuery>();
      MetadataService.ListMetadataQuery remoteSites = new MetadataService.ListMetadataQuery();
      remoteSites.type_x = ''RemoteSiteSetting'';
      queries.add(remoteSites);
      service.listMetadata(queries, 28);
    } catch (Exception e) {
      LastMetadataAPIConnectionException = e;
      return false;
    }
    LastMetadataAPIConnectionException = null;
    return true;
  }

  /**
   * Starts the Job to recalculate the given rollup
   **/
  global static Id runJobToCalculate(Id lookupId) {
    return runJobToCalculate((String) lookupId, null);
  }

  /**
   * Starts the Job to recalculate the given rollup filtering the master object records by the WHERE clause
   **/
  global static Id runJobToCalculate(Id lookupId, String masterWhereClause) {
    return runJobToCalculate((String) lookupId, masterWhereClause);
  }

  /**
   * Starts the Job to recalculate the given rollup
   **/
  global static Id runJobToCalculate(String lookupId) {
    return runJobToCalculate(lookupId, null);
  }

  /**
   * Starts the Job to recalculate the given rollup filtering the master object records by the WHERE clause
   **/
  global static Id runJobToCalculate(
    String lookupId,
    String masterWhereClause
  ) {
    System.SavePoint sp = Database.setSavepoint();

    try {
      // Is another calculate job running for this lookup?
      List<RollupSummary> lookups = new RollupSummariesSelector()
        .selectById(new Set<String>{ (String) lookupId });
      if (lookups.size() == 0)
        throw RollupServiceException.rollupNotFound(lookupId);
      RollupSummary lookup = lookups[0];

      // Already running?
      checkJobAlreadyRunning(lookupId, lookup.Name);

      // Already active?
      if (
        (lookup.Active == null || lookup.Active == false) &&
        lookup.CalculationMode == ''Realtime''
      )
        throw new RollupServiceException(
          ''The rollup must be Active before you can run a Calculate job.''
        );

      // Start the job and record the Job Id
      Integer scopeSize = (Integer) DeclarativeLookupRollupSummaries__c.getInstance()
        .CalculateJobScopeSize__c;
      Id jobId = Database.executeBatch(
        new RollupCalculateJob(lookupId, masterWhereClause),
        scopeSize == null ? 100 : scopeSize
      );

      // Update CalculateJobId__c for Custom Object based rollups?
      if (lookup.Record instanceof LookupRollupSummary__c) {
        LookupRollupSummary__c rollupSummary = (LookupRollupSummary__c) lookup.Record;
        rollupSummary.CalculateJobId__c = jobId;
        update lookup.Record;
      }

      return jobId;
    } catch (Exception e) {
      // Fix for https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/511, avoid leaking control record
      Database.rollback(sp);
      throw e;
    }
  }

  /**
   * Starts the Job to process the scheduled items for rollup
   **/
  global static Id runJobToProcessScheduledItems() {
    // Check if the Job is already running before starting a new one
    if (
      new AsyncApexJobsSelector().jobsExecuting(new Set<String>{ ''RollupJob'' })
    )
      throw RollupServiceException.jobsExecuting(''RollupJob'');

    // Start the job to processed the scheduled items
    Integer scopeSize = (Integer) DeclarativeLookupRollupSummaries__c.getInstance()
      .ScheduledJobScopeSize__c;
    return Database.executeBatch(
      new RollupJob(),
      scopeSize == null ? 100 : scopeSize
    );
  }

  /**
   * Describes a specific rollup to process
   **/
  global class RollupToCalculate {
    global Id parentId;
    global String rollupSummaryUniqueName;
  }

  /**
   * Executes Process Builder rollups
   **/
  global static void rollup(List<RollupToCalculate> rollupsToCalculate) {
    // Anything to process?
    if (rollupsToCalculate == null || rollupsToCalculate.size() == 0)
      return;

    // Load summaries
    Set<String> uniqueNames = new Set<String>();
    Set<Id> masterIds = new Set<Id>();
    for (RollupToCalculate rollupToCalc : rollupsToCalculate) {
      uniqueNames.add(rollupToCalc.rollupSummaryUniqueName);
      masterIds.add(rollupToCalc.parentId);
    }
    List<RollupSummary> lookups = new RollupSummariesSelector()
      .selectActiveByUniqueName(uniqueNames);
    if (lookups.size() == 0)
      return;

    // Process each context (parent child relationship) and its associated rollups
    Map<Id, SObject> masterRecords = new Map<Id, SObject>();
    for (LREngine.Context ctx : createLREngineContexts(lookups)) {
      // Produce a set of master Id''s applicable to this context (parent only)
      Set<Id> ctxMasterIds = new Set<Id>();
      for (Id masterId : masterIds)
        if (masterId.getSObjectType() == ctx.master)
          ctxMasterIds.add(masterId);
      // Execute the rollup and process the resulting updated master records
      for (SObject masterRecord : LREngine.rollup(ctx, ctxMasterIds)) {
        // Skip master records without Id''s (LREngine can return these where there was
        //	no related master records to children, for examlpe where a relationship is optional)
        if (masterRecord.Id == null)
          break;
        // Merge this master record result into a previous one from another rollup ctx?
        SObject existingRecord = masterRecords.get(masterRecord.Id);
        if (existingRecord == null)
          masterRecords.put(masterRecord.Id, masterRecord);
        else
          for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll)
            existingRecord.put(
              fieldToRoll.master.getSObjectField(),
              masterRecord.get(fieldToRoll.master.getSObjectField())
            );
      }
    }

    // Update the master records
    update masterRecords.values();
  }

  /**
   * Developer API for the tool, only executes Rollup Summmaries with Calculation Mode set to Developer
   *
   * Automatically resolves child records to process via LREngine and lookups described in RollupSummary
   *    also determines if based on the old records if the rollup processing needs to occur
   *
   * @param existingRecords Deleted or existing version of Updated records
   * @param newRecords Inserted/Updated/Undeleted records
   * @param sObjectType SObjectType of the existing/new records
   *
   * @usage rollup(Trigger.oldMap, Trigger.newMap, Account.SObjectType)
   *
   * @remark All SObjects (existing and new) must be of the same SObjectType
   * @remark Supports mixture of old/new records.  For example, you can include a record in existing
   *         that was deleted and a record in new that was inserted.
   **/
  global static void rollup(
    Map<Id, SObject> existingRecords,
    Map<Id, SObject> newRecords,
    Schema.SObjectType sObjectType
  ) {
    handleRollups(
      existingRecords,
      newRecords,
      sObjectType,
      new List<RollupSummaries.CalculationMode>{
        RollupSummaries.CalculationMode.Developer
      }
    );
  }

  /**
   * Developer API for the tool, only executes Rollup Summmaries with Calculation Mode set to Developer
   *
   * @param childRecords Child records being modified
   * @returns Array of master records containing the updated rollups, calling code must perform update DML operation
   **/
  global static List<SObject> rollup(List<SObject> childRecords) {
    // Anything to process?
    if (childRecords == null || childRecords.size() == 0)
      return new List<SObject>();

    // Describe Developer rollups for these child records
    SObjectType childObjectType = childRecords[0].Id.getSObjectType();
    Schema.DescribeSObjectResult childRecordDescribe = childObjectType.getDescribe();
    List<RollupSummary> lookups = new RollupSummariesSelector()
      .selectActiveByChildObject(
        new List<RollupSummaries.CalculationMode>{
          RollupSummaries.CalculationMode.Developer
        },
        new Set<String>{ childRecordDescribe.getName() }
      );
    if (lookups.size() == 0)
      return new List<SObject>(); // Nothing to see here! :)

    // Rollup child records and update master records
    Set<Id> masterRecordIds = new Set<Id>();
    for (SObject childRecord : childRecords)
      for (RollupSummary lookup : lookups)
        if (childRecord.get(lookup.RelationShipField) != null)
          masterRecordIds.add((Id) childRecord.get(lookup.RelationShipField));

    // Process each context (parent child relationship) and its associated rollups
    Map<Id, SObject> masterRecords = new Map<Id, SObject>();
    for (LREngine.Context ctx : createLREngineContexts(lookups)) {
      // Produce a set of master Id''s applicable to this context (parent only)
      Set<Id> ctxMasterIds = new Set<Id>();
      for (Id masterId : masterRecordIds)
        if (masterId.getSObjectType() == ctx.master)
          ctxMasterIds.add(masterId);
      // Execute the rollup and process the resulting updated master records
      for (SObject masterRecord : LREngine.rollup(ctx, ctxMasterIds)) {
        // Skip master records without Id''s (LREngine can return these where there was
        //	no related master records to children, for examlpe where a relationship is optional)
        if (masterRecord.Id == null)
          break;
        // Merge this master record result into a previous one from another rollup ctx?
        SObject existingRecord = masterRecords.get(masterRecord.Id);
        if (existingRecord == null)
          masterRecords.put(masterRecord.Id, masterRecord);
        else
          for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll)
            existingRecord.put(
              fieldToRoll.master.getSObjectField(),
              masterRecord.get(fieldToRoll.master.getSObjectField())
            );
      }
    }
    return masterRecords.values();
  }

  /**
   * Apex Test handler (call from Apex Test only)
   **/
  global static void testHandler(SObject dummyChildRecord) {
    try {
      disableNpspTdtm();
      insert dummyChildRecord;
    } catch (Exception e) {
      // If the auto generated trigger was invoked this test served its purpose (code coverage wise) ignore this error
      if (triggerHandleInvoked)
        return;
      // Otherwise fail the test with the underlying exception as it prevented our trigger being invoked
      throw e;
    }
  }

  /**
   * Used in a test context to determine if errors from the dummy child insert should fail the test
   **/
  private static boolean triggerHandleInvoked = false;

  /**
   * Apex Trigger helper, automatically resolves child records to process via LREngine and lookups described in RollupSummary
   *    also determines if based on the old trigger records if the rollup processing needs to occur
   * @param childObjectType This can be used in cases where the prior overload was used an the Id.getSobjectType method fails to return the SOBjectType (see Issue 17 in the repo)
   **/
  global static void triggerHandler(SObjectType childObjectType) {
    triggerHandleInvoked = true;

    // Currently no processing in the before phase
    if (Trigger.isBefore)
      return;

    // Anything to rollup?
    handleRollups(
      Trigger.oldMap,
      Trigger.newMap,
      childObjectType,
      new List<RollupSummaries.CalculationMode>{
        RollupSummaries.CalculationMode.Realtime,
        RollupSummaries.CalculationMode.Scheduled
      }
    );
  }

  /**
   * Apex Trigger helper, automatically resolves child records to process via LREngine and lookups described in RollupSummary
   *    also determines if based on the old trigger records if the rollup processing needs to occur
   **/
  global static void triggerHandler() {
    triggerHandleInvoked = true;

    // Currently no processing in the before phase
    if (Trigger.isBefore)
      return;

    // Anything to rollup?
    List<SObject> childRecords = Trigger.isDelete ? Trigger.old : Trigger.new;
    SObjectType childObjectType = childRecords[0].Id.getSObjectType();
    handleRollups(
      Trigger.oldMap,
      Trigger.newMap,
      childObjectType,
      new List<RollupSummaries.CalculationMode>{
        RollupSummaries.CalculationMode.Realtime,
        RollupSummaries.CalculationMode.Scheduled
      }
    );
  }

  /**
   * Allows the subscriber to check if a specific rollup is bypassed or not.
   */
  global static Boolean isBypassed(String rollupName) {
    return BypassHandler.isBypassed(rollupName);
  }

  /**
   * Allows the bypass of a rollup, given its unique name.
   */
  global static Boolean bypass(String rollupName) {
    return BypassHandler.bypass(rollupName);
  }

  /**
   * Clears the bypass of a rollup, given its unique name.
   */
  global static Boolean clearBypass(String rollupName) {
    return BypassHandler.clearBypass(rollupName);
  }

  /**
   * Clears the bypass of aall rollups.
   */
  global static void clearAllBypasses() {
    BypassHandler.clearAllBypasses();
  }

  /**
   * Method returns a QueryLocator that returns master records (as per the lookup definition) meeting the criteria expressed (if defined)
   **/
  public static Database.QueryLocator masterRecordsAsQueryLocator(Id lookupId) {
    return masterRecordsAsQueryLocator(lookupId, null);
  }

  public static Database.QueryLocator masterRecordsAsQueryLocator(
    Id lookupId,
    String whereClause
  ) {
    List<RollupSummary> lookups = new RollupSummariesSelector()
      .selectById(new Set<String>{ (String) lookupId });
    if (lookups.size() == 0)
      throw RollupServiceException.rollupNotFound(lookupId);
    RollupSummary lookup = lookups[0];
    if (String.isBlank(whereClause)) {
      return Database.getQueryLocator(''Select Id From '' + lookup.ParentObject);
    } else {
      return Database.getQueryLocator(
        String.format(
          ''Select Id From {0} WHERE {1} ORDER BY Id'',
          new List<String>{ lookup.ParentObject, whereClause }
        )
      );
    }
  }

  /**
   * Clears the Calcualte Job Id''s on the given lookups preventng concurrent Calculate jobs
   **/
  public static void clearCalculateJobId(Set<String> lookupIds) {
    // LookupRollupSummaryId__c are 18 char Ids ensure the ones we filter on are as well
    Set<String> char18Ids = new Set<String>();
    for (String lookupId : lookupIds) {
      char18Ids.add((String) ((Id) lookupId));
    }
    delete [
      SELECT Id
      FROM LookupRollupCalculateJob__c
      WHERE LookupRollupSummaryId__c IN :char18Ids
    ];
  }

  /**
   * Method called from the RollupJob to handle summary schedule items that have been generated
   **/
  public static void processScheduleItems(
    List<LookupRollupSummaryScheduleItems__c> rollupSummaryScheduleItems
  ) {
    // Legacy dlrs__LookupRollupSummary__c field on LookupRollupSummaryScheduleItems__c present?
    Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.LookupRollupSummaryScheduleItems__c.fields.getMap();
    Schema.SObjectField legacyLookupRollupSummaryField = fieldMap.get(
      ''dlrs__LookupRollupSummary__c''
    );

    // Load related Lookup summaries for the scheduled items
    Set<String> lookupIds = new Set<String>();
    for (
      LookupRollupSummaryScheduleItems__c scheduleItem : rollupSummaryScheduleItems
    ) {
      // It is possible for some really old scheduled items, LookupRollupSummary2__c is null
      if (scheduleItem.LookupRollupSummary2__c == null) {
        // If the legacy dlrs__LookupRollupSummary__c still exists in the org, it will have the corresponding lookup
        if (legacyLookupRollupSummaryField != null) {
          lookupIds.add(
            (String) scheduleItem.get(legacyLookupRollupSummaryField)
          );
        }
      } else {
        // Going forward LookupRollupSummary2__c is the official field to indicate the corresponding lookup
        lookupIds.add(scheduleItem.LookupRollupSummary2__c);
      }
    }
    Map<String, RollupSummary> lookups = RollupSummary.toMap(
      new RollupSummariesSelector().selectById(lookupIds)
    );

    // Group the parent Id''s by parent type
    Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
    Map<String, Set<Id>> parentIdsByParentType = new Map<String, Set<Id>>();
    for (
      LookupRollupSummaryScheduleItems__c scheduleItem : rollupSummaryScheduleItems
    ) {
      // Resolve lookup associated with this scheduled item
      Id parentId = scheduleItem.ParentId__c;
      RollupSummary lookup = null;
      if (scheduleItem.LookupRollupSummary2__c == null) {
        if (legacyLookupRollupSummaryField != null) {
          lookup = lookups.get(
            (String) scheduleItem.get(legacyLookupRollupSummaryField)
          );
        }
      } else {
        lookup = lookups.get(scheduleItem.LookupRollupSummary2__c);
      }
      if (lookup == null) {
        continue;
      }
      // The lookup definition could have been changed or due to a historic bug in correctly associated
      if (parentId.getSobjectType() != gd.get(lookup.ParentObject))
        continue;
      Set<Id> parentIds = parentIdsByParentType.get(lookup.ParentObject);
      if (parentIds == null)
        parentIdsByParentType.put(
          lookup.ParentObject,
          (parentIds = new Set<Id>())
        );
      parentIds.add(parentId);
    }

    // Group lookups by parent and relationship into LREngine ctx''s
    List<LREngine.Context> engineCtxByParentRelationship = createLREngineContexts(
      lookups.values()
    );

    // Process each context (parent child relationship) and its associated rollups
    Map<Id, SObject> masterRecords = new Map<Id, SObject>();
    for (LREngine.Context ctx : engineCtxByParentRelationship) {
      Set<Id> masterIds = parentIdsByParentType.get(
        ctx.master.getDescribe().getName()
      );
      // This maybe null if the reconcilation check above to match master ID to lookup parent failed
      if (masterIds != null && masterIds.size() > 0) {
        for (SObject masterRecord : LREngine.rollup(ctx, masterIds)) {
          // Skip master records without Id''s (LREngine can return these where there was
          //	no related master records to children, for examlpe where a relationship is optional)
          if (masterRecord.Id == null)
            continue;
          // Merge this master record result into a previous one from another rollup ctx?
          SObject existingRecord = masterRecords.get(masterRecord.Id);
          if (existingRecord == null)
            masterRecords.put(masterRecord.Id, masterRecord);
          else
            for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll)
              existingRecord.put(
                fieldToRoll.master.getSObjectField(),
                masterRecord.get(fieldToRoll.master.getSObjectField())
              );
        }
      }
    }

    // Map rollup summary schedule items by parent id, in order to remove only those whos parent/master record actually gets updated below
    Map<Id, List<LookupRollupSummaryScheduleItems__c>> rollupSummaryScheduleItemsByParentId = new Map<Id, List<LookupRollupSummaryScheduleItems__c>>();
    for (
      LookupRollupSummaryScheduleItems__c rollupSummaryScheduleItem : rollupSummaryScheduleItems
    ) {
      List<LookupRollupSummaryScheduleItems__c> rollupsByParentId = rollupSummaryScheduleItemsByParentId.get(
        rollupSummaryScheduleItem.ParentId__c
      );
      if (rollupsByParentId == null) {
        rollupsByParentId = new List<LookupRollupSummaryScheduleItems__c>();
        rollupSummaryScheduleItemsByParentId.put(
          rollupSummaryScheduleItem.ParentId__c,
          rollupsByParentId
        );
      }
      rollupsByParentId.add(rollupSummaryScheduleItem);
    }

    // Update master records
    List<LookupRollupSummaryLog__c> rollupSummaryLogs = new List<LookupRollupSummaryLog__c>();

    List<SObject> masterRecordList = new RollupDmlGuard()
      .getOnlyRecordsNeedingDml(engineCtxByParentRelationship, masterRecords);
    List<Database.Saveresult> saveResults = updateRecords(
      masterRecordList,
      false,
      false
    );

    // Log errors to the summary log
    Integer masterRecordIdx = 0;
    for (Database.Saveresult saveResult : saveResults) {
      // Errors?
      if (!saveResult.isSuccess()) {
        // Was this failure due to the parent record no longer existing?
        Boolean masterRecordDeletionError = false;
        // Log the failure updating the master record for review
        LookupRollupSummaryLog__c logEntry = new LookupRollupSummaryLog__c();
        logEntry.ErrorMessage__c = '''';
        logEntry.ParentId__c = masterRecordList[masterRecordIdx].Id;
        logEntry.ParentObject__c = masterRecordList[masterRecordIdx]
          .Id.getSObjectType()
          .getDescribe()
          .getName();
        List<Database.Error> databaseErrors = saveResult.getErrors();
        for (Database.Error databaseError : databaseErrors) {
          logEntry.ErrorMessage__c +=
            databaseError.getMessage() +
            '' : '' +
            databaseError.getStatusCode() +
            '' '' +
            databaseError.getFields() +
            ''\n'';
          if (databaseError.getStatusCode() == StatusCode.ENTITY_IS_DELETED) {
            masterRecordDeletionError = true;
            break;
          }
        }
        // Was this error a result of the parent record being deleted?
        if (!masterRecordDeletionError) {
          rollupSummaryLogs.add(logEntry);
          // Remove from scheduled items to be deleted to allow a retry
          rollupSummaryScheduleItemsByParentId.remove(
            masterRecordList[masterRecordIdx].Id
          );
        }
      }
      masterRecordIdx++;
    }

    // Insert any logs for master records that failed to update (upsert to only show last message per parent)
    upsert rollupSummaryLogs ParentId__c;

    // Delete any old logs entries for master records that have now been updated successfully
    delete [
      SELECT Id
      FROM LookupRollupSummaryLog__c
      WHERE ParentId__c IN :rollupSummaryScheduleItemsByParentId.keySet()
    ];

    // Delete any schedule items for successfully updated master records
    List<LookupRollupSummaryScheduleItems__c> scheduleItemsToDelete = new List<LookupRollupSummaryScheduleItems__c>();
    for (
      List<LookupRollupSummaryScheduleItems__c> scheduleItems : rollupSummaryScheduleItemsByParentId.values()
    )
      scheduleItemsToDelete.addAll(scheduleItems);
    delete scheduleItemsToDelete;
  }

  /**
   * Performs a recalculate on the master records for the given rollup definitions, outputs any errors in the rollup summary log
   *
   * @param lookups Lookup to calculate perform
   * @param childRecords Child records being modified
   **/
  public static void updateMasterRollups(
    Set<String> lookupIds,
    Set<Id> masterRecordIds
  ) {
    // Process rollup
    List<RollupSummary> lookups = new RollupSummariesSelector()
      .selectById(lookupIds);
    Map<Id, SObject> masterRecords = new Map<Id, SObject>();
    List<LREngine.Context> ctxs = createLREngineContexts(lookups);
    Set<Id> ctxMasterIds = new Set<Id>();
    for (LREngine.Context ctx : ctxs) {
      // Produce a set of master Id''s applicable to this context (parent only)
      for (Id masterId : masterRecordIds)
        if (masterId.getSObjectType() == ctx.master)
          ctxMasterIds.add(masterId);
      // Execute the rollup and process the resulting updated master records
      for (SObject masterRecord : LREngine.rollup(ctx, ctxMasterIds)) {
        // Skip master records without Id''s (LREngine can return these where there was
        //	no related master records to children, for examlpe where a relationship is optional)
        if (masterRecord.Id == null)
          break;
        // Merge this master record result into a previous one from another rollup ctx?
        SObject existingRecord = masterRecords.get(masterRecord.Id);
        if (existingRecord == null)
          masterRecords.put(masterRecord.Id, masterRecord);
        else
          for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll)
            existingRecord.put(
              fieldToRoll.master.getSObjectField(),
              masterRecord.get(fieldToRoll.master.getSObjectField())
            );
      }
    }

    // Master records to update
    List<SObject> masterRecordList = masterRecords.values();

    // The following optimisation currently only works if processing a single rollup (parent)
    if (ctxs.size() == 1) {
      LREngine.Context ctx = ctxs[0];
      // Query the current values of the master objects rollup fields
      fflib_QueryFactory masterRecordQuery = new fflib_QueryFactory(ctx.master);
      for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll) {
        masterRecordQuery.selectField(fieldToRoll.master.getSObjectField());
      }
      // https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/619
      masterRecordQuery.setCondition(
        // It appears there is no Apex Describe to determine FOR UPDATE support
          ctx.master == User.SObjectType
          ? ''Id in :ctxMasterIds''
          : ''Id in :ctxMasterIds FOR UPDATE''
      );
      // Filter master records to update only if rollups have changed
      Map<Id, SObject> currentMasterRecordsById = new Map<Id, SObject>(
        Database.query(masterRecordQuery.toSOQL())
      );
      List<SObject> newMasterRecordList = new List<SObject>();
      for (SObject masterRecordToUpdate : masterRecordList) {
        SObject currentRecord = currentMasterRecordsById.get(
          masterRecordToUpdate.Id
        );
        boolean rollupValueChange = false;
        for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll) {
          if (
            currentRecord.get(fieldToRoll.master.getSObjectField()) ==
            masterRecordToUpdate.get(fieldToRoll.master.getSObjectField())
          ) {
            continue;
          }
          rollupValueChange = true;
          break;
        }
        if (rollupValueChange) {
          newMasterRecordList.add(masterRecordToUpdate);
        }
      }
      masterRecordList = newMasterRecordList;
    }

    // Update master records
    List<Database.Saveresult> saveResults = updateRecords(
      masterRecordList,
      false,
      false
    );

    // Log errors to the summary log
    Integer masterRecordIdx = 0;
    Set<Id> masterRecordsUpdatedId = new Set<Id>();
    List<LookupRollupSummaryLog__c> rollupSummaryLogs = new List<LookupRollupSummaryLog__c>();
    for (Database.Saveresult saveResult : saveResults) {
      // Errors?
      if (!saveResult.isSuccess()) {
        // Log the failure updating the master record for review
        LookupRollupSummaryLog__c logEntry = new LookupRollupSummaryLog__c();
        logEntry.ErrorMessage__c = '''';
        logEntry.ParentId__c = masterRecordList[masterRecordIdx].Id;
        logEntry.ParentObject__c = masterRecordList[masterRecordIdx]
          .Id.getSObjectType()
          .getDescribe()
          .getName();
        List<Database.Error> databaseErrors = saveResult.getErrors();
        for (Database.Error databaseError : databaseErrors)
          logEntry.ErrorMessage__c +=
            databaseError.getMessage() +
            '' : '' +
            databaseError.getStatusCode() +
            '' '' +
            databaseError.getFields() +
            ''\n'';
        rollupSummaryLogs.add(logEntry);
      } else {
        // Success
        masterRecordsUpdatedId.add(masterRecordList[masterRecordIdx].Id);
      }
      masterRecordIdx++;
    }

    // Insert any logs for master records that failed to update (upsert to only show last message per parent)
    upsert rollupSummaryLogs ParentId__c;

    // Delete any old logs entries for master records that have now been updated successfully
    delete [
      SELECT Id
      FROM LookupRollupSummaryLog__c
      WHERE ParentId__c IN :masterRecordsUpdatedId
    ];
  }

  /**
   * Insert the given rollup summaries (only supports Custom Metadata backed records)
   **/
  public static List<Id> create(List<SObject> rollupSummaryRecords) {
    // Valid records?
    List<SObject> validRecords = validateRollups(rollupSummaryRecords);
    // Create
    CustomMetadataService.createMetadata(validRecords);
    return null;
  }

  /**
   * Update the given rollup summaries (only supports Custom Metadata backed records)
   **/
  public static List<Id> update_x(List<SObject> rollupSummaryRecords) {
    // Valid records?
    List<SObject> validRecords = validateRollups(rollupSummaryRecords);
    // Create
    CustomMetadataService.updateMetadata(validRecords);
    return null;
  }

  /**
   * Delete the given rollup summaries (only supports Custom Metadata backed records)
   **/
  public static void delete_x(List<String> rollupSummaryIds) {
    // Currently assumes the Id''s are Custom Metadata record DeveloperName''s
    CustomMetadataService.deleteMetadata(
      LookupRollupSummary2__mdt.getSObjectType(),
      rollupSummaryIds
    );
  }

  /**
   * Throws RollupServiceException if the Calculate Job is already running for the given lookup
   **/
  @TestVisible
  private static void checkJobAlreadyRunning(
    String lookupId,
    String lookupName
  ) {
    try {
      // This object has a unique constraint over LookupRollupSummaryId__c
      insert new LookupRollupCalculateJob__c(
        LookupRollupSummaryId__c = (String) ((Id) lookupId)
      );
    } catch (Exception e) {
      throwServiceException(e, lookupName);
    }
  }

  @TestVisible
  private static void throwServiceException(Exception e, String lookupName) {
    if (e.getTypeName().toLowerCase() == ''dmlexception'') {
      if (
        ((DMLException) e).getDmlType(0) == StatusCode.STORAGE_LIMIT_EXCEEDED
      ) {
        throw RollupServiceException.missingStorageForJobRecord();
      }
    }
    throw RollupServiceException.jobAlreadyRunning(lookupName);
  }

  /**
   * Validates records (currenyly only Custom Metadata based ones)
   **/
  private static List<SObject> validateRollups(
    List<SObject> rollupSummaryRecords
  ) {
    // Process only Custom Metadata records here
    List<LookupRollupSummary2__mdt> mdtRecords = new List<LookupRollupSummary2__mdt>();
    for (SObject rollupSummaryRecord : rollupSummaryRecords) {
      if (rollupSummaryRecord instanceof LookupRollupSummary2__mdt) {
        mdtRecords.add((LookupRollupSummary2__mdt) rollupSummaryRecord);
      }
    }
    if (mdtRecords.size() == 0)
      return mdtRecords;

    // Validate via Domain class and throw appropirte exception
    RollupSummaries rollupSummaries = new RollupSummaries(mdtRecords);
    rollupSummaries.onValidate();
    RollupValidationException validationException = new RollupValidationException();
    for (RollupSummary rollupSummaryRecord : rollupSummaries.Records) {
      if (
        rollupSummaryRecord.Error != null ||
        rollupSummaryRecord.Fields.Errors.size() > 0
      ) {
        RollupRecordValidationError recordError = new RollupRecordValidationError();
        recordError.Error = rollupSummaryRecord.Error;
        recordError.FieldErrors = rollupSummaryRecord.Fields.Errors;
        validationException.RecordErrors.add(recordError);
      }
    }
    if (validationException.RecordErrors.size() > 0)
      throw validationException;

    return (List<SObject>) mdtRecords;
  }

  /**
   * Represents a rollup validation exception, contains a list of record errors
   **/
  public class RollupValidationException extends Exception {
    public final List<RollupRecordValidationError> RecordErrors = new List<RollupRecordValidationError>();
  }

  /**
   * Represents record level error and/or field level errors
   **/
  public class RollupRecordValidationError {
    public Id Id { get; private set; }
    public String Error { get; private set; }
    public List<String> FieldErrors { get; private set; }
  }

  /**
   * Process rollups for specified modes
   *
   * @param childRecords List of childRecords to process rollups against
   * @param existingRecords Map of existing records.  Pass null if no existing records are available.
   * @param calculationModes Modes to use to determine which rollups to evaluate and process
   *
   * @remark Will process both lists looking for insert/update/delete/undelete and execute rollups on the following conditions:
   *             1) if in newRecords and not in existingRecords (insert and undelete)
   *             2) if in existingRecords and not in newRecords (delete)
   *             3) if in existingRecords and newRecords and rollup FieldToAggregate__c has changed (update)
   *
   **/
  @TestVisible
  private static void handleRollups(
    Map<Id, SObject> existingRecords,
    Map<Id, SObject> newRecords,
    Schema.SObjectType sObjectType,
    List<RollupSummaries.CalculationMode> calculationModes
  ) {
    // make sure we have Maps to avoid conditional statements in loops below
    if (existingRecords == null) {
      existingRecords = new Map<Id, SObject>();
    }
    if (newRecords == null) {
      newRecords = new Map<Id, SObject>();
    }

    // Anything to process?
    if (existingRecords.isEmpty() && newRecords.isEmpty()) {
      return;
    }

    // Its possible for the user to deploy a trigger on parent objects, to monitor for merge operations...
    DescribeSObjectResult sObjectDescribe = sObjectType.getDescribe();
    Set<Id> masterRecordIdsFromMerge = new Set<Id>();
    if (sObjectDescribe.isMergeable()) {
      for (SObject existingRecord : existingRecords.values()) {
        Id masterRecordId = null;
        try {
          masterRecordId = (Id) existingRecord.get(''MasterRecordId'');
        } catch (Exception e) {
        }
        if (masterRecordId != null) {
          masterRecordIdsFromMerge.add(masterRecordId);
        }
      }
    }

    // If this is a parent record merge operation, determine child object rollups to recalculate...
    Boolean scheduleAllRollups = false;
    Set<SObjectType> childObjects = new Set<SObjectType>();
    childObjects.add(sObjectType);
    if (masterRecordIdsFromMerge.size() > 0) {
      // If a parent record is being merged, include a recalc of any related child rollups
      List<Schema.ChildRelationship> childRelationships = sObjectDescribe.getChildRelationships();
      for (Schema.ChildRelationship childRelationship : childRelationships) {
        childObjects.add(childRelationship.getChildSObject());
      }
      // Any rollups associated with these child objects will need to done in async,
      //   as parent records cannot be updated realtime since the platform is also updating them
      scheduleAllRollups = true;
    }

    // Are there any rollups to process?
    List<RollupSummary> lookups = describeRollups(
      childObjects,
      calculationModes
    );
    if (lookups.isEmpty())
      return; // Nothing to see here! :)

    // if records exist in both maps, then we need to go through change detection.
    // Has anything changed on the child records in respect to the fields referenced on the lookup definition?
    // Or does a record exist in one map but not the other
    if (!existingRecords.isEmpty() && !newRecords.isEmpty()) {
      // Master records to update
      Set<Id> masterRecordIds = new Set<Id>();

      // Set of field names from the child used in the rollup to search for changes on
      Set<String> fieldsToSearchForChanges = new Set<String>();
      Set<String> relationshipFields = new Set<String>();
      // keep track of fields that should trigger a rollup to be processed
      // this avoids having to re-parse RelationshipCriteria & OrderBy fields during field change detection
      Map<Id, Set<String>> fieldsInvolvedInLookup = new Map<Id, Set<String>>();
      for (RollupSummary lookup : lookups) {
        if (BypassHandler.isBypassed(lookup.UniqueName)) {
          continue;
        }

        Set<String> lookupFields = new Set<String>();
        lookupFields.add(lookup.FieldToAggregate);
        if (!String.isBlank(lookup.RelationshipCriteriaFields)) {
          for (
            String criteriaField : lookup.RelationshipCriteriaFields.split(
              ''[\r\n]+''
            )
          ) {
            lookupFields.add(criteriaField);
          }
        }
        // only include order by fields when query based rollup (concat, first, last, etc.) since changes to them
        // will not impact the outcome of an aggregate based rollup (sum, count, etc.)
        if (
          LREngine.isQueryBasedRollup(
            RollupSummaries.OPERATION_PICKLIST_TO_ENUMS.get(
              lookup.AggregateOperation
            )
          ) && !String.isBlank(lookup.FieldToOrderBy)
        ) {
          List<Utilities.Ordering> orderByFields = Utilities.parseOrderByClause(
            lookup.FieldToOrderBy
          );
          if (orderByFields != null && !orderByFields.isEmpty()) {
            for (Utilities.Ordering orderByField : orderByFields) {
              lookupFields.add(orderByField.getField());
            }
          }
        }

        // add all lookup fields to our master list of fields to search for
        fieldsToSearchForChanges.addAll(lookupFields);

        // add relationshipfield to fields for this lookup
        // this comes after adding to fieldsToSearchForChanges because we handle
        // change detection separately for non-relationship fields and relationship fields
        lookupFields.add(lookup.RelationShipField);

        // add to map for later use
        fieldsInvolvedInLookup.put(lookup.Id, lookupFields);

        // add relationship field to master list of relationship fields
        relationshipFields.add(lookup.RelationShipField);
      }

      // merge all record Id''s
      Set<Id> mergedRecordIds = new Set<Id>(existingRecords.keySet());
      mergedRecordIds.addAll(newRecords.keySet());

      // Determine if a a field referenced on the lookup has changed and thus if the lookup itself needs recalculating
      Set<String> fieldsChanged = new Set<String>();
      for (Id recordId : mergedRecordIds) {
        // keep track of whether or not this child has changed in any of the fields involved in
        // lookups that are NOT relationship fields themselves.  We''ll check relationship fields
        // separately to avoid unnecessary rollups firing on master records that don''t require updating
        Boolean nonRelationshipFieldsChanged = false;

        // Determine if any of the fields referenced on our selected rollups have changed on this record
        for (String fieldToSearch : fieldsToSearchForChanges) {
          // retrieve old and new records and values if they exist
          SObject oldRecord = existingRecords.get(recordId);
          Object oldValue = oldRecord == null
            ? null
            : oldRecord.get(fieldToSearch);
          SObject newRecord = newRecords.get(recordId);
          Object newValue = newRecord == null
            ? null
            : newRecord.get(fieldToSearch);

          // Register this field as having changed?
          // if in old but not in new then its a delete and rollup should be processed
          // if in new but not in old then its an insert and rollup should be processed
          // if in both then its an update and field change detection should occur and rollup should be processed if different
          if (
            (oldRecord == null) ||
            (newRecord == null) ||
            (newValue != oldValue)
          ) {
            fieldsChanged.add(fieldToSearch);
            // mark record as having a non-relationship field changed
            nonRelationshipFieldsChanged = true;
          }
        }

        // iterate relationship fields looking and track old/new master id
        // if there were changes to the relationship field itself or any
        // other fields involved in a lookup
        for (String relationshipField : relationshipFields) {
          // should we add associated master to list?
          // default to whether or not a non-relationship field on record has changed
          Boolean addMasterIds = nonRelationshipFieldsChanged;

          // retrieve old and new records and values if they exist
          SObject oldRecord = existingRecords.get(recordId);
          Object oldValue = oldRecord == null
            ? null
            : oldRecord.get(relationshipField);
          SObject newRecord = newRecords.get(recordId);
          Object newValue = newRecord == null
            ? null
            : newRecord.get(relationshipField);

          // Register this field as having changed?
          // if in old but not in new then its a delete and rollup should be processed and master ids included
          // if in new but not in old then its an insert and rollup should be processed and master ids included
          // if in both then its an update and field change detection should occur and rollup should be processed and master ids included if different
          if (
            (oldRecord == null) ||
            (newRecord == null) ||
            (newValue != oldValue)
          ) {
            fieldsChanged.add(relationshipField);
            // master field itself changed so we force old/new master ids to be added for processing
            addMasterIds = true;
          }

          // if relationship field itself changed or if change in another non-relationship field
          // Add both old and new value to master record Id list for relationship fields
          // to ensure old and new parent master records are updated (re-parenting)
          if (addMasterIds) {
            if (newValue != null)
              masterRecordIds.add((Id) newValue);
            if (oldValue != null)
              masterRecordIds.add((Id) oldValue);
          }
        }
      }

      // Build a revised list of lookups to process that includes only where fields used in the rollup have changed
      List<RollupSummary> lookupsToProcess = new List<RollupSummary>();
      for (RollupSummary lookup : lookups) {
        if (BypassHandler.isBypassed(lookup.UniqueName)) {
          continue;
        }

        // Are any of the changed fields used by this lookup?
        Set<String> lookupFields = fieldsInvolvedInLookup.get(lookup.Id);
        for (String lookupField : lookupFields) {
          if (fieldsChanged.contains(lookupField)) {
            // add lookup to be processed and exit for loop since we have our answer
            lookupsToProcess.add(lookup);
            break;
          }
        }
      }
      lookups = lookupsToProcess;

      // Rollup child records and update master records
      if (lookupsToProcess.size() > 0)
        updateRecords(
          updateMasterRollupsTrigger(lookups, masterRecordIds, false),
          false,
          true
        );
      return;
    }

    // Rollup whichever side has records and update master records
    // only one map should have records at this point
    Boolean isDeleting = newRecords.isEmpty();
    Set<Id> masterRecordIds = new Set<Id>(masterRecordIdsFromMerge);
    Map<Id, SObject> recordsToProcess = existingRecords.isEmpty()
      ? newRecords
      : existingRecords;
    for (SObject childRecord : recordsToProcess.values()) {
      for (RollupSummary lookup : lookups) {
        if (BypassHandler.isBypassed(lookup.UniqueName)) {
          continue;
        }

        // Does this rollup apply to this child record?
        if (lookup.ChildObject.equalsIgnoreCase(sObjectDescribe.getName())) {
          if (childRecord.get(lookup.RelationShipField) != null) {
            // Check for self referencing rollups, https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/39
            Id masterRecordId = (Id) childRecord.get(lookup.RelationShipField);
            if (isDeleting && masterRecordId == childRecord.Id) {
              continue;
            }
            masterRecordIds.add(masterRecordId);
          }
        }
      }
    }

    // Process the rollups and update the master records
    updateRecords(
      updateMasterRollupsTrigger(lookups, masterRecordIds, scheduleAllRollups),
      false,
      true
    );
  }

  /**
   * Method wraps the LREngine.rollup method, provides context via the lookups described in RollupSummary
   *
   * @param lookups Lookup to calculate perform
   * @param childRecords Child records being modified
   * @returns Array of master records containing the updated rollups, calling code must perform update DML operation
   **/
  private static List<SObject> updateMasterRollupsTrigger(
    List<RollupSummary> lookups,
    Set<Id> masterRecordIds,
    Boolean scheduleAllRollups
  ) {
    // Process lookups,
    //    Realtime & Developer are added to a list for later LRE context creation and processing,
    //    Scheduled result in parent Id''s being emitted to scheduled item object for later processing
    Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
    List<RollupSummary> runnowLookups = new List<RollupSummary>();
    List<LookupRollupSummaryScheduleItems__c> scheduledItems = new List<LookupRollupSummaryScheduleItems__c>();
    for (RollupSummary lookup : lookups) {
      if (BypassHandler.isBypassed(lookup.UniqueName)) {
        continue;
      }

      if (
        lookup.CalculationMode ==
        RollupSummaries.CalculationMode.Scheduled.name() || scheduleAllRollups
      ) {
        // For polymoprhic relationships the master Id list maybe mixed types, associated with the correct rollup
        SObjectType parentType = gd.get(lookup.ParentObject);
        if (parentType == null)
          continue;
        // For scheduled rollups queue the parent Id record for processing
        for (Id parentId : masterRecordIds) {
          if (parentId.getSobjectType() == parentType) {
            LookupRollupSummaryScheduleItems__c scheduledItem = new LookupRollupSummaryScheduleItems__c();
            scheduledItem.Name = parentId;
            scheduledItem.LookupRollupSummary2__c = lookup.Id;
            scheduledItem.ParentId__c = parentId;
            scheduledItem.QualifiedParentID__c = parentId + ''#'' + lookup.Id;
            scheduledItems.add(scheduledItem);
          }
        }
      } else if (
        lookup.CalculationMode ==
        RollupSummaries.CalculationMode.Realtime.name() ||
        lookup.CalculationMode ==
        RollupSummaries.CalculationMode.Developer.name()
      ) {
        // Filter realtime & Developer lookups in order to generate LRE contexts below
        runnowLookups.add(lookup);
      }
    }

    if (scheduledItems.size() > 0) {
      // Attempt to populate the legacy LookupRollupSummary__c field (since its a required field) if the admin has not deleted it post install?
      Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.LookupRollupSummaryScheduleItems__c.fields.getMap();
      Schema.SObjectField legacyLookupRollupSummaryField = fieldMap.get(
        ''dlrs__LookupRollupSummary__c''
      );
      if (legacyLookupRollupSummaryField != null) {
        // Scan for existing shadow rollup records for the custom metadata based rollups
        Set<String> uniqueNames = new Set<String>();
        for (
          LookupRollupSummaryScheduleItems__c scheduledItem : scheduledItems
        ) {
          Id rollupId = (Id) scheduledItem.LookupRollupSummary2__c;
          if (
            rollupId.getSobjectType() ==
            LookupRollupSummary2__mdt.getSObjectType()
          ) {
            uniqueNames.add(''mdt:'' + scheduledItem.LookupRollupSummary2__c);
          }
        }
        Map<String, RollupSummary> shadowRollupsByMdtId = new Map<String, RollupSummary>();
        for (
          RollupSummary shadowRollup : new RollupSummariesSelector.CustomObjectSelector(
              false
            )
            .selectByUniqueName(uniqueNames)
        ) {
          String uniqueName = shadowRollup.UniqueName;
          String mdtRollupId = uniqueName.split('':'')[1];
          shadowRollupsByMdtId.put(mdtRollupId, shadowRollup);
        }
        // Populate the legacy LookupRollupSummary__c if possible
        for (
          LookupRollupSummaryScheduleItems__c scheduledItem : scheduledItems
        ) {
          Id rollupId = (Id) scheduledItem.LookupRollupSummary2__c;
          if (
            rollupId.getSobjectType() == LookupRollupSummary__c.getSObjectType()
          ) {
            scheduledItem.put(legacyLookupRollupSummaryField, rollupId);
          } else if (
            rollupId.getSobjectType() ==
            LookupRollupSummary2__mdt.getSObjectType()
          ) {
            RollupSummary shadowRollup = shadowRollupsByMdtId.get(rollupId);
            if (shadowRollup != null) {
              scheduledItem.put(
                legacyLookupRollupSummaryField,
                shadowRollup.Id
              );
            } else {
              throw new RollupService.RollupValidationException(
                ''Scheduled rollups are running in legacy mode and are unable to resolve corresponding shadow rollups. Please visit the Lookup Rollup Summary Tools tab for more information and steps to resolve.''
              );
            }
          }
        }
      }
      // These records drive the work done by the RollupJob Scheduled Apex Class
      upsert scheduledItems QualifiedParentID__c;
    }

    // Process each context (parent child relationship) and its associated rollups
    Map<Id, SObject> masterRecords = new Map<Id, SObject>();
    List<LREngine.Context> contexts = createLREngineContexts(runnowLookups);
    for (LREngine.Context ctx : contexts) {
      // Produce a set of master Id''s applicable to this context (parent only)
      Set<Id> ctxMasterIds = new Set<Id>();
      for (Id masterId : masterRecordIds)
        if (masterId.getSObjectType() == ctx.master)
          ctxMasterIds.add(masterId);
      // Execute the rollup and process the resulting updated master records
      for (SObject masterRecord : LREngine.rollup(ctx, ctxMasterIds)) {
        // Skip master records without Id''s (LREngine can return these where there was
        //	no related master records to children, for examlpe where a relationship is optional)
        if (masterRecord.Id == null)
          break;
        // Merge this master record result into a previous one from another rollup ctx?
        SObject existingRecord = masterRecords.get(masterRecord.Id);
        if (existingRecord == null)
          masterRecords.put(masterRecord.Id, masterRecord);
        else
          for (LREngine.RollupSummaryField fieldToRoll : ctx.fieldsToRoll)
            existingRecord.put(
              fieldToRoll.master.getSObjectField(),
              masterRecord.get(fieldToRoll.master.getSObjectField())
            );
      }
    }

    List<SObject> masterRecordsToUpdate = new RollupDmlGuard()
      .getOnlyRecordsNeedingDml(contexts, masterRecords);
    // Return distinct set of master records will all rollups from all contexts present
    return masterRecordsToUpdate;
  }

  /**
   * Queries for the defined rollups for the given child object type
   *
   * @returns List of rollup summary definitions
   **/
  private static List<RollupSummary> describeRollups(
    Set<SObjectType> childObjectTypes,
    List<RollupSummaries.CalculationMode> calculationModes
  ) {
    // Query applicable lookup definitions
    Set<String> childNames = new Set<String>();
    for (SObjectType sobjectType : childObjectTypes) {
      childNames.add(sobjectType.getDescribe().getName());
    }
    List<RollupSummary> lookups = new RollupSummariesSelector(false)
      .selectActiveByChildObject(calculationModes, childNames);
    return lookups;
  }

  /**
   * Method takes a list of Lookups and creates the most optimum list of LREngine.Context''s to execute
   **/
  private static List<LREngine.Context> createLREngineContexts(
    List<RollupSummary> lookups
  ) {
    // list of contexts generated
    List<LREngine.Context> engineContexts = new List<LREngine.Context>();
    // map of context criteria (except for order by) to a map of orderby with context
    Map<String, Map<String, LREngine.Context>> engineCtxByParentRelationship = new Map<String, Map<String, LREngine.Context>>();
    // list of rollupsummaryfields that do not have a specific orderby
    List<LookupRollupSummaryWrapper> noOrderByLookupWrappers = new List<LookupRollupSummaryWrapper>();
    Map<Id, LookupRollupSummaryScheduleItems__c> scheduledItems = new Map<Id, LookupRollupSummaryScheduleItems__c>();
    for (RollupSummary lookup : lookups) {
      // if no order is specified, we''ll defer context identification until after we build contexts for
      // all the lookups that contain a specific order by
      LookupRollupSummaryWrapper lookupWrapper = createLSFWrapper(lookup);
      if (!lookupWrapper.OrderByRequired) {
        // add to the list of lookups that do not have an order by specified
        noOrderByLookupWrappers.add(lookupWrapper);
      } else {
        // Note that context key here will not include the order by
        String contextKey = getContextKey(lookupWrapper);
        // obtain the map of orderby to context based on contextKey
        Map<String, LREngine.Context> lreContextByOrderBy = engineCtxByParentRelationship.get(
          contextKey
        );
        // if we don''t have a map yet, create it
        if (lreContextByOrderBy == null) {
          lreContextByOrderBy = new Map<String, LREngine.Context>();
          engineCtxByParentRelationship.put(contextKey, lreContextByOrderBy);
        }
        String orderBy = lookupWrapper.OrderByClause; // this will be the FieldToOrderBy__c from the RollupSummary
        // Lowering case on Describable fields is only required for Legacy purposes since RollupSummary records
        // will be updated with describe names on insert/update moving forward.
        String orderByKey = orderBy.toLowerCase();
        // obtain the context for this orderby key
        LREngine.Context lreContext = lreContextByOrderBy.get(orderByKey);
        // if not context yet, create one
        if (lreContext == null) {
          // Construct LREngine.Context
          lreContext = createContext(lookupWrapper);
          lreContextByOrderBy.put(orderByKey, lreContext);
          engineContexts.add(lreContext);
        }
        // Add the rollup summary field to the context
        lreContext.add(lookupWrapper.RollupSummaryField);
      }
    }

    // now that we have contexts built for all lookups that have a specific order by
    // we iterate those that do not and pick the first one that matches all other criteria
    // if there is not one that matches other criteria, we create a new context
    if (!noOrderByLookupWrappers.isEmpty()) {
      // loop through our list of lookups that do not have an orderby specified
      for (LookupRollupSummaryWrapper lookupWrapper : noOrderByLookupWrappers) {
        // Note that context key here will not include the order by
        String contextKey = getContextKey(lookupWrapper);
        // obtain the map of orderby to context based on contextKey
        Map<String, LREngine.Context> lreContextByOrderBy = engineCtxByParentRelationship.get(
          contextKey
        );
        // if we don''t have a map yet, create it
        if (lreContextByOrderBy == null) {
          lreContextByOrderBy = new Map<String, LREngine.Context>();
          engineCtxByParentRelationship.put(contextKey, lreContextByOrderBy);
        }

        LREngine.Context lreContext = null;
        if (lreContextByOrderBy.isEmpty()) {
          // if we do not have any contexts yet then create one
          // when created, the OrderBy on the context will be set null since no order by was specified
          // Construct LREngine.Context
          lreContext = createContext(lookupWrapper);
          // ensure key is lowered
          lreContextByOrderBy.put(''####NOORDERBY####'', lreContext);
          engineContexts.add(lreContext);
        } else {
          // since no orderby was specified we can execute in a non-deterministic manner
          // so for that reason we''ll just grab the first one
          // Note - In an effort to support some backwards compat here, we could try to find a context
          //        whos first orderby field (ASC NULLS FIRST) matches this lookups FieldToAggregate__c
          //        however for performance reasons, we''ll forgo that and just pick the first
          lreContext = lreContextByOrderBy.values()[0];
        }

        // Add the rollup summary field to the context
        lreContext.add(lookupWrapper.RollupSummaryField);
      }
    }

    return engineContexts;
  }

  private static LREngine.Context createContext(
    LookupRollupSummaryWrapper lookupWrapper
  ) {
    return new LREngine.Context(
      lookupWrapper.ParentObjectType, // parent object
      lookupWrapper.ChildObjectType, // child object
      lookupWrapper.RelationshipField.getDescribe(), // relationship field name
      lookupWrapper.Lookup.RelationShipCriteria,
      lookupWrapper.SharingMode,
      lookupWrapper.OrderByClause,
      lookupWrapper.AggregateAllRows
    );
  }

  private static SObjectType getSObjectType(String sObjectName) {
    fflib_SObjectDescribe describe = fflib_SObjectDescribe.getDescribe(
      sObjectName
    );
    return (describe == null) ? null : describe.getSObjectType();
  }

  private static Map<String, Schema.SObjectField> getSObjectTypeFields(
    SObjectType sObjectType
  ) {
    return fflib_SObjectDescribe.getDescribe(sObjectType).getFieldsMap();
  }

  private class LookupRollupSummaryWrapper {
    public RollupSummary Lookup;
    public Schema.SObjectType ParentObjectType;
    public Schema.SObjectType ChildObjectType;
    public Schema.SObjectField FieldToAggregate;
    public Schema.SObjectField RelationshipField;
    public Schema.SObjectField AggregateResultField;
    public Boolean AggregateAllRows;
    public LREngine.SharingMode SharingMode;
    public Boolean OrderByRequired; // true if FieldToOrderBy__c is not blank
    public String OrderByClause; // FieldToOrderBy__c if OrderByRequired is true; null otherwise
    public LREngine.RollupSummaryField RollupSummaryField;
  }

  private static LookupRollupSummaryWrapper createLSFWrapper(
    RollupSummary lookup
  ) {
    // Resolve (and cache) SObjectType''s and fields for Parent and Child objects
    SObjectType parentObjectType = getSObjectType(lookup.ParentObject);
    if (parentObjectType == null)
      throw RollupServiceException.invalidRollup(
        lookup,
        ''Parent Object : '' + lookup.ParentObject
      );
    Map<String, Schema.SObjectField> parentFields = getSObjectTypeFields(
      parentObjectType
    );
    SObjectType childObjectType = getSObjectType(lookup.ChildObject);
    if (childObjectType == null)
      throw RollupServiceException.invalidRollup(
        lookup,
        ''Child Object : '' + lookup.ChildObject
      );
    Map<String, Schema.SObjectField> childFields = getSObjectTypeFields(
      childObjectType
    );
    SObjectField fieldToAggregate = childFields.get(lookup.FieldToAggregate);
    SObjectField relationshipField = childFields.get(lookup.RelationshipField);
    SObjectField aggregateResultField = parentFields.get(
      lookup.AggregateResultField
    );
    if (fieldToAggregate == null)
      throw RollupServiceException.invalidRollup(
        lookup,
        ''Field to Aggregate: '' + lookup.FieldToAggregate
      );
    if (relationshipField == null)
      throw RollupServiceException.invalidRollup(
        lookup,
        ''Relationship Field: '' + lookup.RelationshipField
      );
    if (aggregateResultField == null)
      throw RollupServiceException.invalidRollup(
        lookup,
        ''Aggregate Result Field: '' + lookup.AggregateResultField
      );

    // Summary field definition used by LREngine
    LREngine.RollupSummaryField rsf = new LREngine.RollupSummaryField(
      aggregateResultField.getDescribe(),
      fieldToAggregate.getDescribe(),
      RollupSummaries.OPERATION_PICKLIST_TO_ENUMS.get(
        lookup.AggregateOperation
      ),
      lookup.ConcatenateDelimiter,
      Integer.valueOf(lookup.RowLimit)
    );

    LookupRollupSummaryWrapper wrapper = new LookupRollupSummaryWrapper();
    wrapper.Lookup = lookup;
    wrapper.ParentObjectType = parentObjectType;
    wrapper.ChildObjectType = childObjectType;
    wrapper.FieldToAggregate = fieldToAggregate;
    wrapper.RelationshipField = relationshipField;
    wrapper.AggregateResultField = aggregateResultField;
    wrapper.AggregateAllRows = lookup.AggregateAllRows;
    wrapper.SharingMode = lookup.CalculationSharingMode == null ||
      lookup.CalculationSharingMode == ''User''
      ? LREngine.SharingMode.User
      : LREngine.SharingMode.System_x;
    // if order by is not specified, orderby will be null else it will be FieldToOrderBy__c
    wrapper.OrderByRequired = !String.isBlank(lookup.FieldToOrderBy);
    wrapper.OrderByClause = wrapper.OrderByRequired
      ? lookup.FieldToOrderBy
      : null;
    wrapper.RollupSummaryField = rsf;

    return wrapper;
  }

  private static String getContextKey(
    LookupRollupSummaryWrapper lookupWrapper
  ) {
    // Context Key Based On: ParentObject__c, RelationshipField__c, RelationShipCriteria__c, rsfType, SharingMode, AggergateAllRows
    // Note we do not include OrderBy here because orderby map is contained within the map of contextKeys
    String rsfType = lookupWrapper.RollupSummaryField.isAggregateBasedRollup()
      ? ''aggregate''
      : ''query'';
    // Lowering case on Describable fields is only required for Legacy purposes since RollupSummary records
    // will be updated with describe names on insert/update moving forward.
    // Ideally this would not be needed to save CPU cycles but including to ensure context is properly re-used when possible for
    // rollups that have not been updated/inserted after the insert/update enhancement is applied
    // Unable to lower RelationShipCriteria__c because of field value case-(in)sensitivity configuration
    return (lookupWrapper.Lookup.ParentObject.toLowerCase() +
    ''#'' +
    lookupWrapper.Lookup.ChildObject.toLowerCase() +
    ''#'' +
    lookupWrapper.Lookup.RelationshipField.toLowerCase() +
    ''#'' +
    lookupWrapper.Lookup.RelationShipCriteria +
    ''#'' +
    rsfType +
    ''#'' +
    lookupWrapper.SharingMode +
    ''#'' +
    lookupWrapper.AggregateAllRows);
  }

  /**
   * Check if npsp is installed and TDTM can be disabled with Callable_API
   **/
  private static Boolean npspInstalled() {
    if (Type.forName(''npsp'', ''Callable_API'') != null) {
      return true;
    }
    return false;
  }

  /**
   * If possible, disable npsp tdtm triggers with Callable_API
   **/
  @TestVisible
  private static void disableNpspTdtm() {
    if (!npspInstalled()) {
      return;
    }
    Callable npspApi = (System.Callable) Type.forName(''npsp'', ''Callable_API'')
      .newInstance();
    npspApi.call(''TDTM.DisableAllTriggers'', new Map<String, Object>());
  }

  /**
   * Wrapper around DML allowing with or without sharing to be applied and all or nothing exception handling
   **/
  private static List<Database.Saveresult> updateRecords(
    List<SObject> masterRecords,
    Boolean withSharing,
    Boolean allOrNothing
  ) {
    return withSharing
      ? new UpdateWithSharing(masterRecords).updateRecords(allOrNothing)
      : new UpdateWithoutSharing(masterRecords).updateRecords(allOrNothing);
  }

  private virtual class Updater {
    protected List<SObject> masterRecords;

    public Updater(List<SObject> masterRecords) {
      this.masterRecords = masterRecords;
    }

    public virtual List<Database.Saveresult> updateRecords(
      boolean allOrNothing
    ) {
      // sort (selection sort) masterRecords to avoid having more than 10 chunks in a single database operation
      // masterRecords.sort() will not work
      Integer indexOfMin;
      for (
        Integer outerIndex = 0; outerIndex < masterRecords.size(); outerIndex++
      ) {
        indexOfMin = outerIndex;
        for (
          Integer innerIndex = outerIndex;
          innerIndex < masterRecords.size();
          innerIndex++
        ) {
          if (
            String.valueOf(masterRecords.get(indexOfMin).getSObjectType())
              .compareTo(
                String.valueOf(masterRecords.get(innerIndex).getSObjectType())
              ) > 0
          ) {
            indexOfMin = innerIndex;
          }
        }
        SObject temp = masterRecords.get(outerIndex);
        masterRecords.set(outerIndex, masterRecords.get(indexOfMin));
        masterRecords.set(indexOfMin, temp);
      }
      try {
        return Database.update(masterRecords, allOrNothing);
      } catch (DMLException e) {
        // Determine if the exception is due to parent record/s having been deleted
        Boolean throwException = true;
        if (allOrNothing) {
          Integer rowIdx = 0;
          while (rowIdx < e.getNumDml()) {
            // Keep looking for entity/record deletion for other parent records
            if (e.getDmlType(rowIdx) == StatusCode.ENTITY_IS_DELETED) {
              rowIdx++;
              continue;
            } else {
              break;
            }
          }
          throwException = rowIdx < e.getNumDml();
        }
        if (!throwException) {
          // Swallow an exception describing failure to update parent rows that have been deleted
          // See related discussion here https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/39
          return new List<Database.Saveresult>();
        }
        // Throw on as normal
        throw e;
      }
    }
  }

  private with sharing class UpdateWithSharing extends Updater {
    public UpdateWithSharing(List<SObject> masterRecords) {
      super(masterRecords);
    }

    public override List<Database.Saveresult> updateRecords(
      boolean allOrNothing
    ) {
      return super.updateRecords(allOrNothing);
    }
  }

  private without sharing class UpdateWithoutSharing extends Updater {
    public UpdateWithoutSharing(List<SObject> masterRecords) {
      super(masterRecords);
    }

    public override List<Database.Saveresult> updateRecords(
      boolean allOrNothing
    ) {
      return super.updateRecords(allOrNothing);
    }
  }
}','2270074346.0','True','RollupService','44903','Active');
INSERT INTO "ApexClass" VALUES(27,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Generic exception class used by methods on the RollupService
 **/
public class RollupServiceException extends Exception {
  /**
   * Generic exception when aspects of the rollup summary definition are found to be in error at runtime
   **/
  public static RollupServiceException invalidRollup(
    RollupSummary lookup,
    String configInvalid
  ) {
    return new RollupServiceException(
      ''Lookup Rollup Summary  \'''' +
      lookup.Name +
      ''\'' is invalid, your org configuration may have changed ('' +
      configInvalid +
      '').''
    );
  }

  /**
   * Unable to find the given lookup
   **/
  public static RollupServiceException rollupNotFound(Id lookupId) {
    return new RollupServiceException(
      ''Invalid rollup '' +
      lookupId +
      '' not found.''
    );
  }

  /**
   * Job alraedy executed to recalculate rollup
   **/
  public static RollupServiceException jobAlreadyRunning(String name) {
    return new RollupServiceException(
      ''A calculate job for rollup \'''' +
      name +
      ''\'' is already executing. If you suspect it is not aleady running try clearing the applicable record from the Lookup Rollup Calculate Jobs tab and try again.''
    );
  }

  /**
   * Jobs executing
   **/
  public static RollupServiceException jobsExecuting(String className) {
    return new RollupServiceException(
      ''A previous Declarative Rollup Summary scheduled job \'''' +
      className +
      ''\'' is still running, this scheduled execution will not occur.''
    );
  }

  /**
   * Missing space for rollup record
   **/
  public static RollupServiceException missingStorageForJobRecord() {
    return new RollupServiceException(
      ''Your organization has run out of space for the rollup job record to be inserted. Please clean up some space before running the calculate job.''
    );
  }
}','1303229058.0','True','RollupServiceException','1443','Active');
INSERT INTO "ApexClass" VALUES(28,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Tests the RollupService methods, note the LREngine is test independently via TestLREngine
 **/
@IsTest
private with sharing class RollupServiceTest {
  static Schema.SObjectField ACCOUNT_SLA_EXPIRATION_DATE;
  static Schema.SObjectField ACCOUNT_NUMBER_OF_LOCATIONS;
  static {
    // Dynamically resolve these fields, if they are not present when the test runs, the test will return as passed to avoid failures in subscriber org when packaged
    fflib_SObjectDescribe describe = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    ACCOUNT_SLA_EXPIRATION_DATE = describe.getField(''SLAExpirationDate__c'');
    ACCOUNT_NUMBER_OF_LOCATIONS = describe.getField(''NumberOfLocations__c'');
  }

  private testMethod static void testSingleSumRollup() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      600,
      RollupSummaries.AggregateOperation.Sum,
      null
    );
  }

  @IsTest
  static void testRollupBypass() {
    String name = ''SingleTestRollup'';

    RollupService.bypass(name);

    Test.startTest();
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      0,
      RollupSummaries.AggregateOperation.Sum,
      null
    );
    Test.stopTest();
  }

  private testMethod static void testSingleMaxRollup() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      250,
      RollupSummaries.AggregateOperation.Max,
      null
    );
  }

  private testMethod static void testSingleMinRollup() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      50,
      RollupSummaries.AggregateOperation.Min,
      null
    );
  }

  private testMethod static void testSingleAvgRollup() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      150,
      RollupSummaries.AggregateOperation.Avg,
      null
    );
  }

  private testMethod static void testSingleCountRollup() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      4,
      RollupSummaries.AggregateOperation.Count,
      null
    );
  }

  private testMethod static void testSingleCountDistinctRollup() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      2,
      RollupSummaries.AggregateOperation.Count_Distinct,
      null
    );
  }

  private testMethod static void testSingleSumRollupConditional() {
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      500,
      RollupSummaries.AggregateOperation.Sum,
      ''Amount > 200''
    );
  }

  private testMethod static void testMultiRollup() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 500;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''Amount > 200'';

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testMultiRollupSumAndAvg() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 600;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = null;

    // Test data for rollup B
    Decimal expectedResultB = 150;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Avg;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Avg Opportunities into Annual Revenue on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''Amount'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testMultiRollupNoConditions() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 10, 20, 30, 40 };

    // Test data for rollup A
    Decimal expectedResultA = 160;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Max;
    String conditionA = null;

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Max Opportunities Amount'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Count Opportunities'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''Amount'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryB, rollupSummaryA };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    Integer rollupIdx = 0;
    for (Decimal rollupValue : rollups) {
      rollupIdx++;
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue * rollupIdx;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  @IsTest
  static void testMultiRollupNoConditionsBypass() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 10, 20, 30, 40 };

    // Test data for rollup A
    Decimal expectedResultA = 0;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Max;
    String conditionA = null;

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Max Opportunities Amount'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.UniqueName__c = ''MaxOppsAmount'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Count Opportunities'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.UniqueName__c = ''CountOppsPerAccount'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''Amount'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryB, rollupSummaryA };

    RollupService.bypass(rollupSummaryA.UniqueName__c);

    // Test data
    Test.startTest();
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    Integer rollupIdx = 0;
    for (Decimal rollupValue : rollups) {
      rollupIdx++;
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue * rollupIdx;
      opps.add(opp);
    }
    insert opps;
    Test.stopTest();

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testCountByType() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 10, 20, 30, 40 };

    // Test data for rollup B
    Decimal expectedResultB = 2;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Count Opportunities'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''Type'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    Integer rollupIdx = 0;
    for (Decimal rollupValue : rollups) {
      rollupIdx++;
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.Type = rollupIdx > 2 ? ''New Customer'' : null;
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue * rollupIdx;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testCountById() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 10, 20, 30, 40 };

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Count Opportunities'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''Id'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    Integer rollupIdx = 0;
    for (Decimal rollupValue : rollups) {
      rollupIdx++;
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue * rollupIdx;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testMultiRollupWithTwoParents() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 500;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''Amount > 200'';

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Test data for rollup C
    Decimal expectedResultC = 600;
    RollupSummaries.AggregateOperation operationC = RollupSummaries.AggregateOperation.Sum;
    String conditionC = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities into Number Of Locations on Accountt'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Configure rollup C
    LookupRollupSummary__c rollupSummaryC = new LookupRollupSummary__c();
    rollupSummaryC.Name = ''Total Opportunities into Num Sent on Campaign'';
    rollupSummaryC.ParentObject__c = ''Campaign'';
    rollupSummaryC.ChildObject__c = ''Opportunity'';
    rollupSummaryC.RelationShipField__c = ''CampaignId'';
    rollupSummaryC.RelationShipCriteria__c = conditionC;
    rollupSummaryC.FieldToAggregate__c = ''TotalOpportunityQuantity'';
    rollupSummaryC.AggregateOperation__c = operationC.name();
    rollupSummaryC.AggregateResultField__c = ''NumberSent'';
    rollupSummaryC.Active__c = true;
    rollupSummaryC.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB,
      rollupSummaryC
    };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    SObject camp = Schema.getGlobalDescribe().get(''Campaign'').newSObject();
    camp.put(''Name'', ''Test Campaign'');
    insert camp;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opp.TotalOpportunityQuantity = rollupValue;
      opp.put(''CampaignId'', camp.Id);
      opps.add(opp);
    }
    insert opps;

    // Assert rollups
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
    Id campId = camp.Id;
    SObject campResult = Database.query(
      ''select NumberSent from Campaign where Id = :campId''
    );
    System.assertEquals(expectedResultC, campResult.get(''NumberSent''));
  }

  private testMethod static void testMultiRollupWithTwoParentsTenChunks() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15
    };

    // Test data for rollup A
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = null;

    // Test data for rollup B
    RollupSummaries.AggregateOperation operationC = RollupSummaries.AggregateOperation.Sum;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities into Num Sent on Campaign'';
    rollupSummaryB.ParentObject__c = ''Campaign'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''CampaignId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''TotalOpportunityQuantity'';
    rollupSummaryB.AggregateOperation__c = operationC.name();
    rollupSummaryB.AggregateResultField__c = ''NumberSent'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    List<SObject> accountList = new List<SObject>();
    List<SObject> campaignList = new List<SObject>();

    List<Opportunity> opps = new List<Opportunity>();
    Integer index = 0;
    for (Decimal rollupValue : rollups) {
      // add each Opportunity to a new Account/Campaign to produce chunking
      accountList.add(new Account());
      accountList[index].put(''Name'', ''Test Account'');
      accountList[index].put(''AnnualRevenue'', 0);
      insert accountList[index];

      campaignList.add(Schema.getGlobalDescribe().get(''Campaign'').newSObject());
      campaignList[index].put(''Name'', ''Test Campaign'');
      insert campaignList[index];

      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = accountList[index].Id;
      opp.Amount = rollupValue;
      opp.TotalOpportunityQuantity = rollupValue;
      opp.put(''CampaignId'', campaignList[index].Id);
      opps.add(opp);

      index++;
    }
    insert opps;

    // Assert rollups for each Account/Campaign
    index = 0;
    for (Decimal rollupValue : rollups) {
      Id accountId = accountList[index].Id;
      Account accountResult = Database.query(
        ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
      );
      System.assertEquals(rollupValue, accountResult.AnnualRevenue);

      Id campId = campaignList[index].Id;
      SObject campResult = Database.query(
        ''select NumberSent from Campaign where Id = :campId''
      );
      System.assertEquals(rollupValue, campResult.get(''NumberSent''));

      index++;
    }
  }

  private testMethod static void testSingleRollupWithoutRelation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = null; // Note no relationship with an Account
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    System.assertEquals(
      0,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );

    // Do an update
    opp.Amount = 101;
    update opp;

    // Assert rollup
    System.assertEquals(
      0,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }

  private testMethod static void testSingleRollupWithInsertThenDelete() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      0,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }

  private testMethod static void testSingleRollupWithInsertsThenDelete() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = 100;
      insert opp;
    }
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    System.assertEquals(
      200,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      100,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }

  private testMethod static void testRollupWithoutChanges() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Perform standard test
    testSingleRollup(
      new List<Decimal>{ 250, 250, 50, 50 },
      600,
      RollupSummaries.AggregateOperation.Sum,
      null
    );
    List<Opportunity> opps = [SELECT Id FROM Opportunity];

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();

    // Update opportunities (no changes to the field being aggregted, thus no rollup processng)
    update opps;

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    System.assertEquals(beforeQueries + 1, Limits.getQueries()); // Only tolerate a query for the Lookup definition
    System.assertEquals(beforeRows + 1, Limits.getQueryRows()); // Only tolerate a row for the Lookup definition
  }

  private testMethod static void testLimitsConsumedWithConditions() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // If NPSP is present, disable NPSP TDTM triggers. They distort the limit counts.
    RollupService.disableNpspTdtm();

    // Disable the Account trigger for this test, its carefully caluculated test actuals are thrown when this is enabled as well
    TestContext.AccountTestTriggerEnabled = false;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 500;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''Amount > 200'';

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // One query on ApexTrigger (in the TestContext.isSupported method)
    // One query on ApexTrigger (validation when inserting rollups)
    // One query on Database.newQueryLocator (validation when insert rollup a)
    // One query on Rollup object
    // One query on Opportunity for rollup a
    // One query on Opportunity for rollup b
    // One query on Parent for values to confirm DML needed
    System.assertEquals(7, Limits.getQueries());

    // One row for ApexTrigger (in the TestContext.isSupported method)
    // One row for ApexTrigger
    // Two rows for Rollup object
    // Two rows for Opportunity for rollup a
    // One rows for Opportunity for rollup b (since its a COUNT and only uses 1 row since Summer''18)
    // One for Parent
    System.assertEquals(8, Limits.getQueryRows());

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );

    // Modify the opps, but only the Amount, this should result in only the Amount rollup executing
    for (Opportunity opp : opps)
      opp.Amount++;
    update opps;

    // + One query for the Account query above
    // + One query on Rollup object
    // + One query on Opportunity for rollup a
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(11, Limits.getQueries());

    // + One query for the Account query above
    // + Two rows for Rollup object
    // + Two rows for Opportunity for rollup a
    // + One for Parent
    System.assertEquals(14, Limits.getQueryRows());

    // Assert rollup
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA + 2, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testLimitsConsumedWithoutConditions() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // If NPSP is present, disable NPSP TDTM triggers. They distort the limit counts.
    RollupService.disableNpspTdtm();

    // Disable the Account trigger for this test, its carefully caluculated test actuals are thrown when this is enabled as well
    TestContext.AccountTestTriggerEnabled = false;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 600;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = null;

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // One query on ApexTrigger (in the TestContext.isSupported method)
    // One query on ApexTrigger (validation when inserting rollups)
    // One query on Rollup object
    // One query on Opportunity for both rollups
    // One query on Parent for values to confirm DML needed
    System.assertEquals(5, Limits.getQueries());

    // One row for ApexTrigger (in the TestContext.isSupported method)
    // One row for ApexTrigger
    // Two rows for Rollup object
    // Four rows for Opportunity for rollup a and b
    // One for Parent
    System.assertEquals(9, Limits.getQueryRows());

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );

    // Modify the opps, but only the Amount, this should result in only the Amount rollup executing
    for (Opportunity opp : opps)
      opp.Amount++;
    update opps;

    // + One query for the Account query above
    // + One query on Rollup object
    // + One query on Opportunity for rollup a
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(9, Limits.getQueries());

    // + One query for the Account query above
    // + Two rows for Rollup object
    // + Four rows for Opportunity for rollup a and
    // + One for Parent
    System.assertEquals(17, Limits.getQueryRows());

    // Assert rollup
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA + 4, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private static void testSingleRollup(
    List<Decimal> rollups,
    Decimal expectedResult,
    RollupSummaries.AggregateOperation operation,
    String condition
  ) {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.UniqueName__c = ''SingleTestRollup'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = condition; // ''Amount > 200'';
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = operation.name().replace(''_'', '' '');
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    System.assertEquals(
      expectedResult,
      [SELECT AnnualRevenue FROM Account WHERE Id = :account.Id]
      .AnnualRevenue
    );
  }

  private testMethod static void testMultiRollupOfDifferentTypes() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 600;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = null;

    // Test data for rollup B
    String expectedResultB = ''Open,Open,Open,Open'';
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Concatenate;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Concatenate Opportunities Stage Name into Description on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''StageName'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''Description'';
    rollupSummaryB.ConcatenateDelimiter__c = '','';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, Description from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(expectedResultB, accountResult.Description);
  }

  /**
   * Current default behavior of LREngine is to apply RelationshipField__c in the order by
   * for all contexts.  Beyond that, if no order by is specified, no orderby is applied.
   *
   * This results in all queries having an order by of at least RelationshipField__c even if no orderby
   * is specified in FieldToOrderBy__c.  Ordering by RelationshipField__c does not impact Query based rollup results
   * and is only applied to assist in materializing the results on master records
   *
   * Current default behavior of DLRS is to build the context with all rollupsummaries
   * retrieving them ordered by ParentObject__c (Account) and then by RelationshipField__c (e.g. AccountId)
   * which results in non-deterministic result when no orderby is specified so a test cannot reliabily be written against
   * multiple rollups on same parent/child relationship when no orderby is specified.
   */
  private static Id setupMultiRollupDifferentTypes(
    Map<String, String> opportunityData,
    RollupSummaries.AggregateOperation operationA,
    String orderByFieldA,
    RollupSummaries.AggregateOperation operationB,
    String orderByFieldB
  ) {
    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''First Opportunity Name into Sic on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = null;
    rollupSummaryA.FieldToAggregate__c = ''StageName'';
    rollupSummaryA.FieldToOrderBy__c = orderByFieldA;
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''Sic'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Concatenate Opportunities Stage Name into Description on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = null;
    rollupSummaryB.FieldToAggregate__c = ''Name'';
    rollupSummaryB.FieldToOrderBy__c = orderByFieldB;
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''Description'';
    rollupSummaryB.ConcatenateDelimiter__c = '','';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;

    Date today = System.today();
    List<Opportunity> opps = new List<Opportunity>();
    for (String opportunityName : opportunityData.keySet()) {
      List<String> oppFieldValues = opportunityData.get(opportunityName)
        .split('';'');
      Opportunity opp = new Opportunity();
      opp.Name = opportunityName;
      opp.AccountId = account.Id;
      opp.Amount = Decimal.valueOf(oppFieldValues[0]);
      opp.CloseDate = today.addMonths(Integer.valueOf(oppFieldValues[1]));
      opp.StageName = oppFieldValues[2];
      opps.add(opp);
    }
    insert opps;

    return account.Id;
  }

  /**
   * Test default behavior with different order by on each rollup
   */
  private testMethod static void testMultiRollupOfDifferentTypesDifferentOrderBy() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    // OpportunityName => Amount;CloseDateAddMonthsToToday;StageName
    Map<String, String> opportunityData = new Map<String, String>{
      ''Joe'' => ''250;0;Open'',
      ''Steve'' => ''50;1;Prospecting'',
      ''Kim'' => ''100;-2;Closed Won'',
      ''Charlie'' => ''225;-1;Needs Analysis''
    };

    // Test data for rollup A
    String expectedResultA = ''Closed Won'';
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.First;
    String orderByClauseA = Schema.SObjectType.Opportunity.fields.CloseDate.getName();

    // Test data for rollup B
    String expectedResultB = ''Steve,Kim,Charlie,Joe'';
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Concatenate;
    String orderByClauseB = Schema.SObjectType.Opportunity.fields.Amount.getName();

    // generate rollups and data
    Id accountId = setupMultiRollupDifferentTypes(
      opportunityData,
      operationA,
      orderByClauseA,
      operationB,
      orderByClauseB
    );

    // Assert rollup
    Account accountResult = Database.query(
      ''select Sic, Description from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.Sic);
    System.assertEquals(expectedResultB, accountResult.Description);
  }

  /**
   * Test default behavior with different order by containing multiple fields on each rollup
   * for Issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/216
   */
  private testMethod static void testMultiRollupOfDifferentTypesDifferentMultipleFieldsOrderBy() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    // OpportunityName => Amount;CloseDateAddMonthsToToday;StageName
    Map<String, String> opportunityData = new Map<String, String>{
      ''Joe'' => ''100;0;Open'',
      ''Steve'' => ''100;-2;Prospecting'',
      ''Kim'' => ''100;1;Closed Won'',
      ''Charlie'' => ''100;-1;Needs Analysis''
    };

    // Test data for rollup A
    String expectedResultA = ''Prospecting'';
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.First;
    String orderByClauseA = ''Amount ASC NULLS FIRST, CloseDate ASC NULLS FIRST, Name'';

    // Test data for rollup B
    String expectedResultB = ''Kim,Joe,Charlie,Steve'';
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Concatenate;
    String orderByClauseB = ''Amount ASC NULLS FIRST, CloseDate DESC NULLS FIRST, Name'';

    // generate rollups and data
    Id accountId = setupMultiRollupDifferentTypes(
      opportunityData,
      operationA,
      orderByClauseA,
      operationB,
      orderByClauseB
    );

    // Assert rollup
    Account accountResult = Database.query(
      ''select Sic, Description from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.Sic);
    System.assertEquals(expectedResultB, accountResult.Description);
  }

  private testMethod static void testPicklistRollup() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Colours__c.getDescribe()
      .getName();

    // Create a picklist rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Concatenate.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.ConcatenateDelimiter__c = '';'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, ''Red'');
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, ''Yellow'');
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, ''Blue'');
        children.add(child3);
      }
    }
    insert children;

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      ''Red;Yellow;Blue'',
      (String) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Red;Yellow;Blue'',
      (String) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Red;Yellow'',
      (String) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  private testMethod static void testPicklistRollupWithLimits() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Colours__c.getDescribe()
      .getName();

    // Create a picklist rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Concatenate.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.ConcatenateDelimiter__c = '';'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    rollupSummary.RowLimit__c = 2;
    rollupSummary.AggregateAllRows__c = true;
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, ''Red'');
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, ''Yellow'');
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, ''Blue'');
      children.add(child3);
    }
    insert children;

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      ''Red;Yellow'',
      (String) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Red;Yellow'',
      (String) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Red;Yellow'',
      (String) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  private testMethod static void testLastRollupWithLimits() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Colours__c.getDescribe()
      .getName();

    // Create a picklist rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Last.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.FieldToOrderBy__c = aggregateField + '' DESC'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    rollupSummary.RowLimit__c = 2;
    rollupSummary.AggregateAllRows__c = true;
    insert rollupSummary;

    // Insert parents
    SObject parent = parentType.newSObject();
    parent.put(''Name'', ''ParentA'');
    List<SObject> parents = new List<SObject>{ parent };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    String name = (String) parent.get(''Name'');
    SObject child1 = childType.newSObject();
    child1.put(relationshipField, parent.Id);
    child1.put(aggregateField, ''1'');
    children.add(child1);
    SObject child2 = childType.newSObject();
    child2.put(relationshipField, parent.Id);
    child2.put(aggregateField, ''2'');
    children.add(child2);
    SObject child3 = childType.newSObject();
    child3.put(relationshipField, parent.Id);
    child3.put(aggregateField, ''3'');
    children.add(child3);
    insert children;

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      ''2'',
      (String) assertParents.get(parent.id).get(aggregateResultField)
    );
  }

  private testMethod static void testLimitsConsumedWithSingleChildChanged() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Disable the Account trigger for this test, its carefully caluculated test actuals are thrown when this is enabled as well
    TestContext.AccountTestTriggerEnabled = false;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert rollupSummary;

    // Test data
    Integer numAccounts = 3;
    Account parentAccount1 = new Account();
    parentAccount1.Name = ''Parent Account 1'';
    parentAccount1.AnnualRevenue = 0;
    Account parentAccount2 = new Account();
    parentAccount2.Name = ''Parent Account 2'';
    parentAccount2.AnnualRevenue = 0;
    Account parentAccount3 = new Account();
    parentAccount3.Name = ''Parent Account 3'';
    parentAccount3.AnnualRevenue = 0;
    List<Account> parentAccounts = new List<Account>{
      parentAccount1,
      parentAccount2,
      parentAccount3
    };
    insert parentAccounts;

    List<Decimal> oppAmounts = new List<Decimal>{ 100, 200, 300, 400 };
    Decimal expectedAnnualRevenue = 1000;
    List<Opportunity> childOpportunities = new List<Opportunity>();
    for (Account acct : parentAccounts) {
      for (Decimal oppAmount : oppAmounts) {
        Opportunity opp = new Opportunity();
        opp.Name = ''Test Opportunity for '' + acct.Name;
        opp.StageName = ''Open'';
        opp.CloseDate = System.today();
        opp.AccountId = acct.Id;
        opp.Amount = oppAmount;
        childOpportunities.add(opp);
      }
    }
    insert childOpportunities;

    // assert rollup produced correct values
    System.assertEquals(
      expectedAnnualRevenue,
      [SELECT AnnualRevenue FROM Account WHERE Id = :parentAccount1.Id]
      .AnnualRevenue
    );
    System.assertEquals(
      expectedAnnualRevenue,
      [SELECT AnnualRevenue FROM Account WHERE Id = :parentAccount2.Id]
      .AnnualRevenue
    );
    System.assertEquals(
      expectedAnnualRevenue,
      [SELECT AnnualRevenue FROM Account WHERE Id = :parentAccount3.Id]
      .AnnualRevenue
    );

    // change opportunities on ''Parent Account 1'' leaving ''Parent Account 2'' opportunities untouched
    List<Opportunity> oppsToModify = [SELECT Id, Name, Amount FROM Opportunity];
    System.assertEquals(
      oppAmounts.size() * parentAccounts.size(),
      oppsToModify.size()
    );
    for (Opportunity oppToModify : oppsToModify) {
      // modify the CloseDate for all opps
      // this simulates a change to a record on a field that is not involved any rollup
      oppToModify.CloseDate = System.today().addMonths(1);

      // modify Amount on the Opportunity associated to Parent Account 1 and it''s current amount is 100
      // this simulates a change to a single record on a field that is involved in a rollup
      if (
        oppToModify.Name.endsWith(parentAccount1.Name) &&
        oppToModify.Amount == 100
      ) {
        oppToModify.Amount++;
      }
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Update opportunities (1 record has change to field being aggregated, all others do not have changes to that field)
    update oppsToModify;

    // Assert limits
    // + One query on Rollup object
    // + One query on Opportunity for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + One row for Rollup object
    // + Four rows for Opportunity on Parent 1
    // + One for Parent
    System.assertEquals(beforeRows + 6, Limits.getQueryRows());

    // + Twelve rows for Oppportunities (from the update statement itself)
    // + One row for Parent Account 1 (from lookup processing)
    System.assertEquals(beforeDMLRows + 13, Limits.getDMLRows());

    // assert rollups produced correct result
    System.assertEquals(
      expectedAnnualRevenue + 1,
      [SELECT AnnualRevenue FROM Account WHERE Id = :parentAccount1.Id]
      .AnnualRevenue
    );
    System.assertEquals(
      expectedAnnualRevenue,
      [SELECT AnnualRevenue FROM Account WHERE Id = :parentAccount2.Id]
      .AnnualRevenue
    );
    System.assertEquals(
      expectedAnnualRevenue,
      [SELECT AnnualRevenue FROM Account WHERE Id = :parentAccount3.Id]
      .AnnualRevenue
    );
  }

  private testMethod static void testLimitsConsumedWithReparentOnly() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField1 = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String relationshipField2 = LookupChild__c.LookupParent2__c.getDescribe()
      .getName();
    String aggregateField1 = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateField2 = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField1 = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String aggregateResultField2 = LookupParent__c.Total2__c.getDescribe()
      .getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Test Rollup'';
    rollupSummaryA.ParentObject__c = parentObjectName;
    rollupSummaryA.ChildObject__c = childObjectName;
    rollupSummaryA.RelationShipField__c = relationshipField1;
    rollupSummaryA.FieldToAggregate__c = aggregateField1;
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Concatenate.name();
    rollupSummaryA.AggregateResultField__c = aggregateResultField1;
    rollupSummaryA.ConcatenateDelimiter__c = '';'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();

    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Test Rollup'';
    rollupSummaryB.ParentObject__c = parentObjectName;
    rollupSummaryB.ChildObject__c = childObjectName;
    rollupSummaryB.RelationShipField__c = relationshipField2;
    rollupSummaryB.FieldToAggregate__c = aggregateField2;
    rollupSummaryB.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryB.AggregateResultField__c = aggregateResultField2;
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummaryA,
      rollupSummaryB
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    SObject child1 = childType.newSObject();
    child1.put(relationshipField1, parentA.Id);
    child1.put(relationshipField2, parentB.Id);
    child1.put(aggregateField1, ''Red'');
    child1.put(aggregateField2, 20);
    SObject child2 = childType.newSObject();
    child2.put(relationshipField1, parentA.Id);
    child2.put(relationshipField2, parentB.Id);
    child2.put(aggregateField1, ''Yellow'');
    child2.put(aggregateField2, 22);

    List<SObject> children = new List<SObject>{ child1, child2 };
    insert children;

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Red;Yellow'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      0.0,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      null,
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      null,
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );

    // change LookupParent2__c from Parent B to Parent C
    child1.put(relationshipField2, parentC.Id);

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // update including all children but only one child and only one field (LookupParent2__c) on that child has changed
    update children;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + Two rows for Rollup object
    // + Two rows for LookupChild__c for rollup B (One on Parent B and One on Parent C)
    // + Two for Parents
    System.assertEquals(beforeRows + 6, Limits.getQueryRows());

    // + Two rows for LookupChild__c (from the update statement itself)
    // + Two rows for LookupParent__c (One for B and One for C)
    System.assertEquals(beforeDMLRows + 4, Limits.getDMLRows());

    // Assert rollups
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0}, {1} from {2}'',
          new List<String>{
            aggregateResultField1,
            aggregateResultField2,
            parentObjectName
          }
        )
      )
    );
    System.assertEquals(
      ''Red;Yellow'',
      (String) assertParents.get(parentA.id).get(aggregateResultField1)
    );
    System.assertEquals(
      0.0,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField2)
    );

    System.assertEquals(
      null,
      (String) assertParents.get(parentB.id).get(aggregateResultField1)
    );
    System.assertEquals(
      22,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField2)
    );

    System.assertEquals(
      null,
      (String) assertParents.get(parentC.id).get(aggregateResultField1)
    );
    System.assertEquals(
      20,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField2)
    );
  }

  private static void assertOrdering(
    Utilities.Ordering o,
    String orderBy,
    Boolean useAsSpecifiedString,
    String field,
    Utilities.SortOrder direction,
    Boolean nullsLast
  ) {
    System.assertEquals(
      orderBy,
      useAsSpecifiedString ? o.toAsSpecifiedString() : o.toString()
    );
    System.assertEquals(field, o.getField());
    System.assertEquals(direction, o.getDirection());
    System.assertEquals(nullsLast, o.getNullsLast());
  }

  @IsTest
  static void testOrderingStringification() {
    Utilities.Ordering o = new Utilities.Ordering(''CloseDate'');
    assertOrdering(
      o,
      ''CloseDate ASC NULLS FIRST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''closedate'');
    assertOrdering(
      o,
      ''closedate ASC NULLS FIRST'',
      false,
      ''closedate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''cLoSeDaTe'');
    assertOrdering(
      o,
      ''cLoSeDaTe ASC NULLS FIRST'',
      false,
      ''cLoSeDaTe'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', Utilities.SortOrder.ASCENDING);
    assertOrdering(
      o,
      ''CloseDate ASC NULLS FIRST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', Utilities.SortOrder.DESCENDING);
    assertOrdering(
      o,
      ''CloseDate DESC NULLS FIRST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', null, false);
    assertOrdering(
      o,
      ''CloseDate ASC NULLS FIRST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', null, true);
    assertOrdering(
      o,
      ''CloseDate ASC NULLS LAST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      true
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );
    assertOrdering(
      o,
      ''CloseDate ASC NULLS FIRST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      true
    );
    assertOrdering(
      o,
      ''CloseDate ASC NULLS LAST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      true
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      false
    );
    assertOrdering(
      o,
      ''CloseDate DESC NULLS FIRST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      false
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      true
    );
    assertOrdering(
      o,
      ''CloseDate DESC NULLS LAST'',
      false,
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      true
    );

    try {
      o = new Utilities.Ordering(null);
      System.assert(false, ''Expecting an exception'');
    } catch (Utilities.BadOrderingStateException e) {
      System.assertEquals(''field cannot be blank.'', e.getMessage());
    }
  }

  @IsTest
  static void testOrderingAsSpecifiedStringification() {
    Utilities.Ordering o = new Utilities.Ordering(''CloseDate'');
    assertOrdering(
      o,
      ''CloseDate'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''closedate'');
    assertOrdering(
      o,
      ''closedate'',
      true,
      ''closedate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''cLoSeDaTe'');
    assertOrdering(
      o,
      ''cLoSeDaTe'',
      true,
      ''cLoSeDaTe'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', Utilities.SortOrder.ASCENDING);
    assertOrdering(
      o,
      ''CloseDate ASC'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', Utilities.SortOrder.DESCENDING);
    assertOrdering(
      o,
      ''CloseDate DESC'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', null, false);
    assertOrdering(
      o,
      ''CloseDate NULLS FIRST'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(''CloseDate'', null, true);
    assertOrdering(
      o,
      ''CloseDate NULLS LAST'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      true
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );
    assertOrdering(
      o,
      ''CloseDate ASC NULLS FIRST'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      false
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      true
    );
    assertOrdering(
      o,
      ''CloseDate ASC NULLS LAST'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.ASCENDING,
      true
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      false
    );
    assertOrdering(
      o,
      ''CloseDate DESC NULLS FIRST'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      false
    );

    o = new Utilities.Ordering(
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      true
    );
    assertOrdering(
      o,
      ''CloseDate DESC NULLS LAST'',
      true,
      ''CloseDate'',
      Utilities.SortOrder.DESCENDING,
      true
    );
  }

  private testMethod static void testSingleQueryBasedRollupUpdateOrderByFieldChanged() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Color__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Colours__c.getDescribe()
      .getName();
    String orderByField = LookupChild__c.Amount__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.FieldToOrderBy__c = orderByField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.First.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.ConcatenateDelimiter__c = '';'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummary
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, ''Red'');
      child1.put(orderByField, 10);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, ''Yellow'');
      child2.put(orderByField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, ''Blue'');
      child3.put(orderByField, 30);
      children.add(child3);
    }
    insert children;

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      ''Red'',
      (String) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Red'',
      (String) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Red'',
      (String) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // change Amount__c to effect order by result of rollup
    // this change will result in rollup being processed because it is a query based rollup
    // and order by influences rolled up value
    List<SObject> childrenToUpdate = new List<SObject>();
    for (SObject child : children) {
      Decimal orderByFieldValue = (Decimal) child.get(orderByField);
      if (orderByFieldValue == 10) {
        child.put(orderByField, 40);
        childrenToUpdate.add(child);
      }
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // update children
    update childrenToUpdate;

    // Assert limits
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());

    // + One row for Rollup object
    // + Nine rows for LookupChild__c for rollup
    // + Three for Parents
    System.assertEquals(beforeRows + 13, Limits.getQueryRows());

    // + Three rows for LookupChild__c (from the update statement itself)
    // + Three rows for LookupParent__c for the rollup
    System.assertEquals(beforeDMLRows + 6, Limits.getDMLRows());

    // Assert rollups
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      ''Yellow'',
      (String) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Yellow'',
      (String) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      ''Yellow'',
      (String) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  private testMethod static void testSingleAggregateBasedRollupUpdateOrderByFieldChanged() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();
    String orderByField = LookupChild__c.Color__c.getDescribe().getName();

    // Configure rollups
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.FieldToOrderBy__c = orderByField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.ConcatenateDelimiter__c = '';'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Realtime.name();

    List<LookupRollupSummary__c> rollups = new List<LookupRollupSummary__c>{
      rollupSummary
    };
    insert rollups;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 10);
      child1.put(orderByField, ''Red'');
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      child2.put(orderByField, ''Yellow'');
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 12);
      child3.put(orderByField, ''Blue'');
      children.add(child3);
    }
    insert children;

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // change Color__c to effect order by result of rollup
    // this change will NOT result in rollup being processed because it is a aggregate based rollup
    // and order by does NOT influence rolled up result
    List<SObject> childrenToUpdate = new List<SObject>();
    for (SObject child : children) {
      String orderByFieldValue = (String) child.get(orderByField);
      if (orderByFieldValue == ''Red'') {
        child.put(orderByField, ''Green'');
        childrenToUpdate.add(child);
      }
    }

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // update children
    update childrenToUpdate;

    // Assert limits
    // + One query on Rollup object
    // No query on LookupChild__c because the changed Color__c should not be considered a change that would trigger the rollup to be processed
    System.assertEquals(beforeQueries + 1, Limits.getQueries());

    // + One row for Rollup object
    // No rows on LookupChild__c because the changed Color__c should not be considered a change that would trigger the rollup to be processed
    System.assertEquals(beforeRows + 1, Limits.getQueryRows());

    // + Three rows for LookupChild__c (from the update statement itself)
    // No query on LookupParent__c because the changed Color__c should not be considered a change that would trigger the rollup to be processed
    System.assertEquals(beforeDMLRows + 3, Limits.getDMLRows());

    // Assert rollups
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  @IsTest
  static void testExceptionThrowing() {
    try {
      // cannot force a ''STORAGE_LIMIT_EXCEEDED'' exception
      // but at least we can test the method call
      RollupService.throwServiceException(
        new RollupServiceException(''test''),
        ''LookupName''
      );
      System.assert(false);
    } catch (RollupServiceException e) {
      System.assert(true);
    }
  }

  @IsTest
  static void testBypassApi() {
    String rollupUniqueName = ''SampleRollup'';
    Boolean bypassResult;

    Test.startTest();
    System.assertEquals(
      false,
      RollupService.isBypassed(rollupUniqueName),
      ''The rollup should not be bypassed yet.''
    );
    bypassResult = RollupService.bypass(rollupUniqueName);
    System.assert(
      bypassResult,
      ''Should have modified the bypassed rollups set.''
    );
    System.assertEquals(
      true,
      RollupService.isBypassed(rollupUniqueName),
      ''The rollup should be bypassed.''
    );
    bypassResult = RollupService.clearBypass(rollupUniqueName);
    System.assert(
      bypassResult,
      ''Should have modified the bypassed rollups set.''
    );
    System.assertEquals(
      false,
      RollupService.isBypassed(rollupUniqueName),
      ''The rollup should not be bypassed anymore.''
    );
    RollupService.bypass(rollupUniqueName);
    RollupService.clearAllBypasses();
    System.assertEquals(
      false,
      RollupService.isBypassed(rollupUniqueName),
      ''The rollup should not be bypassed anymore.''
    );

    bypassResult = RollupService.bypass(null);
    System.assertEquals(
      false,
      bypassResult,
      ''Should return "false" for a null rollup name.''
    );
    bypassResult = RollupService.clearBypass(null);
    System.assertEquals(
      false,
      bypassResult,
      ''Should return "false" for a null rollup name.''
    );
    Test.stopTest();
  }
}','196952288.0','False','RollupServiceTest','79587','Active');
INSERT INTO "ApexClass" VALUES(29,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Tests the RollupService methods, note the LREngine is test independently via TestLREngine
 **/
@IsTest
private with sharing class RollupServiceTest2 {
  static Schema.SObjectField ACCOUNT_SLA_EXPIRATION_DATE;
  static Schema.SObjectField ACCOUNT_NUMBER_OF_LOCATIONS;
  static {
    // Dynamically resolve these fields, if they are not present when the test runs, the test will return as passed to avoid failures in subscriber org when packaged
    fflib_SObjectDescribe describe = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    ACCOUNT_SLA_EXPIRATION_DATE = describe.getField(''SLAExpirationDate__c'');
    ACCOUNT_NUMBER_OF_LOCATIONS = describe.getField(''NumberOfLocations__c'');
  }

  private testMethod static void testMultiRollupBothScheduledWithConditions() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 500;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''Amount > 200'';

    // Test data for rollup B
    Decimal expectedResultB = 2;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = ''Amount < 200'';

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Scheduled'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Scheduled'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(null, accountResult.AnnualRevenue); // This is a scheduled rollup so no realtime update
    System.assertEquals(null, accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)); // This is a scheduled rollup so no realtime update
    System.assertEquals(
      2,
      [
          SELECT Id
          FROM LookupRollupSummaryScheduleItems__c
          WHERE ParentId__c = :account.Id
        ]
        .size()
    ); // Assert a scheduled item has been created

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Assert schedule items gone and rollup updated
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
    System.assertEquals(
      0,
      [
          SELECT Id
          FROM LookupRollupSummaryScheduleItems__c
          WHERE ParentId__c = :account.Id
        ]
        .size()
    );
  }

  private testMethod static void testMultiRollupOneScheduled() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    Decimal expectedResultA = 500;
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''Amount > 200'';

    // Test data for rollup B
    Decimal expectedResultB = 4;
    RollupSummaries.AggregateOperation operationB = RollupSummaries.AggregateOperation.Count;
    String conditionB = null;

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Configure rollup B
    LookupRollupSummary__c rollupSummaryB = new LookupRollupSummary__c();
    rollupSummaryB.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.RelationShipCriteria__c = conditionB;
    rollupSummaryB.FieldToAggregate__c = ''CloseDate'';
    rollupSummaryB.AggregateOperation__c = operationB.name();
    rollupSummaryB.AggregateResultField__c = ''NumberOfLocations__c'';
    rollupSummaryB.Active__c = true;
    rollupSummaryB.CalculationMode__c = ''Scheduled'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA, rollupSummaryB };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(expectedResultA, accountResult.AnnualRevenue);
    System.assertEquals(null, accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)); // This is a scheduled rollup so no realtime update
    System.assertEquals(
      1,
      [
          SELECT Id
          FROM LookupRollupSummaryScheduleItems__c
          WHERE ParentId__c = :account.Id
        ]
        .size()
    ); // Assert a scheduled item has been created

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Assert schedule items gone and rollup updated
    System.assertEquals(
      0,
      [
          SELECT Id
          FROM LookupRollupSummaryScheduleItems__c
          WHERE ParentId__c = :account.Id
        ]
        .size()
    );
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(
      expectedResultB,
      accountResult.get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testScheduleItemsAndLogs() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Scheduled'';
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        children.add(child3);
      }
    }
    insert children;

    // Assert scheduled items and log records
    System.assertEquals(
      3,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );
    System.assertEquals(0, [SELECT id FROM LookupRollupSummaryLog__c].size());

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    try {
      // Assert not able to run more than one scheduled job at a time
      RollupService.runJobToProcessScheduledItems();
      System.assert(false, ''Expected exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''A previous Declarative Rollup Summary scheduled job \''RollupJob\'' is still running, this scheduled execution will not occur.'',
        e.getMessage()
      );
    }
    Test.stopTest();
    // Assert the selector now reports the job is no longer running
    System.assertEquals(
      false,
      new AsyncApexJobsSelector().jobsExecuting(new Set<String>{ ''RollupJob'' })
    );

    // Assert scheduled items and log records
    List<LookupRollupSummaryLog__c> logs = [
      SELECT id, ParentId__c, ParentObject__c, ErrorMessage__c
      FROM LookupRollupSummaryLog__c
    ];
    System.assertEquals(parentC.Id, logs[0].ParentId__c);
    System.assertEquals(parentObjectName, logs[0].ParentObject__c);
    System.assertEquals(1, logs.size());
    System.assertEquals(
      ''The answer is not 42! : FIELD_CUSTOM_VALIDATION_EXCEPTION ('' +
      aggregateResultField +
      '')'',
      logs[0].ErrorMessage__c
    );
    System.assertEquals(
      1,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );
  }

  private testMethod static void testScheduleItemsAndLogsCleanup() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Scheduled'';
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 2);
      children.add(child3);
    }
    insert children;

    // Assert scheduled items and log records
    System.assertEquals(
      3,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );
    System.assertEquals(0, [SELECT id FROM LookupRollupSummaryLog__c].size());

    // Insert dummy log record for Parent C (emulate position left from above test)
    insert new LookupRollupSummaryLog__c(
      ParentId__c = parentC.id,
      ParentObject__c = parentObjectName,
      ErrorMessage__c = ''The answer is not 42! : FIELD_CUSTOM_VALIDATION_EXCEPTION ('' +
        aggregateResultField +
        '')''
    );

    // Run rollup job
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Assert scheduled items and log records are all gone!
    System.assertEquals(
      0,
      [SELECT id, ParentId__c, ErrorMessage__c FROM LookupRollupSummaryLog__c]
        .size()
    );
    System.assertEquals(
      0,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );
  }

  private testMethod static void testScheduleItemsAndLogsCleanupDeletedParent() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Scheduled'';
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 2);
      children.add(child3);
    }
    insert children;

    // Assert scheduled items and log records
    System.assertEquals(
      3,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );
    System.assertEquals(0, [SELECT id FROM LookupRollupSummaryLog__c].size());

    // Delete a parent record (leaving log entries still to be processed)
    delete parentA;

    // Run rollup job (schedule item row should be cleaned up for deleted parent record)
    Test.startTest();
    RollupService.runJobToProcessScheduledItems();
    Test.stopTest();

    // Assert scheduled items and log records are all gone!
    System.assertEquals(
      0,
      [SELECT id, ParentId__c, ErrorMessage__c FROM LookupRollupSummaryLog__c]
        .size()
    );
    System.assertEquals(
      0,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );
  }

  /**
   * Test to reproduce issue raised here, https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/11
   **/
  private testMethod static void testChangeInCriteriaReferencedField() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''StageName = \''Won\'''';

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.RelationShipCriteriaFields__c = ''StageName'';
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Integer oppIdx = 0; oppIdx < 4; oppIdx++) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = oppIdx < 2 ? ''Won'' : ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollups[oppIdx];
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(500, accountResult.AnnualRevenue);

    // Update the last Opportunity Amount greater than 200 and check rollup amount
    opps[3].StageName = ''Won'';
    update opps[3];

    // Assert rollup
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(550, accountResult.AnnualRevenue);
  }

  // TODO: Do another test like above but with multiple criteria fields
  // ...

  /**
   * Test to reproduce issue raised here, https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/10
   **/
  private testMethod static void testChangeInRelationship() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Integer> rollups = new List<Integer>{ 250, 250, 50, 50 };

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Account'';
    rollupSummaryA.RelationShipField__c = ''ParentId'';
    rollupSummaryA.RelationShipCriteria__c = null;
    rollupSummaryA.FieldToAggregate__c = ''NumberOfEmployees'';
    rollupSummaryA.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummaryA.AggregateResultField__c = ''NumberofLocations__c'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA };

    // Test data
    Account parentAccount1 = new Account();
    parentAccount1.Name = ''Parent Account 1'';
    Account parentAccount2 = new Account();
    parentAccount2.Name = ''Parent Account 2'';
    List<Account> parentAccounts = new List<Account>{
      parentAccount1,
      parentAccount2
    };
    insert parentAccounts;
    List<Account> childAccounts = new List<Account>();
    for (Integer accIdx = 0; accIdx < 4; accIdx++) {
      Account childAccount = new Account();
      childAccount.Name = ''Child Account'';
      childAccount.NumberOfEmployees = rollups[accIdx];
      childAccount.ParentId = accIdx < 2
        ? parentAccount1.Id
        : parentAccount2.Id;
      childAccounts.add(childAccount);
    }
    insert childAccounts;

    // Assert rollups
    Set<Id> parentIds = new Set<Id>{ parentAccount1.Id, parentAccount2.Id };
    Map<Id, Account> accountResults = new Map<Id, Account>(
      (List<Account>) Database.query(
        ''select AnnualRevenue, NumberOfLocations__c from Account where Id in :parentIds''
      )
    );
    System.assertEquals(
      500,
      (Decimal) accountResults.get(parentAccount1.Id)
        .get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
    System.assertEquals(
      100,
      (Decimal) accountResults.get(parentAccount2.Id)
        .get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );

    // Reparent a child and check the rollup
    childAccounts[0].ParentId = parentAccount2.Id;
    update childAccounts[0];

    // Assert rollups
    accountResults = new Map<Id, Account>(
      (List<Account>) Database.query(
        ''select AnnualRevenue, NumberOfLocations__c from Account where Id in :parentIds''
      )
    );
    System.assertEquals(
      250,
      (Decimal) accountResults.get(parentAccount1.Id)
        .get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
    System.assertEquals(
      350,
      (Decimal) accountResults.get(parentAccount2.Id)
        .get(ACCOUNT_NUMBER_OF_LOCATIONS)
    );
  }

  private testMethod static void testUnDeleteRealtime() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Test data
    List<Decimal> rollups = new List<Decimal>{ 250, 250, 50, 50 };

    // Test data for rollup A
    RollupSummaries.AggregateOperation operationA = RollupSummaries.AggregateOperation.Sum;
    String conditionA = ''Amount > 200'';

    // Configure rollup A
    LookupRollupSummary__c rollupSummaryA = new LookupRollupSummary__c();
    rollupSummaryA.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.RelationShipCriteria__c = conditionA;
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = operationA.name();
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.Active__c = true;
    rollupSummaryA.CalculationMode__c = ''Realtime'';

    // Insert rollup definitions
    insert new List<LookupRollupSummary__c>{ rollupSummaryA };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    List<Opportunity> opps = new List<Opportunity>();
    for (Decimal rollupValue : rollups) {
      Opportunity opp = new Opportunity();
      opp.Name = ''Test Opportunity'';
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      opp.AccountId = account.Id;
      opp.Amount = rollupValue;
      opps.add(opp);
    }
    insert opps;

    // Assert rollup
    Id accountId = account.Id;
    Account accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(500, accountResult.AnnualRevenue);

    // Delete a child
    delete opps[0];
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(250, accountResult.AnnualRevenue);

    // Undelete a child
    Database.undelete(opps[0].Id);
    accountResult = Database.query(
      ''select AnnualRevenue, NumberOfLocations__c from Account where Id = :accountId''
    );
    System.assertEquals(500, accountResult.AnnualRevenue);
  }
}','4206887809.0','False','RollupServiceTest2','23757','Active');
INSERT INTO "ApexClass" VALUES(30,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Tests the RollupService methods, note the LREngine is test independently via TestLREngine
 **/
@IsTest
private with sharing class RollupServiceTest3 {
  static Schema.SObjectField ACCOUNT_SLA_EXPIRATION_DATE;
  static Schema.SObjectField ACCOUNT_NUMBER_OF_LOCATIONS;
  static {
    // Dynamically resolve these fields, if they are not present when the test runs, the test will return as passed to avoid failures in subscriber org when packaged
    fflib_SObjectDescribe describe = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    ACCOUNT_SLA_EXPIRATION_DATE = describe.getField(''SLAExpirationDate__c'');
    ACCOUNT_NUMBER_OF_LOCATIONS = describe.getField(''NumberOfLocations__c'');
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/347
   **/
  private testMethod static void testCalculateJobWithRollupIdsVaryingOnlyByCase() {
    String rollupA =
      LookupRollupSummary__c.SObjectType.getDescribe().getKeyPrefix() +
      ''A00000000000'';
    String rollupB =
      LookupRollupSummary__c.SObjectType.getDescribe().getKeyPrefix() +
      ''a00000000000'';
    RollupService.checkJobAlreadyRunning(rollupA, ''Rollup A'');
    RollupService.checkJobAlreadyRunning(rollupB, ''Rollup B'');
  }

  private testMethod static void testCalculateJob() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        children.add(child3);
      }
    }
    insert children;

    // Create rollup AFTER the data exists
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Scheduled'';
    insert rollupSummary;

    // Run rollup calculate job
    Test.startTest();
    Id jobId = RollupService.runJobToCalculate(rollupSummary.Id);
    System.assertEquals(1, [SELECT Id FROM LookupRollupCalculateJob__c].size());
    try {
      // Assert not possible to start another
      RollupService.runJobToCalculate(rollupSummary.Id);
      System.assert(false, ''Expected an exception'');
    } catch (Exception e) {
      System.assert(
        e.getMessage()
          .equals(
            ''A calculate job for rollup \''Test Rollup\'' is already executing. If you suspect it is not aleady running try clearing the applicable record from the Lookup Rollup Calculate Jobs tab and try again.''
          )
      );
    }
    Test.stopTest();
    // Assert job id cleared
    rollupSummary = [
      SELECT Id, CalculateJobId__c
      FROM LookupRollupSummary__c
      WHERE Id = :rollupSummary.Id
    ];
    System.assertEquals(jobId, rollupSummary.CalculateJobId__c);
    // Assert job cleared
    System.assertEquals(0, [SELECT Id FROM LookupRollupCalculateJob__c].size());

    // This should not generate any schedule items
    System.assertEquals(
      0,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Assert scheduled items and log records
    List<LookupRollupSummaryLog__c> logs = [
      SELECT id, ParentId__c, ParentObject__c, ErrorMessage__c
      FROM LookupRollupSummaryLog__c
    ];
    System.assertEquals(parentC.Id, logs[0].ParentId__c);
    System.assertEquals(parentObjectName, logs[0].ParentObject__c);
    System.assertEquals(1, logs.size());
    System.assertEquals(
      ''The answer is not 42! : FIELD_CUSTOM_VALIDATION_EXCEPTION ('' +
      aggregateResultField +
      '')'',
      logs[0].ErrorMessage__c
    );
  }

  private testMethod static void testFilteredCalculateJob() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        children.add(child3);
      }
    }
    insert children;

    // Create rollup AFTER the data exists
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Scheduled'';
    insert rollupSummary;

    // Run rollup calculate job with WHERE clause
    Test.startTest();
    Id jobId = RollupService.runJobToCalculate(
      rollupSummary.Id,
      ''Name = \''ParentB\''''
    );
    Test.stopTest();

    // This should not generate any schedule items
    System.assertEquals(
      0,
      [SELECT id FROM LookupRollupSummaryScheduleItems__c].size()
    );

    // Assert rollups
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Assert scheduled items and log records
    List<LookupRollupSummaryLog__c> logs = [
      SELECT id, ParentId__c, ParentObject__c, ErrorMessage__c
      FROM LookupRollupSummaryLog__c
    ];
    System.assertEquals(0, logs.size());
  }

  private testMethod static void testCalculateJobNotActive() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        children.add(child3);
      }
    }
    insert children;

    // Create rollup AFTER the data exists
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = false;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert rollupSummary;

    // Run rollup calculate job
    Test.startTest();
    try {
      // Assert not possible to start another
      RollupService.runJobToCalculate(rollupSummary.Id);
      System.assert(false, ''Expected an exception'');
    } catch (Exception e) {
      System.assert(
        e.getMessage()
          .equals(
            ''The rollup must be Active before you can run a Calculate job.''
          )
      );
    }
    Test.stopTest();
  }

  private testMethod static void testScheduleCalculateJob() {
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        children.add(child3);
      }
    }
    insert children;

    // Create rollup AFTER the data exists
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Scheduled'';
    insert rollupSummary;

    ApexPages.StandardController standardController = new ApexPages.StandardController(
      rollupSummary
    );
    RollupScheduledCalculateController controller = new RollupScheduledCalculateController(
      standardController
    );

    Test.startTest();
    controller.scheduleCalculateJob();
    //attempt to schedule a second job
    Boolean exceptionCaught = false;
    String jobName =
      ''rollup_'' + String.valueOf(rollupSummary.Id).substring(0, 15);
    try {
      System.schedule(
        ''rollup_'' + standardController.getId(),
        ''0 0 2 * * ?'',
        new RollupCalculateJobSchedulable(
          standardController.getId(),
          controller.masterObjectWhere
        )
      );
    } catch (AsyncException ex) {
      exceptionCaught = true;
      System.assertEquals(
        ex.getMessage(),
        ''The Apex job named "'' +
        jobName +
        ''" is already scheduled for execution.''
      );
    }

    System.assert(exceptionCaught);

    CronTrigger ct = [
      SELECT
        Id,
        CronExpression,
        TimesTriggered,
        NextFireTime,
        CronJobDetail.Name
      FROM CronTrigger
      WHERE CronJobDetail.Name = :jobName
    ];
    //assert our job is scheduled for 2am
    System.assertEquals(''0 0 2 * * ?'', ct.CronExpression);
    DateTime nextFiretime = ct.NextFireTime;
    System.assertEquals(2, nextFiretime.hour());
    //assert our job has never fired
    System.assertEquals(0, ct.TimesTriggered);
    Test.stopTest();

    //RollupCalculateJob does not execute until after Test.stopTest();
    //we cannot assert anything about the rollup job itself, only that we queued it.
    //see http://salesforce.stackexchange.com/a/36884/11152
    System.assert(
      [
        SELECT COUNT()
        FROM AsyncApexJob
        WHERE ApexClass.Name = ''RollupCalculateJobSchedulable''
      ] > 0
    );
  }

  private testMethod static void testDeveloperAPI() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      if (name.equals(''ParentA'') || name.equals(''ParentB'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        children.add(child3);
      }
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Call developer API
    List<SObject> masterRecords = RollupService.rollup(children);

    // Assert nothing has changed on db
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Assert rollups produced
    assertParents = new Map<Id, SObject>(masterRecords);
    System.assertEquals(3, masterRecords.size());
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      40,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/23
   */
  private testMethod static void testDateRollupDeleteChild() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''CloseDate'';
    rollupSummary.AggregateOperation__c = ''Max'';
    rollupSummary.AggregateResultField__c = ''SLAExpirationDate__c'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    Id accountId = account.Id;
    System.assertEquals(
      System.today(),
      Database.query(
          ''select SLAExpirationDate__c from Account where Id = :accountId''
        )[0]
        .get(ACCOUNT_SLA_EXPIRATION_DATE)
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      null,
      Database.query(
          ''select SLAExpirationDate__c from Account where Id = :accountId''
        )[0]
        .get(ACCOUNT_SLA_EXPIRATION_DATE)
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/23
   */

  private testMethod static void testDateRollupInsertConditionalChild() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = ''CloseDate < TODAY'';
    rollupSummary.FieldToAggregate__c = ''CloseDate'';
    rollupSummary.AggregateOperation__c = ''Max'';
    rollupSummary.AggregateResultField__c = ''SLAExpirationDate__c'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    Id accountId = account.Id;
    System.assertEquals(
      null,
      Database.query(
          ''select SLAExpirationDate__c from Account where Id = :accountId''
        )[0]
        .get(ACCOUNT_SLA_EXPIRATION_DATE)
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      null,
      Database.query(
          ''select SLAExpirationDate__c from Account where Id = :accountId''
        )[0]
        .get(ACCOUNT_SLA_EXPIRATION_DATE)
    );
  }

  private testMethod static void testRollupWithInAccessibleParent() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Abort if the sharing model does not support this test (some older orgs who have upgraded won''t have this)
    SObjectType sharingType = Schema.getGlobalDescribe()
      .get(Utilities.objectPrefix() + ''LookupChild__Share'');
    if (sharingType == null)
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    insert parentA;

    // Insert children
    SObject child1 = childType.newSObject();
    child1.put(relationshipField, parentA.Id);
    insert child1;

    // Assert rollup
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );

    // Create test user
    User testUser = null;
    System.runAs(new User(Id = UserInfo.getUserId())) {
      testUser = createUser();
    }

    // Grant access to the child record since it is using private sharing model
    SObject childSharing = sharingType.newSObject();
    childSharing.put(''AccessLevel'', ''Edit'');
    childSharing.put(''ParentId'', child1.Id);
    childSharing.put(''UserOrGroupId'', testUser.Id);
    insert childSharing;

    // Test data insert children as new user (who cannot see the parent)
    System.runAs(testUser) {
      // Ensure this user can read it (the Sharing setting for LookupParent__c is Public Read Only)
      assertParents = new Map<Id, SObject>(
        Database.query(
          String.format(
            ''select id, {0} from {1}'',
            new List<String>{ aggregateResultField, parentObjectName }
          )
        )
      );
      System.assertEquals(
        null,
        (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
      );

      // Attempt to indirectly via rollup trigger to update parent record
      child1.put(aggregateField, 42);
      update child1;
    }

    // Assert rollup
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
  }

  /**
   * Test simulation of isInsert
   */
  private testMethod static void testDeveloperTriggerLikeAPI_SingleSumInserted() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 2);
      children.add(child3);
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeQueryRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Call developer ''trigger like'' API
    RollupService.rollup(null, new Map<Id, SObject>(children), childType);

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());
    // + One row for Rollup object
    // + Nine rows for LookupChild__c for rollup
    // + Three for Parents
    System.assertEquals(beforeQueryRows + 13, Limits.getQueryRows());
    // + Three rows for LookupParent__c for rollup target
    System.assertEquals(beforeDMLRows + 3, Limits.getDMLRows());

    // Assert parents are updated
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(3, assertParents.size());
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * Test simulation of isUpdate with no field changes
   */
  private testMethod static void testDeveloperTriggerLikeAPI_SingleSumUpdatedFieldDoesNotChange() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 2);
      children.add(child3);
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeQueryRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Call developer ''trigger like'' API
    // No changes to the field being aggregted, thus no rollup processing should occur
    RollupService.rollup(
      new Map<Id, SObject>(children),
      new Map<Id, SObject>(children),
      childType
    );

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    System.assertEquals(beforeQueries + 1, Limits.getQueries()); // Only tolerate a query for the Lookup definition
    System.assertEquals(beforeQueryRows + 1, Limits.getQueryRows()); // Only tolerate a row for the Lookup definition
    System.assertEquals(beforeDMLRows, Limits.getDMLRows()); // No changes so no record should be operated against

    // Assert parents are updated
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(3, assertParents.size());
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * Test simulation of isUpdate with field changes
   */
  private testMethod static void testDeveloperTriggerLikeAPI_SingleSumUpdatedFieldDoesChange() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 0);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 0);
      children.add(child2);
      SObject child3 = childType.newSObject();
      child3.put(relationshipField, parent.Id);
      child3.put(aggregateField, 0);
      children.add(child3);
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // update the children
    List<SObject> modifiedChildren = Database.query(
      String.format(
        ''select id, {0}, {1} from {2}'',
        new List<String>{ aggregateField, relationshipField, childObjectName }
      )
    );
    System.assertEquals(9, modifiedChildren.size());
    for (SObject child : modifiedChildren) {
      // do not update ParentC children so we can simulate
      // only updated records being processed, non-changed records being ignored
      // and assert governor limits to confirm
      if (child.get(relationshipField) != parentC.Id) {
        child.put(aggregateField, 14);
      }
    }
    update modifiedChildren;

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeQueryRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Call developer ''trigger like'' API simulating an update
    RollupService.rollup(
      new Map<Id, SObject>(children),
      new Map<Id, SObject>(modifiedChildren),
      childType
    );

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());
    // + One row for Rollup object
    // + Six rows for LookupChild__c for rollup for Parent A & Parent B
    // + Two for Parents
    System.assertEquals(beforeQueryRows + 9, Limits.getQueryRows());
    // + Two rows for LookupParent__c for rollup target for Parent A & Parent B
    System.assertEquals(beforeDMLRows + 2, Limits.getDMLRows());

    // Assert parents are updated
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(3, assertParents.size());
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * Test simulation of combination of isInsert and isUpdate but updates do not effect rollups
   */
  private testMethod static void testDeveloperTriggerLikeAPI_SingleSumInsertedWithExistingThatDoNotChange() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, 20);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, 20);
      children.add(child2);
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // insert a new child
    List<SObject> newChildren = new List<SObject>();
    for (SObject parent : parents) {
      // do not create new child for ParentC so we can simulate
      // only inserted records being processed, non-changed records being ignored
      // and assert governor limits to confirm
      String name = (String) parent.get(''Name'');
      if (!name.equals(''ParentC'')) {
        SObject child3 = childType.newSObject();
        child3.put(relationshipField, parent.Id);
        child3.put(aggregateField, 2);
        newChildren.add(child3);
      }
    }
    insert newChildren;

    // Assert nothing has changed on db
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // combine the new and old
    List<SObject> newAndOldChildren = children.clone();
    newAndOldChildren.addAll(newChildren);

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeQueryRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Call developer ''trigger like'' API simulating an update
    RollupService.rollup(
      new Map<Id, SObject>(children),
      new Map<Id, SObject>(newAndOldChildren),
      childType
    );

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());
    // + One row for Rollup object
    // + Six rows for LookupChild__c for rollup for Parent A & Parent B
    // + Two for Parents
    System.assertEquals(beforeQueryRows + 9, Limits.getQueryRows());
    // + Two rows for LookupParent__c for rollup target for Parent A & Parent B
    System.assertEquals(beforeDMLRows + 2, Limits.getDMLRows());

    // Assert parents are updated
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(3, assertParents.size());
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      42,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * Test simulation of isDelete
   */
  private testMethod static void testDeveloperTriggerLikeAPI_SingleSumDeleted() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();
    Integer child1Amount = 42;
    Integer child2Amount = 1;

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, child1Amount);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, child2Amount);
      children.add(child2);
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // delete existing child that have specified aggregateField value leaving a total to rollup of expected
    List<SObject> deletedChildren = Database.query(
      String.format(
        ''select id, {0}, {1} from {2} WHERE {0} = {3}'',
        new List<String>{
          aggregateField,
          relationshipField,
          childObjectName,
          String.valueOf(child2Amount)
        }
      )
    );
    System.assertEquals(3, deletedChildren.size());
    delete deletedChildren;

    // Assert nothing has changed on db
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeQueryRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Call developer ''trigger like'' API simulating a delete
    RollupService.rollup(
      new Map<Id, SObject>(deletedChildren),
      null,
      childType
    );

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());
    // + One row for Rollup object
    // + Three rows for LookupChild__c
    // + Three for Parents
    System.assertEquals(beforeQueryRows + 7, Limits.getQueryRows());
    // + Three rows for LookupParent__c
    System.assertEquals(beforeDMLRows + 3, Limits.getDMLRows());

    // Assert parents are updated
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(3, assertParents.size());
    System.assertEquals(
      child1Amount,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      child1Amount,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      child1Amount,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * Test simulation of isUndelete
   */
  private testMethod static void testDeveloperTriggerLikeAPI_SingleSumUndeleted() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    Schema.SObjectType parentType = LookupParent__c.sObjectType;
    Schema.SObjectType childType = LookupChild__c.sObjectType;
    String parentObjectName = parentType.getDescribe().getName();
    String childObjectName = childType.getDescribe().getName();
    String relationshipField = LookupChild__c.LookupParent__c.getDescribe()
      .getName();
    String aggregateField = LookupChild__c.Amount__c.getDescribe().getName();
    String aggregateResultField = LookupParent__c.Total__c.getDescribe()
      .getName();
    Integer child1Amount = 40;
    Integer child2Amount = 2;
    Integer expectedAmount = 42;

    // Create rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Test Rollup'';
    rollupSummary.ParentObject__c = parentObjectName;
    rollupSummary.ChildObject__c = childObjectName;
    rollupSummary.RelationShipField__c = relationshipField;
    rollupSummary.FieldToAggregate__c = aggregateField;
    rollupSummary.AggregateOperation__c = RollupSummaries.AggregateOperation.Sum.name();
    rollupSummary.AggregateResultField__c = aggregateResultField;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = RollupSummaries.CalculationMode.Developer.name();
    insert rollupSummary;

    // Insert parents
    SObject parentA = parentType.newSObject();
    parentA.put(''Name'', ''ParentA'');
    SObject parentB = parentType.newSObject();
    parentB.put(''Name'', ''ParentB'');
    SObject parentC = parentType.newSObject();
    parentC.put(''Name'', ''ParentC'');
    List<SObject> parents = new List<SObject>{ parentA, parentB, parentC };
    insert parents;

    // Insert children
    List<SObject> children = new List<SObject>();
    for (SObject parent : parents) {
      String name = (String) parent.get(''Name'');
      SObject child1 = childType.newSObject();
      child1.put(relationshipField, parent.Id);
      child1.put(aggregateField, child1Amount);
      children.add(child1);
      SObject child2 = childType.newSObject();
      child2.put(relationshipField, parent.Id);
      child2.put(aggregateField, child2Amount);
      children.add(child2);
    }
    insert children;

    // Assert nothing has changed on db
    Map<Id, SObject> assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // delete existing children that have specified aggregateField value
    List<SObject> childrenToDelete = Database.query(
      String.format(
        ''select id, {0}, {1} from {2} WHERE {0} = {3}'',
        new List<String>{
          aggregateField,
          relationshipField,
          childObjectName,
          String.valueOf(child2Amount)
        }
      )
    );
    System.assertEquals(3, childrenToDelete.size());
    delete childrenToDelete;

    // Assert nothing has changed on db
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // assert remaining children
    List<SObject> remainingChildren = Database.query(
      String.format(
        ''select id, {0}, {1} from {2}'',
        new List<String>{ aggregateField, relationshipField, childObjectName }
      )
    );
    System.assertEquals(3, remainingChildren.size());

    // retrieve children to undelete
    List<SObject> childrenToUndelete = Database.query(
      String.format(
        ''select id, {0}, {1} from {2} WHERE IsDeleted = true ALL ROWS'',
        new List<String>{ aggregateField, relationshipField, childObjectName }
      )
    );
    System.assertEquals(3, childrenToUndelete.size());
    undelete childrenToUndelete;

    // Assert nothing has changed on db
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      null,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );

    // Sample various limits prior to an update
    Integer beforeQueries = Limits.getQueries();
    Integer beforeQueryRows = Limits.getQueryRows();
    Integer beforeDMLRows = Limits.getDMLRows();

    // Call developer ''trigger like'' API simulating a undelete
    RollupService.rollup(
      null,
      new Map<Id, SObject>(childrenToUndelete),
      childType
    );

    // Assert no further limits have been used since the field to aggregate on the detail has not changed
    // + One query on Rollup object
    // + One query on LookupChild__c for rollup
    // + One query on Parent for values to confirm DML needed
    System.assertEquals(beforeQueries + 3, Limits.getQueries());
    // + One row for Rollup object
    // + Six rows for LookupChild__c
    // + Three for Parents
    System.assertEquals(beforeQueryRows + 10, Limits.getQueryRows());
    // + Three rows for LookupParent__c
    System.assertEquals(beforeDMLRows + 3, Limits.getDMLRows());

    // Assert parents are updated
    assertParents = new Map<Id, SObject>(
      Database.query(
        String.format(
          ''select id, {0} from {1}'',
          new List<String>{ aggregateResultField, parentObjectName }
        )
      )
    );
    System.assertEquals(3, assertParents.size());
    System.assertEquals(
      expectedAmount,
      (Decimal) assertParents.get(parentA.id).get(aggregateResultField)
    );
    System.assertEquals(
      expectedAmount,
      (Decimal) assertParents.get(parentB.id).get(aggregateResultField)
    );
    System.assertEquals(
      expectedAmount,
      (Decimal) assertParents.get(parentC.id).get(aggregateResultField)
    );
  }

  /**
   * https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/631
   **/
  private testMethod static void testOrInCriteria() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    // Configure rollup
    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities greater than 200 into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = ''CloseDate < TODAY OR Amount > 100'';
    rollupSummary.FieldToAggregate__c = ''CloseDate'';
    rollupSummary.AggregateOperation__c = ''Max'';
    rollupSummary.AggregateResultField__c = ''SLAExpirationDate__c'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    insert new List<LookupRollupSummary__c>{ rollupSummary };

    // Test data
    Account account = new Account();
    account.Name = ''Test Account'';
    account.AnnualRevenue = 0;
    insert account;
    Opportunity opp = new Opportunity();
    opp.Name = ''Test Opportunity'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    opp.AccountId = account.Id;
    opp.Amount = 100;
    insert opp;

    // Assert rollup
    Id accountId = account.Id;
    System.assertEquals(
      null,
      Database.query(
          ''select SLAExpirationDate__c from Account where Id = :accountId''
        )[0]
        .get(ACCOUNT_SLA_EXPIRATION_DATE)
    );

    // Delete Opportunity
    delete opp;

    // Assert rollup
    System.assertEquals(
      null,
      Database.query(
          ''select SLAExpirationDate__c from Account where Id = :accountId''
        )[0]
        .get(ACCOUNT_SLA_EXPIRATION_DATE)
    );
  }

  /**
   * Create test user
   **/
  private static User createUser() {
    // Can only proceed with test if we have a suitable profile
    List<Profile> testProfiles = [
      SELECT Id
      FROM Profile
      WHERE Name = ''Standard User''
      LIMIT 1
    ];
    if (testProfiles.size() != 1)
      return null;

    // Can only proceed with test if we can successfully insert a test user
    String testUsername =
      System.now().format(''yyyyMMddhhmmss'') + ''@testorg.com'';
    User testUser = new User(
      Alias = ''test1'',
      Email = ''testuser1@testorg.com'',
      EmailEncodingKey = ''UTF-8'',
      LastName = ''Testing'',
      LanguageLocaleKey = ''en_US'',
      LocaleSidKey = ''en_US'',
      ProfileId = testProfiles[0].Id,
      TimeZoneSidKey = ''America/Los_Angeles'',
      UserName = testUsername
    );
    try {
      insert testUser;

      // Assign permission sets
      Set<String> psNames = new Set<String>{ ''LookupRollupSummariesFull'' };
      List<PermissionSet> ps = [
        SELECT Id
        FROM PermissionSet
        WHERE Name IN :psNames
      ];
      insert new List<PermissionSetAssignment>{
        new PermissionSetAssignment(
          AssigneeId = testUser.Id,
          PermissionSetId = ps[0].Id
        )
      };
    } catch (Exception e) {
      return null;
    }
    return testUser;
  }
}','534035216.0','False','RollupServiceTest3','56028','Active');
INSERT INTO "ApexClass" VALUES(31,'57.0','public with sharing class ManageLookupRollupSummariesNewController {
  public LookupRollupSummary2__mdt LookupRollupSummary { get; set; }
  Set<String> rFields { get; set; }
  public Boolean isMultiSelectRField { get; set; }
  public String selectedRelationFieldName { get; set; }
  public String selectedLookup { get; set; }
  public Boolean MetadataConnectionError { get; set; }
  public String selectedParentObject { get; set; }
  public String selectedChildObject { get; set; }
  public String selectedParentField { get; set; }
  public String selectedChildField { get; set; }
  public String selectedRField { get; set; }
  public List<SelectOption> parentObjFields { get; set; }
  public List<SelectOption> childObjectList { get; set; }
  public List<SelectOption> childObjFields { get; set; }
  public Boolean isParentObjectSelected { get; set; }
  public Boolean isChildObjectSelected { get; set; }
  //public Map<String,String> objectWithRelationshipField {get;set;}
  public Map<String, List<String>> PnameWithRField { get; set; }
  public List<SelectOption> relationshipFields { get; set; }
  public Map<String, String> ChildObjectsDuplicates { get; set; }
  public Boolean fieldToOrderByNeeded { get; private set; }
  public Boolean realtimeSelected { get; private set; }
  public Boolean hasTooManyObjects { get { return rollupableSObjectsNames.size() > 1000; } }

  private Set<String> rollupableSObjectsNames {
    get {
      if(rollupableSObjectsNames == null) {
        rollupableSObjectsNames = new Set<String>();

        List<EntityDefinition> entityDefinitions = [
          SELECT QualifiedApiName FROM EntityDefinition
          WHERE IsCustomSetting = false
          AND IsCustomizable = true
          AND isApexTriggerable = true
          WITH SECURITY_ENFORCED
        ];

        for(EntityDefinition entDef : entityDefinitions) {
          rollupableSObjectsNames.add(entDef.QualifiedApiName);
        }
      }

      return rollupableSObjectsNames;
    }
    set;
  }

  private Map<String, Schema.SObjectType> objectDescription {
    get {
      if(objectDescription.isEmpty()) {
        objectDescription = Schema.getGlobalDescribe();
      }
      return objectDescription;
    } private set;
  }

  public ManageLookupRollupSummariesNewController() {
    isParentObjectSelected = false;
    isChildObjectSelected = false;
    isMultiSelectRField = false;
    LookupRollupSummary = new LookupRollupSummary2__mdt(
      CalculationSharingMode__c = ''System'',
      CalculationMode__c = ''Scheduled''
    );
    //objectWithRelationshipField = new Map<String,String>();

    objectDescription = new Map<String, Schema.SObjectType>();
  }

  // AJB 16/11/21: no current functionality for editing, so this is just code that''s not called and decreases coverage %age for now
  /*public List<SelectOption> getLookups() {
        // List current rollup custom metadata configs
        List<SelectOption> options = new List<SelectOption>();
        options.add(new SelectOption(''[new]'',''Create new...''));
        for(RollupSummary rollup : new RollupSummariesSelector.CustomMetadataSelector(false, false).selectAll())
            options.add(new SelectOption(rollup.Id,rollup.Name));
        return options;
    }*/

  public PageReference init() {
    // Metadata API connection?
    MetadataConnectionError = !RollupService.checkMetadataAPIConnection();
    if (MetadataConnectionError) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.ERROR,
          ''Salesforce Metadata API connection failure, click the link below to configure.''
        )
      );
      return null;
    }
    // URL parameter? - AJB 16/11/21: as above, this can be commented out for now as there''s no functionality for handling editing records
    /*selectedLookup = (Id) ApexPages.currentPage().getParameters().get(''id'');                
        if(selectedLookup!=null) {
            LookupRollupSummary = (LookupRollupSummary2__mdt) 
                new RollupSummariesSelector.CustomMetadataSelector(false, true).
                selectById(new Set<String> { selectedLookup })[0].Record;
        } 
        else {
            selectedLookup = ApexPages.currentPage().getParameters().get(''developerName'');          
            if(selectedLookup!=null) {
                LookupRollupSummary = (LookupRollupSummary2__mdt) 
                    new RollupSummariesSelector.CustomMetadataSelector(false, true).
                    selectByDeveloperName(new Set<String> { selectedLookup })[0].Record;
                selectedLookup = LookupRollupSummary.Id;
            }                       
        //}*/
    return null;
  }

  public PageReference load() {
    // Reload the page
    PageReference newPage = Page.managelookuprollupsummaries;
    newPage.setRedirect(true);
    if (selectedLookup != ''[new]'') {
      newPage.getParameters().put(''id'', selectedLookup);
    }
    return newPage;
  }
  public PageReference save() {
    try {
      // Insert / Update the rollup custom metadata
      if (LookupRollupSummary.Id == null) {
        RollupService.create(new List<SObject>{ LookupRollupSummary });
      }
      /* AJB 18/11/21: no update functionality so this just reduces code coverage at the moment
            else        
                RollupService.update_x(new List<SObject> { LookupRollupSummary }); */
      // Reload this page (and thus the rollup list in a new request, metadata changes are not visible until this request ends)
      PageReference newPage = Page.managelookuprollupsummaries;
      newPage.setRedirect(true);
      newPage.getParameters()
        .put(''developerName'', LookupRollupSummary.DeveloperName);
      return newPage;
    } catch (RollupService.RollupValidationException e) {
      // Extract errors from exception and display on the page
      for (
        RollupService.RollupRecordValidationError recordError : e.RecordErrors
      ) {
        if (recordError.Error != null) {
          ApexPages.addMessage(
            new ApexPages.Message(ApexPages.Severity.ERROR, recordError.Error)
          );
        }
        for (String fieldError : recordError.FieldErrors) {
          ApexPages.addMessage(
            new ApexPages.Message(ApexPages.Severity.ERROR, fieldError)
          );
        }
      }
    } catch (Exception e) {
      String errormessage = e.getMessage();
      if (
        selectedChildObject == null &&
        errormessage.contains(''Attempt to de-reference a null object'')
      ) {
        ApexPages.addMessage(
          new ApexPages.Message(
            ApexPages.Severity.ERROR,
            ''Please Select the Child Object''
          )
        );
      } else if (
        selectedRField == null &&
        errormessage.contains(''Attempt to de-reference a null object'')
      ) {
        ApexPages.addMessage(
          new ApexPages.Message(
            ApexPages.Severity.ERROR,
            ''Please Select the Relationship Field''
          )
        );
      } else {
        ApexPages.addMessages(e);
      }
    }
    return null;
  }

  public PageReference deleteX() {
    /* AJB 16/11/21: whilst this is referenced from the page, the button''s only visible if there''s a QSP with an Id, i.e. edit mode, which isn''t supported in this version
        try {
            // Delete the rollup custom metadata
            RollupService.delete_X(new List<String> { LookupRollupSummary.DeveloperName });
            // Reload this page (and thus the rollup list in a new request, metadata changes are not visible until this request ends)
            PageReference newPage = Page.managelookuprollupsummaries;
            newPage.setRedirect(true);
            return newPage;                 
        } catch (Exception e) {
            ApexPages.addMessages(e);
        }*/
    return null;
  }

  public PageReference hideMessage() {
    DeclarativeLookupRollupSummaries__c settings = DeclarativeLookupRollupSummaries__c.getOrgDefaults();
    settings.HideManageLookupRollupSummariesInfo__c = true;
    upsert settings;
    return null;
  }

  public List<SelectOption> getCalculationModes() {
    List<SelectOption> options = new List<SelectOption>();
    for (
      Schema.PicklistEntry picklistEntry : LookupRollupSummary__c.fields.CalculationMode__c.getDescribe()
        .getPicklistValues()
    ) {
      options.add(
        new SelectOption(picklistEntry.getValue(), picklistEntry.getLabel())
      );
    }
    return sortSelectOptionsByLabel(options);
  }

  public List<SelectOption> getAggregateOperations() {
    List<SelectOption> options = new List<SelectOption>();
    for (
      Schema.PicklistEntry picklistEntry : LookupRollupSummary__c.fields.AggregateOperation__c.getDescribe()
        .getPicklistValues()
    ) {
      options.add(
        new SelectOption(picklistEntry.getValue(), picklistEntry.getLabel())
      );
    }
    return sortSelectOptionsByLabel(options);
  }

  public List<SelectOption> getCalculationSharingModes() {
    List<SelectOption> options = new List<SelectOption>();
    for (
      Schema.PicklistEntry picklistEntry : LookupRollupSummary__c.fields.CalculationSharingMode__c.getDescribe()
        .getPicklistValues()
    ) {
      options.add(
        new SelectOption(picklistEntry.getValue(), picklistEntry.getLabel())
      );
    }
    return sortSelectOptionsByLabel(options);
  }

  private List<SelectOption> sortSelectOptionsByLabel(
    List<SelectOption> selectOptions
  ) {
    if (selectOptions == null || selectOptions.size() <= 1) {
      return selectOptions;
    }
    List<SelectOption> lessSelectOption = new List<SelectOption>();
    List<SelectOption> greaterSelectOption = new List<SelectOption>();
    Integer pivot = selectOptions.size() / 2;

    SelectOption pivotValue = selectOptions[pivot];
    selectOptions.remove(pivot);
    for (SelectOption so : selectOptions) {
      if (so.getLabel() <= pivotValue.getLabel()) {
        lessSelectOption.add(so);
      } else if (so.getLabel() > pivotValue.getLabel()) {
        greaterSelectOption.add(so);
      }
    }
    List<SelectOption> sortedSelectOptions = new List<SelectOption>();
    sortedSelectOptions.addAll(sortSelectOptionsByLabel(lessSelectOption));
    sortedSelectOptions.add(pivotValue);
    sortedSelectOptions.addAll(sortSelectOptionsByLabel(greaterSelectOption));
    return sortedSelectOptions;
  }

  private List<SelectOption> addEmptyValueSelectOption(
    List<SelectOption> selectOptions,
    String emptyValueSelectOptionLabel,
    Integer position
  ) {
    if (selectOptions == null || selectOptions.size() <= 1 || position < 0) {
      return selectOptions;
    }

    selectOptions.add(
      position,
      new SelectOption('''', emptyValueSelectOptionLabel)
    );

    return selectOptions;
  }

  public List<SelectOption> getParentObjList() {
    List<Schema.SObjectType> parentObjList = objectDescription.values();
    if(hasTooManyObjects) {
      return new List<SelectOption>();
    }
    List<SelectOption> objNames = new List<SelectOption>();
    for (Schema.SObjectType obj : parentObjList) {
      Schema.DescribeSObjectResult description = obj.getDescribe(
        SObjectDescribeOptions.DEFERRED
      );

      //Filter out sObjects that can''t be rolled up to avoid >1000 collection limit
      if(!rollupableSObjectsNames.contains(description.getName())) {
        continue;
      }

      String prefix = description.getKeyPrefix();

      if (!String.isEmpty(prefix)) {
        String objName = description.getName();
        objNames.add(
          new SelectOption(
            objName,
            obj.getDescribe().getLabel() +
            '' ('' +
            objName +
            '')''
          )
        );
      }
    }
    return addEmptyValueSelectOption(
      sortSelectOptionsByLabel(objNames),
      ''-- Select --'',
      0
    );
  }

  public void confirmParentObject() {
    try {
      if (selectedParentObject == null || selectedParentObject == '''') {
        ApexPages.addMessage(
          new ApexPages.Message(
            ApexPages.Severity.ERROR,
            ''Please Select the Parent Object''
          )
        );
      } else {
        LookupRollupSummary.ParentObject__c = selectedParentObject;
        childObjectList = new List<SelectOption>();
        parentObjFields = new List<SelectOption>();
        ChildObjectsDuplicates = new Map<String, String>();
        isParentObjectSelected = true;
        Schema.SObjectType parentObject = objectDescription.get(
          selectedParentObject
        );
        Schema.DescribeSObjectResult parentObjectDescribe = parentObject.getDescribe();
        //AJB 18/11/21: changed to use a map to avoid string splitting and comparison later on
        PnameWithRField = new Map<String, List<String>>();
        for (
          Schema.ChildRelationship cr : parentObjectDescribe.getChildRelationships()
        ) {
          Schema.DescribeSObjectResult dr = (cr.getChildSObject())
            .getDescribe(SObjectDescribeOptions.DEFERRED);
          String childObjectName = dr.getName();
          String relFieldName = String.valueOf(cr.getField());

          // AJB 16/11/21 it''s actually slightly quicker to check if the map contains the key first rather than just overwriting
          if (
            !ChildObjectsDuplicates.containsKey(childObjectName) &&
            !String.isBlank(dr.getKeyPrefix())
          ) {
            ChildObjectsDuplicates.put(
              childObjectName,
              String.valueOf(dr.getLabel()) +
              '' ('' +
              childObjectName +
              '')''
            );
          }

          List<String> childRelationshipFields;
          if (!PnameWithRField.containsKey(childObjectName)) {
            childRelationshipFields = new List<String>();
          } else {
            childRelationshipFields = PnameWithRField.get(childObjectName);
            if (childRelationshipFields == null) {
              childRelationshipFields = new List<String>();
            }
          }
          childRelationshipFields.add(relFieldName);
          PnameWithRField.put(childObjectName, childRelationshipFields);
          //objectWithRelationshipField.put(childObjectName + ''.''+ relFieldName, relFieldName);
        }
        for (String key : ChildObjectsDuplicates.keySet()) {
          //Filter out sObjects that can''t be rolled up to avoid >1000 collection limit
          if(!rollupableSObjectsNames.contains(key)) {
            continue;
          }

          childObjectList.add(
            new SelectOption(key, ChildObjectsDuplicates.get(key))
          );
        }
        childObjectList = addEmptyValueSelectOption(
          sortSelectOptionsByLabel(childObjectList),
          ''-- Select --'',
          0
        );
        Map<String, Schema.SObjectField> MapOfFields = parentObjectDescribe.fields.getMap();
        for (Schema.SObjectField field : MapOfFields.values()) {
          Schema.DescribeFieldResult fr = field.getDescribe();
          //String dType = String.valueof(fr.getType());
          //if(dType == ''DOUBLE'' || dType == ''INTEGER'' || dType == ''CURRENCY'' || dType == ''DATE'' || dType == ''DATETIME'' || dType == ''STRING''){

          String fieldName = fr.getName();
          parentObjFields.add(
            new SelectOption(
              fieldName,
              String.valueOf(fr.getLabel()) +
              '' ('' +
              fieldName +
              '')''
            )
          );
          //}
        }
        parentObjFields = addEmptyValueSelectOption(
          sortSelectOptionsByLabel(parentObjFields),
          ''-- Select --'',
          0
        );
      }
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }
  public void confirmChildObject() {
    try {
      if (selectedChildObject == null || selectedChildObject == '''') {
        ApexPages.addMessage(
          new ApexPages.Message(
            ApexPages.Severity.ERROR,
            ''Please Select the Child Object''
          )
        );
      } else {
        childObjFields = new List<SelectOption>();
        // AJB 18/11/21: it was setting the same string as key and value, so we don''t need a map, just a set
        rFields = new Set<String>();
        isChildObjectSelected = true;
        LookupRollupSummary.ChildObject__c = selectedChildObject;
        Map<String, Schema.SObjectField> mapOfFields = objectDescription.get(
            selectedChildObject
          )
          .getDescribe()
          .fields.getMap();
        for (Schema.SObjectField field : mapOfFields.values()) {
          Schema.DescribeFieldResult fr = field.getDescribe();
          String fieldName = fr.getName();
          //String dType = String.valueof(fr.getType());
          // if(dType == ''DOUBLE'' || dType == ''INTEGER'' || dType == ''CURRENCY'' || dType == ''DATE'' || dType == ''DATETIME''){
          childObjFields.add(
            new SelectOption(
              fieldName,
              String.valueOf(fr.getLabel()) +
              '' ('' +
              fieldName +
              '')''
            )
          );
          //}
          // AJB 16/11/21: don''t think we really need to loop over the map values twice
          /*
                    }

                    for(Schema.SobjectField strFld: mapOfFields.values())
                    {*/
          if (fr.getType() == Schema.DisplayType.REFERENCE) {
            if (
              String.valueOf(fr.getReferenceTo()) ==
              ''('' + selectedParentObject + '')''
            ) {
              List<String> childRelationshipFields = PnameWithRField.get(
                selectedChildObject
              );
              for (String thisField : childRelationshipFields) {
                rFields.add(thisField);
              }
            }
          }
        }
        childObjFields = addEmptyValueSelectOption(
          sortSelectOptionsByLabel(childObjFields),
          ''-- Select --'',
          0
        );
        relationshipFields = new List<SelectOption>();
        if (rFields.size() > 1) {
          isMultiSelectRField = true;
          for (String fieldName : rFields) {
            relationshipFields.add(new SelectOption(fieldName, fieldName));
          }
          relationshipFields = addEmptyValueSelectOption(
            sortSelectOptionsByLabel(relationshipFields),
            ''-- Select --'',
            0
          );
        } else if (rFields.size() == 1) {
          for (String fieldName : rFields) {
            LookupRollupSummary.RelationshipField__c = fieldName;
          }
        } else {
          isParentObjectSelected = false;
          isChildObjectSelected = false;
          ApexPages.addMessage(
            new ApexPages.Message(
              ApexPages.Severity.WARNING,
              ''No appropriate relationship found between these objects''
            )
          );
        }
      }
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }

  public void updateChildField() {
    try {
      LookupRollupSummary.FieldToAggregate__c = selectedChildField;
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }
  public void updateParentField() {
    try {
      LookupRollupSummary.AggregateResultField__c = selectedParentField;
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }
  public void updateRField() {
    try {
      LookupRollupSummary.RelationshipField__c = selectedRField;
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }
  public void updateAggregateField() {
    try {
      if (
        LookupRollupSummary.AggregateOperation__c == ''Concatenate'' ||
        LookupRollupSummary.AggregateOperation__c == ''Concatenate Distinct''
      ) {
        fieldToOrderByNeeded = true;
      } else if (
        LookupRollupSummary.AggregateOperation__c == ''First'' ||
        LookupRollupSummary.AggregateOperation__c == ''Last''
      ) {
        fieldToOrderByNeeded = true;
      } else {
        fieldToOrderByNeeded = false;
      }
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }
  public void updateCalcMode() {
    try {
      if (LookupRollupSummary.CalculationMode__c == ''Realtime'') {
        realtimeSelected = true;
        LookupRollupSummary.Active__c = false;
      } else {
        realtimeSelected = false;
      }
    } catch (Exception ex) {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.ERROR, ex.getMessage())
      );
    }
  }
}','804747626.0','True','ManageLookupRollupSummariesNewController','16745','Active');
INSERT INTO "ApexClass" VALUES(32,'57.0','@isTest
public class ManageLookupRollupSummariesNewTest {
    static testMethod void myUnitTest1() {
        ManageLookupRollupSummariesNewController mrl = new ManageLookupRollupSummariesNewController();
        //mrl.getLookups();
        mrl.init();
        mrl.load();

        LookupRollupSummary2__mdt rollupSummary = new LookupRollupSummary2__mdt();
        Map<String, Object> fields = (Map<String, Object>) JSON.deserializeUntyped(JSON.serializePretty(rollupSummary));
        fields.put(LookupRollupSummary2__mdt.Label.getDescribe().getName(), ''Total Opportunities greater than 200 into Annual Revenue on Account'');
        fields.put(LookupRollupSummary2__mdt.DeveloperName.getDescribe().getName(), ''AccountRollup'');			
        fields.put(LookupRollupSummary2__mdt.ParentObject__c.getDescribe().getName(),''Account'');
        fields.put(LookupRollupSummary2__mdt.ChildObject__c.getDescribe().getName(),''Contact'');
        fields.put(LookupRollupSummary2__mdt.RelationShipField__c.getDescribe().getName(),''AccountId'');
        fields.put(LookupRollupSummary2__mdt.RelationShipCriteria__c.getDescribe().getName(), null);
        fields.put(LookupRollupSummary2__mdt.FieldToAggregate__c.getDescribe().getName(), ''LastCURequestDate'');
        fields.put(LookupRollupSummary2__mdt.AggregateOperation__c.getDescribe().getName(), ''Count'');
        fields.put(LookupRollupSummary2__mdt.AggregateResultField__c.getDescribe().getName(), ''AnnualRevenue'');
        fields.put(LookupRollupSummary2__mdt.Active__c.getDescribe().getName(), false);
        fields.put(LookupRollupSummary2__mdt.CalculationMode__c.getDescribe().getName(),''Realtime'');
        fields.put(LookupRollupSummary2__mdt.TestCodeParent__c.getDescribe().getName(), ''System.assertEquals(1,1);'');
        fields.put(LookupRollupSummary2__mdt.TestCodeSeeAllData__c.getDescribe().getName(), true);
        rollupSummary = (LookupRollupSummary2__mdt) JSON.deserialize(JSON.serialize(fields), LookupRollupSummary2__mdt.class);

        mrl.LookupRollupSummary = rollupSummary;
        mrl.selectedParentField = ''AnnualRevenue'';
        mrl.selectedChildField = ''Birthdate'';
        mrl.save();
        mrl.LookupRollupSummary = mrl.LookupRollupSummary;
        mrl.save();
        mrl.deleteX();
        mrl.hideMessage();
        mrl.getCalculationModes();
        mrl.getAggregateOperations();
        mrl.getCalculationSharingModes();
        mrl.getParentObjList();
        mrl.selectedParentObject = ''Account'';
        mrl.confirmParentObject();
        mrl.selectedChildObject = ''Contact'';
        mrl.confirmChildObject();
        mrl.updateChildField();
        mrl.updateParentField();
        mrl.updateRField();
    }
    static testMethod void myUnitTest2(){
        ManageLookupRollupSummariesNewController mrl = new ManageLookupRollupSummariesNewController();
        mrl.selectedParentObject = null;
        mrl.confirmParentObject();
    }

    @isTest
    private static void controller_saves_and_reloads_with_correct_parameters() {
        PageReference wizard = Page.managelookuprollupsummaries_New;
        Test.setCurrentPage(wizard);
        Test.setMock(WebServiceMock.class, new MetadataServiceCalloutMock());

        LookupRollupSummary2__mdt rollupSummary = new LookupRollupSummary2__mdt();
        Map<String, Object> fields = (Map<String, Object>) JSON.deserializeUntyped(JSON.serializePretty(rollupSummary));
        fields.put(LookupRollupSummary2__mdt.Label.getDescribe().getName(), ''Total Opportunities greater than 200 into Annual Revenue on Account'');
        fields.put(LookupRollupSummary2__mdt.DeveloperName.getDescribe().getName(), ''AccountRollup'');			
        fields.put(LookupRollupSummary2__mdt.ParentObject__c.getDescribe().getName(),''Account'');
        fields.put(LookupRollupSummary2__mdt.ChildObject__c.getDescribe().getName(),''Contact'');
        fields.put(LookupRollupSummary2__mdt.RelationShipField__c.getDescribe().getName(),''AccountId'');
        fields.put(LookupRollupSummary2__mdt.RelationShipCriteria__c.getDescribe().getName(), null);
        fields.put(LookupRollupSummary2__mdt.FieldToAggregate__c.getDescribe().getName(), ''LastCURequestDate'');
        fields.put(LookupRollupSummary2__mdt.AggregateOperation__c.getDescribe().getName(), ''Count'');
        fields.put(LookupRollupSummary2__mdt.AggregateResultField__c.getDescribe().getName(), ''AnnualRevenue'');
        fields.put(LookupRollupSummary2__mdt.Active__c.getDescribe().getName(), false);
        fields.put(LookupRollupSummary2__mdt.CalculationMode__c.getDescribe().getName(),''Realtime'');
        fields.put(LookupRollupSummary2__mdt.TestCodeParent__c.getDescribe().getName(), ''System.assertEquals(1,1);'');
        fields.put(LookupRollupSummary2__mdt.TestCodeSeeAllData__c.getDescribe().getName(), true);
        rollupSummary = (LookupRollupSummary2__mdt) JSON.deserialize(JSON.serialize(fields), LookupRollupSummary2__mdt.class);

        ManageLookupRollupSummariesNewController controller = new ManageLookupRollupSummariesNewController();

        controller.LookupRollupSummary = rollupSummary;

        Test.startTest();
        PageReference nextPage = controller.save();
        Test.stopTest();

        String namespace = Utilities.namespace();
        String expectedUrl = ''/apex/''+ (namespace.length() > 0 ? namespace + ''__'' : '''') + ''managelookuprollupsummaries'';
        System.assertEquals(true, nextPage.getUrl().startsWith(expectedUrl), ''The redirect went to the wrong place'');
        System.assertEquals(''AccountRollup'', nextPage.getParameters().get(''developerName''), ''The parameter was not set correctly'');
    }

    @isTest
    private static void rollup_without_parent_object_causes_field_exception() {
        PageReference wizard = Page.managelookuprollupsummaries_New;
        Test.setCurrentPage(wizard);
        Test.setMock(WebServiceMock.class, new MetadataServiceCalloutMock());

        LookupRollupSummary2__mdt rollupSummary = new LookupRollupSummary2__mdt();
        Map<String, Object> fields = (Map<String, Object>) JSON.deserializeUntyped(JSON.serializePretty(rollupSummary));
        fields.put(LookupRollupSummary2__mdt.Label.getDescribe().getName(), ''Total Opportunities greater than 200 into Annual Revenue on Account'');
        fields.put(LookupRollupSummary2__mdt.DeveloperName.getDescribe().getName(), ''AccountRollup'');			
        //fields.put(LookupRollupSummary2__mdt.ParentObject__c.getDescribe().getName(),''Account'');
        fields.put(LookupRollupSummary2__mdt.ChildObject__c.getDescribe().getName(),''Contact'');
        fields.put(LookupRollupSummary2__mdt.RelationShipField__c.getDescribe().getName(),''AccountId'');
        fields.put(LookupRollupSummary2__mdt.RelationShipCriteria__c.getDescribe().getName(), null);
        fields.put(LookupRollupSummary2__mdt.FieldToAggregate__c.getDescribe().getName(), ''LastCURequestDate'');
        fields.put(LookupRollupSummary2__mdt.AggregateOperation__c.getDescribe().getName(), ''Count'');
        fields.put(LookupRollupSummary2__mdt.AggregateResultField__c.getDescribe().getName(), ''AnnualRevenue'');
        fields.put(LookupRollupSummary2__mdt.Active__c.getDescribe().getName(), false);
        fields.put(LookupRollupSummary2__mdt.CalculationMode__c.getDescribe().getName(),''Realtime'');
        fields.put(LookupRollupSummary2__mdt.TestCodeParent__c.getDescribe().getName(), ''System.assertEquals(1,1);'');
        fields.put(LookupRollupSummary2__mdt.TestCodeSeeAllData__c.getDescribe().getName(), true);
        rollupSummary = (LookupRollupSummary2__mdt) JSON.deserialize(JSON.serialize(fields), LookupRollupSummary2__mdt.class);

        ManageLookupRollupSummariesNewController controller = new ManageLookupRollupSummariesNewController();

        controller.LookupRollupSummary = rollupSummary;

        Test.startTest();
        PageReference nextPage = controller.save();
        Test.stopTest();

        List<ApexPages.Message> messages = ApexPages.getMessages();
        System.assertEquals(1, messages.size(), ''There should only be one error message'');
        System.assertEquals(''Parent Object: Object does not exist.'', messages[0].getSummary(), ''Unexpected error message received'');
    }

    @isTest
    private static void rollup_summing_dates_causes_record_level_error_to_be_added() {
        PageReference wizard = Page.managelookuprollupsummaries_New;
        Test.setCurrentPage(wizard);
        Test.setMock(WebServiceMock.class, new MetadataServiceCalloutMock());

        LookupRollupSummary2__mdt rollupSummary = new LookupRollupSummary2__mdt();
        Map<String, Object> fields = (Map<String, Object>) JSON.deserializeUntyped(JSON.serializePretty(rollupSummary));
        fields.put(LookupRollupSummary2__mdt.Label.getDescribe().getName(), ''Total Opportunities greater than 200 into Annual Revenue on Account'');
        fields.put(LookupRollupSummary2__mdt.DeveloperName.getDescribe().getName(), ''AccountRollup'');			
        fields.put(LookupRollupSummary2__mdt.ParentObject__c.getDescribe().getName(),''Account'');
        fields.put(LookupRollupSummary2__mdt.ChildObject__c.getDescribe().getName(),''Contact'');
        fields.put(LookupRollupSummary2__mdt.RelationShipField__c.getDescribe().getName(),''AccountId'');
        fields.put(LookupRollupSummary2__mdt.RelationShipCriteria__c.getDescribe().getName(), null);
        fields.put(LookupRollupSummary2__mdt.FieldToAggregate__c.getDescribe().getName(), ''LastModifiedDate'');
        fields.put(LookupRollupSummary2__mdt.AggregateOperation__c.getDescribe().getName(), ''Sum'');
        fields.put(LookupRollupSummary2__mdt.AggregateResultField__c.getDescribe().getName(), ''CreatedDate'');
        fields.put(LookupRollupSummary2__mdt.Active__c.getDescribe().getName(), false);
        fields.put(LookupRollupSummary2__mdt.CalculationMode__c.getDescribe().getName(),''Realtime'');
        fields.put(LookupRollupSummary2__mdt.TestCodeParent__c.getDescribe().getName(), ''System.assertEquals(1,1);'');
        fields.put(LookupRollupSummary2__mdt.TestCodeSeeAllData__c.getDescribe().getName(), true);
        rollupSummary = (LookupRollupSummary2__mdt) JSON.deserialize(JSON.serialize(fields), LookupRollupSummary2__mdt.class);

        ManageLookupRollupSummariesNewController controller = new ManageLookupRollupSummariesNewController();

        controller.LookupRollupSummary = rollupSummary;

        Test.startTest();
        PageReference nextPage = controller.save();
        Test.stopTest();

        List<ApexPages.Message> messages = ApexPages.getMessages();
        System.assertEquals(1, messages.size(), ''There should only be one error message'');
        System.assertEquals(''Sum/Avg doesnt looks like valid for dates ! Still want, then implement the IRollerCoaster yourself and change this class as required.'', messages[0].getSummary(), ''Unexpected error message received'');
    }

    @isTest
    private static void calling_confirm_child_object_with_no_child_object_throws_exception() {
        PageReference wizard = Page.managelookuprollupsummaries_New;
        Test.setCurrentPage(wizard);
        Test.setMock(WebServiceMock.class, new MetadataServiceCalloutMock());   
        
        ManageLookupRollupSummariesNewController controller = new ManageLookupRollupSummariesNewController();
        controller.selectedChildObject = null;

        Test.startTest();
        controller.confirmChildObject();
        Test.stopTest();

        List<ApexPages.Message> messages = ApexPages.getMessages();
        System.assertEquals(1, messages.size(), ''There should only be one error message'');
        System.assertEquals(''Please Select the Child Object'', messages[0].getDetail(), ''Unexpected error message received'');
    }

    @isTest
    private static void relationship_fields_populated_successfully_when_there_are_multiple_fields() {
        PageReference wizard = Page.managelookuprollupsummaries_New;
        Test.setCurrentPage(wizard);
        Test.setMock(WebServiceMock.class, new MetadataServiceCalloutMock());

        LookupRollupSummary2__mdt rollupSummary = new LookupRollupSummary2__mdt();
        Map<String, Object> fields = (Map<String, Object>) JSON.deserializeUntyped(JSON.serializePretty(rollupSummary));
        fields.put(LookupRollupSummary2__mdt.Label.getDescribe().getName(), ''Total Opportunities greater than 200 into Annual Revenue on Account'');
        fields.put(LookupRollupSummary2__mdt.DeveloperName.getDescribe().getName(), ''AccountRollup'');			
        fields.put(LookupRollupSummary2__mdt.ParentObject__c.getDescribe().getName(),''Account'');
        fields.put(LookupRollupSummary2__mdt.ChildObject__c.getDescribe().getName(),''Task'');
        fields.put(LookupRollupSummary2__mdt.RelationShipField__c.getDescribe().getName(),''AccountId'');
        fields.put(LookupRollupSummary2__mdt.RelationShipCriteria__c.getDescribe().getName(), null);
        fields.put(LookupRollupSummary2__mdt.FieldToAggregate__c.getDescribe().getName(), ''LastModifiedDate'');
        fields.put(LookupRollupSummary2__mdt.AggregateOperation__c.getDescribe().getName(), ''Max'');
        fields.put(LookupRollupSummary2__mdt.AggregateResultField__c.getDescribe().getName(), ''CreatedDate'');
        fields.put(LookupRollupSummary2__mdt.Active__c.getDescribe().getName(), false);
        fields.put(LookupRollupSummary2__mdt.CalculationMode__c.getDescribe().getName(),''Realtime'');
        fields.put(LookupRollupSummary2__mdt.TestCodeParent__c.getDescribe().getName(), ''System.assertEquals(1,1);'');
        fields.put(LookupRollupSummary2__mdt.TestCodeSeeAllData__c.getDescribe().getName(), true);
        rollupSummary = (LookupRollupSummary2__mdt) JSON.deserialize(JSON.serialize(fields), LookupRollupSummary2__mdt.class);

        ManageLookupRollupSummariesNewController controller = new ManageLookupRollupSummariesNewController();
        controller.LookupRollupSummary = rollupSummary;
        controller.selectedParentObject = ''Account'';
        controller.getParentObjList();
        controller.confirmParentObject();
        controller.selectedChildObject = ''Task'';

        Test.startTest();
        controller.confirmChildObject();
        Test.stopTest();

        System.assertEquals(true, controller.isMultiSelectRField, ''The Multiple relationship flag should be set'');
        // can''t really be more specific than >1, in case Salesforce ever add another relationship between Account & Task
        System.assertEquals(true, controller.relationshipFields.size() > 1, ''Multiple relationship fields should exist'');
    }
}','2661355498.0','False','ManageLookupRollupSummariesNewTest','14211','Active');
INSERT INTO "ApexClass" VALUES(33,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

//Patched by MetadataServicePatcher v34.0 2015-07-06 00:00:00

//Generated by wsdl2apex

public class MetadataService {
  public class listMetadataResponse_element {
    public MetadataService.FileProperties[] result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class WorkflowRule extends Metadata {
    public String type = ''WorkflowRule'';
    public String fullName;
    public MetadataService.WorkflowActionReference[] actions;
    public Boolean active;
    public String booleanFilter;
    public MetadataService.FilterItem[] criteriaItems;
    public String description;
    public String formula;
    public String triggerType;
    public MetadataService.WorkflowTimeTrigger[] workflowTimeTriggers;
    private String[] actions_type_info = new List<String>{
      ''actions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criteriaItems_type_info = new List<String>{
      ''criteriaItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] triggerType_type_info = new List<String>{
      ''triggerType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] workflowTimeTriggers_type_info = new List<String>{
      ''workflowTimeTriggers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''actions'',
      ''active'',
      ''booleanFilter'',
      ''criteriaItems'',
      ''description'',
      ''formula'',
      ''triggerType'',
      ''workflowTimeTriggers''
    };
  }
  public class FieldOverride {
    public String field;
    public String formula;
    public String literalValue;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] literalValue_type_info = new List<String>{
      ''literalValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''formula'',
      ''literalValue''
    };
  }
  public class QuotasSettings {
    public Boolean showQuotas;
    private String[] showQuotas_type_info = new List<String>{
      ''showQuotas'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''showQuotas'' };
  }
  public class checkDeployStatus_element {
    public String asyncProcessId;
    public Boolean includeDetails;
    private String[] asyncProcessId_type_info = new List<String>{
      ''asyncProcessId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] includeDetails_type_info = new List<String>{
      ''includeDetails'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''asyncProcessId'',
      ''includeDetails''
    };
  }
  public class Skill extends Metadata {
    public String type = ''Skill'';
    public String fullName;
    public MetadataService.SkillAssignments assignments;
    public String label;
    private String[] assignments_type_info = new List<String>{
      ''assignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''assignments'',
      ''label''
    };
  }
  public class FlowInputValidationRule {
    public String errorMessage;
    public String formulaExpression;
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] formulaExpression_type_info = new List<String>{
      ''formulaExpression'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''errorMessage'',
      ''formulaExpression''
    };
  }
  public class CodeCoverageWarning {
    public String id;
    public String message;
    public String name;
    public String namespace;
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] message_type_info = new List<String>{
      ''message'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] namespace_type_info = new List<String>{
      ''namespace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''id'',
      ''message'',
      ''name'',
      ''namespace''
    };
  }
  public class FlowApexPluginCall {
    public String apexClass;
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowApexPluginCallInputParameter[] inputParameters;
    public MetadataService.FlowApexPluginCallOutputParameter[] outputParameters;
    private String[] apexClass_type_info = new List<String>{
      ''apexClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inputParameters_type_info = new List<String>{
      ''inputParameters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] outputParameters_type_info = new List<String>{
      ''outputParameters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apexClass'',
      ''connector'',
      ''faultConnector'',
      ''inputParameters'',
      ''outputParameters''
    };
  }
  public class KnowledgeAnswerSettings {
    public String assignTo;
    public String defaultArticleType;
    public Boolean enableArticleCreation;
    private String[] assignTo_type_info = new List<String>{
      ''assignTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultArticleType_type_info = new List<String>{
      ''defaultArticleType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableArticleCreation_type_info = new List<String>{
      ''enableArticleCreation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignTo'',
      ''defaultArticleType'',
      ''enableArticleCreation''
    };
  }
  public class PasswordPolicies {
    public String apiOnlyUserHomePageURL;
    public String complexity;
    public String expiration;
    public String historyRestriction;
    public String lockoutInterval;
    public String maxLoginAttempts;
    public String minPasswordLength;
    public Boolean minimumPasswordLifetime;
    public Boolean obscureSecretAnswer;
    public String passwordAssistanceMessage;
    public String passwordAssistanceURL;
    public String questionRestriction;
    private String[] apiOnlyUserHomePageURL_type_info = new List<String>{
      ''apiOnlyUserHomePageURL'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] complexity_type_info = new List<String>{
      ''complexity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] expiration_type_info = new List<String>{
      ''expiration'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] historyRestriction_type_info = new List<String>{
      ''historyRestriction'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lockoutInterval_type_info = new List<String>{
      ''lockoutInterval'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] maxLoginAttempts_type_info = new List<String>{
      ''maxLoginAttempts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] minPasswordLength_type_info = new List<String>{
      ''minPasswordLength'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] minimumPasswordLifetime_type_info = new List<String>{
      ''minimumPasswordLifetime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] obscureSecretAnswer_type_info = new List<String>{
      ''obscureSecretAnswer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] passwordAssistanceMessage_type_info = new List<String>{
      ''passwordAssistanceMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] passwordAssistanceURL_type_info = new List<String>{
      ''passwordAssistanceURL'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] questionRestriction_type_info = new List<String>{
      ''questionRestriction'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apiOnlyUserHomePageURL'',
      ''complexity'',
      ''expiration'',
      ''historyRestriction'',
      ''lockoutInterval'',
      ''maxLoginAttempts'',
      ''minPasswordLength'',
      ''minimumPasswordLifetime'',
      ''obscureSecretAnswer'',
      ''passwordAssistanceMessage'',
      ''passwordAssistanceURL'',
      ''questionRestriction''
    };
  }
  public class QueueSobject {
    public String sobjectType;
    private String[] sobjectType_type_info = new List<String>{
      ''sobjectType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''sobjectType'' };
  }
  public class AgentConfigProfileAssignments {
    public String[] profile;
    private String[] profile_type_info = new List<String>{
      ''profile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''profile'' };
  }
  public class ExternalDataSource extends Metadata {
    public String type = ''ExternalDataSource'';
    public String fullName;
    public String apiKey;
    public String authProvider;
    public String certificate;
    public String customConfiguration;
    public String endpoint;
    public String label;
    public String oauthRefreshToken;
    public String oauthScope;
    public String oauthToken;
    public String password;
    public String principalType;
    public String protocol;
    public String repository;
    public String type_x;
    public String username;
    public String version;
    private String[] apiKey_type_info = new List<String>{
      ''apiKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] authProvider_type_info = new List<String>{
      ''authProvider'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] certificate_type_info = new List<String>{
      ''certificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customConfiguration_type_info = new List<String>{
      ''customConfiguration'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] endpoint_type_info = new List<String>{
      ''endpoint'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] oauthRefreshToken_type_info = new List<String>{
      ''oauthRefreshToken'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] oauthScope_type_info = new List<String>{
      ''oauthScope'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] oauthToken_type_info = new List<String>{
      ''oauthToken'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] password_type_info = new List<String>{
      ''password'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] principalType_type_info = new List<String>{
      ''principalType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protocol_type_info = new List<String>{
      ''protocol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] repository_type_info = new List<String>{
      ''repository'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] username_type_info = new List<String>{
      ''username'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] version_type_info = new List<String>{
      ''version'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''apiKey'',
      ''authProvider'',
      ''certificate'',
      ''customConfiguration'',
      ''endpoint'',
      ''label'',
      ''oauthRefreshToken'',
      ''oauthScope'',
      ''oauthToken'',
      ''password'',
      ''principalType'',
      ''protocol'',
      ''repository'',
      ''type_x'',
      ''username'',
      ''version''
    };
  }
  public class WorkflowEmailRecipient {
    public String field;
    public String recipient;
    public String type_x;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recipient_type_info = new List<String>{
      ''recipient'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''recipient'',
      ''type_x''
    };
  }
  public class DescribeMetadataResult {
    public MetadataService.DescribeMetadataObject[] metadataObjects;
    public String organizationNamespace;
    public Boolean partialSaveAllowed;
    public Boolean testRequired;
    private String[] metadataObjects_type_info = new List<String>{
      ''metadataObjects'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] organizationNamespace_type_info = new List<String>{
      ''organizationNamespace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] partialSaveAllowed_type_info = new List<String>{
      ''partialSaveAllowed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] testRequired_type_info = new List<String>{
      ''testRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''metadataObjects'',
      ''organizationNamespace'',
      ''partialSaveAllowed'',
      ''testRequired''
    };
  }
  public class Scontrol extends MetadataWithContent {
    public String type = ''Scontrol'';
    public String fullName;
    public String content;
    public String contentSource;
    public String description;
    public String encodingKey;
    public String fileContent;
    public String fileName;
    public String name;
    public Boolean supportsCaching;
    private String[] contentSource_type_info = new List<String>{
      ''contentSource'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] encodingKey_type_info = new List<String>{
      ''encodingKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fileContent_type_info = new List<String>{
      ''fileContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fileName_type_info = new List<String>{
      ''fileName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] supportsCaching_type_info = new List<String>{
      ''supportsCaching'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''contentSource'',
      ''description'',
      ''encodingKey'',
      ''fileContent'',
      ''fileName'',
      ''name'',
      ''supportsCaching''
    };
  }
  public class DashboardComponent {
    public Boolean autoselectColumnsFromReport;
    public String chartAxisRange;
    public Double chartAxisRangeMax;
    public Double chartAxisRangeMin;
    public MetadataService.ChartSummary[] chartSummary;
    public String componentType;
    public MetadataService.DashboardFilterColumn[] dashboardFilterColumns;
    public MetadataService.DashboardTableColumn[] dashboardTableColumn;
    public String displayUnits;
    public String drillDownUrl;
    public Boolean drillEnabled;
    public Boolean drillToDetailEnabled;
    public Boolean enableHover;
    public Boolean expandOthers;
    public String footer;
    public Double gaugeMax;
    public Double gaugeMin;
    public String[] groupingColumn;
    public String header;
    public Double indicatorBreakpoint1;
    public Double indicatorBreakpoint2;
    public String indicatorHighColor;
    public String indicatorLowColor;
    public String indicatorMiddleColor;
    public String legendPosition;
    public Integer maxValuesDisplayed;
    public String metricLabel;
    public String page_x;
    public Integer pageHeightInPixels;
    public String report;
    public String scontrol;
    public Integer scontrolHeightInPixels;
    public Boolean showPercentage;
    public Boolean showPicturesOnCharts;
    public Boolean showPicturesOnTables;
    public Boolean showTotal;
    public Boolean showValues;
    public String sortBy;
    public String title;
    public Boolean useReportChart;
    private String[] autoselectColumnsFromReport_type_info = new List<String>{
      ''autoselectColumnsFromReport'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chartAxisRange_type_info = new List<String>{
      ''chartAxisRange'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chartAxisRangeMax_type_info = new List<String>{
      ''chartAxisRangeMax'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chartAxisRangeMin_type_info = new List<String>{
      ''chartAxisRangeMin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chartSummary_type_info = new List<String>{
      ''chartSummary'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] componentType_type_info = new List<String>{
      ''componentType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] dashboardFilterColumns_type_info = new List<String>{
      ''dashboardFilterColumns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] dashboardTableColumn_type_info = new List<String>{
      ''dashboardTableColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] displayUnits_type_info = new List<String>{
      ''displayUnits'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] drillDownUrl_type_info = new List<String>{
      ''drillDownUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] drillEnabled_type_info = new List<String>{
      ''drillEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] drillToDetailEnabled_type_info = new List<String>{
      ''drillToDetailEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableHover_type_info = new List<String>{
      ''enableHover'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] expandOthers_type_info = new List<String>{
      ''expandOthers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] footer_type_info = new List<String>{
      ''footer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] gaugeMax_type_info = new List<String>{
      ''gaugeMax'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] gaugeMin_type_info = new List<String>{
      ''gaugeMin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] groupingColumn_type_info = new List<String>{
      ''groupingColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] header_type_info = new List<String>{
      ''header'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] indicatorBreakpoint1_type_info = new List<String>{
      ''indicatorBreakpoint1'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] indicatorBreakpoint2_type_info = new List<String>{
      ''indicatorBreakpoint2'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] indicatorHighColor_type_info = new List<String>{
      ''indicatorHighColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] indicatorLowColor_type_info = new List<String>{
      ''indicatorLowColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] indicatorMiddleColor_type_info = new List<String>{
      ''indicatorMiddleColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] legendPosition_type_info = new List<String>{
      ''legendPosition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] maxValuesDisplayed_type_info = new List<String>{
      ''maxValuesDisplayed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] metricLabel_type_info = new List<String>{
      ''metricLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pageHeightInPixels_type_info = new List<String>{
      ''pageHeightInPixels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] report_type_info = new List<String>{
      ''report'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scontrol_type_info = new List<String>{
      ''scontrol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scontrolHeightInPixels_type_info = new List<String>{
      ''scontrolHeightInPixels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showPercentage_type_info = new List<String>{
      ''showPercentage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showPicturesOnCharts_type_info = new List<String>{
      ''showPicturesOnCharts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showPicturesOnTables_type_info = new List<String>{
      ''showPicturesOnTables'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showTotal_type_info = new List<String>{
      ''showTotal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showValues_type_info = new List<String>{
      ''showValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortBy_type_info = new List<String>{
      ''sortBy'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] title_type_info = new List<String>{
      ''title'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] useReportChart_type_info = new List<String>{
      ''useReportChart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''autoselectColumnsFromReport'',
      ''chartAxisRange'',
      ''chartAxisRangeMax'',
      ''chartAxisRangeMin'',
      ''chartSummary'',
      ''componentType'',
      ''dashboardFilterColumns'',
      ''dashboardTableColumn'',
      ''displayUnits'',
      ''drillDownUrl'',
      ''drillEnabled'',
      ''drillToDetailEnabled'',
      ''enableHover'',
      ''expandOthers'',
      ''footer'',
      ''gaugeMax'',
      ''gaugeMin'',
      ''groupingColumn'',
      ''header'',
      ''indicatorBreakpoint1'',
      ''indicatorBreakpoint2'',
      ''indicatorHighColor'',
      ''indicatorLowColor'',
      ''indicatorMiddleColor'',
      ''legendPosition'',
      ''maxValuesDisplayed'',
      ''metricLabel'',
      ''page_x'',
      ''pageHeightInPixels'',
      ''report'',
      ''scontrol'',
      ''scontrolHeightInPixels'',
      ''showPercentage'',
      ''showPicturesOnCharts'',
      ''showPicturesOnTables'',
      ''showTotal'',
      ''showValues'',
      ''sortBy'',
      ''title'',
      ''useReportChart''
    };
  }
  public class WorkflowFlowActionParameter {
    public String name;
    public String value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class IdeasSettings extends Metadata {
    public String type = ''IdeasSettings'';
    public String fullName;
    public Boolean enableChatterProfile;
    public Boolean enableIdeaThemes;
    public Boolean enableIdeas;
    public Boolean enableIdeasReputation;
    public Double halfLife;
    public String ideasProfilePage;
    private String[] enableChatterProfile_type_info = new List<String>{
      ''enableChatterProfile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableIdeaThemes_type_info = new List<String>{
      ''enableIdeaThemes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableIdeas_type_info = new List<String>{
      ''enableIdeas'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableIdeasReputation_type_info = new List<String>{
      ''enableIdeasReputation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] halfLife_type_info = new List<String>{
      ''halfLife'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ideasProfilePage_type_info = new List<String>{
      ''ideasProfilePage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableChatterProfile'',
      ''enableIdeaThemes'',
      ''enableIdeas'',
      ''enableIdeasReputation'',
      ''halfLife'',
      ''ideasProfilePage''
    };
  }
  public class deployRecentValidationResponse_element {
    public String result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class Country {
    public Boolean active;
    public String integrationValue;
    public String isoCode;
    public String label;
    public Boolean orgDefault;
    public Boolean standard;
    public MetadataService.State[] states;
    public Boolean visible;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] integrationValue_type_info = new List<String>{
      ''integrationValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isoCode_type_info = new List<String>{
      ''isoCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] orgDefault_type_info = new List<String>{
      ''orgDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] standard_type_info = new List<String>{
      ''standard'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] states_type_info = new List<String>{
      ''states'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] visible_type_info = new List<String>{
      ''visible'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''integrationValue'',
      ''isoCode'',
      ''label'',
      ''orgDefault'',
      ''standard'',
      ''states'',
      ''visible''
    };
  }
  public class PathAssistantStep {
    public String[] fieldNames;
    public String info;
    public String picklistValueName;
    private String[] fieldNames_type_info = new List<String>{
      ''fieldNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] info_type_info = new List<String>{
      ''info'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] picklistValueName_type_info = new List<String>{
      ''picklistValueName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fieldNames'',
      ''info'',
      ''picklistValueName''
    };
  }
  public class ConnectedAppOauthConfig {
    public String callbackUrl;
    public String certificate;
    public String consumerKey;
    public String consumerSecret;
    public String[] scopes;
    private String[] callbackUrl_type_info = new List<String>{
      ''callbackUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] certificate_type_info = new List<String>{
      ''certificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] consumerKey_type_info = new List<String>{
      ''consumerKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] consumerSecret_type_info = new List<String>{
      ''consumerSecret'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scopes_type_info = new List<String>{
      ''scopes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''callbackUrl'',
      ''certificate'',
      ''consumerKey'',
      ''consumerSecret'',
      ''scopes''
    };
  }
  public class LiveAgentSettings extends Metadata {
    public String type = ''LiveAgentSettings'';
    public String fullName;
    public Boolean enableLiveAgent;
    private String[] enableLiveAgent_type_info = new List<String>{
      ''enableLiveAgent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableLiveAgent''
    };
  }
  public class PermissionSetApexClassAccess {
    public String apexClass;
    public Boolean enabled;
    private String[] apexClass_type_info = new List<String>{
      ''apexClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apexClass'',
      ''enabled''
    };
  }
  public class LogInfo {
    public String category;
    public String level;
    private String[] category_type_info = new List<String>{
      ''category'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] level_type_info = new List<String>{
      ''level'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''category'',
      ''level''
    };
  }
  public class SkillAssignments {
    public MetadataService.SkillProfileAssignments profiles;
    public MetadataService.SkillUserAssignments users;
    private String[] profiles_type_info = new List<String>{
      ''profiles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] users_type_info = new List<String>{
      ''users'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''profiles'',
      ''users''
    };
  }
  public class ReputationLevels {
    public MetadataService.ChatterAnswersReputationLevel[] chatterAnswersReputationLevels;
    public MetadataService.IdeaReputationLevel[] ideaReputationLevels;
    private String[] chatterAnswersReputationLevels_type_info = new List<String>{
      ''chatterAnswersReputationLevels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] ideaReputationLevels_type_info = new List<String>{
      ''ideaReputationLevels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''chatterAnswersReputationLevels'',
      ''ideaReputationLevels''
    };
  }
  public class ActivitiesSettings extends Metadata {
    public String type = ''ActivitiesSettings'';
    public String fullName;
    public Boolean allowUsersToRelateMultipleContactsToTasksAndEvents;
    public Boolean enableActivityReminders;
    public Boolean enableClickCreateEvents;
    public Boolean enableDragAndDropScheduling;
    public Boolean enableEmailTracking;
    public Boolean enableEventScheduler;
    public Boolean enableGroupTasks;
    public Boolean enableListViewScheduling;
    public Boolean enableLogNote;
    public Boolean enableMultidayEvents;
    public Boolean enableRecurringEvents;
    public Boolean enableRecurringTasks;
    public Boolean enableSidebarCalendarShortcut;
    public Boolean enableSimpleTaskCreateUI;
    public Boolean enableUNSTaskDelegatedToNotifications;
    public String meetingRequestsLogo;
    public Boolean showCustomLogoMeetingRequests;
    public Boolean showEventDetailsMultiUserCalendar;
    public Boolean showHomePageHoverLinksForEvents;
    public Boolean showMyTasksHoverLinks;
    public Boolean showRequestedMeetingsOnHomePage;
    private String[] allowUsersToRelateMultipleContactsToTasksAndEvents_type_info = new List<String>{
      ''allowUsersToRelateMultipleContactsToTasksAndEvents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableActivityReminders_type_info = new List<String>{
      ''enableActivityReminders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableClickCreateEvents_type_info = new List<String>{
      ''enableClickCreateEvents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableDragAndDropScheduling_type_info = new List<String>{
      ''enableDragAndDropScheduling'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableEmailTracking_type_info = new List<String>{
      ''enableEmailTracking'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableEventScheduler_type_info = new List<String>{
      ''enableEventScheduler'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableGroupTasks_type_info = new List<String>{
      ''enableGroupTasks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableListViewScheduling_type_info = new List<String>{
      ''enableListViewScheduling'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableLogNote_type_info = new List<String>{
      ''enableLogNote'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableMultidayEvents_type_info = new List<String>{
      ''enableMultidayEvents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableRecurringEvents_type_info = new List<String>{
      ''enableRecurringEvents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableRecurringTasks_type_info = new List<String>{
      ''enableRecurringTasks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSidebarCalendarShortcut_type_info = new List<String>{
      ''enableSidebarCalendarShortcut'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSimpleTaskCreateUI_type_info = new List<String>{
      ''enableSimpleTaskCreateUI'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableUNSTaskDelegatedToNotifications_type_info = new List<String>{
      ''enableUNSTaskDelegatedToNotifications'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] meetingRequestsLogo_type_info = new List<String>{
      ''meetingRequestsLogo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showCustomLogoMeetingRequests_type_info = new List<String>{
      ''showCustomLogoMeetingRequests'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showEventDetailsMultiUserCalendar_type_info = new List<String>{
      ''showEventDetailsMultiUserCalendar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showHomePageHoverLinksForEvents_type_info = new List<String>{
      ''showHomePageHoverLinksForEvents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showMyTasksHoverLinks_type_info = new List<String>{
      ''showMyTasksHoverLinks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showRequestedMeetingsOnHomePage_type_info = new List<String>{
      ''showRequestedMeetingsOnHomePage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''allowUsersToRelateMultipleContactsToTasksAndEvents'',
      ''enableActivityReminders'',
      ''enableClickCreateEvents'',
      ''enableDragAndDropScheduling'',
      ''enableEmailTracking'',
      ''enableEventScheduler'',
      ''enableGroupTasks'',
      ''enableListViewScheduling'',
      ''enableLogNote'',
      ''enableMultidayEvents'',
      ''enableRecurringEvents'',
      ''enableRecurringTasks'',
      ''enableSidebarCalendarShortcut'',
      ''enableSimpleTaskCreateUI'',
      ''enableUNSTaskDelegatedToNotifications'',
      ''meetingRequestsLogo'',
      ''showCustomLogoMeetingRequests'',
      ''showEventDetailsMultiUserCalendar'',
      ''showHomePageHoverLinksForEvents'',
      ''showMyTasksHoverLinks'',
      ''showRequestedMeetingsOnHomePage''
    };
  }
  public class WorkflowTaskTranslation {
    public String description;
    public String name;
    public String subject;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] subject_type_info = new List<String>{
      ''subject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''name'',
      ''subject''
    };
  }
  public class FlowElement {
    public String description;
    public String name;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''name''
    };
  }
  public class FlowInputFieldAssignment {
    public String field;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''value''
    };
  }
  public class DashboardComponentSection {
    public String columnSize;
    public MetadataService.DashboardComponent[] components;
    private String[] columnSize_type_info = new List<String>{
      ''columnSize'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] components_type_info = new List<String>{
      ''components'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''columnSize'',
      ''components''
    };
  }
  public class FlowLoop {
    public String assignNextValueToReference;
    public String collectionReference;
    public String iterationOrder;
    public MetadataService.FlowConnector nextValueConnector;
    public MetadataService.FlowConnector noMoreValuesConnector;
    private String[] assignNextValueToReference_type_info = new List<String>{
      ''assignNextValueToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] collectionReference_type_info = new List<String>{
      ''collectionReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] iterationOrder_type_info = new List<String>{
      ''iterationOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] nextValueConnector_type_info = new List<String>{
      ''nextValueConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] noMoreValuesConnector_type_info = new List<String>{
      ''noMoreValuesConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignNextValueToReference'',
      ''collectionReference'',
      ''iterationOrder'',
      ''nextValueConnector'',
      ''noMoreValuesConnector''
    };
  }
  public class ReputationPointsRule {
    public String eventType;
    public Integer points;
    private String[] eventType_type_info = new List<String>{
      ''eventType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] points_type_info = new List<String>{
      ''points'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''eventType'',
      ''points''
    };
  }
  public class FlowActionCallInputParameter {
    public String name;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class ReportTypeColumn {
    public Boolean checkedByDefault;
    public String displayNameOverride;
    public String field;
    public String table;
    private String[] checkedByDefault_type_info = new List<String>{
      ''checkedByDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] displayNameOverride_type_info = new List<String>{
      ''displayNameOverride'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] table_type_info = new List<String>{
      ''table'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''checkedByDefault'',
      ''displayNameOverride'',
      ''field'',
      ''table''
    };
  }
  public class LiveAgentConfig {
    public Boolean enableLiveChat;
    public Boolean openNewAccountSubtab;
    public Boolean openNewCaseSubtab;
    public Boolean openNewContactSubtab;
    public Boolean openNewLeadSubtab;
    public Boolean openNewVFPageSubtab;
    public MetadataService.PagesToOpen pagesToOpen;
    public Boolean showKnowledgeArticles;
    private String[] enableLiveChat_type_info = new List<String>{
      ''enableLiveChat'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openNewAccountSubtab_type_info = new List<String>{
      ''openNewAccountSubtab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openNewCaseSubtab_type_info = new List<String>{
      ''openNewCaseSubtab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openNewContactSubtab_type_info = new List<String>{
      ''openNewContactSubtab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openNewLeadSubtab_type_info = new List<String>{
      ''openNewLeadSubtab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openNewVFPageSubtab_type_info = new List<String>{
      ''openNewVFPageSubtab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pagesToOpen_type_info = new List<String>{
      ''pagesToOpen'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showKnowledgeArticles_type_info = new List<String>{
      ''showKnowledgeArticles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enableLiveChat'',
      ''openNewAccountSubtab'',
      ''openNewCaseSubtab'',
      ''openNewContactSubtab'',
      ''openNewLeadSubtab'',
      ''openNewVFPageSubtab'',
      ''pagesToOpen'',
      ''showKnowledgeArticles''
    };
  }
  public class WeightedSourceCategory {
    public String sourceCategoryApiName;
    public Double weight;
    private String[] sourceCategoryApiName_type_info = new List<String>{
      ''sourceCategoryApiName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] weight_type_info = new List<String>{
      ''weight'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''sourceCategoryApiName'',
      ''weight''
    };
  }
  public class KnowledgeSitesSettings {
    public String[] site;
    private String[] site_type_info = new List<String>{
      ''site'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''site'' };
  }
  public class CustomMetadata extends Metadata {
    public String type = ''CustomMetadata'';
    public String fullName;
    public String description;
    public String label;
    public MetadataService.CustomMetadataValue[] values;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] values_type_info = new List<String>{
      ''values'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''label'',
      ''values''
    };
  }
  public class VisualizationPlugin extends Metadata {
    public String type = ''VisualizationPlugin'';
    public String fullName;
    public String description;
    public String developerName;
    public String icon;
    public String masterLabel;
    public MetadataService.VisualizationResource[] visualizationResources;
    public MetadataService.VisualizationType[] visualizationTypes;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] developerName_type_info = new List<String>{
      ''developerName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] icon_type_info = new List<String>{
      ''icon'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visualizationResources_type_info = new List<String>{
      ''visualizationResources'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] visualizationTypes_type_info = new List<String>{
      ''visualizationTypes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''developerName'',
      ''icon'',
      ''masterLabel'',
      ''visualizationResources'',
      ''visualizationTypes''
    };
  }
  public class ApprovalPageField {
    public String[] field;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''field'' };
  }
  public class FlowRule {
    public String conditionLogic;
    public MetadataService.FlowCondition[] conditions;
    public MetadataService.FlowConnector connector;
    public String label;
    private String[] conditionLogic_type_info = new List<String>{
      ''conditionLogic'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] conditions_type_info = new List<String>{
      ''conditions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''conditionLogic'',
      ''conditions'',
      ''connector'',
      ''label''
    };
  }
  public class FlowRecordUpdate {
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowRecordFilter[] filters;
    public MetadataService.FlowInputFieldAssignment[] inputAssignments;
    public String inputReference;
    public String object_x;
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filters_type_info = new List<String>{
      ''filters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] inputAssignments_type_info = new List<String>{
      ''inputAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] inputReference_type_info = new List<String>{
      ''inputReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''connector'',
      ''faultConnector'',
      ''filters'',
      ''inputAssignments'',
      ''inputReference'',
      ''object_x''
    };
  }
  public class CustomSite extends Metadata {
    public String type = ''CustomSite'';
    public String fullName;
    public Boolean active;
    public Boolean allowHomePage;
    public Boolean allowStandardAnswersPages;
    public Boolean allowStandardIdeasPages;
    public Boolean allowStandardLookups;
    public Boolean allowStandardSearch;
    public String analyticsTrackingCode;
    public String authorizationRequiredPage;
    public String bandwidthExceededPage;
    public String changePasswordPage;
    public String chatterAnswersForgotPasswordConfirmPage;
    public String chatterAnswersForgotPasswordPage;
    public String chatterAnswersHelpPage;
    public String chatterAnswersLoginPage;
    public String chatterAnswersRegistrationPage;
    public String clickjackProtectionLevel;
    public MetadataService.SiteWebAddress[] customWebAddresses;
    public String description;
    public String favoriteIcon;
    public String fileNotFoundPage;
    public String forgotPasswordPage;
    public String genericErrorPage;
    public String guestProfile;
    public String inMaintenancePage;
    public String inactiveIndexPage;
    public String indexPage;
    public String masterLabel;
    public String myProfilePage;
    public String portal;
    public Boolean requireHttps;
    public Boolean requireInsecurePortalAccess;
    public String robotsTxtPage;
    public String rootComponent;
    public String selfRegPage;
    public String serverIsDown;
    public String siteAdmin;
    public MetadataService.SiteRedirectMapping[] siteRedirectMappings;
    public String siteTemplate;
    public String siteType;
    public String subdomain;
    public String urlPathPrefix;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowHomePage_type_info = new List<String>{
      ''allowHomePage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowStandardAnswersPages_type_info = new List<String>{
      ''allowStandardAnswersPages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowStandardIdeasPages_type_info = new List<String>{
      ''allowStandardIdeasPages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowStandardLookups_type_info = new List<String>{
      ''allowStandardLookups'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowStandardSearch_type_info = new List<String>{
      ''allowStandardSearch'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] analyticsTrackingCode_type_info = new List<String>{
      ''analyticsTrackingCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] authorizationRequiredPage_type_info = new List<String>{
      ''authorizationRequiredPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] bandwidthExceededPage_type_info = new List<String>{
      ''bandwidthExceededPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] changePasswordPage_type_info = new List<String>{
      ''changePasswordPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chatterAnswersForgotPasswordConfirmPage_type_info = new List<String>{
      ''chatterAnswersForgotPasswordConfirmPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chatterAnswersForgotPasswordPage_type_info = new List<String>{
      ''chatterAnswersForgotPasswordPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chatterAnswersHelpPage_type_info = new List<String>{
      ''chatterAnswersHelpPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chatterAnswersLoginPage_type_info = new List<String>{
      ''chatterAnswersLoginPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chatterAnswersRegistrationPage_type_info = new List<String>{
      ''chatterAnswersRegistrationPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] clickjackProtectionLevel_type_info = new List<String>{
      ''clickjackProtectionLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] customWebAddresses_type_info = new List<String>{
      ''customWebAddresses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] favoriteIcon_type_info = new List<String>{
      ''favoriteIcon'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fileNotFoundPage_type_info = new List<String>{
      ''fileNotFoundPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forgotPasswordPage_type_info = new List<String>{
      ''forgotPasswordPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] genericErrorPage_type_info = new List<String>{
      ''genericErrorPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] guestProfile_type_info = new List<String>{
      ''guestProfile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inMaintenancePage_type_info = new List<String>{
      ''inMaintenancePage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inactiveIndexPage_type_info = new List<String>{
      ''inactiveIndexPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] indexPage_type_info = new List<String>{
      ''indexPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] myProfilePage_type_info = new List<String>{
      ''myProfilePage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] portal_type_info = new List<String>{
      ''portal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] requireHttps_type_info = new List<String>{
      ''requireHttps'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] requireInsecurePortalAccess_type_info = new List<String>{
      ''requireInsecurePortalAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] robotsTxtPage_type_info = new List<String>{
      ''robotsTxtPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] rootComponent_type_info = new List<String>{
      ''rootComponent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegPage_type_info = new List<String>{
      ''selfRegPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] serverIsDown_type_info = new List<String>{
      ''serverIsDown'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] siteAdmin_type_info = new List<String>{
      ''siteAdmin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] siteRedirectMappings_type_info = new List<String>{
      ''siteRedirectMappings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] siteTemplate_type_info = new List<String>{
      ''siteTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] siteType_type_info = new List<String>{
      ''siteType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] subdomain_type_info = new List<String>{
      ''subdomain'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] urlPathPrefix_type_info = new List<String>{
      ''urlPathPrefix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''allowHomePage'',
      ''allowStandardAnswersPages'',
      ''allowStandardIdeasPages'',
      ''allowStandardLookups'',
      ''allowStandardSearch'',
      ''analyticsTrackingCode'',
      ''authorizationRequiredPage'',
      ''bandwidthExceededPage'',
      ''changePasswordPage'',
      ''chatterAnswersForgotPasswordConfirmPage'',
      ''chatterAnswersForgotPasswordPage'',
      ''chatterAnswersHelpPage'',
      ''chatterAnswersLoginPage'',
      ''chatterAnswersRegistrationPage'',
      ''clickjackProtectionLevel'',
      ''customWebAddresses'',
      ''description'',
      ''favoriteIcon'',
      ''fileNotFoundPage'',
      ''forgotPasswordPage'',
      ''genericErrorPage'',
      ''guestProfile'',
      ''inMaintenancePage'',
      ''inactiveIndexPage'',
      ''indexPage'',
      ''masterLabel'',
      ''myProfilePage'',
      ''portal'',
      ''requireHttps'',
      ''requireInsecurePortalAccess'',
      ''robotsTxtPage'',
      ''rootComponent'',
      ''selfRegPage'',
      ''serverIsDown'',
      ''siteAdmin'',
      ''siteRedirectMappings'',
      ''siteTemplate'',
      ''siteType'',
      ''subdomain'',
      ''urlPathPrefix''
    };
  }
  public class ReportBlockInfo {
    public MetadataService.ReportAggregateReference[] aggregateReferences;
    public String blockId;
    public String joinTable;
    private String[] aggregateReferences_type_info = new List<String>{
      ''aggregateReferences'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] blockId_type_info = new List<String>{
      ''blockId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] joinTable_type_info = new List<String>{
      ''joinTable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregateReferences'',
      ''blockId'',
      ''joinTable''
    };
  }
  public class describeMetadataResponse_element {
    public MetadataService.DescribeMetadataResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class DeployMessage {
    public Boolean changed;
    public Integer columnNumber;
    public String componentType;
    public Boolean created;
    public DateTime createdDate;
    public Boolean deleted;
    public String fileName;
    public String fullName;
    public String id;
    public Integer lineNumber;
    public String problem;
    public String problemType;
    public Boolean success;
    private String[] changed_type_info = new List<String>{
      ''changed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] columnNumber_type_info = new List<String>{
      ''columnNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] componentType_type_info = new List<String>{
      ''componentType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] created_type_info = new List<String>{
      ''created'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] createdDate_type_info = new List<String>{
      ''createdDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] deleted_type_info = new List<String>{
      ''deleted'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fileName_type_info = new List<String>{
      ''fileName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lineNumber_type_info = new List<String>{
      ''lineNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] problem_type_info = new List<String>{
      ''problem'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] problemType_type_info = new List<String>{
      ''problemType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] success_type_info = new List<String>{
      ''success'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''changed'',
      ''columnNumber'',
      ''componentType'',
      ''created'',
      ''createdDate'',
      ''deleted'',
      ''fileName'',
      ''fullName'',
      ''id'',
      ''lineNumber'',
      ''problem'',
      ''problemType'',
      ''success''
    };
  }
  public class FlowSubflowInputAssignment {
    public String name;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class ReportType extends Metadata {
    public String type = ''ReportType'';
    public String fullName;
    public Boolean autogenerated;
    public String baseObject;
    public String category;
    public Boolean deployed;
    public String description;
    public MetadataService.ObjectRelationship join_x;
    public String label;
    public MetadataService.ReportLayoutSection[] sections;
    private String[] autogenerated_type_info = new List<String>{
      ''autogenerated'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] baseObject_type_info = new List<String>{
      ''baseObject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] category_type_info = new List<String>{
      ''category'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] deployed_type_info = new List<String>{
      ''deployed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] join_x_type_info = new List<String>{
      ''join'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sections_type_info = new List<String>{
      ''sections'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''autogenerated'',
      ''baseObject'',
      ''category'',
      ''deployed'',
      ''description'',
      ''join_x'',
      ''label'',
      ''sections''
    };
  }
  public class Action {
    public Boolean block;
    public Boolean endSession;
    public MetadataService.Notification[] notifications;
    public Boolean twoFactorAuthentication;
    private String[] block_type_info = new List<String>{
      ''block'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] endSession_type_info = new List<String>{
      ''endSession'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] notifications_type_info = new List<String>{
      ''notifications'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] twoFactorAuthentication_type_info = new List<String>{
      ''twoFactorAuthentication'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''block'',
      ''endSession'',
      ''notifications'',
      ''twoFactorAuthentication''
    };
  }
  public class CustomPageWebLink extends Metadata {
    public String type = ''CustomPageWebLink'';
    public String fullName;
    public String availability;
    public String description;
    public String displayType;
    public String encodingKey;
    public Boolean hasMenubar;
    public Boolean hasScrollbars;
    public Boolean hasToolbar;
    public Integer height;
    public Boolean isResizable;
    public String linkType;
    public String masterLabel;
    public String openType;
    public String page_x;
    public String position;
    public Boolean protected_x;
    public Boolean requireRowSelection;
    public String scontrol;
    public Boolean showsLocation;
    public Boolean showsStatus;
    public String url;
    public Integer width;
    private String[] availability_type_info = new List<String>{
      ''availability'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayType_type_info = new List<String>{
      ''displayType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] encodingKey_type_info = new List<String>{
      ''encodingKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasMenubar_type_info = new List<String>{
      ''hasMenubar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasScrollbars_type_info = new List<String>{
      ''hasScrollbars'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasToolbar_type_info = new List<String>{
      ''hasToolbar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isResizable_type_info = new List<String>{
      ''isResizable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] linkType_type_info = new List<String>{
      ''linkType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openType_type_info = new List<String>{
      ''openType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] position_type_info = new List<String>{
      ''position'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] requireRowSelection_type_info = new List<String>{
      ''requireRowSelection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scontrol_type_info = new List<String>{
      ''scontrol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showsLocation_type_info = new List<String>{
      ''showsLocation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showsStatus_type_info = new List<String>{
      ''showsStatus'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] url_type_info = new List<String>{
      ''url'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''availability'',
      ''description'',
      ''displayType'',
      ''encodingKey'',
      ''hasMenubar'',
      ''hasScrollbars'',
      ''hasToolbar'',
      ''height'',
      ''isResizable'',
      ''linkType'',
      ''masterLabel'',
      ''openType'',
      ''page_x'',
      ''position'',
      ''protected_x'',
      ''requireRowSelection'',
      ''scontrol'',
      ''showsLocation'',
      ''showsStatus'',
      ''url'',
      ''width''
    };
  }
  public class CodeCoverageResult {
    public MetadataService.CodeLocation[] dmlInfo;
    public String id;
    public MetadataService.CodeLocation[] locationsNotCovered;
    public MetadataService.CodeLocation[] methodInfo;
    public String name;
    public String namespace;
    public Integer numLocations;
    public Integer numLocationsNotCovered;
    public MetadataService.CodeLocation[] soqlInfo;
    public MetadataService.CodeLocation[] soslInfo;
    public String type_x;
    private String[] dmlInfo_type_info = new List<String>{
      ''dmlInfo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] locationsNotCovered_type_info = new List<String>{
      ''locationsNotCovered'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] methodInfo_type_info = new List<String>{
      ''methodInfo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] namespace_type_info = new List<String>{
      ''namespace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] numLocations_type_info = new List<String>{
      ''numLocations'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numLocationsNotCovered_type_info = new List<String>{
      ''numLocationsNotCovered'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] soqlInfo_type_info = new List<String>{
      ''soqlInfo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] soslInfo_type_info = new List<String>{
      ''soslInfo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dmlInfo'',
      ''id'',
      ''locationsNotCovered'',
      ''methodInfo'',
      ''name'',
      ''namespace'',
      ''numLocations'',
      ''numLocationsNotCovered'',
      ''soqlInfo'',
      ''soslInfo'',
      ''type_x''
    };
  }
  public class renameMetadata_element {
    public String type_x;
    public String oldFullName;
    public String newFullName;
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] oldFullName_type_info = new List<String>{
      ''oldFullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] newFullName_type_info = new List<String>{
      ''newFullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''type_x'',
      ''oldFullName'',
      ''newFullName''
    };
  }
  public class SharingCriteriaRule extends SharingBaseRule {
    public String type = ''SharingCriteriaRule'';
    public String fullName;
    public String accessLevel;
    public MetadataService.AccountSharingRuleSettings accountSettings;
    public String description;
    public String label;
    public MetadataService.SharedTo sharedTo;
    private String[] accessLevel_type_info = new List<String>{
      ''accessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] accountSettings_type_info = new List<String>{
      ''accountSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    public String booleanFilter;
    public MetadataService.FilterItem[] criteriaItems;
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criteriaItems_type_info = new List<String>{
      ''criteriaItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessLevel'',
      ''accountSettings'',
      ''description'',
      ''label'',
      ''sharedTo'',
      ''booleanFilter'',
      ''criteriaItems''
    };
  }
  public class NetworkAccess {
    public MetadataService.IpRange[] ipRanges;
    private String[] ipRanges_type_info = new List<String>{
      ''ipRanges'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''ipRanges'' };
  }
  public class RecordTypePicklistValue {
    public String picklist;
    public MetadataService.PicklistValue[] values;
    private String[] picklist_type_info = new List<String>{
      ''picklist'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] values_type_info = new List<String>{
      ''values'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''picklist'',
      ''values''
    };
  }
  public class describeMetadata_element {
    public Double asOfVersion;
    private String[] asOfVersion_type_info = new List<String>{
      ''asOfVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''asOfVersion'' };
  }
  public class DashboardFilterColumn {
    public String column;
    private String[] column_type_info = new List<String>{
      ''column'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''column'' };
  }
  public class Territory2RuleAssociation {
    public Boolean inherited;
    public String ruleName;
    private String[] inherited_type_info = new List<String>{
      ''inherited'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] ruleName_type_info = new List<String>{
      ''ruleName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''inherited'',
      ''ruleName''
    };
  }
  public class ReportParam {
    public String name;
    public String value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class RoleOrTerritory extends Metadata {
    public String type = ''RoleOrTerritory'';
    public String fullName;
    public String caseAccessLevel;
    public String contactAccessLevel;
    public String description;
    public Boolean mayForecastManagerShare;
    public String name;
    public String opportunityAccessLevel;
    private String[] caseAccessLevel_type_info = new List<String>{
      ''caseAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] contactAccessLevel_type_info = new List<String>{
      ''contactAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mayForecastManagerShare_type_info = new List<String>{
      ''mayForecastManagerShare'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] opportunityAccessLevel_type_info = new List<String>{
      ''opportunityAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''caseAccessLevel'',
      ''contactAccessLevel'',
      ''description'',
      ''mayForecastManagerShare'',
      ''name'',
      ''opportunityAccessLevel''
    };
  }
  public class ActionLinkGroupTemplate extends Metadata {
    public String type = ''ActionLinkGroupTemplate'';
    public String fullName;
    public MetadataService.ActionLinkTemplate[] actionLinkTemplates;
    public String category;
    public String executionsAllowed;
    public Integer hoursUntilExpiration;
    public Boolean isPublished;
    public String name;
    private String[] actionLinkTemplates_type_info = new List<String>{
      ''actionLinkTemplates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] category_type_info = new List<String>{
      ''category'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] executionsAllowed_type_info = new List<String>{
      ''executionsAllowed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] hoursUntilExpiration_type_info = new List<String>{
      ''hoursUntilExpiration'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isPublished_type_info = new List<String>{
      ''isPublished'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''actionLinkTemplates'',
      ''category'',
      ''executionsAllowed'',
      ''hoursUntilExpiration'',
      ''isPublished'',
      ''name''
    };
  }
  public class ForecastingTypeSettings {
    public Boolean active;
    public MetadataService.AdjustmentsSettings adjustmentsSettings;
    public String[] displayedCategoryApiNames;
    public MetadataService.ForecastRangeSettings forecastRangeSettings;
    public String[] forecastedCategoryApiNames;
    public String[] managerAdjustableCategoryApiNames;
    public String name;
    public MetadataService.OpportunityListFieldsSelectedSettings opportunityListFieldsSelectedSettings;
    public String[] ownerAdjustableCategoryApiNames;
    public MetadataService.QuotasSettings quotasSettings;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] adjustmentsSettings_type_info = new List<String>{
      ''adjustmentsSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] displayedCategoryApiNames_type_info = new List<String>{
      ''displayedCategoryApiNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] forecastRangeSettings_type_info = new List<String>{
      ''forecastRangeSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] forecastedCategoryApiNames_type_info = new List<String>{
      ''forecastedCategoryApiNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] managerAdjustableCategoryApiNames_type_info = new List<String>{
      ''managerAdjustableCategoryApiNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] opportunityListFieldsSelectedSettings_type_info = new List<String>{
      ''opportunityListFieldsSelectedSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] ownerAdjustableCategoryApiNames_type_info = new List<String>{
      ''ownerAdjustableCategoryApiNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] quotasSettings_type_info = new List<String>{
      ''quotasSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''adjustmentsSettings'',
      ''displayedCategoryApiNames'',
      ''forecastRangeSettings'',
      ''forecastedCategoryApiNames'',
      ''managerAdjustableCategoryApiNames'',
      ''name'',
      ''opportunityListFieldsSelectedSettings'',
      ''ownerAdjustableCategoryApiNames'',
      ''quotasSettings''
    };
  }
  public class FlowApexPluginCallInputParameter {
    public String name;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class WorkflowActionReference {
    public String name;
    public String type_x;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''type_x''
    };
  }
  public class RetrieveResult {
    public Boolean done;
    public String errorMessage;
    public String errorStatusCode;
    public MetadataService.FileProperties[] fileProperties;
    public String id;
    public MetadataService.RetrieveMessage[] messages;
    public String status;
    public Boolean success;
    public String zipFile;
    private String[] done_type_info = new List<String>{
      ''done'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorStatusCode_type_info = new List<String>{
      ''errorStatusCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fileProperties_type_info = new List<String>{
      ''fileProperties'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] messages_type_info = new List<String>{
      ''messages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] status_type_info = new List<String>{
      ''status'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] success_type_info = new List<String>{
      ''success'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] zipFile_type_info = new List<String>{
      ''zipFile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''done'',
      ''errorMessage'',
      ''errorStatusCode'',
      ''fileProperties'',
      ''id'',
      ''messages'',
      ''status'',
      ''success'',
      ''zipFile''
    };
  }
  public class Role {
    public String parentRole;
    private String[] parentRole_type_info = new List<String>{
      ''parentRole'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''parentRole'' };
  }
  public class QuickActionList {
    public MetadataService.QuickActionListItem[] quickActionListItems;
    private String[] quickActionListItems_type_info = new List<String>{
      ''quickActionListItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''quickActionListItems''
    };
  }
  public class RelatedList {
    public Boolean hideOnDetail;
    public String name;
    private String[] hideOnDetail_type_info = new List<String>{
      ''hideOnDetail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''hideOnDetail'',
      ''name''
    };
  }
  public class FlowActionCallOutputParameter {
    public String assignToReference;
    public String name;
    private String[] assignToReference_type_info = new List<String>{
      ''assignToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignToReference'',
      ''name''
    };
  }
  public class DashboardFilterOption {
    public String operator;
    public String[] values;
    private String[] operator_type_info = new List<String>{
      ''operator'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] values_type_info = new List<String>{
      ''values'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''operator'',
      ''values''
    };
  }
  public class WorkflowOutboundMessage extends WorkflowAction {
    public String type = ''WorkflowOutboundMessage'';
    public String fullName;
    public Double apiVersion;
    public String description;
    public String endpointUrl;
    public String[] fields;
    public Boolean includeSessionId;
    public String integrationUser;
    public String name;
    public Boolean protected_x;
    public Boolean useDeadLetterQueue;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] endpointUrl_type_info = new List<String>{
      ''endpointUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] includeSessionId_type_info = new List<String>{
      ''includeSessionId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] integrationUser_type_info = new List<String>{
      ''integrationUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] useDeadLetterQueue_type_info = new List<String>{
      ''useDeadLetterQueue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''apiVersion'',
      ''description'',
      ''endpointUrl'',
      ''fields'',
      ''includeSessionId'',
      ''integrationUser'',
      ''name'',
      ''protected_x'',
      ''useDeadLetterQueue''
    };
  }
  public class RunTestSuccess {
    public String id;
    public String methodName;
    public String name;
    public String namespace;
    public Boolean seeAllData;
    public Double time_x;
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] methodName_type_info = new List<String>{
      ''methodName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] namespace_type_info = new List<String>{
      ''namespace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] seeAllData_type_info = new List<String>{
      ''seeAllData'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] time_x_type_info = new List<String>{
      ''time'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''id'',
      ''methodName'',
      ''name'',
      ''namespace'',
      ''seeAllData'',
      ''time_x''
    };
  }
  public class LiveChatButtonDeployments {
    public String[] deployment;
    private String[] deployment_type_info = new List<String>{
      ''deployment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''deployment'' };
  }
  public class PermissionSetApplicationVisibility {
    public String application;
    public Boolean visible;
    private String[] application_type_info = new List<String>{
      ''application'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visible_type_info = new List<String>{
      ''visible'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''application'',
      ''visible''
    };
  }
  public class InstalledPackage extends Metadata {
    public String type = ''InstalledPackage'';
    public String fullName;
    public String password;
    public String versionNumber;
    private String[] password_type_info = new List<String>{
      ''password'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] versionNumber_type_info = new List<String>{
      ''versionNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''password'',
      ''versionNumber''
    };
  }
  public class Queue extends Metadata {
    public String type = ''Queue'';
    public String fullName;
    public Boolean doesSendEmailToMembers;
    public String email;
    public String name;
    public MetadataService.QueueSobject[] queueSobject;
    private String[] doesSendEmailToMembers_type_info = new List<String>{
      ''doesSendEmailToMembers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] email_type_info = new List<String>{
      ''email'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] queueSobject_type_info = new List<String>{
      ''queueSobject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''doesSendEmailToMembers'',
      ''email'',
      ''name'',
      ''queueSobject''
    };
  }
  public class ListViewFilter {
    public String field;
    public String operation;
    public String value;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operation_type_info = new List<String>{
      ''operation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''operation'',
      ''value''
    };
  }
  public class FeedLayout {
    public Boolean autocollapsePublisher;
    public Boolean compactFeed;
    public String feedFilterPosition;
    public MetadataService.FeedLayoutFilter[] feedFilters;
    public Boolean fullWidthFeed;
    public Boolean hideSidebar;
    public Boolean highlightExternalFeedItems;
    public MetadataService.FeedLayoutComponent[] leftComponents;
    public MetadataService.FeedLayoutComponent[] rightComponents;
    private String[] autocollapsePublisher_type_info = new List<String>{
      ''autocollapsePublisher'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] compactFeed_type_info = new List<String>{
      ''compactFeed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] feedFilterPosition_type_info = new List<String>{
      ''feedFilterPosition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] feedFilters_type_info = new List<String>{
      ''feedFilters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fullWidthFeed_type_info = new List<String>{
      ''fullWidthFeed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hideSidebar_type_info = new List<String>{
      ''hideSidebar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] highlightExternalFeedItems_type_info = new List<String>{
      ''highlightExternalFeedItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] leftComponents_type_info = new List<String>{
      ''leftComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] rightComponents_type_info = new List<String>{
      ''rightComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''autocollapsePublisher'',
      ''compactFeed'',
      ''feedFilterPosition'',
      ''feedFilters'',
      ''fullWidthFeed'',
      ''hideSidebar'',
      ''highlightExternalFeedItems'',
      ''leftComponents'',
      ''rightComponents''
    };
  }
  public class CustomField extends Metadata {
    public String type = ''CustomField'';
    public String fullName;
    public Boolean caseSensitive;
    public String customDataType;
    public String defaultValue;
    public String deleteConstraint;
    public Boolean deprecated;
    public String description;
    public String displayFormat;
    public Boolean encrypted;
    public Boolean escapeMarkup;
    public String externalDeveloperName;
    public Boolean externalId;
    public String formula;
    public String formulaTreatBlanksAs;
    public String inlineHelpText;
    public Boolean isFilteringDisabled;
    public Boolean isNameField;
    public Boolean isSortingDisabled;
    public String label;
    public Integer length;
    public MetadataService.LookupFilter lookupFilter;
    public String maskChar;
    public String maskType;
    public MetadataService.Picklist picklist;
    public Boolean populateExistingRows;
    public Integer precision;
    public String referenceTargetField;
    public String referenceTo;
    public String relationshipLabel;
    public String relationshipName;
    public Integer relationshipOrder;
    public Boolean reparentableMasterDetail;
    public Boolean required;
    public Boolean restrictedAdminField;
    public Integer scale;
    public Integer startingNumber;
    public Boolean stripMarkup;
    public String summarizedField;
    public MetadataService.FilterItem[] summaryFilterItems;
    public String summaryForeignKey;
    public String summaryOperation;
    public Boolean trackFeedHistory;
    public Boolean trackHistory;
    public Boolean trackTrending;
    public String type_x;
    public Boolean unique;
    public Integer visibleLines;
    public Boolean writeRequiresMasterRead;
    private String[] caseSensitive_type_info = new List<String>{
      ''caseSensitive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customDataType_type_info = new List<String>{
      ''customDataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultValue_type_info = new List<String>{
      ''defaultValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] deleteConstraint_type_info = new List<String>{
      ''deleteConstraint'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] deprecated_type_info = new List<String>{
      ''deprecated'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayFormat_type_info = new List<String>{
      ''displayFormat'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] encrypted_type_info = new List<String>{
      ''encrypted'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] escapeMarkup_type_info = new List<String>{
      ''escapeMarkup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalDeveloperName_type_info = new List<String>{
      ''externalDeveloperName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalId_type_info = new List<String>{
      ''externalId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] formulaTreatBlanksAs_type_info = new List<String>{
      ''formulaTreatBlanksAs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inlineHelpText_type_info = new List<String>{
      ''inlineHelpText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isFilteringDisabled_type_info = new List<String>{
      ''isFilteringDisabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isNameField_type_info = new List<String>{
      ''isNameField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isSortingDisabled_type_info = new List<String>{
      ''isSortingDisabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] length_type_info = new List<String>{
      ''length'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lookupFilter_type_info = new List<String>{
      ''lookupFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] maskChar_type_info = new List<String>{
      ''maskChar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] maskType_type_info = new List<String>{
      ''maskType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] picklist_type_info = new List<String>{
      ''picklist'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] populateExistingRows_type_info = new List<String>{
      ''populateExistingRows'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] precision_type_info = new List<String>{
      ''precision'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] referenceTargetField_type_info = new List<String>{
      ''referenceTargetField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] referenceTo_type_info = new List<String>{
      ''referenceTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] relationshipLabel_type_info = new List<String>{
      ''relationshipLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] relationshipName_type_info = new List<String>{
      ''relationshipName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] relationshipOrder_type_info = new List<String>{
      ''relationshipOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reparentableMasterDetail_type_info = new List<String>{
      ''reparentableMasterDetail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] required_type_info = new List<String>{
      ''required'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] restrictedAdminField_type_info = new List<String>{
      ''restrictedAdminField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scale_type_info = new List<String>{
      ''scale'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] startingNumber_type_info = new List<String>{
      ''startingNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] stripMarkup_type_info = new List<String>{
      ''stripMarkup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summarizedField_type_info = new List<String>{
      ''summarizedField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryFilterItems_type_info = new List<String>{
      ''summaryFilterItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] summaryForeignKey_type_info = new List<String>{
      ''summaryForeignKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryOperation_type_info = new List<String>{
      ''summaryOperation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] trackFeedHistory_type_info = new List<String>{
      ''trackFeedHistory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] trackHistory_type_info = new List<String>{
      ''trackHistory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] trackTrending_type_info = new List<String>{
      ''trackTrending'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] unique_type_info = new List<String>{
      ''unique'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] visibleLines_type_info = new List<String>{
      ''visibleLines'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] writeRequiresMasterRead_type_info = new List<String>{
      ''writeRequiresMasterRead'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''caseSensitive'',
      ''customDataType'',
      ''defaultValue'',
      ''deleteConstraint'',
      ''deprecated'',
      ''description'',
      ''displayFormat'',
      ''encrypted'',
      ''escapeMarkup'',
      ''externalDeveloperName'',
      ''externalId'',
      ''formula'',
      ''formulaTreatBlanksAs'',
      ''inlineHelpText'',
      ''isFilteringDisabled'',
      ''isNameField'',
      ''isSortingDisabled'',
      ''label'',
      ''length'',
      ''lookupFilter'',
      ''maskChar'',
      ''maskType'',
      ''picklist'',
      ''populateExistingRows'',
      ''precision'',
      ''referenceTargetField'',
      ''referenceTo'',
      ''relationshipLabel'',
      ''relationshipName'',
      ''relationshipOrder'',
      ''reparentableMasterDetail'',
      ''required'',
      ''restrictedAdminField'',
      ''scale'',
      ''startingNumber'',
      ''stripMarkup'',
      ''summarizedField'',
      ''summaryFilterItems'',
      ''summaryForeignKey'',
      ''summaryOperation'',
      ''trackFeedHistory'',
      ''trackHistory'',
      ''trackTrending'',
      ''type_x'',
      ''unique'',
      ''visibleLines'',
      ''writeRequiresMasterRead''
    };
  }
  public class PushNotification {
    public String[] fieldNames;
    public String objectName;
    private String[] fieldNames_type_info = new List<String>{
      ''fieldNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] objectName_type_info = new List<String>{
      ''objectName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fieldNames'',
      ''objectName''
    };
  }
  public class EmailToCaseSettings {
    public Boolean enableEmailToCase;
    public Boolean enableHtmlEmail;
    public Boolean enableOnDemandEmailToCase;
    public Boolean enableThreadIDInBody;
    public Boolean enableThreadIDInSubject;
    public Boolean notifyOwnerOnNewCaseEmail;
    public String overEmailLimitAction;
    public Boolean preQuoteSignature;
    public MetadataService.EmailToCaseRoutingAddress[] routingAddresses;
    public String unauthorizedSenderAction;
    private String[] enableEmailToCase_type_info = new List<String>{
      ''enableEmailToCase'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableHtmlEmail_type_info = new List<String>{
      ''enableHtmlEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableOnDemandEmailToCase_type_info = new List<String>{
      ''enableOnDemandEmailToCase'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableThreadIDInBody_type_info = new List<String>{
      ''enableThreadIDInBody'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableThreadIDInSubject_type_info = new List<String>{
      ''enableThreadIDInSubject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyOwnerOnNewCaseEmail_type_info = new List<String>{
      ''notifyOwnerOnNewCaseEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] overEmailLimitAction_type_info = new List<String>{
      ''overEmailLimitAction'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] preQuoteSignature_type_info = new List<String>{
      ''preQuoteSignature'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] routingAddresses_type_info = new List<String>{
      ''routingAddresses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] unauthorizedSenderAction_type_info = new List<String>{
      ''unauthorizedSenderAction'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enableEmailToCase'',
      ''enableHtmlEmail'',
      ''enableOnDemandEmailToCase'',
      ''enableThreadIDInBody'',
      ''enableThreadIDInSubject'',
      ''notifyOwnerOnNewCaseEmail'',
      ''overEmailLimitAction'',
      ''preQuoteSignature'',
      ''routingAddresses'',
      ''unauthorizedSenderAction''
    };
  }
  public class deployResponse_element {
    public MetadataService.AsyncResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class DataCategory {
    public MetadataService.DataCategory[] dataCategory;
    public String label;
    public String name;
    private String[] dataCategory_type_info = new List<String>{
      ''dataCategory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dataCategory'',
      ''label'',
      ''name''
    };
  }
  public class EscalationAction {
    public String assignedTo;
    public String assignedToTemplate;
    public String assignedToType;
    public Integer minutesToEscalation;
    public Boolean notifyCaseOwner;
    public String[] notifyEmail;
    public String notifyTo;
    public String notifyToTemplate;
    private String[] assignedTo_type_info = new List<String>{
      ''assignedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assignedToTemplate_type_info = new List<String>{
      ''assignedToTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assignedToType_type_info = new List<String>{
      ''assignedToType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] minutesToEscalation_type_info = new List<String>{
      ''minutesToEscalation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyCaseOwner_type_info = new List<String>{
      ''notifyCaseOwner'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyEmail_type_info = new List<String>{
      ''notifyEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] notifyTo_type_info = new List<String>{
      ''notifyTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyToTemplate_type_info = new List<String>{
      ''notifyToTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignedTo'',
      ''assignedToTemplate'',
      ''assignedToType'',
      ''minutesToEscalation'',
      ''notifyCaseOwner'',
      ''notifyEmail'',
      ''notifyTo'',
      ''notifyToTemplate''
    };
  }
  public class FlowOutputFieldAssignment {
    public String assignToReference;
    public String field;
    private String[] assignToReference_type_info = new List<String>{
      ''assignToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignToReference'',
      ''field''
    };
  }
  public class AppMenuItem {
    public String name;
    public String type_x;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''type_x''
    };
  }
  public class EmailTemplate extends MetadataWithContent {
    public String type = ''EmailTemplate'';
    public String fullName;
    public String content;
    public Double apiVersion;
    public String[] attachedDocuments;
    public MetadataService.Attachment[] attachments;
    public Boolean available;
    public String description;
    public String encodingKey;
    public String letterhead;
    public String name;
    public MetadataService.PackageVersion[] packageVersions;
    public String style;
    public String subject;
    public String textOnly;
    public String type_x;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] attachedDocuments_type_info = new List<String>{
      ''attachedDocuments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] attachments_type_info = new List<String>{
      ''attachments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] available_type_info = new List<String>{
      ''available'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] encodingKey_type_info = new List<String>{
      ''encodingKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] letterhead_type_info = new List<String>{
      ''letterhead'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] packageVersions_type_info = new List<String>{
      ''packageVersions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] style_type_info = new List<String>{
      ''style'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] subject_type_info = new List<String>{
      ''subject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] textOnly_type_info = new List<String>{
      ''textOnly'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''apiVersion'',
      ''attachedDocuments'',
      ''attachments'',
      ''available'',
      ''description'',
      ''encodingKey'',
      ''letterhead'',
      ''name'',
      ''packageVersions'',
      ''style'',
      ''subject'',
      ''textOnly'',
      ''type_x''
    };
  }
  public class ObjectUsage {
    public String[] object_x;
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''object_x'' };
  }
  public class AssignmentRule extends Metadata {
    public String type = ''AssignmentRule'';
    public String fullName;
    public Boolean active;
    public MetadataService.RuleEntry[] ruleEntry;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ruleEntry_type_info = new List<String>{
      ''ruleEntry'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''ruleEntry''
    };
  }
  public class deleteMetadataResponse_element {
    public MetadataService.DeleteResult[] result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class CustomTabTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class LiveChatAgentConfig extends Metadata {
    public String type = ''LiveChatAgentConfig'';
    public String fullName;
    public MetadataService.AgentConfigAssignments assignments;
    public String autoGreeting;
    public Integer capacity;
    public Integer criticalWaitTime;
    public String customAgentName;
    public Boolean enableAgentFileTransfer;
    public Boolean enableAgentSneakPeek;
    public Boolean enableAutoAwayOnDecline;
    public Boolean enableAutoAwayOnPushTimeout;
    public Boolean enableChatConferencing;
    public Boolean enableChatMonitoring;
    public Boolean enableChatTransfer;
    public Boolean enableLogoutSound;
    public Boolean enableNotifications;
    public Boolean enableRequestSound;
    public Boolean enableSneakPeek;
    public Boolean enableVisitorBlocking;
    public Boolean enableWhisperMessage;
    public String label;
    public String supervisorDefaultAgentStatusFilter;
    public String supervisorDefaultButtonFilter;
    public String supervisorDefaultSkillFilter;
    public MetadataService.SupervisorAgentConfigSkills supervisorSkills;
    public MetadataService.AgentConfigButtons transferableButtons;
    public MetadataService.AgentConfigSkills transferableSkills;
    private String[] assignments_type_info = new List<String>{
      ''assignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] autoGreeting_type_info = new List<String>{
      ''autoGreeting'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] capacity_type_info = new List<String>{
      ''capacity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criticalWaitTime_type_info = new List<String>{
      ''criticalWaitTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customAgentName_type_info = new List<String>{
      ''customAgentName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableAgentFileTransfer_type_info = new List<String>{
      ''enableAgentFileTransfer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableAgentSneakPeek_type_info = new List<String>{
      ''enableAgentSneakPeek'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableAutoAwayOnDecline_type_info = new List<String>{
      ''enableAutoAwayOnDecline'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableAutoAwayOnPushTimeout_type_info = new List<String>{
      ''enableAutoAwayOnPushTimeout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableChatConferencing_type_info = new List<String>{
      ''enableChatConferencing'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableChatMonitoring_type_info = new List<String>{
      ''enableChatMonitoring'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableChatTransfer_type_info = new List<String>{
      ''enableChatTransfer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableLogoutSound_type_info = new List<String>{
      ''enableLogoutSound'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableNotifications_type_info = new List<String>{
      ''enableNotifications'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableRequestSound_type_info = new List<String>{
      ''enableRequestSound'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSneakPeek_type_info = new List<String>{
      ''enableSneakPeek'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableVisitorBlocking_type_info = new List<String>{
      ''enableVisitorBlocking'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableWhisperMessage_type_info = new List<String>{
      ''enableWhisperMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] supervisorDefaultAgentStatusFilter_type_info = new List<String>{
      ''supervisorDefaultAgentStatusFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] supervisorDefaultButtonFilter_type_info = new List<String>{
      ''supervisorDefaultButtonFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] supervisorDefaultSkillFilter_type_info = new List<String>{
      ''supervisorDefaultSkillFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] supervisorSkills_type_info = new List<String>{
      ''supervisorSkills'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] transferableButtons_type_info = new List<String>{
      ''transferableButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] transferableSkills_type_info = new List<String>{
      ''transferableSkills'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''assignments'',
      ''autoGreeting'',
      ''capacity'',
      ''criticalWaitTime'',
      ''customAgentName'',
      ''enableAgentFileTransfer'',
      ''enableAgentSneakPeek'',
      ''enableAutoAwayOnDecline'',
      ''enableAutoAwayOnPushTimeout'',
      ''enableChatConferencing'',
      ''enableChatMonitoring'',
      ''enableChatTransfer'',
      ''enableLogoutSound'',
      ''enableNotifications'',
      ''enableRequestSound'',
      ''enableSneakPeek'',
      ''enableVisitorBlocking'',
      ''enableWhisperMessage'',
      ''label'',
      ''supervisorDefaultAgentStatusFilter'',
      ''supervisorDefaultButtonFilter'',
      ''supervisorDefaultSkillFilter'',
      ''supervisorSkills'',
      ''transferableButtons'',
      ''transferableSkills''
    };
  }
  public class AdjustmentsSettings {
    public Boolean enableAdjustments;
    public Boolean enableOwnerAdjustments;
    private String[] enableAdjustments_type_info = new List<String>{
      ''enableAdjustments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enableOwnerAdjustments_type_info = new List<String>{
      ''enableOwnerAdjustments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enableAdjustments'',
      ''enableOwnerAdjustments''
    };
  }
  public class BusinessProcess extends Metadata {
    public String type = ''BusinessProcess'';
    public String fullName;
    public String description;
    public Boolean isActive;
    public MetadataService.PicklistValue[] values;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isActive_type_info = new List<String>{
      ''isActive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] values_type_info = new List<String>{
      ''values'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''isActive'',
      ''values''
    };
  }
  public class PermissionSet extends Metadata {
    public String type = ''PermissionSet'';
    public String fullName;
    public MetadataService.PermissionSetApplicationVisibility[] applicationVisibilities;
    public MetadataService.PermissionSetApexClassAccess[] classAccesses;
    public MetadataService.PermissionSetCustomPermissions[] customPermissions;
    public String description;
    public MetadataService.PermissionSetExternalDataSourceAccess[] externalDataSourceAccesses;
    public MetadataService.PermissionSetFieldPermissions[] fieldPermissions;
    public String label;
    public MetadataService.PermissionSetObjectPermissions[] objectPermissions;
    public MetadataService.PermissionSetApexPageAccess[] pageAccesses;
    public MetadataService.PermissionSetRecordTypeVisibility[] recordTypeVisibilities;
    public MetadataService.PermissionSetTabSetting[] tabSettings;
    public String userLicense;
    public MetadataService.PermissionSetUserPermission[] userPermissions;
    private String[] applicationVisibilities_type_info = new List<String>{
      ''applicationVisibilities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] classAccesses_type_info = new List<String>{
      ''classAccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customPermissions_type_info = new List<String>{
      ''customPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalDataSourceAccesses_type_info = new List<String>{
      ''externalDataSourceAccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fieldPermissions_type_info = new List<String>{
      ''fieldPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] objectPermissions_type_info = new List<String>{
      ''objectPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] pageAccesses_type_info = new List<String>{
      ''pageAccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordTypeVisibilities_type_info = new List<String>{
      ''recordTypeVisibilities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] tabSettings_type_info = new List<String>{
      ''tabSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] userLicense_type_info = new List<String>{
      ''userLicense'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userPermissions_type_info = new List<String>{
      ''userPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''applicationVisibilities'',
      ''classAccesses'',
      ''customPermissions'',
      ''description'',
      ''externalDataSourceAccesses'',
      ''fieldPermissions'',
      ''label'',
      ''objectPermissions'',
      ''pageAccesses'',
      ''recordTypeVisibilities'',
      ''tabSettings'',
      ''userLicense'',
      ''userPermissions''
    };
  }
  public class ConnectedAppAttribute {
    public String formula;
    public String key;
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] key_type_info = new List<String>{
      ''key'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''formula'',
      ''key''
    };
  }
  public class ManagedTopics extends Metadata {
    public String type = ''ManagedTopics'';
    public String fullName;
    public MetadataService.ManagedTopic[] managedTopic;
    private String[] managedTopic_type_info = new List<String>{
      ''managedTopic'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''managedTopic''
    };
  }
  public class ForecastingSettings extends Metadata {
    public String type = ''ForecastingSettings'';
    public String fullName;
    public String displayCurrency;
    public Boolean enableForecasts;
    public MetadataService.ForecastingCategoryMapping[] forecastingCategoryMappings;
    public MetadataService.ForecastingTypeSettings[] forecastingTypeSettings;
    private String[] displayCurrency_type_info = new List<String>{
      ''displayCurrency'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableForecasts_type_info = new List<String>{
      ''enableForecasts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forecastingCategoryMappings_type_info = new List<String>{
      ''forecastingCategoryMappings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] forecastingTypeSettings_type_info = new List<String>{
      ''forecastingTypeSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''displayCurrency'',
      ''enableForecasts'',
      ''forecastingCategoryMappings'',
      ''forecastingTypeSettings''
    };
  }
  public class ReportChartComponentLayoutItem {
    public Boolean cacheData;
    public String contextFilterableField;
    public String error;
    public Boolean hideOnError;
    public Boolean includeContext;
    public String reportName;
    public Boolean showTitle;
    public String size;
    private String[] cacheData_type_info = new List<String>{
      ''cacheData'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] contextFilterableField_type_info = new List<String>{
      ''contextFilterableField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] error_type_info = new List<String>{
      ''error'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hideOnError_type_info = new List<String>{
      ''hideOnError'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] includeContext_type_info = new List<String>{
      ''includeContext'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reportName_type_info = new List<String>{
      ''reportName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] showTitle_type_info = new List<String>{
      ''showTitle'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] size_type_info = new List<String>{
      ''size'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''cacheData'',
      ''contextFilterableField'',
      ''error'',
      ''hideOnError'',
      ''includeContext'',
      ''reportName'',
      ''showTitle'',
      ''size''
    };
  }
  public class AppMenu extends Metadata {
    public String type = ''AppMenu'';
    public String fullName;
    public MetadataService.AppMenuItem[] appMenuItems;
    private String[] appMenuItems_type_info = new List<String>{
      ''appMenuItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''appMenuItems''
    };
  }
  public class FlowSubflowOutputAssignment {
    public String assignToReference;
    public String name;
    private String[] assignToReference_type_info = new List<String>{
      ''assignToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignToReference'',
      ''name''
    };
  }
  public class ConnectedAppIpRange {
    public String description;
    public String end_x;
    public String start;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] end_x_type_info = new List<String>{
      ''end'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] start_type_info = new List<String>{
      ''start'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''end_x'',
      ''start''
    };
  }
  public class Package_x extends Metadata {
    public String type = ''Package_x'';
    public String fullName;
    public String apiAccessLevel;
    public String description;
    public String namespacePrefix;
    public MetadataService.ProfileObjectPermissions[] objectPermissions;
    public String postInstallClass;
    public String setupWeblink;
    public MetadataService.PackageTypeMembers[] types;
    public String uninstallClass;
    public String version;
    private String[] apiAccessLevel_type_info = new List<String>{
      ''apiAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] namespacePrefix_type_info = new List<String>{
      ''namespacePrefix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] objectPermissions_type_info = new List<String>{
      ''objectPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] postInstallClass_type_info = new List<String>{
      ''postInstallClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] setupWeblink_type_info = new List<String>{
      ''setupWeblink'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] types_type_info = new List<String>{
      ''types'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] uninstallClass_type_info = new List<String>{
      ''uninstallClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] version_type_info = new List<String>{
      ''version'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''apiAccessLevel'',
      ''description'',
      ''namespacePrefix'',
      ''objectPermissions'',
      ''postInstallClass'',
      ''setupWeblink'',
      ''types'',
      ''uninstallClass'',
      ''version''
    };
  }
  public class FlowActionCall {
    public String actionName;
    public String actionType;
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowActionCallInputParameter[] inputParameters;
    public MetadataService.FlowActionCallOutputParameter[] outputParameters;
    private String[] actionName_type_info = new List<String>{
      ''actionName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] actionType_type_info = new List<String>{
      ''actionType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inputParameters_type_info = new List<String>{
      ''inputParameters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] outputParameters_type_info = new List<String>{
      ''outputParameters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''actionName'',
      ''actionType'',
      ''connector'',
      ''faultConnector'',
      ''inputParameters'',
      ''outputParameters''
    };
  }
  public virtual class MetadataWithContent extends Metadata {
    public String content;
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''content'' };
  }
  public class ForecastingCategoryMapping {
    public String forecastingItemCategoryApiName;
    public MetadataService.WeightedSourceCategory[] weightedSourceCategories;
    private String[] forecastingItemCategoryApiName_type_info = new List<String>{
      ''forecastingItemCategoryApiName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] weightedSourceCategories_type_info = new List<String>{
      ''weightedSourceCategories'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''forecastingItemCategoryApiName'',
      ''weightedSourceCategories''
    };
  }
  public class RetrieveRequest {
    public Double apiVersion;
    public String[] packageNames;
    public Boolean singlePackage;
    public String[] specificFiles;
    public MetadataService.Package_x unpackaged;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] packageNames_type_info = new List<String>{
      ''packageNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] singlePackage_type_info = new List<String>{
      ''singlePackage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] specificFiles_type_info = new List<String>{
      ''specificFiles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] unpackaged_type_info = new List<String>{
      ''unpackaged'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apiVersion'',
      ''packageNames'',
      ''singlePackage'',
      ''specificFiles'',
      ''unpackaged''
    };
  }
  public class ListMetadataQuery {
    public String folder;
    public String type_x;
    private String[] folder_type_info = new List<String>{
      ''folder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''folder'',
      ''type_x''
    };
  }
  public class FlowConnector {
    public String targetReference;
    private String[] targetReference_type_info = new List<String>{
      ''targetReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''targetReference''
    };
  }
  public class CustomApplicationComponent extends Metadata {
    public String type = ''CustomApplicationComponent'';
    public String fullName;
    public String buttonIconUrl;
    public String buttonStyle;
    public String buttonText;
    public Integer buttonWidth;
    public Integer height;
    public Boolean isHeightFixed;
    public Boolean isHidden;
    public Boolean isWidthFixed;
    public String visualforcePage;
    public Integer width;
    private String[] buttonIconUrl_type_info = new List<String>{
      ''buttonIconUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] buttonStyle_type_info = new List<String>{
      ''buttonStyle'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] buttonText_type_info = new List<String>{
      ''buttonText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] buttonWidth_type_info = new List<String>{
      ''buttonWidth'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isHeightFixed_type_info = new List<String>{
      ''isHeightFixed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isHidden_type_info = new List<String>{
      ''isHidden'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isWidthFixed_type_info = new List<String>{
      ''isWidthFixed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visualforcePage_type_info = new List<String>{
      ''visualforcePage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''buttonIconUrl'',
      ''buttonStyle'',
      ''buttonText'',
      ''buttonWidth'',
      ''height'',
      ''isHeightFixed'',
      ''isHidden'',
      ''isWidthFixed'',
      ''visualforcePage'',
      ''width''
    };
  }
  public class FlowRecordLookup {
    public Boolean assignNullValuesIfNoRecordsFound;
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowRecordFilter[] filters;
    public String object_x;
    public MetadataService.FlowOutputFieldAssignment[] outputAssignments;
    public String outputReference;
    public String[] queriedFields;
    public String sortField;
    public String sortOrder;
    private String[] assignNullValuesIfNoRecordsFound_type_info = new List<String>{
      ''assignNullValuesIfNoRecordsFound'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filters_type_info = new List<String>{
      ''filters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] outputAssignments_type_info = new List<String>{
      ''outputAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] outputReference_type_info = new List<String>{
      ''outputReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] queriedFields_type_info = new List<String>{
      ''queriedFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sortField_type_info = new List<String>{
      ''sortField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignNullValuesIfNoRecordsFound'',
      ''connector'',
      ''faultConnector'',
      ''filters'',
      ''object_x'',
      ''outputAssignments'',
      ''outputReference'',
      ''queriedFields'',
      ''sortField'',
      ''sortOrder''
    };
  }
  public class FieldSet extends Metadata {
    public String type = ''FieldSet'';
    public String fullName;
    public MetadataService.FieldSetItem[] availableFields;
    public String description;
    public MetadataService.FieldSetItem[] displayedFields;
    public String label;
    private String[] availableFields_type_info = new List<String>{
      ''availableFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] displayedFields_type_info = new List<String>{
      ''displayedFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''availableFields'',
      ''description'',
      ''displayedFields'',
      ''label''
    };
  }
  public class Error {
    public String[] fields;
    public String message;
    public String statusCode;
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] message_type_info = new List<String>{
      ''message'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] statusCode_type_info = new List<String>{
      ''statusCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fields'',
      ''message'',
      ''statusCode''
    };
  }
  public class DebuggingHeader_element {
    public MetadataService.LogInfo[] categories;
    public String debugLevel;
    private String[] categories_type_info = new List<String>{
      ''categories'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] debugLevel_type_info = new List<String>{
      ''debugLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''categories'',
      ''debugLevel''
    };
  }
  public class ComponentInstanceProperty {
    public String name;
    public String value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class FlowRecordDelete {
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowRecordFilter[] filters;
    public String inputReference;
    public String object_x;
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filters_type_info = new List<String>{
      ''filters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] inputReference_type_info = new List<String>{
      ''inputReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''connector'',
      ''faultConnector'',
      ''filters'',
      ''inputReference'',
      ''object_x''
    };
  }
  public class FlowDecision {
    public MetadataService.FlowConnector defaultConnector;
    public String defaultConnectorLabel;
    public MetadataService.FlowRule[] rules;
    private String[] defaultConnector_type_info = new List<String>{
      ''defaultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultConnectorLabel_type_info = new List<String>{
      ''defaultConnectorLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] rules_type_info = new List<String>{
      ''rules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''defaultConnector'',
      ''defaultConnectorLabel'',
      ''rules''
    };
  }
  public class MatchingRule extends Metadata {
    public String type = ''MatchingRule'';
    public String fullName;
    public String booleanFilter;
    public String description;
    public String label;
    public MetadataService.MatchingRuleItem[] matchingRuleItems;
    public String ruleStatus;
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] matchingRuleItems_type_info = new List<String>{
      ''matchingRuleItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] ruleStatus_type_info = new List<String>{
      ''ruleStatus'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''booleanFilter'',
      ''description'',
      ''label'',
      ''matchingRuleItems'',
      ''ruleStatus''
    };
  }
  public class QuickActionListItem {
    public String quickActionName;
    private String[] quickActionName_type_info = new List<String>{
      ''quickActionName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''quickActionName''
    };
  }
  public class Branding {
    public String loginFooterText;
    public String loginLogo;
    public String pageFooter;
    public String pageHeader;
    public String primaryColor;
    public String primaryComplementColor;
    public String quaternaryColor;
    public String quaternaryComplementColor;
    public String secondaryColor;
    public String tertiaryColor;
    public String tertiaryComplementColor;
    public String zeronaryColor;
    public String zeronaryComplementColor;
    private String[] loginFooterText_type_info = new List<String>{
      ''loginFooterText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] loginLogo_type_info = new List<String>{
      ''loginLogo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pageFooter_type_info = new List<String>{
      ''pageFooter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pageHeader_type_info = new List<String>{
      ''pageHeader'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] primaryColor_type_info = new List<String>{
      ''primaryColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] primaryComplementColor_type_info = new List<String>{
      ''primaryComplementColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] quaternaryColor_type_info = new List<String>{
      ''quaternaryColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] quaternaryComplementColor_type_info = new List<String>{
      ''quaternaryComplementColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] secondaryColor_type_info = new List<String>{
      ''secondaryColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] tertiaryColor_type_info = new List<String>{
      ''tertiaryColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] tertiaryComplementColor_type_info = new List<String>{
      ''tertiaryComplementColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] zeronaryColor_type_info = new List<String>{
      ''zeronaryColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] zeronaryComplementColor_type_info = new List<String>{
      ''zeronaryComplementColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''loginFooterText'',
      ''loginLogo'',
      ''pageFooter'',
      ''pageHeader'',
      ''primaryColor'',
      ''primaryComplementColor'',
      ''quaternaryColor'',
      ''quaternaryComplementColor'',
      ''secondaryColor'',
      ''tertiaryColor'',
      ''tertiaryComplementColor'',
      ''zeronaryColor'',
      ''zeronaryComplementColor''
    };
  }
  public class CustomLabel extends Metadata {
    public String type = ''CustomLabel'';
    public String fullName;
    public String categories;
    public String language;
    public Boolean protected_x;
    public String shortDescription;
    public String value;
    private String[] categories_type_info = new List<String>{
      ''categories'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] shortDescription_type_info = new List<String>{
      ''shortDescription'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''categories'',
      ''language'',
      ''protected_x'',
      ''shortDescription'',
      ''value''
    };
  }
  public class Attachment {
    public String content;
    public String name;
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''content'',
      ''name''
    };
  }
  public class BusinessHoursEntry extends Metadata {
    public String type = ''BusinessHoursEntry'';
    public String fullName;
    public Boolean active;
    public Boolean default_x;
    public DateTime fridayEndTime;
    public DateTime fridayStartTime;
    public DateTime mondayEndTime;
    public DateTime mondayStartTime;
    public String name;
    public DateTime saturdayEndTime;
    public DateTime saturdayStartTime;
    public DateTime sundayEndTime;
    public DateTime sundayStartTime;
    public DateTime thursdayEndTime;
    public DateTime thursdayStartTime;
    public String timeZoneId;
    public DateTime tuesdayEndTime;
    public DateTime tuesdayStartTime;
    public DateTime wednesdayEndTime;
    public DateTime wednesdayStartTime;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] default_x_type_info = new List<String>{
      ''default'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fridayEndTime_type_info = new List<String>{
      ''fridayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fridayStartTime_type_info = new List<String>{
      ''fridayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mondayEndTime_type_info = new List<String>{
      ''mondayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mondayStartTime_type_info = new List<String>{
      ''mondayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] saturdayEndTime_type_info = new List<String>{
      ''saturdayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] saturdayStartTime_type_info = new List<String>{
      ''saturdayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sundayEndTime_type_info = new List<String>{
      ''sundayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sundayStartTime_type_info = new List<String>{
      ''sundayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] thursdayEndTime_type_info = new List<String>{
      ''thursdayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] thursdayStartTime_type_info = new List<String>{
      ''thursdayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] timeZoneId_type_info = new List<String>{
      ''timeZoneId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tuesdayEndTime_type_info = new List<String>{
      ''tuesdayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tuesdayStartTime_type_info = new List<String>{
      ''tuesdayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] wednesdayEndTime_type_info = new List<String>{
      ''wednesdayEndTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] wednesdayStartTime_type_info = new List<String>{
      ''wednesdayStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''default_x'',
      ''fridayEndTime'',
      ''fridayStartTime'',
      ''mondayEndTime'',
      ''mondayStartTime'',
      ''name'',
      ''saturdayEndTime'',
      ''saturdayStartTime'',
      ''sundayEndTime'',
      ''sundayStartTime'',
      ''thursdayEndTime'',
      ''thursdayStartTime'',
      ''timeZoneId'',
      ''tuesdayEndTime'',
      ''tuesdayStartTime'',
      ''wednesdayEndTime'',
      ''wednesdayStartTime''
    };
  }
  public class FiscalYearSettings {
    public String fiscalYearNameBasedOn;
    public String startMonth;
    private String[] fiscalYearNameBasedOn_type_info = new List<String>{
      ''fiscalYearNameBasedOn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] startMonth_type_info = new List<String>{
      ''startMonth'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fiscalYearNameBasedOn'',
      ''startMonth''
    };
  }
  public class SharingRules extends Metadata {
    public String type = ''SharingRules'';
    public String fullName;
    public MetadataService.SharingCriteriaRule[] sharingCriteriaRules;
    public MetadataService.SharingOwnerRule[] sharingOwnerRules;
    public MetadataService.SharingTerritoryRule[] sharingTerritoryRules;
    private String[] sharingCriteriaRules_type_info = new List<String>{
      ''sharingCriteriaRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sharingOwnerRules_type_info = new List<String>{
      ''sharingOwnerRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sharingTerritoryRules_type_info = new List<String>{
      ''sharingTerritoryRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''sharingCriteriaRules'',
      ''sharingOwnerRules'',
      ''sharingTerritoryRules''
    };
  }
  public class ChatterAnswersSettings extends Metadata {
    public String type = ''ChatterAnswersSettings'';
    public String fullName;
    public Boolean emailFollowersOnBestAnswer;
    public Boolean emailFollowersOnReply;
    public Boolean emailOwnerOnPrivateReply;
    public Boolean emailOwnerOnReply;
    public Boolean enableAnswerViaEmail;
    public Boolean enableChatterAnswers;
    public Boolean enableFacebookSSO;
    public Boolean enableInlinePublisher;
    public Boolean enableReputation;
    public Boolean enableRichTextEditor;
    public String facebookAuthProvider;
    public Boolean showInPortals;
    private String[] emailFollowersOnBestAnswer_type_info = new List<String>{
      ''emailFollowersOnBestAnswer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailFollowersOnReply_type_info = new List<String>{
      ''emailFollowersOnReply'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailOwnerOnPrivateReply_type_info = new List<String>{
      ''emailOwnerOnPrivateReply'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailOwnerOnReply_type_info = new List<String>{
      ''emailOwnerOnReply'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableAnswerViaEmail_type_info = new List<String>{
      ''enableAnswerViaEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableChatterAnswers_type_info = new List<String>{
      ''enableChatterAnswers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enableFacebookSSO_type_info = new List<String>{
      ''enableFacebookSSO'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableInlinePublisher_type_info = new List<String>{
      ''enableInlinePublisher'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableReputation_type_info = new List<String>{
      ''enableReputation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableRichTextEditor_type_info = new List<String>{
      ''enableRichTextEditor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] facebookAuthProvider_type_info = new List<String>{
      ''facebookAuthProvider'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showInPortals_type_info = new List<String>{
      ''showInPortals'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''emailFollowersOnBestAnswer'',
      ''emailFollowersOnReply'',
      ''emailOwnerOnPrivateReply'',
      ''emailOwnerOnReply'',
      ''enableAnswerViaEmail'',
      ''enableChatterAnswers'',
      ''enableFacebookSSO'',
      ''enableInlinePublisher'',
      ''enableReputation'',
      ''enableRichTextEditor'',
      ''facebookAuthProvider'',
      ''showInPortals''
    };
  }
  public class CustomConsoleComponents {
    public MetadataService.PrimaryTabComponents primaryTabComponents;
    public MetadataService.SubtabComponents subtabComponents;
    private String[] primaryTabComponents_type_info = new List<String>{
      ''primaryTabComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] subtabComponents_type_info = new List<String>{
      ''subtabComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''primaryTabComponents'',
      ''subtabComponents''
    };
  }
  public class ChartSummary {
    public String aggregate;
    public String axisBinding;
    public String column;
    private String[] aggregate_type_info = new List<String>{
      ''aggregate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] axisBinding_type_info = new List<String>{
      ''axisBinding'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] column_type_info = new List<String>{
      ''column'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregate'',
      ''axisBinding'',
      ''column''
    };
  }
  public class AnalyticsCloudComponentLayoutItem {
    public String assetType;
    public String devName;
    public String error;
    public String filter;
    public Integer height;
    public Boolean hideOnError;
    public Boolean showTitle;
    public String width;
    private String[] assetType_type_info = new List<String>{
      ''assetType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] devName_type_info = new List<String>{
      ''devName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] error_type_info = new List<String>{
      ''error'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filter_type_info = new List<String>{
      ''filter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hideOnError_type_info = new List<String>{
      ''hideOnError'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showTitle_type_info = new List<String>{
      ''showTitle'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assetType'',
      ''devName'',
      ''error'',
      ''filter'',
      ''height'',
      ''hideOnError'',
      ''showTitle'',
      ''width''
    };
  }
  public class describeValueType_element {
    public String type_x;
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''type_x'' };
  }
  public class FlowDefinition extends Metadata {
    public String type = ''FlowDefinition'';
    public String fullName;
    public Integer activeVersionNumber;
    public String description;
    public String masterLabel;
    private String[] activeVersionNumber_type_info = new List<String>{
      ''activeVersionNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''activeVersionNumber'',
      ''description'',
      ''masterLabel''
    };
  }
  public class QuickActionLayoutItem {
    public Boolean emptySpace;
    public String field;
    public String uiBehavior;
    private String[] emptySpace_type_info = new List<String>{
      ''emptySpace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] uiBehavior_type_info = new List<String>{
      ''uiBehavior'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''emptySpace'',
      ''field'',
      ''uiBehavior''
    };
  }
  public class Picklist {
    public String controllingField;
    public MetadataService.PicklistValue[] picklistValues;
    public Boolean sorted;
    private String[] controllingField_type_info = new List<String>{
      ''controllingField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] picklistValues_type_info = new List<String>{
      ''picklistValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sorted_type_info = new List<String>{
      ''sorted'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''controllingField'',
      ''picklistValues'',
      ''sorted''
    };
  }
  public class ReportLayoutSection {
    public MetadataService.ReportTypeColumn[] columns;
    public String masterLabel;
    private String[] columns_type_info = new List<String>{
      ''columns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''columns'',
      ''masterLabel''
    };
  }
  public class SummaryLayoutItem {
    public String customLink;
    public String field;
    public Integer posX;
    public Integer posY;
    public Integer posZ;
    private String[] customLink_type_info = new List<String>{
      ''customLink'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] posX_type_info = new List<String>{
      ''posX'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] posY_type_info = new List<String>{
      ''posY'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] posZ_type_info = new List<String>{
      ''posZ'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customLink'',
      ''field'',
      ''posX'',
      ''posY'',
      ''posZ''
    };
  }
  public class LayoutSection {
    public Boolean customLabel;
    public Boolean detailHeading;
    public Boolean editHeading;
    public String label;
    public MetadataService.LayoutColumn[] layoutColumns;
    public String style;
    private String[] customLabel_type_info = new List<String>{
      ''customLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] detailHeading_type_info = new List<String>{
      ''detailHeading'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] editHeading_type_info = new List<String>{
      ''editHeading'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] layoutColumns_type_info = new List<String>{
      ''layoutColumns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] style_type_info = new List<String>{
      ''style'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customLabel'',
      ''detailHeading'',
      ''editHeading'',
      ''label'',
      ''layoutColumns'',
      ''style''
    };
  }
  public class CountriesAndStates {
    public MetadataService.Country[] countries;
    private String[] countries_type_info = new List<String>{
      ''countries'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''countries'' };
  }
  public class OpportunityListFieldsSelectedSettings {
    public String[] field;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''field'' };
  }
  public class ReportTimeFrameFilter {
    public String dateColumn;
    public Date endDate;
    public String interval;
    public Date startDate;
    private String[] dateColumn_type_info = new List<String>{
      ''dateColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] endDate_type_info = new List<String>{
      ''endDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] interval_type_info = new List<String>{
      ''interval'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] startDate_type_info = new List<String>{
      ''startDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dateColumn'',
      ''endDate'',
      ''interval'',
      ''startDate''
    };
  }
  public class XOrgHub extends Metadata {
    public String type = ''XOrgHub'';
    public String fullName;
    public String label;
    public Boolean lockSharedObjects;
    public String[] permissionSets;
    public MetadataService.XOrgHubSharedObject[] sharedObjects;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lockSharedObjects_type_info = new List<String>{
      ''lockSharedObjects'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] permissionSets_type_info = new List<String>{
      ''permissionSets'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sharedObjects_type_info = new List<String>{
      ''sharedObjects'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''label'',
      ''lockSharedObjects'',
      ''permissionSets'',
      ''sharedObjects''
    };
  }
  public class ApprovalStepRejectBehavior {
    public String type_x;
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''type_x'' };
  }
  public class EmailToCaseRoutingAddress {
    public String addressType;
    public String authorizedSenders;
    public String caseOrigin;
    public String caseOwner;
    public String caseOwnerType;
    public String casePriority;
    public Boolean createTask;
    public String emailAddress;
    public String routingName;
    public Boolean saveEmailHeaders;
    public String taskStatus;
    private String[] addressType_type_info = new List<String>{
      ''addressType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] authorizedSenders_type_info = new List<String>{
      ''authorizedSenders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseOrigin_type_info = new List<String>{
      ''caseOrigin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseOwner_type_info = new List<String>{
      ''caseOwner'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseOwnerType_type_info = new List<String>{
      ''caseOwnerType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] casePriority_type_info = new List<String>{
      ''casePriority'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] createTask_type_info = new List<String>{
      ''createTask'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailAddress_type_info = new List<String>{
      ''emailAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] routingName_type_info = new List<String>{
      ''routingName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] saveEmailHeaders_type_info = new List<String>{
      ''saveEmailHeaders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] taskStatus_type_info = new List<String>{
      ''taskStatus'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''addressType'',
      ''authorizedSenders'',
      ''caseOrigin'',
      ''caseOwner'',
      ''caseOwnerType'',
      ''casePriority'',
      ''createTask'',
      ''emailAddress'',
      ''routingName'',
      ''saveEmailHeaders'',
      ''taskStatus''
    };
  }
  public class FlowWaitEventInputParameter {
    public String name;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class FolderShare {
    public String accessLevel;
    public String sharedTo;
    public String sharedToType;
    private String[] accessLevel_type_info = new List<String>{
      ''accessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sharedToType_type_info = new List<String>{
      ''sharedToType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''accessLevel'',
      ''sharedTo'',
      ''sharedToType''
    };
  }
  public class ManagedTopic {
    public String managedTopicType;
    public String name;
    public Integer position;
    public String topicDescription;
    private String[] managedTopicType_type_info = new List<String>{
      ''managedTopicType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] position_type_info = new List<String>{
      ''position'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] topicDescription_type_info = new List<String>{
      ''topicDescription'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''managedTopicType'',
      ''name'',
      ''position'',
      ''topicDescription''
    };
  }
  public class ApprovalEntryCriteria {
    public String booleanFilter;
    public MetadataService.FilterItem[] criteriaItems;
    public String formula;
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criteriaItems_type_info = new List<String>{
      ''criteriaItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''booleanFilter'',
      ''criteriaItems'',
      ''formula''
    };
  }
  public class Territory2RuleItem {
    public String field;
    public String operation;
    public String value;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operation_type_info = new List<String>{
      ''operation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''operation'',
      ''value''
    };
  }
  public class Notification {
    public Boolean inApp;
    public Boolean sendEmail;
    public String user_x;
    private String[] inApp_type_info = new List<String>{
      ''inApp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sendEmail_type_info = new List<String>{
      ''sendEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] user_x_type_info = new List<String>{
      ''user'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''inApp'',
      ''sendEmail'',
      ''user_x''
    };
  }
  public class WorkspaceMapping {
    public String fieldName;
    public String tab;
    private String[] fieldName_type_info = new List<String>{
      ''fieldName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tab_type_info = new List<String>{
      ''tab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fieldName'',
      ''tab''
    };
  }
  public class LicensedCustomPermissions {
    public String customPermission;
    public String licenseDefinition;
    private String[] customPermission_type_info = new List<String>{
      ''customPermission'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] licenseDefinition_type_info = new List<String>{
      ''licenseDefinition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customPermission'',
      ''licenseDefinition''
    };
  }
  public class ApexPage extends MetadataWithContent {
    public String type = ''ApexPage'';
    public String fullName;
    public String content;
    public Double apiVersion;
    public Boolean availableInTouch;
    public Boolean confirmationTokenRequired;
    public String description;
    public String label;
    public MetadataService.PackageVersion[] packageVersions;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] availableInTouch_type_info = new List<String>{
      ''availableInTouch'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] confirmationTokenRequired_type_info = new List<String>{
      ''confirmationTokenRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] packageVersions_type_info = new List<String>{
      ''packageVersions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''apiVersion'',
      ''availableInTouch'',
      ''confirmationTokenRequired'',
      ''description'',
      ''label'',
      ''packageVersions''
    };
  }
  public class ProductSettings extends Metadata {
    public String type = ''ProductSettings'';
    public String fullName;
    public Boolean enableCascadeActivateToRelatedPrices;
    public Boolean enableQuantitySchedule;
    public Boolean enableRevenueSchedule;
    private String[] enableCascadeActivateToRelatedPrices_type_info = new List<String>{
      ''enableCascadeActivateToRelatedPrices'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableQuantitySchedule_type_info = new List<String>{
      ''enableQuantitySchedule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableRevenueSchedule_type_info = new List<String>{
      ''enableRevenueSchedule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableCascadeActivateToRelatedPrices'',
      ''enableQuantitySchedule'',
      ''enableRevenueSchedule''
    };
  }
  public class OpportunitySettings extends Metadata {
    public String type = ''OpportunitySettings'';
    public String fullName;
    public Boolean autoActivateNewReminders;
    public Boolean enableFindSimilarOpportunities;
    public Boolean enableOpportunityTeam;
    public Boolean enableUpdateReminders;
    public MetadataService.FindSimilarOppFilter findSimilarOppFilter;
    public Boolean promptToAddProducts;
    private String[] autoActivateNewReminders_type_info = new List<String>{
      ''autoActivateNewReminders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableFindSimilarOpportunities_type_info = new List<String>{
      ''enableFindSimilarOpportunities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableOpportunityTeam_type_info = new List<String>{
      ''enableOpportunityTeam'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableUpdateReminders_type_info = new List<String>{
      ''enableUpdateReminders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] findSimilarOppFilter_type_info = new List<String>{
      ''findSimilarOppFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] promptToAddProducts_type_info = new List<String>{
      ''promptToAddProducts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''autoActivateNewReminders'',
      ''enableFindSimilarOpportunities'',
      ''enableOpportunityTeam'',
      ''enableUpdateReminders'',
      ''findSimilarOppFilter'',
      ''promptToAddProducts''
    };
  }
  public class LiveChatDeployment extends Metadata {
    public String type = ''LiveChatDeployment'';
    public String fullName;
    public String brandingImage;
    public Boolean displayQueuePosition;
    public MetadataService.LiveChatDeploymentDomainWhitelist domainWhiteList;
    public Boolean enablePrechatApi;
    public Boolean enableTranscriptSave;
    public String label;
    public String mobileBrandingImage;
    public String site;
    public String windowTitle;
    private String[] brandingImage_type_info = new List<String>{
      ''brandingImage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayQueuePosition_type_info = new List<String>{
      ''displayQueuePosition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] domainWhiteList_type_info = new List<String>{
      ''domainWhiteList'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enablePrechatApi_type_info = new List<String>{
      ''enablePrechatApi'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableTranscriptSave_type_info = new List<String>{
      ''enableTranscriptSave'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] mobileBrandingImage_type_info = new List<String>{
      ''mobileBrandingImage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] site_type_info = new List<String>{
      ''site'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] windowTitle_type_info = new List<String>{
      ''windowTitle'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''brandingImage'',
      ''displayQueuePosition'',
      ''domainWhiteList'',
      ''enablePrechatApi'',
      ''enableTranscriptSave'',
      ''label'',
      ''mobileBrandingImage'',
      ''site'',
      ''windowTitle''
    };
  }
  public class RelatedContent {
    public MetadataService.RelatedContentItem[] relatedContentItems;
    private String[] relatedContentItems_type_info = new List<String>{
      ''relatedContentItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''relatedContentItems''
    };
  }
  public class MatchingRuleItem {
    public String blankValueBehavior;
    public String fieldName;
    public String matchingMethod;
    private String[] blankValueBehavior_type_info = new List<String>{
      ''blankValueBehavior'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fieldName_type_info = new List<String>{
      ''fieldName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] matchingMethod_type_info = new List<String>{
      ''matchingMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''blankValueBehavior'',
      ''fieldName'',
      ''matchingMethod''
    };
  }
  public class SupervisorAgentConfigSkills {
    public String[] skill;
    private String[] skill_type_info = new List<String>{
      ''skill'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''skill'' };
  }
  public class QuickActionLayoutColumn {
    public MetadataService.QuickActionLayoutItem[] quickActionLayoutItems;
    private String[] quickActionLayoutItems_type_info = new List<String>{
      ''quickActionLayoutItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''quickActionLayoutItems''
    };
  }
  public class CustomPermission extends Metadata {
    public String type = ''CustomPermission'';
    public String fullName;
    public String connectedApp;
    public String description;
    public String label;
    public MetadataService.CustomPermissionDependencyRequired[] requiredPermission;
    private String[] connectedApp_type_info = new List<String>{
      ''connectedApp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] requiredPermission_type_info = new List<String>{
      ''requiredPermission'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''connectedApp'',
      ''description'',
      ''label'',
      ''requiredPermission''
    };
  }
  public class DataPipeline {
    public Double apiVersion;
    public String label;
    public String scriptType;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] scriptType_type_info = new List<String>{
      ''scriptType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apiVersion'',
      ''label'',
      ''scriptType''
    };
  }
  public class CompanySettings extends Metadata {
    public String type = ''CompanySettings'';
    public String fullName;
    public MetadataService.FiscalYearSettings fiscalYear;
    private String[] fiscalYear_type_info = new List<String>{
      ''fiscalYear'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''fiscalYear''
    };
  }
  public class HomePageLayout extends Metadata {
    public String type = ''HomePageLayout'';
    public String fullName;
    public String[] narrowComponents;
    public String[] wideComponents;
    private String[] narrowComponents_type_info = new List<String>{
      ''narrowComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] wideComponents_type_info = new List<String>{
      ''wideComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''narrowComponents'',
      ''wideComponents''
    };
  }
  public class UiPlugin {
    public String description;
    public String extensionPointIdentifier;
    public Boolean isEnabled;
    public String language;
    public String masterLabel;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] extensionPointIdentifier_type_info = new List<String>{
      ''extensionPointIdentifier'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isEnabled_type_info = new List<String>{
      ''isEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''extensionPointIdentifier'',
      ''isEnabled'',
      ''language'',
      ''masterLabel''
    };
  }
  public class SiteWebAddress {
    public String certificate;
    public String domainName;
    public Boolean primary;
    private String[] certificate_type_info = new List<String>{
      ''certificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] domainName_type_info = new List<String>{
      ''domainName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] primary_type_info = new List<String>{
      ''primary'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''certificate'',
      ''domainName'',
      ''primary''
    };
  }
  public class RetrieveMessage {
    public String fileName;
    public String problem;
    private String[] fileName_type_info = new List<String>{
      ''fileName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] problem_type_info = new List<String>{
      ''problem'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fileName'',
      ''problem''
    };
  }
  public class AssignmentRules extends Metadata {
    public String type = ''AssignmentRules'';
    public String fullName;
    public MetadataService.AssignmentRule[] assignmentRule;
    private String[] assignmentRule_type_info = new List<String>{
      ''assignmentRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''assignmentRule''
    };
  }
  public class EmailFolder extends Folder {
    public String type = ''EmailFolder'';
    public String fullName;
    public String accessType;
    public MetadataService.FolderShare[] folderShares;
    public String name;
    public String publicFolderAccess;
    public MetadataService.SharedTo sharedTo;
    private String[] accessType_type_info = new List<String>{
      ''accessType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] folderShares_type_info = new List<String>{
      ''folderShares'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] publicFolderAccess_type_info = new List<String>{
      ''publicFolderAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessType'',
      ''folderShares'',
      ''name'',
      ''publicFolderAccess'',
      ''sharedTo''
    };
  }
  public class Territory2Rule {
    public Boolean active;
    public String booleanFilter;
    public String name;
    public String objectType;
    public MetadataService.Territory2RuleItem[] ruleItems;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] objectType_type_info = new List<String>{
      ''objectType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] ruleItems_type_info = new List<String>{
      ''ruleItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''booleanFilter'',
      ''name'',
      ''objectType'',
      ''ruleItems''
    };
  }
  public class ComponentInstance {
    public MetadataService.ComponentInstanceProperty[] componentInstanceProperties;
    public String componentName;
    private String[] componentInstanceProperties_type_info = new List<String>{
      ''componentInstanceProperties'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] componentName_type_info = new List<String>{
      ''componentName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''componentInstanceProperties'',
      ''componentName''
    };
  }
  public class WebToCaseSettings {
    public String caseOrigin;
    public String defaultResponseTemplate;
    public Boolean enableWebToCase;
    private String[] caseOrigin_type_info = new List<String>{
      ''caseOrigin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultResponseTemplate_type_info = new List<String>{
      ''defaultResponseTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableWebToCase_type_info = new List<String>{
      ''enableWebToCase'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''caseOrigin'',
      ''defaultResponseTemplate'',
      ''enableWebToCase''
    };
  }
  public class SessionHeader_element {
    public String sessionId;
    private String[] sessionId_type_info = new List<String>{
      ''sessionId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''sessionId'' };
  }
  public class EscalationRule extends Metadata {
    public String type = ''EscalationRule'';
    public String fullName;
    public Boolean active;
    public MetadataService.RuleEntry[] ruleEntry;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ruleEntry_type_info = new List<String>{
      ''ruleEntry'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''ruleEntry''
    };
  }
  public class SidebarComponent {
    public String componentType;
    public Integer height;
    public String label;
    public String lookup;
    public String page_x;
    public MetadataService.RelatedList[] relatedLists;
    public String unit;
    public Integer width;
    private String[] componentType_type_info = new List<String>{
      ''componentType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lookup_type_info = new List<String>{
      ''lookup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] relatedLists_type_info = new List<String>{
      ''relatedLists'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] unit_type_info = new List<String>{
      ''unit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''componentType'',
      ''height'',
      ''label'',
      ''lookup'',
      ''page_x'',
      ''relatedLists'',
      ''unit'',
      ''width''
    };
  }
  public class SummaryLayout {
    public String masterLabel;
    public Integer sizeX;
    public Integer sizeY;
    public Integer sizeZ;
    public MetadataService.SummaryLayoutItem[] summaryLayoutItems;
    public String summaryLayoutStyle;
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sizeX_type_info = new List<String>{
      ''sizeX'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sizeY_type_info = new List<String>{
      ''sizeY'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sizeZ_type_info = new List<String>{
      ''sizeZ'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryLayoutItems_type_info = new List<String>{
      ''summaryLayoutItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] summaryLayoutStyle_type_info = new List<String>{
      ''summaryLayoutStyle'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''masterLabel'',
      ''sizeX'',
      ''sizeY'',
      ''sizeZ'',
      ''summaryLayoutItems'',
      ''summaryLayoutStyle''
    };
  }
  public class FlowCondition {
    public String leftValueReference;
    public String operator;
    public MetadataService.FlowElementReferenceOrValue rightValue;
    private String[] leftValueReference_type_info = new List<String>{
      ''leftValueReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operator_type_info = new List<String>{
      ''operator'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] rightValue_type_info = new List<String>{
      ''rightValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''leftValueReference'',
      ''operator'',
      ''rightValue''
    };
  }
  public class DeployOptions {
    public Boolean allowMissingFiles;
    public Boolean autoUpdatePackage;
    public Boolean checkOnly;
    public Boolean ignoreWarnings;
    public Boolean performRetrieve;
    public Boolean purgeOnDelete;
    public Boolean rollbackOnError;
    public String[] runTests;
    public Boolean singlePackage;
    public String testLevel;
    private String[] allowMissingFiles_type_info = new List<String>{
      ''allowMissingFiles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] autoUpdatePackage_type_info = new List<String>{
      ''autoUpdatePackage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] checkOnly_type_info = new List<String>{
      ''checkOnly'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] ignoreWarnings_type_info = new List<String>{
      ''ignoreWarnings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] performRetrieve_type_info = new List<String>{
      ''performRetrieve'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] purgeOnDelete_type_info = new List<String>{
      ''purgeOnDelete'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] rollbackOnError_type_info = new List<String>{
      ''rollbackOnError'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] runTests_type_info = new List<String>{
      ''runTests'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] singlePackage_type_info = new List<String>{
      ''singlePackage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] testLevel_type_info = new List<String>{
      ''testLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''allowMissingFiles'',
      ''autoUpdatePackage'',
      ''checkOnly'',
      ''ignoreWarnings'',
      ''performRetrieve'',
      ''purgeOnDelete'',
      ''rollbackOnError'',
      ''runTests'',
      ''singlePackage'',
      ''testLevel''
    };
  }
  public class MarketingResourceType extends Metadata {
    public String type = ''MarketingResourceType'';
    public String fullName;
    public String description;
    public String masterLabel;
    public String object_x;
    public String provider;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] provider_type_info = new List<String>{
      ''provider'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''masterLabel'',
      ''object_x'',
      ''provider''
    };
  }
  public class ProfileApplicationVisibility {
    public String application;
    public Boolean default_x;
    public Boolean visible;
    private String[] application_type_info = new List<String>{
      ''application'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] default_x_type_info = new List<String>{
      ''default'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visible_type_info = new List<String>{
      ''visible'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''application'',
      ''default_x'',
      ''visible''
    };
  }
  public class Holiday {
    public Date activityDate;
    public String[] businessHours;
    public String description;
    public DateTime endTime;
    public Boolean isRecurring;
    public String name;
    public Integer recurrenceDayOfMonth;
    public String[] recurrenceDayOfWeek;
    public Integer recurrenceDayOfWeekMask;
    public Date recurrenceEndDate;
    public String recurrenceInstance;
    public Integer recurrenceInterval;
    public String recurrenceMonthOfYear;
    public Date recurrenceStartDate;
    public String recurrenceType;
    public DateTime startTime;
    private String[] activityDate_type_info = new List<String>{
      ''activityDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] businessHours_type_info = new List<String>{
      ''businessHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] endTime_type_info = new List<String>{
      ''endTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isRecurring_type_info = new List<String>{
      ''isRecurring'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceDayOfMonth_type_info = new List<String>{
      ''recurrenceDayOfMonth'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceDayOfWeek_type_info = new List<String>{
      ''recurrenceDayOfWeek'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recurrenceDayOfWeekMask_type_info = new List<String>{
      ''recurrenceDayOfWeekMask'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceEndDate_type_info = new List<String>{
      ''recurrenceEndDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceInstance_type_info = new List<String>{
      ''recurrenceInstance'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceInterval_type_info = new List<String>{
      ''recurrenceInterval'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceMonthOfYear_type_info = new List<String>{
      ''recurrenceMonthOfYear'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceStartDate_type_info = new List<String>{
      ''recurrenceStartDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceType_type_info = new List<String>{
      ''recurrenceType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] startTime_type_info = new List<String>{
      ''startTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''activityDate'',
      ''businessHours'',
      ''description'',
      ''endTime'',
      ''isRecurring'',
      ''name'',
      ''recurrenceDayOfMonth'',
      ''recurrenceDayOfWeek'',
      ''recurrenceDayOfWeekMask'',
      ''recurrenceEndDate'',
      ''recurrenceInstance'',
      ''recurrenceInterval'',
      ''recurrenceMonthOfYear'',
      ''recurrenceStartDate'',
      ''recurrenceType'',
      ''startTime''
    };
  }
  public class FlowElementReferenceOrValue {
    public Boolean booleanValue;
    public DateTime dateTimeValue;
    public Date dateValue;
    public String elementReference;
    public Double numberValue;
    public String stringValue;
    private String[] booleanValue_type_info = new List<String>{
      ''booleanValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''true''
    };
    private String[] dateTimeValue_type_info = new List<String>{
      ''dateTimeValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dateValue_type_info = new List<String>{
      ''dateValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] elementReference_type_info = new List<String>{
      ''elementReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] numberValue_type_info = new List<String>{
      ''numberValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''true''
    };
    private String[] stringValue_type_info = new List<String>{
      ''stringValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''booleanValue'',
      ''dateTimeValue'',
      ''dateValue'',
      ''elementReference'',
      ''numberValue'',
      ''stringValue''
    };
  }
  public class EntitlementTemplate extends Metadata {
    public String type = ''EntitlementTemplate'';
    public String fullName;
    public String businessHours;
    public Integer casesPerEntitlement;
    public String entitlementProcess;
    public Boolean isPerIncident;
    public Integer term;
    public String type_x;
    private String[] businessHours_type_info = new List<String>{
      ''businessHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] casesPerEntitlement_type_info = new List<String>{
      ''casesPerEntitlement'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entitlementProcess_type_info = new List<String>{
      ''entitlementProcess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isPerIncident_type_info = new List<String>{
      ''isPerIncident'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] term_type_info = new List<String>{
      ''term'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''businessHours'',
      ''casesPerEntitlement'',
      ''entitlementProcess'',
      ''isPerIncident'',
      ''term'',
      ''type_x''
    };
  }
  public class ProfileTabVisibility {
    public String tab;
    public String visibility;
    private String[] tab_type_info = new List<String>{
      ''tab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visibility_type_info = new List<String>{
      ''visibility'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''tab'',
      ''visibility''
    };
  }
  public class ActionOverride {
    public String actionName;
    public String comment;
    public String content;
    public Boolean skipRecordTypeSelect;
    public String type_x;
    private String[] actionName_type_info = new List<String>{
      ''actionName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] comment_type_info = new List<String>{
      ''comment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] skipRecordTypeSelect_type_info = new List<String>{
      ''skipRecordTypeSelect'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''actionName'',
      ''comment'',
      ''content'',
      ''skipRecordTypeSelect'',
      ''type_x''
    };
  }
  public class SaveResult {
    public MetadataService.Error[] errors;
    public String fullName;
    public Boolean success;
    private String[] errors_type_info = new List<String>{
      ''errors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] success_type_info = new List<String>{
      ''success'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''errors'',
      ''fullName'',
      ''success''
    };
  }
  public class readMetadataResponse_element {
    public MetadataService.ReadResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public virtual class WorkflowAction extends Metadata {
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{};
  }
  public class WorkspaceMappings {
    public MetadataService.WorkspaceMapping[] mapping;
    private String[] mapping_type_info = new List<String>{
      ''mapping'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''mapping'' };
  }
  public class ContractSettings extends Metadata {
    public String type = ''ContractSettings'';
    public String fullName;
    public Boolean autoCalculateEndDate;
    public String autoExpirationDelay;
    public String autoExpirationRecipient;
    public Boolean autoExpireContracts;
    public Boolean enableContractHistoryTracking;
    public Boolean notifyOwnersOnContractExpiration;
    private String[] autoCalculateEndDate_type_info = new List<String>{
      ''autoCalculateEndDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] autoExpirationDelay_type_info = new List<String>{
      ''autoExpirationDelay'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] autoExpirationRecipient_type_info = new List<String>{
      ''autoExpirationRecipient'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] autoExpireContracts_type_info = new List<String>{
      ''autoExpireContracts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableContractHistoryTracking_type_info = new List<String>{
      ''enableContractHistoryTracking'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyOwnersOnContractExpiration_type_info = new List<String>{
      ''notifyOwnersOnContractExpiration'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''autoCalculateEndDate'',
      ''autoExpirationDelay'',
      ''autoExpirationRecipient'',
      ''autoExpireContracts'',
      ''enableContractHistoryTracking'',
      ''notifyOwnersOnContractExpiration''
    };
  }
  public class TransactionSecurityPolicy {
    public MetadataService.Action action;
    public Boolean active;
    public String apexClass;
    public String eventType;
    public String resourceName;
    private String[] action_type_info = new List<String>{
      ''action'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apexClass_type_info = new List<String>{
      ''apexClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] eventType_type_info = new List<String>{
      ''eventType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] resourceName_type_info = new List<String>{
      ''resourceName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''action'',
      ''active'',
      ''apexClass'',
      ''eventType'',
      ''resourceName''
    };
  }
  public class GlobalQuickActionTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class ReputationLevelDefinitions {
    public MetadataService.ReputationLevel[] level;
    private String[] level_type_info = new List<String>{
      ''level'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''level'' };
  }
  public class LayoutTranslation {
    public String layout;
    public String layoutType;
    public MetadataService.LayoutSectionTranslation[] sections;
    private String[] layout_type_info = new List<String>{
      ''layout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] layoutType_type_info = new List<String>{
      ''layoutType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sections_type_info = new List<String>{
      ''sections'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''layout'',
      ''layoutType'',
      ''sections''
    };
  }
  public class ApexTrigger extends MetadataWithContent {
    public String type = ''ApexTrigger'';
    public String fullName;
    public String content;
    public Double apiVersion;
    public MetadataService.PackageVersion[] packageVersions;
    public String status;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] packageVersions_type_info = new List<String>{
      ''packageVersions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] status_type_info = new List<String>{
      ''status'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''apiVersion'',
      ''packageVersions'',
      ''status''
    };
  }
  public class CustomApplicationTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class ApprovalStepApprover {
    public MetadataService.Approver[] approver;
    public String whenMultipleApprovers;
    private String[] approver_type_info = new List<String>{
      ''approver'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] whenMultipleApprovers_type_info = new List<String>{
      ''whenMultipleApprovers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''approver'',
      ''whenMultipleApprovers''
    };
  }
  public class CallCenter extends Metadata {
    public String type = ''CallCenter'';
    public String fullName;
    public String adapterUrl;
    public String customSettings;
    public String displayName;
    public String displayNameLabel;
    public String internalNameLabel;
    public MetadataService.CallCenterSection[] sections;
    public String version;
    private String[] adapterUrl_type_info = new List<String>{
      ''adapterUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customSettings_type_info = new List<String>{
      ''customSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayName_type_info = new List<String>{
      ''displayName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] displayNameLabel_type_info = new List<String>{
      ''displayNameLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] internalNameLabel_type_info = new List<String>{
      ''internalNameLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sections_type_info = new List<String>{
      ''sections'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] version_type_info = new List<String>{
      ''version'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''adapterUrl'',
      ''customSettings'',
      ''displayName'',
      ''displayNameLabel'',
      ''internalNameLabel'',
      ''sections'',
      ''version''
    };
  }
  public class FlexiPageRegion {
    public MetadataService.ComponentInstance[] componentInstances;
    public String name;
    private String[] componentInstances_type_info = new List<String>{
      ''componentInstances'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''componentInstances'',
      ''name''
    };
  }
  public class PicklistValue extends Metadata {
    public String type = ''PicklistValue'';
    public String fullName;
    public Boolean allowEmail;
    public Boolean closed;
    public String color;
    public String[] controllingFieldValues;
    public Boolean converted;
    public Boolean cssExposed;
    public Boolean default_x;
    public String description;
    public String forecastCategory;
    public Boolean highPriority;
    public Integer probability;
    public String reverseRole;
    public Boolean reviewed;
    public Boolean won;
    private String[] allowEmail_type_info = new List<String>{
      ''allowEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] closed_type_info = new List<String>{
      ''closed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] color_type_info = new List<String>{
      ''color'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] controllingFieldValues_type_info = new List<String>{
      ''controllingFieldValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] converted_type_info = new List<String>{
      ''converted'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] cssExposed_type_info = new List<String>{
      ''cssExposed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] default_x_type_info = new List<String>{
      ''default'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forecastCategory_type_info = new List<String>{
      ''forecastCategory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] highPriority_type_info = new List<String>{
      ''highPriority'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] probability_type_info = new List<String>{
      ''probability'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reverseRole_type_info = new List<String>{
      ''reverseRole'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reviewed_type_info = new List<String>{
      ''reviewed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] won_type_info = new List<String>{
      ''won'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''allowEmail'',
      ''closed'',
      ''color'',
      ''controllingFieldValues'',
      ''converted'',
      ''cssExposed'',
      ''default_x'',
      ''description'',
      ''forecastCategory'',
      ''highPriority'',
      ''probability'',
      ''reverseRole'',
      ''reviewed'',
      ''won''
    };
  }
  public class RemoteSiteSetting extends Metadata {
    public String type = ''RemoteSiteSetting'';
    public String fullName;
    public String description;
    public Boolean disableProtocolSecurity;
    public Boolean isActive;
    public String url;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] disableProtocolSecurity_type_info = new List<String>{
      ''disableProtocolSecurity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isActive_type_info = new List<String>{
      ''isActive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] url_type_info = new List<String>{
      ''url'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''disableProtocolSecurity'',
      ''isActive'',
      ''url''
    };
  }
  public class retrieveResponse_element {
    public MetadataService.AsyncResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class deploy_element {
    public String ZipFile;
    public MetadataService.DeployOptions DeployOptions;
    private String[] ZipFile_type_info = new List<String>{
      ''ZipFile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] DeployOptions_type_info = new List<String>{
      ''DeployOptions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''ZipFile'',
      ''DeployOptions''
    };
  }
  public class XOrgHubSharedObject {
    public String[] fields;
    public String name;
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fields'',
      ''name''
    };
  }
  public class Territory2Type extends Metadata {
    public String type = ''Territory2Type'';
    public String fullName;
    public String description;
    public String name;
    public Integer priority;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] priority_type_info = new List<String>{
      ''priority'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''name'',
      ''priority''
    };
  }
  public class SharingRecalculation {
    public String className;
    private String[] className_type_info = new List<String>{
      ''className'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''className'' };
  }
  public class QuoteSettings extends Metadata {
    public String type = ''QuoteSettings'';
    public String fullName;
    public Boolean enableQuote;
    private String[] enableQuote_type_info = new List<String>{
      ''enableQuote'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableQuote''
    };
  }
  public class WebLinkTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class ProfileLoginIpRange {
    public String description;
    public String endAddress;
    public String startAddress;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] endAddress_type_info = new List<String>{
      ''endAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] startAddress_type_info = new List<String>{
      ''startAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''endAddress'',
      ''startAddress''
    };
  }
  public class ObjectRelationship {
    public MetadataService.ObjectRelationship join_x;
    public Boolean outerJoin;
    public String relationship;
    private String[] join_x_type_info = new List<String>{
      ''join'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] outerJoin_type_info = new List<String>{
      ''outerJoin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] relationship_type_info = new List<String>{
      ''relationship'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''join_x'',
      ''outerJoin'',
      ''relationship''
    };
  }
  public class RuleEntry {
    public String assignedTo;
    public String assignedToType;
    public String booleanFilter;
    public String businessHours;
    public String businessHoursSource;
    public MetadataService.FilterItem[] criteriaItems;
    public Boolean disableEscalationWhenModified;
    public MetadataService.EscalationAction[] escalationAction;
    public String escalationStartTime;
    public String formula;
    public Boolean notifyCcRecipients;
    public Boolean overrideExistingTeams;
    public String replyToEmail;
    public String senderEmail;
    public String senderName;
    public String[] team;
    public String template;
    private String[] assignedTo_type_info = new List<String>{
      ''assignedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assignedToType_type_info = new List<String>{
      ''assignedToType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] businessHours_type_info = new List<String>{
      ''businessHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] businessHoursSource_type_info = new List<String>{
      ''businessHoursSource'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criteriaItems_type_info = new List<String>{
      ''criteriaItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] disableEscalationWhenModified_type_info = new List<String>{
      ''disableEscalationWhenModified'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] escalationAction_type_info = new List<String>{
      ''escalationAction'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] escalationStartTime_type_info = new List<String>{
      ''escalationStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyCcRecipients_type_info = new List<String>{
      ''notifyCcRecipients'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] overrideExistingTeams_type_info = new List<String>{
      ''overrideExistingTeams'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] replyToEmail_type_info = new List<String>{
      ''replyToEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] senderEmail_type_info = new List<String>{
      ''senderEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] senderName_type_info = new List<String>{
      ''senderName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] team_type_info = new List<String>{
      ''team'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] template_type_info = new List<String>{
      ''template'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignedTo'',
      ''assignedToType'',
      ''booleanFilter'',
      ''businessHours'',
      ''businessHoursSource'',
      ''criteriaItems'',
      ''disableEscalationWhenModified'',
      ''escalationAction'',
      ''escalationStartTime'',
      ''formula'',
      ''notifyCcRecipients'',
      ''overrideExistingTeams'',
      ''replyToEmail'',
      ''senderEmail'',
      ''senderName'',
      ''team'',
      ''template''
    };
  }
  public class deleteMetadata_element {
    public String type_x;
    public String[] fullNames;
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fullNames_type_info = new List<String>{
      ''fullNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''type_x'',
      ''fullNames''
    };
  }
  public class ListPlacement {
    public Integer height;
    public String location;
    public String units;
    public Integer width;
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] location_type_info = new List<String>{
      ''location'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] units_type_info = new List<String>{
      ''units'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''height'',
      ''location'',
      ''units'',
      ''width''
    };
  }
  public class SiteRedirectMapping {
    public String action;
    public Boolean isActive;
    public String source;
    public String target;
    private String[] action_type_info = new List<String>{
      ''action'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isActive_type_info = new List<String>{
      ''isActive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] source_type_info = new List<String>{
      ''source'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] target_type_info = new List<String>{
      ''target'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''action'',
      ''isActive'',
      ''source'',
      ''target''
    };
  }
  public class WorkflowFieldUpdate extends WorkflowAction {
    public String type = ''WorkflowFieldUpdate'';
    public String fullName;
    public String description;
    public String field;
    public String formula;
    public String literalValue;
    public String lookupValue;
    public String lookupValueType;
    public String name;
    public Boolean notifyAssignee;
    public String operation;
    public Boolean protected_x;
    public Boolean reevaluateOnChange;
    public String targetObject;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] formula_type_info = new List<String>{
      ''formula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] literalValue_type_info = new List<String>{
      ''literalValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lookupValue_type_info = new List<String>{
      ''lookupValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lookupValueType_type_info = new List<String>{
      ''lookupValueType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] notifyAssignee_type_info = new List<String>{
      ''notifyAssignee'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operation_type_info = new List<String>{
      ''operation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] reevaluateOnChange_type_info = new List<String>{
      ''reevaluateOnChange'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] targetObject_type_info = new List<String>{
      ''targetObject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''field'',
      ''formula'',
      ''literalValue'',
      ''lookupValue'',
      ''lookupValueType'',
      ''name'',
      ''notifyAssignee'',
      ''operation'',
      ''protected_x'',
      ''reevaluateOnChange'',
      ''targetObject''
    };
  }
  public class LetterheadLine {
    public String color;
    public Integer height;
    private String[] color_type_info = new List<String>{
      ''color'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''color'',
      ''height''
    };
  }
  public class FlowChoiceUserInput {
    public Boolean isRequired;
    public String promptText;
    public MetadataService.FlowInputValidationRule validationRule;
    private String[] isRequired_type_info = new List<String>{
      ''isRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] promptText_type_info = new List<String>{
      ''promptText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] validationRule_type_info = new List<String>{
      ''validationRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''isRequired'',
      ''promptText'',
      ''validationRule''
    };
  }
  public class ConnectedAppMobileDetailConfig {
    public String applicationBinaryFile;
    public String applicationBinaryFileName;
    public String applicationBundleIdentifier;
    public Integer applicationFileLength;
    public String applicationIconFile;
    public String applicationIconFileName;
    public String applicationInstallUrl;
    public String devicePlatform;
    public String deviceType;
    public String minimumOsVersion;
    public Boolean privateApp;
    public String version;
    private String[] applicationBinaryFile_type_info = new List<String>{
      ''applicationBinaryFile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] applicationBinaryFileName_type_info = new List<String>{
      ''applicationBinaryFileName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] applicationBundleIdentifier_type_info = new List<String>{
      ''applicationBundleIdentifier'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] applicationFileLength_type_info = new List<String>{
      ''applicationFileLength'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] applicationIconFile_type_info = new List<String>{
      ''applicationIconFile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] applicationIconFileName_type_info = new List<String>{
      ''applicationIconFileName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] applicationInstallUrl_type_info = new List<String>{
      ''applicationInstallUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] devicePlatform_type_info = new List<String>{
      ''devicePlatform'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] deviceType_type_info = new List<String>{
      ''deviceType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] minimumOsVersion_type_info = new List<String>{
      ''minimumOsVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] privateApp_type_info = new List<String>{
      ''privateApp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] version_type_info = new List<String>{
      ''version'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''applicationBinaryFile'',
      ''applicationBinaryFileName'',
      ''applicationBundleIdentifier'',
      ''applicationFileLength'',
      ''applicationIconFile'',
      ''applicationIconFileName'',
      ''applicationInstallUrl'',
      ''devicePlatform'',
      ''deviceType'',
      ''minimumOsVersion'',
      ''privateApp'',
      ''version''
    };
  }
  public class ProfileRecordTypeVisibility {
    public Boolean default_x;
    public Boolean personAccountDefault;
    public String recordType;
    public Boolean visible;
    private String[] default_x_type_info = new List<String>{
      ''default'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] personAccountDefault_type_info = new List<String>{
      ''personAccountDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recordType_type_info = new List<String>{
      ''recordType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visible_type_info = new List<String>{
      ''visible'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''default_x'',
      ''personAccountDefault'',
      ''recordType'',
      ''visible''
    };
  }
  public class PackageVersion {
    public Integer majorNumber;
    public Integer minorNumber;
    public String namespace;
    private String[] majorNumber_type_info = new List<String>{
      ''majorNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] minorNumber_type_info = new List<String>{
      ''minorNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] namespace_type_info = new List<String>{
      ''namespace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''majorNumber'',
      ''minorNumber'',
      ''namespace''
    };
  }
  public class PermissionSetCustomPermissions {
    public Boolean enabled;
    public String name;
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabled'',
      ''name''
    };
  }
  public class CustomLabelTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class CorsWhitelistOrigin extends Metadata {
    public String type = ''CorsWhitelistOrigin'';
    public String fullName;
    public String urlPattern;
    private String[] urlPattern_type_info = new List<String>{
      ''urlPattern'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''urlPattern''
    };
  }
  public class StaticResource extends MetadataWithContent {
    public String type = ''StaticResource'';
    public String fullName;
    public String content;
    public String cacheControl;
    public String contentType;
    public String description;
    private String[] cacheControl_type_info = new List<String>{
      ''cacheControl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] contentType_type_info = new List<String>{
      ''contentType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''cacheControl'',
      ''contentType'',
      ''description''
    };
  }
  public class LiveChatButton extends Metadata {
    public String type = ''LiveChatButton'';
    public String fullName;
    public String animation;
    public String autoGreeting;
    public String chatPage;
    public String customAgentName;
    public MetadataService.LiveChatButtonDeployments deployments;
    public Boolean enableQueue;
    public String inviteEndPosition;
    public String inviteImage;
    public String inviteStartPosition;
    public Boolean isActive;
    public String label;
    public Integer numberOfReroutingAttempts;
    public String offlineImage;
    public String onlineImage;
    public Boolean optionsCustomRoutingIsEnabled;
    public Boolean optionsHasInviteAfterAccept;
    public Boolean optionsHasInviteAfterReject;
    public Boolean optionsHasRerouteDeclinedRequest;
    public Boolean optionsIsAutoAccept;
    public Boolean optionsIsInviteAutoRemove;
    public Integer overallQueueLength;
    public Integer perAgentQueueLength;
    public String postChatPage;
    public String postChatUrl;
    public String preChatFormPage;
    public String preChatFormUrl;
    public Integer pushTimeOut;
    public String routingType;
    public String site;
    public MetadataService.LiveChatButtonSkills skills;
    public Integer timeToRemoveInvite;
    public String type_x;
    public String windowLanguage;
    private String[] animation_type_info = new List<String>{
      ''animation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] autoGreeting_type_info = new List<String>{
      ''autoGreeting'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chatPage_type_info = new List<String>{
      ''chatPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customAgentName_type_info = new List<String>{
      ''customAgentName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] deployments_type_info = new List<String>{
      ''deployments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableQueue_type_info = new List<String>{
      ''enableQueue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inviteEndPosition_type_info = new List<String>{
      ''inviteEndPosition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inviteImage_type_info = new List<String>{
      ''inviteImage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inviteStartPosition_type_info = new List<String>{
      ''inviteStartPosition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isActive_type_info = new List<String>{
      ''isActive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numberOfReroutingAttempts_type_info = new List<String>{
      ''numberOfReroutingAttempts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] offlineImage_type_info = new List<String>{
      ''offlineImage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] onlineImage_type_info = new List<String>{
      ''onlineImage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] optionsCustomRoutingIsEnabled_type_info = new List<String>{
      ''optionsCustomRoutingIsEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] optionsHasInviteAfterAccept_type_info = new List<String>{
      ''optionsHasInviteAfterAccept'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] optionsHasInviteAfterReject_type_info = new List<String>{
      ''optionsHasInviteAfterReject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] optionsHasRerouteDeclinedRequest_type_info = new List<String>{
      ''optionsHasRerouteDeclinedRequest'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] optionsIsAutoAccept_type_info = new List<String>{
      ''optionsIsAutoAccept'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] optionsIsInviteAutoRemove_type_info = new List<String>{
      ''optionsIsInviteAutoRemove'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] overallQueueLength_type_info = new List<String>{
      ''overallQueueLength'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] perAgentQueueLength_type_info = new List<String>{
      ''perAgentQueueLength'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] postChatPage_type_info = new List<String>{
      ''postChatPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] postChatUrl_type_info = new List<String>{
      ''postChatUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] preChatFormPage_type_info = new List<String>{
      ''preChatFormPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] preChatFormUrl_type_info = new List<String>{
      ''preChatFormUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pushTimeOut_type_info = new List<String>{
      ''pushTimeOut'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] routingType_type_info = new List<String>{
      ''routingType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] site_type_info = new List<String>{
      ''site'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] skills_type_info = new List<String>{
      ''skills'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] timeToRemoveInvite_type_info = new List<String>{
      ''timeToRemoveInvite'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] windowLanguage_type_info = new List<String>{
      ''windowLanguage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''animation'',
      ''autoGreeting'',
      ''chatPage'',
      ''customAgentName'',
      ''deployments'',
      ''enableQueue'',
      ''inviteEndPosition'',
      ''inviteImage'',
      ''inviteStartPosition'',
      ''isActive'',
      ''label'',
      ''numberOfReroutingAttempts'',
      ''offlineImage'',
      ''onlineImage'',
      ''optionsCustomRoutingIsEnabled'',
      ''optionsHasInviteAfterAccept'',
      ''optionsHasInviteAfterReject'',
      ''optionsHasRerouteDeclinedRequest'',
      ''optionsIsAutoAccept'',
      ''optionsIsInviteAutoRemove'',
      ''overallQueueLength'',
      ''perAgentQueueLength'',
      ''postChatPage'',
      ''postChatUrl'',
      ''preChatFormPage'',
      ''preChatFormUrl'',
      ''pushTimeOut'',
      ''routingType'',
      ''site'',
      ''skills'',
      ''timeToRemoveInvite'',
      ''type_x'',
      ''windowLanguage''
    };
  }
  public class RunTestsResult {
    public MetadataService.CodeCoverageResult[] codeCoverage;
    public MetadataService.CodeCoverageWarning[] codeCoverageWarnings;
    public MetadataService.RunTestFailure[] failures;
    public Integer numFailures;
    public Integer numTestsRun;
    public MetadataService.RunTestSuccess[] successes;
    public Double totalTime;
    private String[] codeCoverage_type_info = new List<String>{
      ''codeCoverage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] codeCoverageWarnings_type_info = new List<String>{
      ''codeCoverageWarnings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] failures_type_info = new List<String>{
      ''failures'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] numFailures_type_info = new List<String>{
      ''numFailures'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numTestsRun_type_info = new List<String>{
      ''numTestsRun'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] successes_type_info = new List<String>{
      ''successes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] totalTime_type_info = new List<String>{
      ''totalTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''codeCoverage'',
      ''codeCoverageWarnings'',
      ''failures'',
      ''numFailures'',
      ''numTestsRun'',
      ''successes'',
      ''totalTime''
    };
  }
  public class Network extends Metadata {
    public String type = ''Network'';
    public String fullName;
    public Boolean allowMembersToFlag;
    public MetadataService.Branding branding;
    public String caseCommentEmailTemplate;
    public String changePasswordTemplate;
    public String description;
    public String emailSenderAddress;
    public String emailSenderName;
    public Boolean enableGuestChatter;
    public Boolean enableInvitation;
    public Boolean enableKnowledgeable;
    public Boolean enableNicknameDisplay;
    public Boolean enablePrivateMessages;
    public Boolean enableReputation;
    public String feedChannel;
    public String forgotPasswordTemplate;
    public String logoutUrl;
    public MetadataService.NetworkMemberGroup networkMemberGroups;
    public String newSenderAddress;
    public String picassoSite;
    public MetadataService.ReputationLevelDefinitions reputationLevels;
    public MetadataService.ReputationPointsRules reputationPointsRules;
    public String selfRegProfile;
    public Boolean selfRegistration;
    public Boolean sendWelcomeEmail;
    public String site;
    public String status;
    public MetadataService.NetworkTabSet tabs;
    public String urlPathPrefix;
    public String welcomeTemplate;
    private String[] allowMembersToFlag_type_info = new List<String>{
      ''allowMembersToFlag'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] branding_type_info = new List<String>{
      ''branding'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseCommentEmailTemplate_type_info = new List<String>{
      ''caseCommentEmailTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] changePasswordTemplate_type_info = new List<String>{
      ''changePasswordTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailSenderAddress_type_info = new List<String>{
      ''emailSenderAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] emailSenderName_type_info = new List<String>{
      ''emailSenderName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enableGuestChatter_type_info = new List<String>{
      ''enableGuestChatter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableInvitation_type_info = new List<String>{
      ''enableInvitation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableKnowledgeable_type_info = new List<String>{
      ''enableKnowledgeable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableNicknameDisplay_type_info = new List<String>{
      ''enableNicknameDisplay'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enablePrivateMessages_type_info = new List<String>{
      ''enablePrivateMessages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableReputation_type_info = new List<String>{
      ''enableReputation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] feedChannel_type_info = new List<String>{
      ''feedChannel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forgotPasswordTemplate_type_info = new List<String>{
      ''forgotPasswordTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] logoutUrl_type_info = new List<String>{
      ''logoutUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] networkMemberGroups_type_info = new List<String>{
      ''networkMemberGroups'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] newSenderAddress_type_info = new List<String>{
      ''newSenderAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] picassoSite_type_info = new List<String>{
      ''picassoSite'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reputationLevels_type_info = new List<String>{
      ''reputationLevels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reputationPointsRules_type_info = new List<String>{
      ''reputationPointsRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegProfile_type_info = new List<String>{
      ''selfRegProfile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegistration_type_info = new List<String>{
      ''selfRegistration'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sendWelcomeEmail_type_info = new List<String>{
      ''sendWelcomeEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] site_type_info = new List<String>{
      ''site'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] status_type_info = new List<String>{
      ''status'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] tabs_type_info = new List<String>{
      ''tabs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] urlPathPrefix_type_info = new List<String>{
      ''urlPathPrefix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] welcomeTemplate_type_info = new List<String>{
      ''welcomeTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''allowMembersToFlag'',
      ''branding'',
      ''caseCommentEmailTemplate'',
      ''changePasswordTemplate'',
      ''description'',
      ''emailSenderAddress'',
      ''emailSenderName'',
      ''enableGuestChatter'',
      ''enableInvitation'',
      ''enableKnowledgeable'',
      ''enableNicknameDisplay'',
      ''enablePrivateMessages'',
      ''enableReputation'',
      ''feedChannel'',
      ''forgotPasswordTemplate'',
      ''logoutUrl'',
      ''networkMemberGroups'',
      ''newSenderAddress'',
      ''picassoSite'',
      ''reputationLevels'',
      ''reputationPointsRules'',
      ''selfRegProfile'',
      ''selfRegistration'',
      ''sendWelcomeEmail'',
      ''site'',
      ''status'',
      ''tabs'',
      ''urlPathPrefix'',
      ''welcomeTemplate''
    };
  }
  public class PermissionSetUserPermission {
    public Boolean enabled;
    public String name;
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabled'',
      ''name''
    };
  }
  public class FlowVariable {
    public String dataType;
    public Boolean isCollection;
    public Boolean isInput;
    public Boolean isOutput;
    public String objectType;
    public Integer scale;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] dataType_type_info = new List<String>{
      ''dataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isCollection_type_info = new List<String>{
      ''isCollection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isInput_type_info = new List<String>{
      ''isInput'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isOutput_type_info = new List<String>{
      ''isOutput'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] objectType_type_info = new List<String>{
      ''objectType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scale_type_info = new List<String>{
      ''scale'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dataType'',
      ''isCollection'',
      ''isInput'',
      ''isOutput'',
      ''objectType'',
      ''scale'',
      ''value''
    };
  }
  public class AccountSettings extends Metadata {
    public String type = ''AccountSettings'';
    public String fullName;
    public Boolean enableAccountOwnerReport;
    public Boolean enableAccountTeams;
    public Boolean enableSharedContacts;
    public Boolean showViewHierarchyLink;
    private String[] enableAccountOwnerReport_type_info = new List<String>{
      ''enableAccountOwnerReport'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableAccountTeams_type_info = new List<String>{
      ''enableAccountTeams'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSharedContacts_type_info = new List<String>{
      ''enableSharedContacts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showViewHierarchyLink_type_info = new List<String>{
      ''showViewHierarchyLink'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableAccountOwnerReport'',
      ''enableAccountTeams'',
      ''enableSharedContacts'',
      ''showViewHierarchyLink''
    };
  }
  public class PathAssistantSettings {
    public Boolean pathAssistantForOpportunityEnabled;
    private String[] pathAssistantForOpportunityEnabled_type_info = new List<String>{
      ''pathAssistantForOpportunityEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''pathAssistantForOpportunityEnabled''
    };
  }
  public class ChatterAnswersReputationLevel {
    public String name;
    public Integer value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class LiveChatDeploymentDomainWhitelist {
    public String[] domain;
    private String[] domain_type_info = new List<String>{
      ''domain'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''domain'' };
  }
  public class DashboardFilter {
    public MetadataService.DashboardFilterOption[] dashboardFilterOptions;
    public String name;
    private String[] dashboardFilterOptions_type_info = new List<String>{
      ''dashboardFilterOptions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dashboardFilterOptions'',
      ''name''
    };
  }
  public class ProfileLoginHours {
    public String fridayEnd;
    public String fridayStart;
    public String mondayEnd;
    public String mondayStart;
    public String saturdayEnd;
    public String saturdayStart;
    public String sundayEnd;
    public String sundayStart;
    public String thursdayEnd;
    public String thursdayStart;
    public String tuesdayEnd;
    public String tuesdayStart;
    public String wednesdayEnd;
    public String wednesdayStart;
    private String[] fridayEnd_type_info = new List<String>{
      ''fridayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fridayStart_type_info = new List<String>{
      ''fridayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mondayEnd_type_info = new List<String>{
      ''mondayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mondayStart_type_info = new List<String>{
      ''mondayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] saturdayEnd_type_info = new List<String>{
      ''saturdayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] saturdayStart_type_info = new List<String>{
      ''saturdayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sundayEnd_type_info = new List<String>{
      ''sundayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sundayStart_type_info = new List<String>{
      ''sundayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] thursdayEnd_type_info = new List<String>{
      ''thursdayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] thursdayStart_type_info = new List<String>{
      ''thursdayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tuesdayEnd_type_info = new List<String>{
      ''tuesdayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tuesdayStart_type_info = new List<String>{
      ''tuesdayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] wednesdayEnd_type_info = new List<String>{
      ''wednesdayEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] wednesdayStart_type_info = new List<String>{
      ''wednesdayStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fridayEnd'',
      ''fridayStart'',
      ''mondayEnd'',
      ''mondayStart'',
      ''saturdayEnd'',
      ''saturdayStart'',
      ''sundayEnd'',
      ''sundayStart'',
      ''thursdayEnd'',
      ''thursdayStart'',
      ''tuesdayEnd'',
      ''tuesdayStart'',
      ''wednesdayEnd'',
      ''wednesdayStart''
    };
  }
  public class CodeLocation {
    public Integer column;
    public Integer line;
    public Integer numExecutions;
    public Double time_x;
    private String[] column_type_info = new List<String>{
      ''column'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] line_type_info = new List<String>{
      ''line'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numExecutions_type_info = new List<String>{
      ''numExecutions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] time_x_type_info = new List<String>{
      ''time'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''column'',
      ''line'',
      ''numExecutions'',
      ''time_x''
    };
  }
  public class PermissionSetRecordTypeVisibility {
    public String recordType;
    public Boolean visible;
    private String[] recordType_type_info = new List<String>{
      ''recordType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visible_type_info = new List<String>{
      ''visible'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''recordType'',
      ''visible''
    };
  }
  public class FieldSetItem {
    public String field;
    public Boolean isFieldManaged;
    public Boolean isRequired;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isFieldManaged_type_info = new List<String>{
      ''isFieldManaged'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isRequired_type_info = new List<String>{
      ''isRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''isFieldManaged'',
      ''isRequired''
    };
  }
  public class KnowledgeLanguageSettings {
    public MetadataService.KnowledgeLanguage[] language;
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''language'' };
  }
  public class OrderSettings extends Metadata {
    public String type = ''OrderSettings'';
    public String fullName;
    public Boolean enableNegativeQuantity;
    public Boolean enableOrders;
    public Boolean enableReductionOrders;
    private String[] enableNegativeQuantity_type_info = new List<String>{
      ''enableNegativeQuantity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableOrders_type_info = new List<String>{
      ''enableOrders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableReductionOrders_type_info = new List<String>{
      ''enableReductionOrders'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableNegativeQuantity'',
      ''enableOrders'',
      ''enableReductionOrders''
    };
  }
  public class ProfileUserPermission {
    public Boolean enabled;
    public String name;
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabled'',
      ''name''
    };
  }
  public class ReportFilterItem {
    public String column;
    public Boolean columnToColumn;
    public String operator;
    public String snapshot;
    public String value;
    private String[] column_type_info = new List<String>{
      ''column'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] columnToColumn_type_info = new List<String>{
      ''columnToColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] operator_type_info = new List<String>{
      ''operator'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] snapshot_type_info = new List<String>{
      ''snapshot'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''column'',
      ''columnToColumn'',
      ''operator'',
      ''snapshot'',
      ''value''
    };
  }
  public class FlowDynamicChoiceSet {
    public String dataType;
    public String displayField;
    public MetadataService.FlowRecordFilter[] filters;
    public Integer limit_x;
    public String object_x;
    public MetadataService.FlowOutputFieldAssignment[] outputAssignments;
    public String sortField;
    public String sortOrder;
    public String valueField;
    private String[] dataType_type_info = new List<String>{
      ''dataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] displayField_type_info = new List<String>{
      ''displayField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] filters_type_info = new List<String>{
      ''filters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] limit_x_type_info = new List<String>{
      ''limit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] outputAssignments_type_info = new List<String>{
      ''outputAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sortField_type_info = new List<String>{
      ''sortField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] valueField_type_info = new List<String>{
      ''valueField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dataType'',
      ''displayField'',
      ''filters'',
      ''limit_x'',
      ''object_x'',
      ''outputAssignments'',
      ''sortField'',
      ''sortOrder'',
      ''valueField''
    };
  }
  public virtual class SharingBaseRule extends Metadata {
    public String type = ''SharingBaseRule'';
    public String fullName;
    public String accessLevel;
    public MetadataService.AccountSharingRuleSettings accountSettings;
    public String description;
    public String label;
    public MetadataService.SharedTo sharedTo;
    private String[] accessLevel_type_info = new List<String>{
      ''accessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] accountSettings_type_info = new List<String>{
      ''accountSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessLevel'',
      ''accountSettings'',
      ''description'',
      ''label'',
      ''sharedTo''
    };
  }
  public class KnowledgeSettings extends Metadata {
    public String type = ''KnowledgeSettings'';
    public String fullName;
    public MetadataService.KnowledgeAnswerSettings answers;
    public MetadataService.KnowledgeCaseSettings cases;
    public String defaultLanguage;
    public Boolean enableChatterQuestionKBDeflection;
    public Boolean enableCreateEditOnArticlesTab;
    public Boolean enableExternalMediaContent;
    public Boolean enableKnowledge;
    public MetadataService.KnowledgeLanguageSettings languages;
    public Boolean showArticleSummariesCustomerPortal;
    public Boolean showArticleSummariesInternalApp;
    public Boolean showArticleSummariesPartnerPortal;
    public Boolean showValidationStatusField;
    private String[] answers_type_info = new List<String>{
      ''answers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] cases_type_info = new List<String>{
      ''cases'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultLanguage_type_info = new List<String>{
      ''defaultLanguage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableChatterQuestionKBDeflection_type_info = new List<String>{
      ''enableChatterQuestionKBDeflection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableCreateEditOnArticlesTab_type_info = new List<String>{
      ''enableCreateEditOnArticlesTab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableExternalMediaContent_type_info = new List<String>{
      ''enableExternalMediaContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableKnowledge_type_info = new List<String>{
      ''enableKnowledge'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] languages_type_info = new List<String>{
      ''languages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showArticleSummariesCustomerPortal_type_info = new List<String>{
      ''showArticleSummariesCustomerPortal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showArticleSummariesInternalApp_type_info = new List<String>{
      ''showArticleSummariesInternalApp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showArticleSummariesPartnerPortal_type_info = new List<String>{
      ''showArticleSummariesPartnerPortal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showValidationStatusField_type_info = new List<String>{
      ''showValidationStatusField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''answers'',
      ''cases'',
      ''defaultLanguage'',
      ''enableChatterQuestionKBDeflection'',
      ''enableCreateEditOnArticlesTab'',
      ''enableExternalMediaContent'',
      ''enableKnowledge'',
      ''languages'',
      ''showArticleSummariesCustomerPortal'',
      ''showArticleSummariesInternalApp'',
      ''showArticleSummariesPartnerPortal'',
      ''showValidationStatusField''
    };
  }
  public class StandardFieldTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class MatchingRules extends Metadata {
    public String type = ''MatchingRules'';
    public String fullName;
    public MetadataService.MatchingRule[] matchingRules;
    private String[] matchingRules_type_info = new List<String>{
      ''matchingRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''matchingRules''
    };
  }
  public class upsertMetadata_element {
    public MetadataService.Metadata[] metadata;
    private String[] metadata_type_info = new List<String>{
      ''metadata'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''metadata'' };
  }
  public class ApexClass extends MetadataWithContent {
    public String type = ''ApexClass'';
    public String fullName;
    public String content;
    public Double apiVersion;
    public MetadataService.PackageVersion[] packageVersions;
    public String status;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] packageVersions_type_info = new List<String>{
      ''packageVersions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] status_type_info = new List<String>{
      ''status'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''apiVersion'',
      ''packageVersions'',
      ''status''
    };
  }
  public class PathAssistant extends Metadata {
    public String type = ''PathAssistant'';
    public String fullName;
    public Boolean active;
    public String entityName;
    public String fieldName;
    public String masterLabel;
    public MetadataService.PathAssistantStep[] pathAssistantSteps;
    public String recordTypeName;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] entityName_type_info = new List<String>{
      ''entityName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fieldName_type_info = new List<String>{
      ''fieldName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] pathAssistantSteps_type_info = new List<String>{
      ''pathAssistantSteps'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordTypeName_type_info = new List<String>{
      ''recordTypeName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''entityName'',
      ''fieldName'',
      ''masterLabel'',
      ''pathAssistantSteps'',
      ''recordTypeName''
    };
  }
  public class SessionSettings {
    public Boolean disableTimeoutWarning;
    public Boolean enableCSRFOnGet;
    public Boolean enableCSRFOnPost;
    public Boolean enableCacheAndAutocomplete;
    public Boolean enableClickjackNonsetupSFDC;
    public Boolean enableClickjackNonsetupUser;
    public Boolean enableClickjackNonsetupUserHeaderless;
    public Boolean enableClickjackSetup;
    public Boolean enablePostForSessions;
    public Boolean enableSMSIdentity;
    public Boolean enforceIpRangesEveryRequest;
    public Boolean forceLogoutOnSessionTimeout;
    public Boolean forceRelogin;
    public Boolean lockSessionsToDomain;
    public Boolean lockSessionsToIp;
    public String logoutURL;
    public String sessionTimeout;
    private String[] disableTimeoutWarning_type_info = new List<String>{
      ''disableTimeoutWarning'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableCSRFOnGet_type_info = new List<String>{
      ''enableCSRFOnGet'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableCSRFOnPost_type_info = new List<String>{
      ''enableCSRFOnPost'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableCacheAndAutocomplete_type_info = new List<String>{
      ''enableCacheAndAutocomplete'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableClickjackNonsetupSFDC_type_info = new List<String>{
      ''enableClickjackNonsetupSFDC'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableClickjackNonsetupUser_type_info = new List<String>{
      ''enableClickjackNonsetupUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableClickjackNonsetupUserHeaderless_type_info = new List<String>{
      ''enableClickjackNonsetupUserHeaderless'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableClickjackSetup_type_info = new List<String>{
      ''enableClickjackSetup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enablePostForSessions_type_info = new List<String>{
      ''enablePostForSessions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSMSIdentity_type_info = new List<String>{
      ''enableSMSIdentity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enforceIpRangesEveryRequest_type_info = new List<String>{
      ''enforceIpRangesEveryRequest'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forceLogoutOnSessionTimeout_type_info = new List<String>{
      ''forceLogoutOnSessionTimeout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forceRelogin_type_info = new List<String>{
      ''forceRelogin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lockSessionsToDomain_type_info = new List<String>{
      ''lockSessionsToDomain'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lockSessionsToIp_type_info = new List<String>{
      ''lockSessionsToIp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logoutURL_type_info = new List<String>{
      ''logoutURL'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sessionTimeout_type_info = new List<String>{
      ''sessionTimeout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''disableTimeoutWarning'',
      ''enableCSRFOnGet'',
      ''enableCSRFOnPost'',
      ''enableCacheAndAutocomplete'',
      ''enableClickjackNonsetupSFDC'',
      ''enableClickjackNonsetupUser'',
      ''enableClickjackNonsetupUserHeaderless'',
      ''enableClickjackSetup'',
      ''enablePostForSessions'',
      ''enableSMSIdentity'',
      ''enforceIpRangesEveryRequest'',
      ''forceLogoutOnSessionTimeout'',
      ''forceRelogin'',
      ''lockSessionsToDomain'',
      ''lockSessionsToIp'',
      ''logoutURL'',
      ''sessionTimeout''
    };
  }
  public class Document extends MetadataWithContent {
    public String type = ''Document'';
    public String fullName;
    public String content;
    public String description;
    public Boolean internalUseOnly;
    public String keywords;
    public String name;
    public Boolean public_x;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] internalUseOnly_type_info = new List<String>{
      ''internalUseOnly'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] keywords_type_info = new List<String>{
      ''keywords'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] public_x_type_info = new List<String>{
      ''public'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''description'',
      ''internalUseOnly'',
      ''keywords'',
      ''name'',
      ''public_x''
    };
  }
  public class AutoResponseRules extends Metadata {
    public String type = ''AutoResponseRules'';
    public String fullName;
    public MetadataService.AutoResponseRule[] autoResponseRule;
    private String[] autoResponseRule_type_info = new List<String>{
      ''autoResponseRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''autoResponseRule''
    };
  }
  public virtual class Folder extends Metadata {
    public String accessType;
    public MetadataService.FolderShare[] folderShares;
    public String name;
    public String publicFolderAccess;
    public MetadataService.SharedTo sharedTo;
    private String[] accessType_type_info = new List<String>{
      ''accessType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] folderShares_type_info = new List<String>{
      ''folderShares'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] publicFolderAccess_type_info = new List<String>{
      ''publicFolderAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''accessType'',
      ''folderShares'',
      ''name'',
      ''publicFolderAccess'',
      ''sharedTo''
    };
  }
  public class Territory2Model extends Metadata {
    public String type = ''Territory2Model'';
    public String fullName;
    public MetadataService.FieldValue[] customFields;
    public String description;
    public String name;
    private String[] customFields_type_info = new List<String>{
      ''customFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''customFields'',
      ''description'',
      ''name''
    };
  }
  public class DeployResult {
    public String canceledBy;
    public String canceledByName;
    public Boolean checkOnly;
    public DateTime completedDate;
    public String createdBy;
    public String createdByName;
    public DateTime createdDate;
    public MetadataService.DeployDetails details;
    public Boolean done;
    public String errorMessage;
    public String errorStatusCode;
    public String id;
    public Boolean ignoreWarnings;
    public DateTime lastModifiedDate;
    public Integer numberComponentErrors;
    public Integer numberComponentsDeployed;
    public Integer numberComponentsTotal;
    public Integer numberTestErrors;
    public Integer numberTestsCompleted;
    public Integer numberTestsTotal;
    public Boolean rollbackOnError;
    public Boolean runTestsEnabled;
    public DateTime startDate;
    public String stateDetail;
    public String status;
    public Boolean success;
    private String[] canceledBy_type_info = new List<String>{
      ''canceledBy'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] canceledByName_type_info = new List<String>{
      ''canceledByName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] checkOnly_type_info = new List<String>{
      ''checkOnly'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] completedDate_type_info = new List<String>{
      ''completedDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] createdBy_type_info = new List<String>{
      ''createdBy'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] createdByName_type_info = new List<String>{
      ''createdByName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] createdDate_type_info = new List<String>{
      ''createdDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] details_type_info = new List<String>{
      ''details'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] done_type_info = new List<String>{
      ''done'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorStatusCode_type_info = new List<String>{
      ''errorStatusCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] ignoreWarnings_type_info = new List<String>{
      ''ignoreWarnings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lastModifiedDate_type_info = new List<String>{
      ''lastModifiedDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] numberComponentErrors_type_info = new List<String>{
      ''numberComponentErrors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numberComponentsDeployed_type_info = new List<String>{
      ''numberComponentsDeployed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numberComponentsTotal_type_info = new List<String>{
      ''numberComponentsTotal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numberTestErrors_type_info = new List<String>{
      ''numberTestErrors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numberTestsCompleted_type_info = new List<String>{
      ''numberTestsCompleted'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] numberTestsTotal_type_info = new List<String>{
      ''numberTestsTotal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] rollbackOnError_type_info = new List<String>{
      ''rollbackOnError'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] runTestsEnabled_type_info = new List<String>{
      ''runTestsEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] startDate_type_info = new List<String>{
      ''startDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] stateDetail_type_info = new List<String>{
      ''stateDetail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] status_type_info = new List<String>{
      ''status'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] success_type_info = new List<String>{
      ''success'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''canceledBy'',
      ''canceledByName'',
      ''checkOnly'',
      ''completedDate'',
      ''createdBy'',
      ''createdByName'',
      ''createdDate'',
      ''details'',
      ''done'',
      ''errorMessage'',
      ''errorStatusCode'',
      ''id'',
      ''ignoreWarnings'',
      ''lastModifiedDate'',
      ''numberComponentErrors'',
      ''numberComponentsDeployed'',
      ''numberComponentsTotal'',
      ''numberTestErrors'',
      ''numberTestsCompleted'',
      ''numberTestsTotal'',
      ''rollbackOnError'',
      ''runTestsEnabled'',
      ''startDate'',
      ''stateDetail'',
      ''status'',
      ''success''
    };
  }
  public class ProfileApexPageAccess {
    public String apexPage;
    public Boolean enabled;
    private String[] apexPage_type_info = new List<String>{
      ''apexPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apexPage'',
      ''enabled''
    };
  }
  public class Approver {
    public String name;
    public String type_x;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''type_x''
    };
  }
  public class LetterheadHeaderFooter {
    public String backgroundColor;
    public Integer height;
    public String horizontalAlignment;
    public String logo;
    public String verticalAlignment;
    private String[] backgroundColor_type_info = new List<String>{
      ''backgroundColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] horizontalAlignment_type_info = new List<String>{
      ''horizontalAlignment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logo_type_info = new List<String>{
      ''logo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] verticalAlignment_type_info = new List<String>{
      ''verticalAlignment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''backgroundColor'',
      ''height'',
      ''horizontalAlignment'',
      ''logo'',
      ''verticalAlignment''
    };
  }
  public class HomePageComponent extends Metadata {
    public String type = ''HomePageComponent'';
    public String fullName;
    public String body;
    public Integer height;
    public String[] links;
    public String page_x;
    public String pageComponentType;
    public Boolean showLabel;
    public Boolean showScrollbars;
    public String width;
    private String[] body_type_info = new List<String>{
      ''body'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] links_type_info = new List<String>{
      ''links'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pageComponentType_type_info = new List<String>{
      ''pageComponentType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] showLabel_type_info = new List<String>{
      ''showLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showScrollbars_type_info = new List<String>{
      ''showScrollbars'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''body'',
      ''height'',
      ''links'',
      ''page_x'',
      ''pageComponentType'',
      ''showLabel'',
      ''showScrollbars'',
      ''width''
    };
  }
  public class ProfileCustomPermissions {
    public Boolean enabled;
    public String name;
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabled'',
      ''name''
    };
  }
  public class LookupFilterTranslation {
    public String errorMessage;
    public String informationalMessage;
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] informationalMessage_type_info = new List<String>{
      ''informationalMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''errorMessage'',
      ''informationalMessage''
    };
  }
  public class SamlSsoConfig extends Metadata {
    public String type = ''SamlSsoConfig'';
    public String fullName;
    public String attributeName;
    public String attributeNameIdFormat;
    public String decryptionCertificate;
    public String errorUrl;
    public String executionUserId;
    public String identityLocation;
    public String identityMapping;
    public String issuer;
    public String loginUrl;
    public String logoutUrl;
    public String name;
    public String oauthTokenEndpoint;
    public Boolean redirectBinding;
    public String requestSignatureMethod;
    public String salesforceLoginUrl;
    public String samlEntityId;
    public String samlJitHandlerId;
    public String samlVersion;
    public Boolean userProvisioning;
    public String validationCert;
    private String[] attributeName_type_info = new List<String>{
      ''attributeName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] attributeNameIdFormat_type_info = new List<String>{
      ''attributeNameIdFormat'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] decryptionCertificate_type_info = new List<String>{
      ''decryptionCertificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorUrl_type_info = new List<String>{
      ''errorUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] executionUserId_type_info = new List<String>{
      ''executionUserId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] identityLocation_type_info = new List<String>{
      ''identityLocation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] identityMapping_type_info = new List<String>{
      ''identityMapping'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] issuer_type_info = new List<String>{
      ''issuer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] loginUrl_type_info = new List<String>{
      ''loginUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logoutUrl_type_info = new List<String>{
      ''logoutUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] oauthTokenEndpoint_type_info = new List<String>{
      ''oauthTokenEndpoint'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] redirectBinding_type_info = new List<String>{
      ''redirectBinding'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] requestSignatureMethod_type_info = new List<String>{
      ''requestSignatureMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] salesforceLoginUrl_type_info = new List<String>{
      ''salesforceLoginUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] samlEntityId_type_info = new List<String>{
      ''samlEntityId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] samlJitHandlerId_type_info = new List<String>{
      ''samlJitHandlerId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] samlVersion_type_info = new List<String>{
      ''samlVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] userProvisioning_type_info = new List<String>{
      ''userProvisioning'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] validationCert_type_info = new List<String>{
      ''validationCert'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''attributeName'',
      ''attributeNameIdFormat'',
      ''decryptionCertificate'',
      ''errorUrl'',
      ''executionUserId'',
      ''identityLocation'',
      ''identityMapping'',
      ''issuer'',
      ''loginUrl'',
      ''logoutUrl'',
      ''name'',
      ''oauthTokenEndpoint'',
      ''redirectBinding'',
      ''requestSignatureMethod'',
      ''salesforceLoginUrl'',
      ''samlEntityId'',
      ''samlJitHandlerId'',
      ''samlVersion'',
      ''userProvisioning'',
      ''validationCert''
    };
  }
  public class RecordTypeTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class deployRecentValidation_element {
    public String validationId;
    private String[] validationId_type_info = new List<String>{
      ''validationId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''validationId'' };
  }
  public class WorkflowFlowAction {
    public String description;
    public String flow;
    public MetadataService.WorkflowFlowActionParameter[] flowInputs;
    public String label;
    public String language;
    public Boolean protected_x;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] flow_type_info = new List<String>{
      ''flow'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] flowInputs_type_info = new List<String>{
      ''flowInputs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''flow'',
      ''flowInputs'',
      ''label'',
      ''language'',
      ''protected_x''
    };
  }
  public class ActionLinkTemplate {
    public String actionUrl;
    public String headers;
    public Boolean isConfirmationRequired;
    public Boolean isGroupDefault;
    public String label;
    public String labelKey;
    public String linkType;
    public String method;
    public Integer position;
    public String requestBody;
    public String userAlias;
    public String userVisibility;
    private String[] actionUrl_type_info = new List<String>{
      ''actionUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] headers_type_info = new List<String>{
      ''headers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isConfirmationRequired_type_info = new List<String>{
      ''isConfirmationRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isGroupDefault_type_info = new List<String>{
      ''isGroupDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] labelKey_type_info = new List<String>{
      ''labelKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] linkType_type_info = new List<String>{
      ''linkType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] method_type_info = new List<String>{
      ''method'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] position_type_info = new List<String>{
      ''position'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] requestBody_type_info = new List<String>{
      ''requestBody'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userAlias_type_info = new List<String>{
      ''userAlias'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userVisibility_type_info = new List<String>{
      ''userVisibility'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''actionUrl'',
      ''headers'',
      ''isConfirmationRequired'',
      ''isGroupDefault'',
      ''label'',
      ''labelKey'',
      ''linkType'',
      ''method'',
      ''position'',
      ''requestBody'',
      ''userAlias'',
      ''userVisibility''
    };
  }
  public class MobileSettings extends Metadata {
    public String type = ''MobileSettings'';
    public String fullName;
    public MetadataService.ChatterMobileSettings chatterMobile;
    public MetadataService.DashboardMobileSettings dashboardMobile;
    public MetadataService.SFDCMobileSettings salesforceMobile;
    public MetadataService.TouchMobileSettings touchMobile;
    private String[] chatterMobile_type_info = new List<String>{
      ''chatterMobile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dashboardMobile_type_info = new List<String>{
      ''dashboardMobile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] salesforceMobile_type_info = new List<String>{
      ''salesforceMobile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] touchMobile_type_info = new List<String>{
      ''touchMobile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''chatterMobile'',
      ''dashboardMobile'',
      ''salesforceMobile'',
      ''touchMobile''
    };
  }
  public class PersonListSettings {
    public Boolean enablePersonList;
    private String[] enablePersonList_type_info = new List<String>{
      ''enablePersonList'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enablePersonList''
    };
  }
  public class SharingTerritoryRule extends SharingBaseRule {
    public String type = ''SharingTerritoryRule'';
    public String fullName;
    public String accessLevel;
    public MetadataService.AccountSharingRuleSettings accountSettings;
    public String description;
    public String label;
    public MetadataService.SharedTo sharedTo;
    private String[] accessLevel_type_info = new List<String>{
      ''accessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] accountSettings_type_info = new List<String>{
      ''accountSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessLevel'',
      ''accountSettings'',
      ''description'',
      ''label'',
      ''sharedTo''
    };
  }
  public class FlowFormula {
    public String dataType;
    public String expression;
    public Integer scale;
    private String[] dataType_type_info = new List<String>{
      ''dataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] expression_type_info = new List<String>{
      ''expression'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] scale_type_info = new List<String>{
      ''scale'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dataType'',
      ''expression'',
      ''scale''
    };
  }
  public class EscalationRules extends Metadata {
    public String type = ''EscalationRules'';
    public String fullName;
    public MetadataService.EscalationRule[] escalationRule;
    private String[] escalationRule_type_info = new List<String>{
      ''escalationRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''escalationRule''
    };
  }
  public class ApprovalSubmitter {
    public String submitter;
    public String type_x;
    private String[] submitter_type_info = new List<String>{
      ''submitter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''submitter'',
      ''type_x''
    };
  }
  public class AgentConfigButtons {
    public String[] button;
    private String[] button_type_info = new List<String>{
      ''button'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''button'' };
  }
  public class PicklistValueTranslation {
    public String masterLabel;
    public String translation;
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] translation_type_info = new List<String>{
      ''translation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''masterLabel'',
      ''translation''
    };
  }
  public class CustomDataType extends Metadata {
    public String type = ''CustomDataType'';
    public String fullName;
    public MetadataService.CustomDataTypeComponent[] customDataTypeComponents;
    public String description;
    public String displayFormula;
    public Boolean editComponentsOnSeparateLines;
    public String label;
    public Boolean rightAligned;
    public Boolean supportComponentsInReports;
    private String[] customDataTypeComponents_type_info = new List<String>{
      ''customDataTypeComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayFormula_type_info = new List<String>{
      ''displayFormula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] editComponentsOnSeparateLines_type_info = new List<String>{
      ''editComponentsOnSeparateLines'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] rightAligned_type_info = new List<String>{
      ''rightAligned'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] supportComponentsInReports_type_info = new List<String>{
      ''supportComponentsInReports'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''customDataTypeComponents'',
      ''description'',
      ''displayFormula'',
      ''editComponentsOnSeparateLines'',
      ''label'',
      ''rightAligned'',
      ''supportComponentsInReports''
    };
  }
  public class PrimaryTabComponents {
    public MetadataService.Container[] containers;
    private String[] containers_type_info = new List<String>{
      ''containers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''containers'' };
  }
  public class AgentConfigSkills {
    public String[] skill;
    private String[] skill_type_info = new List<String>{
      ''skill'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''skill'' };
  }
  public class EntitlementProcess extends Metadata {
    public String type = ''EntitlementProcess'';
    public String fullName;
    public Boolean active;
    public String businessHours;
    public String description;
    public String entryStartDateField;
    public String exitCriteriaBooleanFilter;
    public MetadataService.FilterItem[] exitCriteriaFilterItems;
    public String exitCriteriaFormula;
    public Boolean isVersionDefault;
    public MetadataService.EntitlementProcessMilestoneItem[] milestones;
    public String name;
    public String versionMaster;
    public String versionNotes;
    public Integer versionNumber;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] businessHours_type_info = new List<String>{
      ''businessHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entryStartDateField_type_info = new List<String>{
      ''entryStartDateField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] exitCriteriaBooleanFilter_type_info = new List<String>{
      ''exitCriteriaBooleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] exitCriteriaFilterItems_type_info = new List<String>{
      ''exitCriteriaFilterItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] exitCriteriaFormula_type_info = new List<String>{
      ''exitCriteriaFormula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isVersionDefault_type_info = new List<String>{
      ''isVersionDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] milestones_type_info = new List<String>{
      ''milestones'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] versionMaster_type_info = new List<String>{
      ''versionMaster'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] versionNotes_type_info = new List<String>{
      ''versionNotes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] versionNumber_type_info = new List<String>{
      ''versionNumber'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''businessHours'',
      ''description'',
      ''entryStartDateField'',
      ''exitCriteriaBooleanFilter'',
      ''exitCriteriaFilterItems'',
      ''exitCriteriaFormula'',
      ''isVersionDefault'',
      ''milestones'',
      ''name'',
      ''versionMaster'',
      ''versionNotes'',
      ''versionNumber''
    };
  }
  public class RecordType extends Metadata {
    public String type = ''RecordType'';
    public String fullName;
    public Boolean active;
    public String businessProcess;
    public String compactLayoutAssignment;
    public String description;
    public String label;
    public MetadataService.RecordTypePicklistValue[] picklistValues;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] businessProcess_type_info = new List<String>{
      ''businessProcess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] compactLayoutAssignment_type_info = new List<String>{
      ''compactLayoutAssignment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] picklistValues_type_info = new List<String>{
      ''picklistValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''businessProcess'',
      ''compactLayoutAssignment'',
      ''description'',
      ''label'',
      ''picklistValues''
    };
  }
  public class FilterItem {
    public String field;
    public String operation;
    public String value;
    public String valueField;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operation_type_info = new List<String>{
      ''operation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] valueField_type_info = new List<String>{
      ''valueField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''operation'',
      ''value'',
      ''valueField''
    };
  }
  public class Profile extends Metadata {
    public String type = ''Profile'';
    public String fullName;
    public MetadataService.ProfileApplicationVisibility[] applicationVisibilities;
    public MetadataService.ProfileApexClassAccess[] classAccesses;
    public Boolean custom;
    public MetadataService.ProfileCustomPermissions[] customPermissions;
    public String description;
    public MetadataService.ProfileExternalDataSourceAccess[] externalDataSourceAccesses;
    public MetadataService.ProfileFieldLevelSecurity[] fieldPermissions;
    public MetadataService.ProfileLayoutAssignment[] layoutAssignments;
    public MetadataService.ProfileLoginHours loginHours;
    public MetadataService.ProfileLoginIpRange[] loginIpRanges;
    public MetadataService.ProfileObjectPermissions[] objectPermissions;
    public MetadataService.ProfileApexPageAccess[] pageAccesses;
    public MetadataService.ProfileRecordTypeVisibility[] recordTypeVisibilities;
    public MetadataService.ProfileTabVisibility[] tabVisibilities;
    public String userLicense;
    public MetadataService.ProfileUserPermission[] userPermissions;
    private String[] applicationVisibilities_type_info = new List<String>{
      ''applicationVisibilities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] classAccesses_type_info = new List<String>{
      ''classAccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] custom_type_info = new List<String>{
      ''custom'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customPermissions_type_info = new List<String>{
      ''customPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalDataSourceAccesses_type_info = new List<String>{
      ''externalDataSourceAccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fieldPermissions_type_info = new List<String>{
      ''fieldPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] layoutAssignments_type_info = new List<String>{
      ''layoutAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] loginHours_type_info = new List<String>{
      ''loginHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] loginIpRanges_type_info = new List<String>{
      ''loginIpRanges'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] objectPermissions_type_info = new List<String>{
      ''objectPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] pageAccesses_type_info = new List<String>{
      ''pageAccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordTypeVisibilities_type_info = new List<String>{
      ''recordTypeVisibilities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] tabVisibilities_type_info = new List<String>{
      ''tabVisibilities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] userLicense_type_info = new List<String>{
      ''userLicense'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userPermissions_type_info = new List<String>{
      ''userPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''applicationVisibilities'',
      ''classAccesses'',
      ''custom'',
      ''customPermissions'',
      ''description'',
      ''externalDataSourceAccesses'',
      ''fieldPermissions'',
      ''layoutAssignments'',
      ''loginHours'',
      ''loginIpRanges'',
      ''objectPermissions'',
      ''pageAccesses'',
      ''recordTypeVisibilities'',
      ''tabVisibilities'',
      ''userLicense'',
      ''userPermissions''
    };
  }
  public class ConnectedApp extends Metadata {
    public String type = ''ConnectedApp'';
    public String fullName;
    public MetadataService.ConnectedAppAttribute[] attributes;
    public MetadataService.ConnectedAppCanvasConfig canvasConfig;
    public String contactEmail;
    public String contactPhone;
    public String description;
    public String iconUrl;
    public String infoUrl;
    public MetadataService.ConnectedAppIpRange[] ipRanges;
    public String label;
    public String logoUrl;
    public MetadataService.ConnectedAppMobileDetailConfig mobileAppConfig;
    public String mobileStartUrl;
    public MetadataService.ConnectedAppOauthConfig oauthConfig;
    public MetadataService.ConnectedAppSamlConfig samlConfig;
    public String startUrl;
    private String[] attributes_type_info = new List<String>{
      ''attributes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] canvasConfig_type_info = new List<String>{
      ''canvasConfig'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] contactEmail_type_info = new List<String>{
      ''contactEmail'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] contactPhone_type_info = new List<String>{
      ''contactPhone'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] iconUrl_type_info = new List<String>{
      ''iconUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] infoUrl_type_info = new List<String>{
      ''infoUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ipRanges_type_info = new List<String>{
      ''ipRanges'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] logoUrl_type_info = new List<String>{
      ''logoUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mobileAppConfig_type_info = new List<String>{
      ''mobileAppConfig'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mobileStartUrl_type_info = new List<String>{
      ''mobileStartUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] oauthConfig_type_info = new List<String>{
      ''oauthConfig'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] samlConfig_type_info = new List<String>{
      ''samlConfig'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] startUrl_type_info = new List<String>{
      ''startUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''attributes'',
      ''canvasConfig'',
      ''contactEmail'',
      ''contactPhone'',
      ''description'',
      ''iconUrl'',
      ''infoUrl'',
      ''ipRanges'',
      ''label'',
      ''logoUrl'',
      ''mobileAppConfig'',
      ''mobileStartUrl'',
      ''oauthConfig'',
      ''samlConfig'',
      ''startUrl''
    };
  }
  public class ReportFilter {
    public String booleanFilter;
    public MetadataService.ReportFilterItem[] criteriaItems;
    public String language;
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criteriaItems_type_info = new List<String>{
      ''criteriaItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''booleanFilter'',
      ''criteriaItems'',
      ''language''
    };
  }
  public class Layout extends Metadata {
    public String type = ''Layout'';
    public String fullName;
    public String[] customButtons;
    public MetadataService.CustomConsoleComponents customConsoleComponents;
    public Boolean emailDefault;
    public String[] excludeButtons;
    public MetadataService.FeedLayout feedLayout;
    public String[] headers;
    public MetadataService.LayoutSection[] layoutSections;
    public MetadataService.MiniLayout miniLayout;
    public String[] multilineLayoutFields;
    public MetadataService.PlatformActionList platformActionList;
    public MetadataService.QuickActionList quickActionList;
    public MetadataService.RelatedContent relatedContent;
    public MetadataService.RelatedListItem[] relatedLists;
    public String[] relatedObjects;
    public Boolean runAssignmentRulesDefault;
    public Boolean showEmailCheckbox;
    public Boolean showHighlightsPanel;
    public Boolean showInteractionLogPanel;
    public Boolean showKnowledgeComponent;
    public Boolean showRunAssignmentRulesCheckbox;
    public Boolean showSolutionSection;
    public Boolean showSubmitAndAttachButton;
    public MetadataService.SummaryLayout summaryLayout;
    private String[] customButtons_type_info = new List<String>{
      ''customButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customConsoleComponents_type_info = new List<String>{
      ''customConsoleComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailDefault_type_info = new List<String>{
      ''emailDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] excludeButtons_type_info = new List<String>{
      ''excludeButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] feedLayout_type_info = new List<String>{
      ''feedLayout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] headers_type_info = new List<String>{
      ''headers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] layoutSections_type_info = new List<String>{
      ''layoutSections'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] miniLayout_type_info = new List<String>{
      ''miniLayout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] multilineLayoutFields_type_info = new List<String>{
      ''multilineLayoutFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] platformActionList_type_info = new List<String>{
      ''platformActionList'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] quickActionList_type_info = new List<String>{
      ''quickActionList'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] relatedContent_type_info = new List<String>{
      ''relatedContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] relatedLists_type_info = new List<String>{
      ''relatedLists'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] relatedObjects_type_info = new List<String>{
      ''relatedObjects'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] runAssignmentRulesDefault_type_info = new List<String>{
      ''runAssignmentRulesDefault'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showEmailCheckbox_type_info = new List<String>{
      ''showEmailCheckbox'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showHighlightsPanel_type_info = new List<String>{
      ''showHighlightsPanel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showInteractionLogPanel_type_info = new List<String>{
      ''showInteractionLogPanel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showKnowledgeComponent_type_info = new List<String>{
      ''showKnowledgeComponent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showRunAssignmentRulesCheckbox_type_info = new List<String>{
      ''showRunAssignmentRulesCheckbox'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showSolutionSection_type_info = new List<String>{
      ''showSolutionSection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showSubmitAndAttachButton_type_info = new List<String>{
      ''showSubmitAndAttachButton'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryLayout_type_info = new List<String>{
      ''summaryLayout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''customButtons'',
      ''customConsoleComponents'',
      ''emailDefault'',
      ''excludeButtons'',
      ''feedLayout'',
      ''headers'',
      ''layoutSections'',
      ''miniLayout'',
      ''multilineLayoutFields'',
      ''platformActionList'',
      ''quickActionList'',
      ''relatedContent'',
      ''relatedLists'',
      ''relatedObjects'',
      ''runAssignmentRulesDefault'',
      ''showEmailCheckbox'',
      ''showHighlightsPanel'',
      ''showInteractionLogPanel'',
      ''showKnowledgeComponent'',
      ''showRunAssignmentRulesCheckbox'',
      ''showSolutionSection'',
      ''showSubmitAndAttachButton'',
      ''summaryLayout''
    };
  }
  public class KeyboardShortcuts {
    public MetadataService.CustomShortcut[] customShortcut;
    public MetadataService.DefaultShortcut[] defaultShortcut;
    private String[] customShortcut_type_info = new List<String>{
      ''customShortcut'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] defaultShortcut_type_info = new List<String>{
      ''defaultShortcut'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customShortcut'',
      ''defaultShortcut''
    };
  }
  public class WebLink extends Metadata {
    public String type = ''WebLink'';
    public String fullName;
    public String availability;
    public String description;
    public String displayType;
    public String encodingKey;
    public Boolean hasMenubar;
    public Boolean hasScrollbars;
    public Boolean hasToolbar;
    public Integer height;
    public Boolean isResizable;
    public String linkType;
    public String masterLabel;
    public String openType;
    public String page_x;
    public String position;
    public Boolean protected_x;
    public Boolean requireRowSelection;
    public String scontrol;
    public Boolean showsLocation;
    public Boolean showsStatus;
    public String url;
    public Integer width;
    private String[] availability_type_info = new List<String>{
      ''availability'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayType_type_info = new List<String>{
      ''displayType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] encodingKey_type_info = new List<String>{
      ''encodingKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasMenubar_type_info = new List<String>{
      ''hasMenubar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasScrollbars_type_info = new List<String>{
      ''hasScrollbars'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasToolbar_type_info = new List<String>{
      ''hasToolbar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isResizable_type_info = new List<String>{
      ''isResizable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] linkType_type_info = new List<String>{
      ''linkType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] openType_type_info = new List<String>{
      ''openType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] position_type_info = new List<String>{
      ''position'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] requireRowSelection_type_info = new List<String>{
      ''requireRowSelection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scontrol_type_info = new List<String>{
      ''scontrol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showsLocation_type_info = new List<String>{
      ''showsLocation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showsStatus_type_info = new List<String>{
      ''showsStatus'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] url_type_info = new List<String>{
      ''url'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''availability'',
      ''description'',
      ''displayType'',
      ''encodingKey'',
      ''hasMenubar'',
      ''hasScrollbars'',
      ''hasToolbar'',
      ''height'',
      ''isResizable'',
      ''linkType'',
      ''masterLabel'',
      ''openType'',
      ''page_x'',
      ''position'',
      ''protected_x'',
      ''requireRowSelection'',
      ''scontrol'',
      ''showsLocation'',
      ''showsStatus'',
      ''url'',
      ''width''
    };
  }
  public class ApprovalStep {
    public Boolean allowDelegate;
    public MetadataService.ApprovalAction approvalActions;
    public MetadataService.ApprovalStepApprover assignedApprover;
    public String description;
    public MetadataService.ApprovalEntryCriteria entryCriteria;
    public String ifCriteriaNotMet;
    public String label;
    public String name;
    public MetadataService.ApprovalStepRejectBehavior rejectBehavior;
    public MetadataService.ApprovalAction rejectionActions;
    private String[] allowDelegate_type_info = new List<String>{
      ''allowDelegate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] approvalActions_type_info = new List<String>{
      ''approvalActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assignedApprover_type_info = new List<String>{
      ''assignedApprover'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entryCriteria_type_info = new List<String>{
      ''entryCriteria'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ifCriteriaNotMet_type_info = new List<String>{
      ''ifCriteriaNotMet'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] rejectBehavior_type_info = new List<String>{
      ''rejectBehavior'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] rejectionActions_type_info = new List<String>{
      ''rejectionActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''allowDelegate'',
      ''approvalActions'',
      ''assignedApprover'',
      ''description'',
      ''entryCriteria'',
      ''ifCriteriaNotMet'',
      ''label'',
      ''name'',
      ''rejectBehavior'',
      ''rejectionActions''
    };
  }
  public class ObjectNameCaseValue {
    public String article;
    public String caseType;
    public Boolean plural;
    public String possessive;
    public String value;
    private String[] article_type_info = new List<String>{
      ''article'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseType_type_info = new List<String>{
      ''caseType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] plural_type_info = new List<String>{
      ''plural'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] possessive_type_info = new List<String>{
      ''possessive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''article'',
      ''caseType'',
      ''plural'',
      ''possessive'',
      ''value''
    };
  }
  public class ChannelLayoutItem {
    public String field;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''field'' };
  }
  public class upsertMetadataResponse_element {
    public MetadataService.UpsertResult[] result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class CustomDataTypeTranslation {
    public MetadataService.CustomDataTypeComponentTranslation[] components;
    public String customDataTypeName;
    public String description;
    public String label;
    private String[] components_type_info = new List<String>{
      ''components'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customDataTypeName_type_info = new List<String>{
      ''customDataTypeName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''components'',
      ''customDataTypeName'',
      ''description'',
      ''label''
    };
  }
  public class SiteDotCom extends MetadataWithContent {
    public String type = ''SiteDotCom'';
    public String fullName;
    public String content;
    public String label;
    public String siteType;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] siteType_type_info = new List<String>{
      ''siteType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''label'',
      ''siteType''
    };
  }
  public class PlatformActionList extends Metadata {
    public String type = ''PlatformActionList'';
    public String fullName;
    public String actionListContext;
    public MetadataService.PlatformActionListItem[] platformActionListItems;
    public String relatedSourceEntity;
    private String[] actionListContext_type_info = new List<String>{
      ''actionListContext'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] platformActionListItems_type_info = new List<String>{
      ''platformActionListItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] relatedSourceEntity_type_info = new List<String>{
      ''relatedSourceEntity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''actionListContext'',
      ''platformActionListItems'',
      ''relatedSourceEntity''
    };
  }
  public class PlatformActionListItem {
    public String actionName;
    public String actionType;
    public Integer sortOrder;
    public String subtype;
    private String[] actionName_type_info = new List<String>{
      ''actionName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] actionType_type_info = new List<String>{
      ''actionType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] subtype_type_info = new List<String>{
      ''subtype'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''actionName'',
      ''actionType'',
      ''sortOrder'',
      ''subtype''
    };
  }
  public class CallOptions_element {
    public String client;
    private String[] client_type_info = new List<String>{
      ''client'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''client'' };
  }
  public class AgentConfigAssignments {
    public MetadataService.AgentConfigProfileAssignments profiles;
    public MetadataService.AgentConfigUserAssignments users;
    private String[] profiles_type_info = new List<String>{
      ''profiles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] users_type_info = new List<String>{
      ''users'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''profiles'',
      ''users''
    };
  }
  public class createMetadataResponse_element {
    public MetadataService.SaveResult[] result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class CustomFieldTranslation {
    public MetadataService.ObjectNameCaseValue[] caseValues;
    public String gender;
    public String help;
    public String label;
    public MetadataService.LookupFilterTranslation lookupFilter;
    public String name;
    public MetadataService.PicklistValueTranslation[] picklistValues;
    public String relationshipLabel;
    public String startsWith;
    private String[] caseValues_type_info = new List<String>{
      ''caseValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] gender_type_info = new List<String>{
      ''gender'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] help_type_info = new List<String>{
      ''help'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lookupFilter_type_info = new List<String>{
      ''lookupFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] picklistValues_type_info = new List<String>{
      ''picklistValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] relationshipLabel_type_info = new List<String>{
      ''relationshipLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] startsWith_type_info = new List<String>{
      ''startsWith'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''caseValues'',
      ''gender'',
      ''help'',
      ''label'',
      ''lookupFilter'',
      ''name'',
      ''picklistValues'',
      ''relationshipLabel'',
      ''startsWith''
    };
  }
  public class updateMetadata_element {
    public MetadataService.Metadata[] metadata;
    private String[] metadata_type_info = new List<String>{
      ''metadata'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''metadata'' };
  }
  public class AnalyticSnapshot extends Metadata {
    public String type = ''AnalyticSnapshot'';
    public String fullName;
    public String description;
    public String groupColumn;
    public MetadataService.AnalyticSnapshotMapping[] mappings;
    public String name;
    public String runningUser;
    public String sourceReport;
    public String targetObject;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] groupColumn_type_info = new List<String>{
      ''groupColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mappings_type_info = new List<String>{
      ''mappings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] runningUser_type_info = new List<String>{
      ''runningUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sourceReport_type_info = new List<String>{
      ''sourceReport'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] targetObject_type_info = new List<String>{
      ''targetObject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''groupColumn'',
      ''mappings'',
      ''name'',
      ''runningUser'',
      ''sourceReport'',
      ''targetObject''
    };
  }
  public class LookupFilter {
    public Boolean active;
    public String booleanFilter;
    public String description;
    public String errorMessage;
    public MetadataService.FilterItem[] filterItems;
    public String infoMessage;
    public Boolean isOptional;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filterItems_type_info = new List<String>{
      ''filterItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] infoMessage_type_info = new List<String>{
      ''infoMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isOptional_type_info = new List<String>{
      ''isOptional'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''booleanFilter'',
      ''description'',
      ''errorMessage'',
      ''filterItems'',
      ''infoMessage'',
      ''isOptional''
    };
  }
  public class AllOrNoneHeader_element {
    public Boolean allOrNone;
    private String[] allOrNone_type_info = new List<String>{
      ''allOrNone'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''allOrNone'' };
  }
  public class PersonalJourneySettings extends Metadata {
    public String type = ''PersonalJourneySettings'';
    public String fullName;
    public Boolean enableExactTargetForSalesforceApps;
    private String[] enableExactTargetForSalesforceApps_type_info = new List<String>{
      ''enableExactTargetForSalesforceApps'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableExactTargetForSalesforceApps''
    };
  }
  public class ScontrolTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class ReportColumn {
    public String[] aggregateTypes;
    public String field;
    public Boolean reverseColors;
    public Boolean showChanges;
    private String[] aggregateTypes_type_info = new List<String>{
      ''aggregateTypes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] reverseColors_type_info = new List<String>{
      ''reverseColors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showChanges_type_info = new List<String>{
      ''showChanges'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregateTypes'',
      ''field'',
      ''reverseColors'',
      ''showChanges''
    };
  }
  public class QuickAction extends Metadata {
    public String type = ''QuickAction'';
    public String fullName;
    public String canvas;
    public String description;
    public MetadataService.FieldOverride[] fieldOverrides;
    public Integer height;
    public String icon;
    public Boolean isProtected;
    public String label;
    public String page_x;
    public MetadataService.QuickActionLayout quickActionLayout;
    public String standardLabel;
    public String targetObject;
    public String targetParentField;
    public String targetRecordType;
    public String type_x;
    public Integer width;
    private String[] canvas_type_info = new List<String>{
      ''canvas'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fieldOverrides_type_info = new List<String>{
      ''fieldOverrides'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] icon_type_info = new List<String>{
      ''icon'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isProtected_type_info = new List<String>{
      ''isProtected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] quickActionLayout_type_info = new List<String>{
      ''quickActionLayout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] standardLabel_type_info = new List<String>{
      ''standardLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] targetObject_type_info = new List<String>{
      ''targetObject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] targetParentField_type_info = new List<String>{
      ''targetParentField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] targetRecordType_type_info = new List<String>{
      ''targetRecordType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''canvas'',
      ''description'',
      ''fieldOverrides'',
      ''height'',
      ''icon'',
      ''isProtected'',
      ''label'',
      ''page_x'',
      ''quickActionLayout'',
      ''standardLabel'',
      ''targetObject'',
      ''targetParentField'',
      ''targetRecordType'',
      ''type_x'',
      ''width''
    };
  }
  public class DefaultShortcut {
    public String action;
    public Boolean active;
    public String keyCommand;
    private String[] action_type_info = new List<String>{
      ''action'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] keyCommand_type_info = new List<String>{
      ''keyCommand'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''action'',
      ''active'',
      ''keyCommand''
    };
  }
  public class ApexComponent extends MetadataWithContent {
    public String type = ''ApexComponent'';
    public String fullName;
    public String content;
    public Double apiVersion;
    public String description;
    public String label;
    public MetadataService.PackageVersion[] packageVersions;
    private String[] apiVersion_type_info = new List<String>{
      ''apiVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] packageVersions_type_info = new List<String>{
      ''packageVersions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] content_type_info = new List<String>{
      ''content'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''base64Binary'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''content'',
      ''apiVersion'',
      ''description'',
      ''label'',
      ''packageVersions''
    };
  }
  public class updateMetadataResponse_element {
    public MetadataService.SaveResult[] result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class WorkflowKnowledgePublish extends WorkflowAction {
    public String type = ''WorkflowKnowledgePublish'';
    public String fullName;
    public String action;
    public String description;
    public String label;
    public String language;
    public Boolean protected_x;
    private String[] action_type_info = new List<String>{
      ''action'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''action'',
      ''description'',
      ''label'',
      ''language'',
      ''protected_x''
    };
  }
  public class FlexiPage extends Metadata {
    public String type = ''FlexiPage'';
    public String fullName;
    public String description;
    public MetadataService.FlexiPageRegion[] flexiPageRegions;
    public String masterLabel;
    public String pageTemplate;
    public MetadataService.PlatformActionList platformActionlist;
    public MetadataService.QuickActionList quickActionList;
    public String sobjectType;
    public String type_x;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] flexiPageRegions_type_info = new List<String>{
      ''flexiPageRegions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] pageTemplate_type_info = new List<String>{
      ''pageTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] platformActionlist_type_info = new List<String>{
      ''platformActionlist'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] quickActionList_type_info = new List<String>{
      ''quickActionList'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sobjectType_type_info = new List<String>{
      ''sobjectType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''flexiPageRegions'',
      ''masterLabel'',
      ''pageTemplate'',
      ''platformActionlist'',
      ''quickActionList'',
      ''sobjectType'',
      ''type_x''
    };
  }
  public class ConnectedAppSamlConfig {
    public String acsUrl;
    public String certificate;
    public String encryptionCertificate;
    public String encryptionType;
    public String entityUrl;
    public String issuer;
    public String samlNameIdFormat;
    public String samlSubjectCustomAttr;
    public String samlSubjectType;
    private String[] acsUrl_type_info = new List<String>{
      ''acsUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] certificate_type_info = new List<String>{
      ''certificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] encryptionCertificate_type_info = new List<String>{
      ''encryptionCertificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] encryptionType_type_info = new List<String>{
      ''encryptionType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entityUrl_type_info = new List<String>{
      ''entityUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] issuer_type_info = new List<String>{
      ''issuer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] samlNameIdFormat_type_info = new List<String>{
      ''samlNameIdFormat'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] samlSubjectCustomAttr_type_info = new List<String>{
      ''samlSubjectCustomAttr'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] samlSubjectType_type_info = new List<String>{
      ''samlSubjectType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''acsUrl'',
      ''certificate'',
      ''encryptionCertificate'',
      ''encryptionType'',
      ''entityUrl'',
      ''issuer'',
      ''samlNameIdFormat'',
      ''samlSubjectCustomAttr'',
      ''samlSubjectType''
    };
  }
  public class FlowWait {
    public MetadataService.FlowConnector defaultConnector;
    public String defaultConnectorLabel;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowWaitEvent[] waitEvents;
    private String[] defaultConnector_type_info = new List<String>{
      ''defaultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultConnectorLabel_type_info = new List<String>{
      ''defaultConnectorLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] waitEvents_type_info = new List<String>{
      ''waitEvents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''defaultConnector'',
      ''defaultConnectorLabel'',
      ''faultConnector'',
      ''waitEvents''
    };
  }
  public class createMetadata_element {
    public MetadataService.Metadata[] metadata;
    private String[] metadata_type_info = new List<String>{
      ''metadata'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''metadata'' };
  }
  public class Workflow extends Metadata {
    public String type = ''Workflow'';
    public String fullName;
    public MetadataService.WorkflowAlert[] alerts;
    public MetadataService.WorkflowFieldUpdate[] fieldUpdates;
    public MetadataService.WorkflowFlowAction[] flowActions;
    public MetadataService.WorkflowKnowledgePublish[] knowledgePublishes;
    public MetadataService.WorkflowOutboundMessage[] outboundMessages;
    public MetadataService.WorkflowRule[] rules;
    public MetadataService.WorkflowSend[] send;
    public MetadataService.WorkflowTask[] tasks;
    private String[] alerts_type_info = new List<String>{
      ''alerts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fieldUpdates_type_info = new List<String>{
      ''fieldUpdates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] flowActions_type_info = new List<String>{
      ''flowActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] knowledgePublishes_type_info = new List<String>{
      ''knowledgePublishes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] outboundMessages_type_info = new List<String>{
      ''outboundMessages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] rules_type_info = new List<String>{
      ''rules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] send_type_info = new List<String>{
      ''send'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] tasks_type_info = new List<String>{
      ''tasks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''alerts'',
      ''fieldUpdates'',
      ''flowActions'',
      ''knowledgePublishes'',
      ''outboundMessages'',
      ''rules'',
      ''send'',
      ''tasks''
    };
  }
  public class AddressSettings extends Metadata {
    public String type = ''AddressSettings'';
    public String fullName;
    public MetadataService.CountriesAndStates countriesAndStates;
    private String[] countriesAndStates_type_info = new List<String>{
      ''countriesAndStates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''countriesAndStates''
    };
  }
  public class LicenseDefinition extends Metadata {
    public String type = ''LicenseDefinition'';
    public String fullName;
    public String aggregationGroup;
    public String description;
    public Boolean isPublished;
    public String label;
    public MetadataService.LicensedCustomPermissions[] licensedCustomPermissions;
    public String licensingAuthority;
    public String licensingAuthorityProvider;
    public Integer minPlatformVersion;
    public String origin;
    public Integer revision;
    public Integer trialLicenseDuration;
    public Integer trialLicenseQuantity;
    private String[] aggregationGroup_type_info = new List<String>{
      ''aggregationGroup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isPublished_type_info = new List<String>{
      ''isPublished'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] licensedCustomPermissions_type_info = new List<String>{
      ''licensedCustomPermissions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] licensingAuthority_type_info = new List<String>{
      ''licensingAuthority'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] licensingAuthorityProvider_type_info = new List<String>{
      ''licensingAuthorityProvider'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] minPlatformVersion_type_info = new List<String>{
      ''minPlatformVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] origin_type_info = new List<String>{
      ''origin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] revision_type_info = new List<String>{
      ''revision'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] trialLicenseDuration_type_info = new List<String>{
      ''trialLicenseDuration'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] trialLicenseQuantity_type_info = new List<String>{
      ''trialLicenseQuantity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''aggregationGroup'',
      ''description'',
      ''isPublished'',
      ''label'',
      ''licensedCustomPermissions'',
      ''licensingAuthority'',
      ''licensingAuthorityProvider'',
      ''minPlatformVersion'',
      ''origin'',
      ''revision'',
      ''trialLicenseDuration'',
      ''trialLicenseQuantity''
    };
  }
  public class FlowChoice {
    public String choiceText;
    public String dataType;
    public MetadataService.FlowChoiceUserInput userInput;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] choiceText_type_info = new List<String>{
      ''choiceText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] dataType_type_info = new List<String>{
      ''dataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] userInput_type_info = new List<String>{
      ''userInput'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''choiceText'',
      ''dataType'',
      ''userInput'',
      ''value''
    };
  }
  public class ProfileExternalDataSourceAccess {
    public Boolean enabled;
    public String externalDataSource;
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] externalDataSource_type_info = new List<String>{
      ''externalDataSource'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabled'',
      ''externalDataSource''
    };
  }
  public class FeedLayoutComponent {
    public String componentType;
    public Integer height;
    public String page_x;
    private String[] componentType_type_info = new List<String>{
      ''componentType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''componentType'',
      ''height'',
      ''page_x''
    };
  }
  public class Territory2Settings extends Metadata {
    public String type = ''Territory2Settings'';
    public String fullName;
    public String defaultAccountAccessLevel;
    public String defaultCaseAccessLevel;
    public String defaultContactAccessLevel;
    public String defaultOpportunityAccessLevel;
    public MetadataService.Territory2SettingsOpportunityFilter opportunityFilterSettings;
    private String[] defaultAccountAccessLevel_type_info = new List<String>{
      ''defaultAccountAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultCaseAccessLevel_type_info = new List<String>{
      ''defaultCaseAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultContactAccessLevel_type_info = new List<String>{
      ''defaultContactAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultOpportunityAccessLevel_type_info = new List<String>{
      ''defaultOpportunityAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] opportunityFilterSettings_type_info = new List<String>{
      ''opportunityFilterSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''defaultAccountAccessLevel'',
      ''defaultCaseAccessLevel'',
      ''defaultContactAccessLevel'',
      ''defaultOpportunityAccessLevel'',
      ''opportunityFilterSettings''
    };
  }
  public class CallCenterItem {
    public String label;
    public String name;
    public String value;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name'',
      ''value''
    };
  }
  public class ApprovalAction {
    public MetadataService.WorkflowActionReference[] action;
    private String[] action_type_info = new List<String>{
      ''action'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''action'' };
  }
  public class FlowStep {
    public MetadataService.FlowConnector[] connectors;
    private String[] connectors_type_info = new List<String>{
      ''connectors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''connectors'' };
  }
  public class ProfileObjectPermissions {
    public Boolean allowCreate;
    public Boolean allowDelete;
    public Boolean allowEdit;
    public Boolean allowRead;
    public Boolean modifyAllRecords;
    public String object_x;
    public Boolean viewAllRecords;
    private String[] allowCreate_type_info = new List<String>{
      ''allowCreate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowDelete_type_info = new List<String>{
      ''allowDelete'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowEdit_type_info = new List<String>{
      ''allowEdit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowRead_type_info = new List<String>{
      ''allowRead'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] modifyAllRecords_type_info = new List<String>{
      ''modifyAllRecords'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] viewAllRecords_type_info = new List<String>{
      ''viewAllRecords'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''allowCreate'',
      ''allowDelete'',
      ''allowEdit'',
      ''allowRead'',
      ''modifyAllRecords'',
      ''object_x'',
      ''viewAllRecords''
    };
  }
  public class SecuritySettings extends Metadata {
    public String type = ''SecuritySettings'';
    public String fullName;
    public MetadataService.NetworkAccess networkAccess;
    public MetadataService.PasswordPolicies passwordPolicies;
    public MetadataService.SessionSettings sessionSettings;
    private String[] networkAccess_type_info = new List<String>{
      ''networkAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] passwordPolicies_type_info = new List<String>{
      ''passwordPolicies'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sessionSettings_type_info = new List<String>{
      ''sessionSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''networkAccess'',
      ''passwordPolicies'',
      ''sessionSettings''
    };
  }
  public class WorkflowTimeTrigger {
    public MetadataService.WorkflowActionReference[] actions;
    public String offsetFromField;
    public String timeLength;
    public String workflowTimeTriggerUnit;
    private String[] actions_type_info = new List<String>{
      ''actions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] offsetFromField_type_info = new List<String>{
      ''offsetFromField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] timeLength_type_info = new List<String>{
      ''timeLength'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] workflowTimeTriggerUnit_type_info = new List<String>{
      ''workflowTimeTriggerUnit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''actions'',
      ''offsetFromField'',
      ''timeLength'',
      ''workflowTimeTriggerUnit''
    };
  }
  public class retrieve_element {
    public MetadataService.RetrieveRequest retrieveRequest;
    private String[] retrieveRequest_type_info = new List<String>{
      ''retrieveRequest'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''retrieveRequest''
    };
  }
  public class AccountSharingRuleSettings {
    public String caseAccessLevel;
    public String contactAccessLevel;
    public String opportunityAccessLevel;
    private String[] caseAccessLevel_type_info = new List<String>{
      ''caseAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] contactAccessLevel_type_info = new List<String>{
      ''contactAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] opportunityAccessLevel_type_info = new List<String>{
      ''opportunityAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''caseAccessLevel'',
      ''contactAccessLevel'',
      ''opportunityAccessLevel''
    };
  }
  public class KnowledgeLanguage {
    public Boolean active;
    public String defaultAssignee;
    public String defaultAssigneeType;
    public String defaultReviewer;
    public String defaultReviewerType;
    public String name;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultAssignee_type_info = new List<String>{
      ''defaultAssignee'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultAssigneeType_type_info = new List<String>{
      ''defaultAssigneeType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultReviewer_type_info = new List<String>{
      ''defaultReviewer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultReviewerType_type_info = new List<String>{
      ''defaultReviewerType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''defaultAssignee'',
      ''defaultAssigneeType'',
      ''defaultReviewer'',
      ''defaultReviewerType'',
      ''name''
    };
  }
  public class PermissionSetExternalDataSourceAccess {
    public Boolean enabled;
    public String externalDataSource;
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] externalDataSource_type_info = new List<String>{
      ''externalDataSource'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabled'',
      ''externalDataSource''
    };
  }
  public class DescribeMetadataObject {
    public String[] childXmlNames;
    public String directoryName;
    public Boolean inFolder;
    public Boolean metaFile;
    public String suffix;
    public String xmlName;
    private String[] childXmlNames_type_info = new List<String>{
      ''childXmlNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] directoryName_type_info = new List<String>{
      ''directoryName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] inFolder_type_info = new List<String>{
      ''inFolder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] metaFile_type_info = new List<String>{
      ''metaFile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] suffix_type_info = new List<String>{
      ''suffix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] xmlName_type_info = new List<String>{
      ''xmlName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''childXmlNames'',
      ''directoryName'',
      ''inFolder'',
      ''metaFile'',
      ''suffix'',
      ''xmlName''
    };
  }
  public class LiveChatButtonSkills {
    public String[] skill;
    private String[] skill_type_info = new List<String>{
      ''skill'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''skill'' };
  }
  public class LayoutColumn {
    public MetadataService.LayoutItem[] layoutItems;
    public String reserved;
    private String[] layoutItems_type_info = new List<String>{
      ''layoutItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] reserved_type_info = new List<String>{
      ''reserved'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''layoutItems'',
      ''reserved''
    };
  }
  public class NamedCredential extends Metadata {
    public String type = ''NamedCredential'';
    public String fullName;
    public String authProvider;
    public String certificate;
    public String endpoint;
    public String label;
    public String oauthRefreshToken;
    public String oauthScope;
    public String oauthToken;
    public String password;
    public String principalType;
    public String protocol;
    public String username;
    private String[] authProvider_type_info = new List<String>{
      ''authProvider'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] certificate_type_info = new List<String>{
      ''certificate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] endpoint_type_info = new List<String>{
      ''endpoint'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] oauthRefreshToken_type_info = new List<String>{
      ''oauthRefreshToken'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] oauthScope_type_info = new List<String>{
      ''oauthScope'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] oauthToken_type_info = new List<String>{
      ''oauthToken'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] password_type_info = new List<String>{
      ''password'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] principalType_type_info = new List<String>{
      ''principalType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protocol_type_info = new List<String>{
      ''protocol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] username_type_info = new List<String>{
      ''username'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''authProvider'',
      ''certificate'',
      ''endpoint'',
      ''label'',
      ''oauthRefreshToken'',
      ''oauthScope'',
      ''oauthToken'',
      ''password'',
      ''principalType'',
      ''protocol'',
      ''username''
    };
  }
  public class PermissionSetTabSetting {
    public String tab;
    public String visibility;
    private String[] tab_type_info = new List<String>{
      ''tab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visibility_type_info = new List<String>{
      ''visibility'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''tab'',
      ''visibility''
    };
  }
  public class SkillUserAssignments {
    public String[] user_x;
    private String[] user_x_type_info = new List<String>{
      ''user'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''user_x'' };
  }
  public class PostTemplate extends Metadata {
    public String type = ''PostTemplate'';
    public String fullName;
    public Boolean default_x;
    public String description;
    public String[] fields;
    public String label;
    private String[] default_x_type_info = new List<String>{
      ''default'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''default_x'',
      ''description'',
      ''fields'',
      ''label''
    };
  }
  public class RelatedContentItem {
    public MetadataService.LayoutItem layoutItem;
    private String[] layoutItem_type_info = new List<String>{
      ''layoutItem'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''layoutItem'' };
  }
  public class FieldValue {
    public String name;
    public String value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class AuthProvider extends Metadata {
    public String type = ''AuthProvider'';
    public String fullName;
    public String authorizeUrl;
    public String consumerKey;
    public String consumerSecret;
    public String defaultScopes;
    public String errorUrl;
    public String executionUser;
    public String friendlyName;
    public String iconUrl;
    public String idTokenIssuer;
    public Boolean includeOrgIdInIdentifier;
    public String logoutUrl;
    public String portal;
    public String providerType;
    public String registrationHandler;
    public Boolean sendAccessTokenInHeader;
    public Boolean sendClientCredentialsInHeader;
    public String tokenUrl;
    public String userInfoUrl;
    private String[] authorizeUrl_type_info = new List<String>{
      ''authorizeUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] consumerKey_type_info = new List<String>{
      ''consumerKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] consumerSecret_type_info = new List<String>{
      ''consumerSecret'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultScopes_type_info = new List<String>{
      ''defaultScopes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorUrl_type_info = new List<String>{
      ''errorUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] executionUser_type_info = new List<String>{
      ''executionUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] friendlyName_type_info = new List<String>{
      ''friendlyName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] iconUrl_type_info = new List<String>{
      ''iconUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] idTokenIssuer_type_info = new List<String>{
      ''idTokenIssuer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] includeOrgIdInIdentifier_type_info = new List<String>{
      ''includeOrgIdInIdentifier'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logoutUrl_type_info = new List<String>{
      ''logoutUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] portal_type_info = new List<String>{
      ''portal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] providerType_type_info = new List<String>{
      ''providerType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] registrationHandler_type_info = new List<String>{
      ''registrationHandler'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sendAccessTokenInHeader_type_info = new List<String>{
      ''sendAccessTokenInHeader'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sendClientCredentialsInHeader_type_info = new List<String>{
      ''sendClientCredentialsInHeader'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tokenUrl_type_info = new List<String>{
      ''tokenUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userInfoUrl_type_info = new List<String>{
      ''userInfoUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''authorizeUrl'',
      ''consumerKey'',
      ''consumerSecret'',
      ''defaultScopes'',
      ''errorUrl'',
      ''executionUser'',
      ''friendlyName'',
      ''iconUrl'',
      ''idTokenIssuer'',
      ''includeOrgIdInIdentifier'',
      ''logoutUrl'',
      ''portal'',
      ''providerType'',
      ''registrationHandler'',
      ''sendAccessTokenInHeader'',
      ''sendClientCredentialsInHeader'',
      ''tokenUrl'',
      ''userInfoUrl''
    };
  }
  public class DescribeValueTypeResult {
    public MetadataService.ValueTypeField[] valueTypeFields;
    private String[] valueTypeFields_type_info = new List<String>{
      ''valueTypeFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''valueTypeFields''
    };
  }
  public class describeValueTypeResponse_element {
    public MetadataService.DescribeValueTypeResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReputationLevel {
    public MetadataService.ReputationBranding branding;
    public String label;
    public Double lowerThreshold;
    private String[] branding_type_info = new List<String>{
      ''branding'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lowerThreshold_type_info = new List<String>{
      ''lowerThreshold'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''branding'',
      ''label'',
      ''lowerThreshold''
    };
  }
  public class WorkflowTask extends WorkflowAction {
    public String type = ''WorkflowTask'';
    public String fullName;
    public String assignedTo;
    public String assignedToType;
    public String description;
    public Integer dueDateOffset;
    public Boolean notifyAssignee;
    public String offsetFromField;
    public String priority;
    public Boolean protected_x;
    public String status;
    public String subject;
    private String[] assignedTo_type_info = new List<String>{
      ''assignedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assignedToType_type_info = new List<String>{
      ''assignedToType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dueDateOffset_type_info = new List<String>{
      ''dueDateOffset'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] notifyAssignee_type_info = new List<String>{
      ''notifyAssignee'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] offsetFromField_type_info = new List<String>{
      ''offsetFromField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] priority_type_info = new List<String>{
      ''priority'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] status_type_info = new List<String>{
      ''status'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] subject_type_info = new List<String>{
      ''subject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''assignedTo'',
      ''assignedToType'',
      ''description'',
      ''dueDateOffset'',
      ''notifyAssignee'',
      ''offsetFromField'',
      ''priority'',
      ''protected_x'',
      ''status'',
      ''subject''
    };
  }
  public class NextAutomatedApprover {
    public Boolean useApproverFieldOfRecordOwner;
    public String userHierarchyField;
    private String[] useApproverFieldOfRecordOwner_type_info = new List<String>{
      ''useApproverFieldOfRecordOwner'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userHierarchyField_type_info = new List<String>{
      ''userHierarchyField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''useApproverFieldOfRecordOwner'',
      ''userHierarchyField''
    };
  }
  public class ChannelLayout {
    public String[] enabledChannels;
    public String label;
    public MetadataService.ChannelLayoutItem[] layoutItems;
    private String[] enabledChannels_type_info = new List<String>{
      ''enabledChannels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] layoutItems_type_info = new List<String>{
      ''layoutItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enabledChannels'',
      ''label'',
      ''layoutItems''
    };
  }
  public class readMetadata_element {
    public String type_x;
    public String[] fullNames;
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fullNames_type_info = new List<String>{
      ''fullNames'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''type_x'',
      ''fullNames''
    };
  }
  public class ReportAggregateReference {
    public String aggregate;
    private String[] aggregate_type_info = new List<String>{
      ''aggregate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''aggregate'' };
  }
  public interface IReadResult {
    MetadataService.Metadata[] getRecords();
  }
  public interface IReadResponseElement {
    IReadResult getResult();
  }
  public class ReadCustomSiteResult implements IReadResult {
    public MetadataService.CustomSite[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomSiteResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomSiteResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadListViewResult implements IReadResult {
    public MetadataService.ListView[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readListViewResponse_element implements IReadResponseElement {
    public MetadataService.ReadListViewResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadInstalledPackageResult implements IReadResult {
    public MetadataService.InstalledPackage[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readInstalledPackageResponse_element implements IReadResponseElement {
    public MetadataService.ReadInstalledPackageResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomFieldResult implements IReadResult {
    public MetadataService.CustomField[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomFieldResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomFieldResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadFieldSetResult implements IReadResult {
    public MetadataService.FieldSet[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readFieldSetResponse_element implements IReadResponseElement {
    public MetadataService.ReadFieldSetResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPicklistValueResult implements IReadResult {
    public MetadataService.PicklistValue[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPicklistValueResponse_element implements IReadResponseElement {
    public MetadataService.ReadPicklistValueResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadRecordTypeResult implements IReadResult {
    public MetadataService.RecordType[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readRecordTypeResponse_element implements IReadResponseElement {
    public MetadataService.ReadRecordTypeResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWebLinkResult implements IReadResult {
    public MetadataService.WebLink[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWebLinkResponse_element implements IReadResponseElement {
    public MetadataService.ReadWebLinkResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAddressSettingsResult implements IReadResult {
    public MetadataService.AddressSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAddressSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadAddressSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCaseSettingsResult implements IReadResult {
    public MetadataService.CaseSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCaseSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadCaseSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomObjectResult implements IReadResult {
    public MetadataService.CustomObject[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomObjectResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomObjectResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLayoutResult implements IReadResult {
    public MetadataService.Layout[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLayoutResponse_element implements IReadResponseElement {
    public MetadataService.ReadLayoutResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEmailTemplateResult implements IReadResult {
    public MetadataService.EmailTemplate[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEmailTemplateResponse_element implements IReadResponseElement {
    public MetadataService.ReadEmailTemplateResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadScontrolResult implements IReadResult {
    public MetadataService.Scontrol[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readScontrolResponse_element implements IReadResponseElement {
    public MetadataService.ReadScontrolResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadApexPageResult implements IReadResult {
    public MetadataService.ApexPage[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readApexPageResponse_element implements IReadResponseElement {
    public MetadataService.ReadApexPageResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadApexComponentResult implements IReadResult {
    public MetadataService.ApexComponent[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readApexComponentResponse_element implements IReadResponseElement {
    public MetadataService.ReadApexComponentResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadApexClassResult implements IReadResult {
    public MetadataService.ApexClass[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readApexClassResponse_element implements IReadResponseElement {
    public MetadataService.ReadApexClassResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadApexTriggerResult implements IReadResult {
    public MetadataService.ApexTrigger[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readApexTriggerResponse_element implements IReadResponseElement {
    public MetadataService.ReadApexTriggerResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadStaticResourceResult implements IReadResult {
    public MetadataService.StaticResource[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readStaticResourceResponse_element implements IReadResponseElement {
    public MetadataService.ReadStaticResourceResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadDocumentResult implements IReadResult {
    public MetadataService.Document[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readDocumentResponse_element implements IReadResponseElement {
    public MetadataService.ReadDocumentResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomLabelsResult implements IReadResult {
    public MetadataService.CustomLabels[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomLabelsResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomLabelsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomLabelResult implements IReadResult {
    public MetadataService.CustomLabel[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomLabelResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomLabelResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAccountSettingsResult implements IReadResult {
    public MetadataService.AccountSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAccountSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadAccountSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadQueueResult implements IReadResult {
    public MetadataService.Queue[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readQueueResponse_element implements IReadResponseElement {
    public MetadataService.ReadQueueResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomDataTypeResult implements IReadResult {
    public MetadataService.CustomDataType[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomDataTypeResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomDataTypeResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadExternalDataSourceResult implements IReadResult {
    public MetadataService.ExternalDataSource[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readExternalDataSourceResponse_element implements IReadResponseElement {
    public MetadataService.ReadExternalDataSourceResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadGroupResult implements IReadResult {
    public MetadataService.Group_x[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readGroupResponse_element implements IReadResponseElement {
    public MetadataService.ReadGroupResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadBusinessProcessResult implements IReadResult {
    public MetadataService.BusinessProcess[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readBusinessProcessResponse_element implements IReadResponseElement {
    public MetadataService.ReadBusinessProcessResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCompactLayoutResult implements IReadResult {
    public MetadataService.CompactLayout[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCompactLayoutResponse_element implements IReadResponseElement {
    public MetadataService.ReadCompactLayoutResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingReasonResult implements IReadResult {
    public MetadataService.SharingReason[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingReasonResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingReasonResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadValidationRuleResult implements IReadResult {
    public MetadataService.ValidationRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readValidationRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadValidationRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadReportTypeResult implements IReadResult {
    public MetadataService.ReportType[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readReportTypeResponse_element implements IReadResponseElement {
    public MetadataService.ReadReportTypeResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadReportResult implements IReadResult {
    public MetadataService.Report[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readReportResponse_element implements IReadResponseElement {
    public MetadataService.ReadReportResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadDashboardResult implements IReadResult {
    public MetadataService.Dashboard[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readDashboardResponse_element implements IReadResponseElement {
    public MetadataService.ReadDashboardResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAnalyticSnapshotResult implements IReadResult {
    public MetadataService.AnalyticSnapshot[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAnalyticSnapshotResponse_element implements IReadResponseElement {
    public MetadataService.ReadAnalyticSnapshotResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomPageWebLinkResult implements IReadResult {
    public MetadataService.CustomPageWebLink[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomPageWebLinkResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomPageWebLinkResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadQuickActionResult implements IReadResult {
    public MetadataService.QuickAction[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readQuickActionResponse_element implements IReadResponseElement {
    public MetadataService.ReadQuickActionResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadFlexiPageResult implements IReadResult {
    public MetadataService.FlexiPage[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readFlexiPageResponse_element implements IReadResponseElement {
    public MetadataService.ReadFlexiPageResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomTabResult implements IReadResult {
    public MetadataService.CustomTab[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomTabResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomTabResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomApplicationComponentResult implements IReadResult {
    public MetadataService.CustomApplicationComponent[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomApplicationComponentResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomApplicationComponentResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomApplicationResult implements IReadResult {
    public MetadataService.CustomApplication[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomApplicationResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomApplicationResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPortalResult implements IReadResult {
    public MetadataService.Portal[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPortalResponse_element implements IReadResponseElement {
    public MetadataService.ReadPortalResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLetterheadResult implements IReadResult {
    public MetadataService.Letterhead[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLetterheadResponse_element implements IReadResponseElement {
    public MetadataService.ReadLetterheadResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadFlowResult implements IReadResult {
    public MetadataService.Flow[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readFlowResponse_element implements IReadResponseElement {
    public MetadataService.ReadFlowResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowResult implements IReadResult {
    public MetadataService.Workflow[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowRuleResult implements IReadResult {
    public MetadataService.WorkflowRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAssignmentRulesResult implements IReadResult {
    public MetadataService.AssignmentRules[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAssignmentRulesResponse_element implements IReadResponseElement {
    public MetadataService.ReadAssignmentRulesResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAssignmentRuleResult implements IReadResult {
    public MetadataService.AssignmentRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAssignmentRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadAssignmentRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAutoResponseRulesResult implements IReadResult {
    public MetadataService.AutoResponseRules[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAutoResponseRulesResponse_element implements IReadResponseElement {
    public MetadataService.ReadAutoResponseRulesResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAutoResponseRuleResult implements IReadResult {
    public MetadataService.AutoResponseRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAutoResponseRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadAutoResponseRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEscalationRulesResult implements IReadResult {
    public MetadataService.EscalationRules[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEscalationRulesResponse_element implements IReadResponseElement {
    public MetadataService.ReadEscalationRulesResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEscalationRuleResult implements IReadResult {
    public MetadataService.EscalationRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEscalationRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadEscalationRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPostTemplateResult implements IReadResult {
    public MetadataService.PostTemplate[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPostTemplateResponse_element implements IReadResponseElement {
    public MetadataService.ReadPostTemplateResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadApprovalProcessResult implements IReadResult {
    public MetadataService.ApprovalProcess[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readApprovalProcessResponse_element implements IReadResponseElement {
    public MetadataService.ReadApprovalProcessResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadHomePageComponentResult implements IReadResult {
    public MetadataService.HomePageComponent[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readHomePageComponentResponse_element implements IReadResponseElement {
    public MetadataService.ReadHomePageComponentResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadHomePageLayoutResult implements IReadResult {
    public MetadataService.HomePageLayout[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readHomePageLayoutResponse_element implements IReadResponseElement {
    public MetadataService.ReadHomePageLayoutResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomObjectTranslationResult implements IReadResult {
    public MetadataService.CustomObjectTranslation[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomObjectTranslationResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomObjectTranslationResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadTranslationsResult implements IReadResult {
    public MetadataService.Translations[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readTranslationsResponse_element implements IReadResponseElement {
    public MetadataService.ReadTranslationsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadProfileResult implements IReadResult {
    public MetadataService.Profile[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readProfileResponse_element implements IReadResponseElement {
    public MetadataService.ReadProfileResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPermissionSetResult implements IReadResult {
    public MetadataService.PermissionSet[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPermissionSetResponse_element implements IReadResponseElement {
    public MetadataService.ReadPermissionSetResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadDataCategoryGroupResult implements IReadResult {
    public MetadataService.DataCategoryGroup[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readDataCategoryGroupResponse_element implements IReadResponseElement {
    public MetadataService.ReadDataCategoryGroupResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadRemoteSiteSettingResult implements IReadResult {
    public MetadataService.RemoteSiteSetting[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readRemoteSiteSettingResponse_element implements IReadResponseElement {
    public MetadataService.ReadRemoteSiteSettingResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPackageResult implements IReadResult {
    public MetadataService.Package_x[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPackageResponse_element implements IReadResponseElement {
    public MetadataService.ReadPackageResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAuthProviderResult implements IReadResult {
    public MetadataService.AuthProvider[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAuthProviderResponse_element implements IReadResponseElement {
    public MetadataService.ReadAuthProviderResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadKnowledgeSettingsResult implements IReadResult {
    public MetadataService.KnowledgeSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readKnowledgeSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadKnowledgeSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingSetResult implements IReadResult {
    public MetadataService.SharingSet[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingSetResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingSetResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSecuritySettingsResult implements IReadResult {
    public MetadataService.SecuritySettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSecuritySettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadSecuritySettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadIdeasSettingsResult implements IReadResult {
    public MetadataService.IdeasSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readIdeasSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadIdeasSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadChatterAnswersSettingsResult implements IReadResult {
    public MetadataService.ChatterAnswersSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readChatterAnswersSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadChatterAnswersSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCommunityResult implements IReadResult {
    public MetadataService.Community[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCommunityResponse_element implements IReadResponseElement {
    public MetadataService.ReadCommunityResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadActivitiesSettingsResult implements IReadResult {
    public MetadataService.ActivitiesSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readActivitiesSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadActivitiesSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadContractSettingsResult implements IReadResult {
    public MetadataService.ContractSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readContractSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadContractSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadOrderSettingsResult implements IReadResult {
    public MetadataService.OrderSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readOrderSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadOrderSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadOpportunitySettingsResult implements IReadResult {
    public MetadataService.OpportunitySettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readOpportunitySettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadOpportunitySettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadProductSettingsResult implements IReadResult {
    public MetadataService.ProductSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readProductSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadProductSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadQuoteSettingsResult implements IReadResult {
    public MetadataService.QuoteSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readQuoteSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadQuoteSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCallCenterResult implements IReadResult {
    public MetadataService.CallCenter[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCallCenterResponse_element implements IReadResponseElement {
    public MetadataService.ReadCallCenterResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEntitlementProcessResult implements IReadResult {
    public MetadataService.EntitlementProcess[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEntitlementProcessResponse_element implements IReadResponseElement {
    public MetadataService.ReadEntitlementProcessResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadMilestoneTypeResult implements IReadResult {
    public MetadataService.MilestoneType[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readMilestoneTypeResponse_element implements IReadResponseElement {
    public MetadataService.ReadMilestoneTypeResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEntitlementTemplateResult implements IReadResult {
    public MetadataService.EntitlementTemplate[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEntitlementTemplateResponse_element implements IReadResponseElement {
    public MetadataService.ReadEntitlementTemplateResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEntitlementSettingsResult implements IReadResult {
    public MetadataService.EntitlementSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEntitlementSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadEntitlementSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadBusinessHoursSettingsResult implements IReadResult {
    public MetadataService.BusinessHoursSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readBusinessHoursSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadBusinessHoursSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadBusinessHoursEntryResult implements IReadResult {
    public MetadataService.BusinessHoursEntry[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readBusinessHoursEntryResponse_element implements IReadResponseElement {
    public MetadataService.ReadBusinessHoursEntryResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadConnectedAppResult implements IReadResult {
    public MetadataService.ConnectedApp[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readConnectedAppResponse_element implements IReadResponseElement {
    public MetadataService.ReadConnectedAppResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAppMenuResult implements IReadResult {
    public MetadataService.AppMenu[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAppMenuResponse_element implements IReadResponseElement {
    public MetadataService.ReadAppMenuResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadMobileSettingsResult implements IReadResult {
    public MetadataService.MobileSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readMobileSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadMobileSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadNetworkResult implements IReadResult {
    public MetadataService.Network[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readNetworkResponse_element implements IReadResponseElement {
    public MetadataService.ReadNetworkResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCompanySettingsResult implements IReadResult {
    public MetadataService.CompanySettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCompanySettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadCompanySettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadForecastingSettingsResult implements IReadResult {
    public MetadataService.ForecastingSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readForecastingSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadForecastingSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSamlSsoConfigResult implements IReadResult {
    public MetadataService.SamlSsoConfig[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSamlSsoConfigResponse_element implements IReadResponseElement {
    public MetadataService.ReadSamlSsoConfigResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLiveAgentSettingsResult implements IReadResult {
    public MetadataService.LiveAgentSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLiveAgentSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadLiveAgentSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSkillResult implements IReadResult {
    public MetadataService.Skill[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSkillResponse_element implements IReadResponseElement {
    public MetadataService.ReadSkillResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLiveChatDeploymentResult implements IReadResult {
    public MetadataService.LiveChatDeployment[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLiveChatDeploymentResponse_element implements IReadResponseElement {
    public MetadataService.ReadLiveChatDeploymentResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLiveChatButtonResult implements IReadResult {
    public MetadataService.LiveChatButton[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLiveChatButtonResponse_element implements IReadResponseElement {
    public MetadataService.ReadLiveChatButtonResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLiveChatAgentConfigResult implements IReadResult {
    public MetadataService.LiveChatAgentConfig[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLiveChatAgentConfigResponse_element implements IReadResponseElement {
    public MetadataService.ReadLiveChatAgentConfigResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSynonymDictionaryResult implements IReadResult {
    public MetadataService.SynonymDictionary[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSynonymDictionaryResponse_element implements IReadResponseElement {
    public MetadataService.ReadSynonymDictionaryResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadFolderResult implements IReadResult {
    public MetadataService.Folder[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readFolderResponse_element implements IReadResponseElement {
    public MetadataService.ReadFolderResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadReportFolderResult implements IReadResult {
    public MetadataService.ReportFolder[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readReportFolderResponse_element implements IReadResponseElement {
    public MetadataService.ReadReportFolderResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadDashboardFolderResult implements IReadResult {
    public MetadataService.DashboardFolder[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readDashboardFolderResponse_element implements IReadResponseElement {
    public MetadataService.ReadDashboardFolderResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadDocumentFolderResult implements IReadResult {
    public MetadataService.DocumentFolder[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readDocumentFolderResponse_element implements IReadResponseElement {
    public MetadataService.ReadDocumentFolderResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadEmailFolderResult implements IReadResult {
    public MetadataService.EmailFolder[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readEmailFolderResponse_element implements IReadResponseElement {
    public MetadataService.ReadEmailFolderResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadRoleOrTerritoryResult implements IReadResult {
    public MetadataService.RoleOrTerritory[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readRoleOrTerritoryResponse_element implements IReadResponseElement {
    public MetadataService.ReadRoleOrTerritoryResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowActionResult implements IReadResult {
    public MetadataService.WorkflowAction[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowActionResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowActionResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSiteDotComResult implements IReadResult {
    public MetadataService.SiteDotCom[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSiteDotComResponse_element implements IReadResponseElement {
    public MetadataService.ReadSiteDotComResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowTaskResult implements IReadResult {
    public MetadataService.WorkflowTask[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowTaskResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowTaskResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowSendResult implements IReadResult {
    public MetadataService.WorkflowSend[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowSendResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowSendResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowOutboundMessageResult implements IReadResult {
    public MetadataService.WorkflowOutboundMessage[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowOutboundMessageResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowOutboundMessageResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowKnowledgePublishResult implements IReadResult {
    public MetadataService.WorkflowKnowledgePublish[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowKnowledgePublishResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowKnowledgePublishResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowFieldUpdateResult implements IReadResult {
    public MetadataService.WorkflowFieldUpdate[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowFieldUpdateResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowFieldUpdateResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadWorkflowAlertResult implements IReadResult {
    public MetadataService.WorkflowAlert[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readWorkflowAlertResponse_element implements IReadResponseElement {
    public MetadataService.ReadWorkflowAlertResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadVisualizationPluginResult implements IReadResult {
    public MetadataService.VisualizationPlugin[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readVisualizationPluginResponse_element implements IReadResponseElement {
    public MetadataService.ReadVisualizationPluginResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomMetadataResult implements IReadResult {
    public MetadataService.CustomMetadata[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomMetadataResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomMetadataResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadNameSettingsResult implements IReadResult {
    public MetadataService.NameSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readNameSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadNameSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadMarketingActionSettingsResult implements IReadResult {
    public MetadataService.MarketingActionSettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readMarketingActionSettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadMarketingActionSettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCustomPermissionResult implements IReadResult {
    public MetadataService.CustomPermission[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCustomPermissionResponse_element implements IReadResponseElement {
    public MetadataService.ReadCustomPermissionResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadAuraDefinitionBundleResult implements IReadResult {
    public MetadataService.AuraDefinitionBundle[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readAuraDefinitionBundleResponse_element implements IReadResponseElement {
    public MetadataService.ReadAuraDefinitionBundleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadCorsWhitelistOriginResult implements IReadResult {
    public MetadataService.CorsWhitelistOrigin[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readCorsWhitelistOriginResponse_element implements IReadResponseElement {
    public MetadataService.ReadCorsWhitelistOriginResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadManagedTopicsResult implements IReadResult {
    public MetadataService.ManagedTopics[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readManagedTopicsResponse_element implements IReadResponseElement {
    public MetadataService.ReadManagedTopicsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadTerritory2Result implements IReadResult {
    public MetadataService.Territory2[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readTerritory2Response_element implements IReadResponseElement {
    public MetadataService.ReadTerritory2Result result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadTerritory2ModelResult implements IReadResult {
    public MetadataService.Territory2Model[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readTerritory2ModelResponse_element implements IReadResponseElement {
    public MetadataService.ReadTerritory2ModelResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadTerritory2SettingsResult implements IReadResult {
    public MetadataService.Territory2Settings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readTerritory2SettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadTerritory2SettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadTerritory2TypeResult implements IReadResult {
    public MetadataService.Territory2Type[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readTerritory2TypeResponse_element implements IReadResponseElement {
    public MetadataService.ReadTerritory2TypeResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadXOrgHubResult implements IReadResult {
    public MetadataService.XOrgHub[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readXOrgHubResponse_element implements IReadResponseElement {
    public MetadataService.ReadXOrgHubResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadActionLinkGroupTemplateResult implements IReadResult {
    public MetadataService.ActionLinkGroupTemplate[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readActionLinkGroupTemplateResponse_element implements IReadResponseElement {
    public MetadataService.ReadActionLinkGroupTemplateResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadLicenseDefinitionResult implements IReadResult {
    public MetadataService.LicenseDefinition[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readLicenseDefinitionResponse_element implements IReadResponseElement {
    public MetadataService.ReadLicenseDefinitionResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadMarketingResourceTypeResult implements IReadResult {
    public MetadataService.MarketingResourceType[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readMarketingResourceTypeResponse_element implements IReadResponseElement {
    public MetadataService.ReadMarketingResourceTypeResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadMatchingRuleResult implements IReadResult {
    public MetadataService.MatchingRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readMatchingRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadMatchingRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadMatchingRulesResult implements IReadResult {
    public MetadataService.MatchingRules[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readMatchingRulesResponse_element implements IReadResponseElement {
    public MetadataService.ReadMatchingRulesResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadNamedCredentialResult implements IReadResult {
    public MetadataService.NamedCredential[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readNamedCredentialResponse_element implements IReadResponseElement {
    public MetadataService.ReadNamedCredentialResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPersonalJourneySettingsResult implements IReadResult {
    public MetadataService.PersonalJourneySettings[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPersonalJourneySettingsResponse_element implements IReadResponseElement {
    public MetadataService.ReadPersonalJourneySettingsResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingRulesResult implements IReadResult {
    public MetadataService.SharingRules[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingRulesResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingRulesResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingBaseRuleResult implements IReadResult {
    public MetadataService.SharingBaseRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingBaseRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingBaseRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingCriteriaRuleResult implements IReadResult {
    public MetadataService.SharingCriteriaRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingCriteriaRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingCriteriaRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingOwnerRuleResult implements IReadResult {
    public MetadataService.SharingOwnerRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingOwnerRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingOwnerRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadSharingTerritoryRuleResult implements IReadResult {
    public MetadataService.SharingTerritoryRule[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readSharingTerritoryRuleResponse_element implements IReadResponseElement {
    public MetadataService.ReadSharingTerritoryRuleResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPlatformActionListResult implements IReadResult {
    public MetadataService.PlatformActionList[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPlatformActionListResponse_element implements IReadResponseElement {
    public MetadataService.ReadPlatformActionListResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadFlowDefinitionResult implements IReadResult {
    public MetadataService.FlowDefinition[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readFlowDefinitionResponse_element implements IReadResponseElement {
    public MetadataService.ReadFlowDefinitionResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadPathAssistantResult implements IReadResult {
    public MetadataService.PathAssistant[] records;
    public MetadataService.Metadata[] getRecords() {
      return records;
    }
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class readPathAssistantResponse_element implements IReadResponseElement {
    public MetadataService.ReadPathAssistantResult result;
    public IReadResult getResult() {
      return result;
    }
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReadResult {
    public MetadataService.Metadata[] records;
    private String[] records_type_info = new List<String>{
      ''records'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''records'' };
  }
  public class ApprovalProcess extends Metadata {
    public String type = ''ApprovalProcess'';
    public String fullName;
    public Boolean active;
    public Boolean allowRecall;
    public MetadataService.ApprovalSubmitter[] allowedSubmitters;
    public MetadataService.ApprovalPageField approvalPageFields;
    public MetadataService.ApprovalStep[] approvalStep;
    public String description;
    public String emailTemplate;
    public Boolean enableMobileDeviceAccess;
    public MetadataService.ApprovalEntryCriteria entryCriteria;
    public MetadataService.ApprovalAction finalApprovalActions;
    public Boolean finalApprovalRecordLock;
    public MetadataService.ApprovalAction finalRejectionActions;
    public Boolean finalRejectionRecordLock;
    public MetadataService.ApprovalAction initialSubmissionActions;
    public String label;
    public MetadataService.NextAutomatedApprover nextAutomatedApprover;
    public String postTemplate;
    public MetadataService.ApprovalAction recallActions;
    public String recordEditability;
    public Boolean showApprovalHistory;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowRecall_type_info = new List<String>{
      ''allowRecall'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowedSubmitters_type_info = new List<String>{
      ''allowedSubmitters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] approvalPageFields_type_info = new List<String>{
      ''approvalPageFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] approvalStep_type_info = new List<String>{
      ''approvalStep'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailTemplate_type_info = new List<String>{
      ''emailTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableMobileDeviceAccess_type_info = new List<String>{
      ''enableMobileDeviceAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entryCriteria_type_info = new List<String>{
      ''entryCriteria'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] finalApprovalActions_type_info = new List<String>{
      ''finalApprovalActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] finalApprovalRecordLock_type_info = new List<String>{
      ''finalApprovalRecordLock'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] finalRejectionActions_type_info = new List<String>{
      ''finalRejectionActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] finalRejectionRecordLock_type_info = new List<String>{
      ''finalRejectionRecordLock'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] initialSubmissionActions_type_info = new List<String>{
      ''initialSubmissionActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] nextAutomatedApprover_type_info = new List<String>{
      ''nextAutomatedApprover'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] postTemplate_type_info = new List<String>{
      ''postTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recallActions_type_info = new List<String>{
      ''recallActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recordEditability_type_info = new List<String>{
      ''recordEditability'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] showApprovalHistory_type_info = new List<String>{
      ''showApprovalHistory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''allowRecall'',
      ''allowedSubmitters'',
      ''approvalPageFields'',
      ''approvalStep'',
      ''description'',
      ''emailTemplate'',
      ''enableMobileDeviceAccess'',
      ''entryCriteria'',
      ''finalApprovalActions'',
      ''finalApprovalRecordLock'',
      ''finalRejectionActions'',
      ''finalRejectionRecordLock'',
      ''initialSubmissionActions'',
      ''label'',
      ''nextAutomatedApprover'',
      ''postTemplate'',
      ''recallActions'',
      ''recordEditability'',
      ''showApprovalHistory''
    };
  }
  public class MilestoneType extends Metadata {
    public String type = ''MilestoneType'';
    public String fullName;
    public String description;
    public String recurrenceType;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recurrenceType_type_info = new List<String>{
      ''recurrenceType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''description'',
      ''recurrenceType''
    };
  }
  public class FileProperties {
    public String createdById;
    public String createdByName;
    public DateTime createdDate;
    public String fileName;
    public String fullName;
    public String id;
    public String lastModifiedById;
    public String lastModifiedByName;
    public DateTime lastModifiedDate;
    public String manageableState;
    public String namespacePrefix;
    public String type_x;
    private String[] createdById_type_info = new List<String>{
      ''createdById'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] createdByName_type_info = new List<String>{
      ''createdByName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] createdDate_type_info = new List<String>{
      ''createdDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fileName_type_info = new List<String>{
      ''fileName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lastModifiedById_type_info = new List<String>{
      ''lastModifiedById'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lastModifiedByName_type_info = new List<String>{
      ''lastModifiedByName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lastModifiedDate_type_info = new List<String>{
      ''lastModifiedDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] manageableState_type_info = new List<String>{
      ''manageableState'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] namespacePrefix_type_info = new List<String>{
      ''namespacePrefix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''createdById'',
      ''createdByName'',
      ''createdDate'',
      ''fileName'',
      ''fullName'',
      ''id'',
      ''lastModifiedById'',
      ''lastModifiedByName'',
      ''lastModifiedDate'',
      ''manageableState'',
      ''namespacePrefix'',
      ''type_x''
    };
  }
  public class QuickActionLayout {
    public String layoutSectionStyle;
    public MetadataService.QuickActionLayoutColumn[] quickActionLayoutColumns;
    private String[] layoutSectionStyle_type_info = new List<String>{
      ''layoutSectionStyle'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] quickActionLayoutColumns_type_info = new List<String>{
      ''quickActionLayoutColumns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''layoutSectionStyle'',
      ''quickActionLayoutColumns''
    };
  }
  public class Flow extends Metadata {
    public String type = ''Flow'';
    public String fullName;
    public MetadataService.FlowActionCall[] actionCalls;
    public MetadataService.FlowApexPluginCall[] apexPluginCalls;
    public MetadataService.FlowAssignment[] assignments;
    public MetadataService.FlowChoice[] choices;
    public MetadataService.FlowConstant[] constants;
    public MetadataService.FlowDecision[] decisions;
    public String description;
    public MetadataService.FlowDynamicChoiceSet[] dynamicChoiceSets;
    public MetadataService.FlowFormula[] formulas;
    public String interviewLabel;
    public String label;
    public MetadataService.FlowLoop[] loops;
    public MetadataService.FlowMetadataValue[] processMetadataValues;
    public String processType;
    public MetadataService.FlowRecordCreate[] recordCreates;
    public MetadataService.FlowRecordDelete[] recordDeletes;
    public MetadataService.FlowRecordLookup[] recordLookups;
    public MetadataService.FlowRecordUpdate[] recordUpdates;
    public MetadataService.FlowScreen[] screens;
    public String startElementReference;
    public MetadataService.FlowStep[] steps;
    public MetadataService.FlowSubflow[] subflows;
    public MetadataService.FlowTextTemplate[] textTemplates;
    public MetadataService.FlowVariable[] variables;
    public MetadataService.FlowWait[] waits;
    private String[] actionCalls_type_info = new List<String>{
      ''actionCalls'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apexPluginCalls_type_info = new List<String>{
      ''apexPluginCalls'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] assignments_type_info = new List<String>{
      ''assignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] choices_type_info = new List<String>{
      ''choices'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] constants_type_info = new List<String>{
      ''constants'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] decisions_type_info = new List<String>{
      ''decisions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dynamicChoiceSets_type_info = new List<String>{
      ''dynamicChoiceSets'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] formulas_type_info = new List<String>{
      ''formulas'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] interviewLabel_type_info = new List<String>{
      ''interviewLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] loops_type_info = new List<String>{
      ''loops'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] processMetadataValues_type_info = new List<String>{
      ''processMetadataValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] processType_type_info = new List<String>{
      ''processType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recordCreates_type_info = new List<String>{
      ''recordCreates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordDeletes_type_info = new List<String>{
      ''recordDeletes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordLookups_type_info = new List<String>{
      ''recordLookups'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordUpdates_type_info = new List<String>{
      ''recordUpdates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] screens_type_info = new List<String>{
      ''screens'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] startElementReference_type_info = new List<String>{
      ''startElementReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] steps_type_info = new List<String>{
      ''steps'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] subflows_type_info = new List<String>{
      ''subflows'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] textTemplates_type_info = new List<String>{
      ''textTemplates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] variables_type_info = new List<String>{
      ''variables'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] waits_type_info = new List<String>{
      ''waits'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''actionCalls'',
      ''apexPluginCalls'',
      ''assignments'',
      ''choices'',
      ''constants'',
      ''decisions'',
      ''description'',
      ''dynamicChoiceSets'',
      ''formulas'',
      ''interviewLabel'',
      ''label'',
      ''loops'',
      ''processMetadataValues'',
      ''processType'',
      ''recordCreates'',
      ''recordDeletes'',
      ''recordLookups'',
      ''recordUpdates'',
      ''screens'',
      ''startElementReference'',
      ''steps'',
      ''subflows'',
      ''textTemplates'',
      ''variables'',
      ''waits''
    };
  }
  public class AutoResponseRule extends Metadata {
    public String type = ''AutoResponseRule'';
    public String fullName;
    public Boolean active;
    public MetadataService.RuleEntry[] ruleEntry;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ruleEntry_type_info = new List<String>{
      ''ruleEntry'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''ruleEntry''
    };
  }
  public class PermissionSetObjectPermissions {
    public Boolean allowCreate;
    public Boolean allowDelete;
    public Boolean allowEdit;
    public Boolean allowRead;
    public Boolean modifyAllRecords;
    public String object_x;
    public Boolean viewAllRecords;
    private String[] allowCreate_type_info = new List<String>{
      ''allowCreate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowDelete_type_info = new List<String>{
      ''allowDelete'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowEdit_type_info = new List<String>{
      ''allowEdit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] allowRead_type_info = new List<String>{
      ''allowRead'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] modifyAllRecords_type_info = new List<String>{
      ''modifyAllRecords'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] viewAllRecords_type_info = new List<String>{
      ''viewAllRecords'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''allowCreate'',
      ''allowDelete'',
      ''allowEdit'',
      ''allowRead'',
      ''modifyAllRecords'',
      ''object_x'',
      ''viewAllRecords''
    };
  }
  public class ReportCrossFilter {
    public MetadataService.ReportFilterItem[] criteriaItems;
    public String operation;
    public String primaryTableColumn;
    public String relatedTable;
    public String relatedTableJoinColumn;
    private String[] criteriaItems_type_info = new List<String>{
      ''criteriaItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] operation_type_info = new List<String>{
      ''operation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] primaryTableColumn_type_info = new List<String>{
      ''primaryTableColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] relatedTable_type_info = new List<String>{
      ''relatedTable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] relatedTableJoinColumn_type_info = new List<String>{
      ''relatedTableJoinColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''criteriaItems'',
      ''operation'',
      ''primaryTableColumn'',
      ''relatedTable'',
      ''relatedTableJoinColumn''
    };
  }
  public class BusinessHoursSettings extends Metadata {
    public String type = ''BusinessHoursSettings'';
    public String fullName;
    public MetadataService.BusinessHoursEntry[] businessHours;
    public MetadataService.Holiday[] holidays;
    private String[] businessHours_type_info = new List<String>{
      ''businessHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] holidays_type_info = new List<String>{
      ''holidays'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''businessHours'',
      ''holidays''
    };
  }
  public class FlowWaitEventOutputParameter {
    public String assignToReference;
    public String name;
    private String[] assignToReference_type_info = new List<String>{
      ''assignToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignToReference'',
      ''name''
    };
  }
  public class Report extends Metadata {
    public String type = ''Report'';
    public String fullName;
    public MetadataService.ReportAggregate[] aggregates;
    public MetadataService.Report[] block;
    public MetadataService.ReportBlockInfo blockInfo;
    public MetadataService.ReportBucketField[] buckets;
    public MetadataService.ReportChart chart;
    public MetadataService.ReportColorRange[] colorRanges;
    public MetadataService.ReportColumn[] columns;
    public MetadataService.ReportCrossFilter[] crossFilters;
    public String currency_x;
    public MetadataService.ReportDataCategoryFilter[] dataCategoryFilters;
    public String description;
    public String division;
    public MetadataService.ReportFilter filter;
    public String format;
    public MetadataService.ReportGrouping[] groupingsAcross;
    public MetadataService.ReportGrouping[] groupingsDown;
    public MetadataService.ReportHistoricalSelector historicalSelector;
    public String name;
    public MetadataService.ReportParam[] params;
    public String reportType;
    public String roleHierarchyFilter;
    public Integer rowLimit;
    public String scope;
    public Boolean showCurrentDate;
    public Boolean showDetails;
    public String sortColumn;
    public String sortOrder;
    public String territoryHierarchyFilter;
    public MetadataService.ReportTimeFrameFilter timeFrameFilter;
    public String userFilter;
    private String[] aggregates_type_info = new List<String>{
      ''aggregates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] block_type_info = new List<String>{
      ''block'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] blockInfo_type_info = new List<String>{
      ''blockInfo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] buckets_type_info = new List<String>{
      ''buckets'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] chart_type_info = new List<String>{
      ''chart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] colorRanges_type_info = new List<String>{
      ''colorRanges'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] columns_type_info = new List<String>{
      ''columns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] crossFilters_type_info = new List<String>{
      ''crossFilters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] currency_x_type_info = new List<String>{
      ''currency'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dataCategoryFilters_type_info = new List<String>{
      ''dataCategoryFilters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] division_type_info = new List<String>{
      ''division'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filter_type_info = new List<String>{
      ''filter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] format_type_info = new List<String>{
      ''format'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] groupingsAcross_type_info = new List<String>{
      ''groupingsAcross'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] groupingsDown_type_info = new List<String>{
      ''groupingsDown'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] historicalSelector_type_info = new List<String>{
      ''historicalSelector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] params_type_info = new List<String>{
      ''params'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] reportType_type_info = new List<String>{
      ''reportType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] roleHierarchyFilter_type_info = new List<String>{
      ''roleHierarchyFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] rowLimit_type_info = new List<String>{
      ''rowLimit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scope_type_info = new List<String>{
      ''scope'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showCurrentDate_type_info = new List<String>{
      ''showCurrentDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showDetails_type_info = new List<String>{
      ''showDetails'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortColumn_type_info = new List<String>{
      ''sortColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] territoryHierarchyFilter_type_info = new List<String>{
      ''territoryHierarchyFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] timeFrameFilter_type_info = new List<String>{
      ''timeFrameFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] userFilter_type_info = new List<String>{
      ''userFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''aggregates'',
      ''block'',
      ''blockInfo'',
      ''buckets'',
      ''chart'',
      ''colorRanges'',
      ''columns'',
      ''crossFilters'',
      ''currency_x'',
      ''dataCategoryFilters'',
      ''description'',
      ''division'',
      ''filter'',
      ''format'',
      ''groupingsAcross'',
      ''groupingsDown'',
      ''historicalSelector'',
      ''name'',
      ''params'',
      ''reportType'',
      ''roleHierarchyFilter'',
      ''rowLimit'',
      ''scope'',
      ''showCurrentDate'',
      ''showDetails'',
      ''sortColumn'',
      ''sortOrder'',
      ''territoryHierarchyFilter'',
      ''timeFrameFilter'',
      ''userFilter''
    };
  }
  public class ListView extends Metadata {
    public String type = ''ListView'';
    public String fullName;
    public String booleanFilter;
    public String[] columns;
    public String division;
    public String filterScope;
    public MetadataService.ListViewFilter[] filters;
    public String label;
    public String language;
    public String queue;
    public MetadataService.SharedTo sharedTo;
    private String[] booleanFilter_type_info = new List<String>{
      ''booleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] columns_type_info = new List<String>{
      ''columns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] division_type_info = new List<String>{
      ''division'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] filterScope_type_info = new List<String>{
      ''filterScope'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] filters_type_info = new List<String>{
      ''filters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] queue_type_info = new List<String>{
      ''queue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''booleanFilter'',
      ''columns'',
      ''division'',
      ''filterScope'',
      ''filters'',
      ''label'',
      ''language'',
      ''queue'',
      ''sharedTo''
    };
  }
  public class FlowRecordCreate {
    public String assignRecordIdToReference;
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowConnector faultConnector;
    public MetadataService.FlowInputFieldAssignment[] inputAssignments;
    public String inputReference;
    public String object_x;
    private String[] assignRecordIdToReference_type_info = new List<String>{
      ''assignRecordIdToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] faultConnector_type_info = new List<String>{
      ''faultConnector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] inputAssignments_type_info = new List<String>{
      ''inputAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] inputReference_type_info = new List<String>{
      ''inputReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignRecordIdToReference'',
      ''connector'',
      ''faultConnector'',
      ''inputAssignments'',
      ''inputReference'',
      ''object_x''
    };
  }
  public class DashboardTableColumn {
    public String aggregateType;
    public Boolean calculatePercent;
    public String column;
    public Integer decimalPlaces;
    public Boolean showTotal;
    public String sortBy;
    private String[] aggregateType_type_info = new List<String>{
      ''aggregateType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] calculatePercent_type_info = new List<String>{
      ''calculatePercent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] column_type_info = new List<String>{
      ''column'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] decimalPlaces_type_info = new List<String>{
      ''decimalPlaces'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showTotal_type_info = new List<String>{
      ''showTotal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortBy_type_info = new List<String>{
      ''sortBy'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregateType'',
      ''calculatePercent'',
      ''column'',
      ''decimalPlaces'',
      ''showTotal'',
      ''sortBy''
    };
  }
  public class CaseSettings extends Metadata {
    public String type = ''CaseSettings'';
    public String fullName;
    public String caseAssignNotificationTemplate;
    public String caseCloseNotificationTemplate;
    public String caseCommentNotificationTemplate;
    public String caseCreateNotificationTemplate;
    public MetadataService.FeedItemSettings[] caseFeedItemSettings;
    public Boolean closeCaseThroughStatusChange;
    public String defaultCaseOwner;
    public String defaultCaseOwnerType;
    public String defaultCaseUser;
    public String emailActionDefaultsHandlerClass;
    public MetadataService.EmailToCaseSettings emailToCase;
    public Boolean enableCaseFeed;
    public Boolean enableDraftEmails;
    public Boolean enableEarlyEscalationRuleTriggers;
    public Boolean enableEmailActionDefaultsHandler;
    public Boolean enableSuggestedArticlesApplication;
    public Boolean enableSuggestedArticlesCustomerPortal;
    public Boolean enableSuggestedArticlesPartnerPortal;
    public Boolean enableSuggestedSolutions;
    public Boolean keepRecordTypeOnAssignmentRule;
    public Boolean notifyContactOnCaseComment;
    public Boolean notifyDefaultCaseOwner;
    public Boolean notifyOwnerOnCaseComment;
    public Boolean notifyOwnerOnCaseOwnerChange;
    public Boolean showFewerCloseActions;
    public Boolean useSystemEmailAddress;
    public MetadataService.WebToCaseSettings webToCase;
    private String[] caseAssignNotificationTemplate_type_info = new List<String>{
      ''caseAssignNotificationTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseCloseNotificationTemplate_type_info = new List<String>{
      ''caseCloseNotificationTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseCommentNotificationTemplate_type_info = new List<String>{
      ''caseCommentNotificationTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseCreateNotificationTemplate_type_info = new List<String>{
      ''caseCreateNotificationTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseFeedItemSettings_type_info = new List<String>{
      ''caseFeedItemSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] closeCaseThroughStatusChange_type_info = new List<String>{
      ''closeCaseThroughStatusChange'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultCaseOwner_type_info = new List<String>{
      ''defaultCaseOwner'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultCaseOwnerType_type_info = new List<String>{
      ''defaultCaseOwnerType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultCaseUser_type_info = new List<String>{
      ''defaultCaseUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailActionDefaultsHandlerClass_type_info = new List<String>{
      ''emailActionDefaultsHandlerClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailToCase_type_info = new List<String>{
      ''emailToCase'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableCaseFeed_type_info = new List<String>{
      ''enableCaseFeed'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableDraftEmails_type_info = new List<String>{
      ''enableDraftEmails'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableEarlyEscalationRuleTriggers_type_info = new List<String>{
      ''enableEarlyEscalationRuleTriggers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableEmailActionDefaultsHandler_type_info = new List<String>{
      ''enableEmailActionDefaultsHandler'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSuggestedArticlesApplication_type_info = new List<String>{
      ''enableSuggestedArticlesApplication'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSuggestedArticlesCustomerPortal_type_info = new List<String>{
      ''enableSuggestedArticlesCustomerPortal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSuggestedArticlesPartnerPortal_type_info = new List<String>{
      ''enableSuggestedArticlesPartnerPortal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSuggestedSolutions_type_info = new List<String>{
      ''enableSuggestedSolutions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] keepRecordTypeOnAssignmentRule_type_info = new List<String>{
      ''keepRecordTypeOnAssignmentRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyContactOnCaseComment_type_info = new List<String>{
      ''notifyContactOnCaseComment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyDefaultCaseOwner_type_info = new List<String>{
      ''notifyDefaultCaseOwner'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyOwnerOnCaseComment_type_info = new List<String>{
      ''notifyOwnerOnCaseComment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] notifyOwnerOnCaseOwnerChange_type_info = new List<String>{
      ''notifyOwnerOnCaseOwnerChange'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showFewerCloseActions_type_info = new List<String>{
      ''showFewerCloseActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] useSystemEmailAddress_type_info = new List<String>{
      ''useSystemEmailAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] webToCase_type_info = new List<String>{
      ''webToCase'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''caseAssignNotificationTemplate'',
      ''caseCloseNotificationTemplate'',
      ''caseCommentNotificationTemplate'',
      ''caseCreateNotificationTemplate'',
      ''caseFeedItemSettings'',
      ''closeCaseThroughStatusChange'',
      ''defaultCaseOwner'',
      ''defaultCaseOwnerType'',
      ''defaultCaseUser'',
      ''emailActionDefaultsHandlerClass'',
      ''emailToCase'',
      ''enableCaseFeed'',
      ''enableDraftEmails'',
      ''enableEarlyEscalationRuleTriggers'',
      ''enableEmailActionDefaultsHandler'',
      ''enableSuggestedArticlesApplication'',
      ''enableSuggestedArticlesCustomerPortal'',
      ''enableSuggestedArticlesPartnerPortal'',
      ''enableSuggestedSolutions'',
      ''keepRecordTypeOnAssignmentRule'',
      ''notifyContactOnCaseComment'',
      ''notifyDefaultCaseOwner'',
      ''notifyOwnerOnCaseComment'',
      ''notifyOwnerOnCaseOwnerChange'',
      ''showFewerCloseActions'',
      ''useSystemEmailAddress'',
      ''webToCase''
    };
  }
  public class PicklistEntry {
    public Boolean active;
    public Boolean defaultValue;
    public String label;
    public String validFor;
    public String value;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] defaultValue_type_info = new List<String>{
      ''defaultValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] validFor_type_info = new List<String>{
      ''validFor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''defaultValue'',
      ''label'',
      ''validFor'',
      ''value''
    };
  }
  public class NameSettings extends Metadata {
    public String type = ''NameSettings'';
    public String fullName;
    public Boolean enableMiddleName;
    public Boolean enableNameSuffix;
    private String[] enableMiddleName_type_info = new List<String>{
      ''enableMiddleName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableNameSuffix_type_info = new List<String>{
      ''enableNameSuffix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableMiddleName'',
      ''enableNameSuffix''
    };
  }
  public class AsyncResult {
    public Boolean done;
    public String id;
    public String message;
    public String state;
    public String statusCode;
    private String[] done_type_info = new List<String>{
      ''done'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] message_type_info = new List<String>{
      ''message'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] state_type_info = new List<String>{
      ''state'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] statusCode_type_info = new List<String>{
      ''statusCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''done'',
      ''id'',
      ''message'',
      ''state'',
      ''statusCode''
    };
  }
  public class ArticleTypeChannelDisplay {
    public MetadataService.ArticleTypeTemplate[] articleTypeTemplates;
    private String[] articleTypeTemplates_type_info = new List<String>{
      ''articleTypeTemplates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''articleTypeTemplates''
    };
  }
  public class checkRetrieveStatus_element {
    public String asyncProcessId;
    public Boolean includeZip;
    private String[] asyncProcessId_type_info = new List<String>{
      ''asyncProcessId'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] includeZip_type_info = new List<String>{
      ''includeZip'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''asyncProcessId'',
      ''includeZip''
    };
  }
  public class ProfileLayoutAssignment {
    public String layout;
    public String recordType;
    private String[] layout_type_info = new List<String>{
      ''layout'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] recordType_type_info = new List<String>{
      ''recordType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''layout'',
      ''recordType''
    };
  }
  public class FeedLayoutFilter {
    public String feedFilterType;
    public String feedItemType;
    private String[] feedFilterType_type_info = new List<String>{
      ''feedFilterType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] feedItemType_type_info = new List<String>{
      ''feedItemType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''feedFilterType'',
      ''feedItemType''
    };
  }
  public class ReportHistoricalSelector {
    public String[] snapshot;
    private String[] snapshot_type_info = new List<String>{
      ''snapshot'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''snapshot'' };
  }
  public class FlowTextTemplate {
    public String text;
    private String[] text_type_info = new List<String>{
      ''text'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''text'' };
  }
  public class ReportFolder extends Folder {
    public String type = ''ReportFolder'';
    public String fullName;
    public String accessType;
    public MetadataService.FolderShare[] folderShares;
    public String name;
    public String publicFolderAccess;
    public MetadataService.SharedTo sharedTo;
    private String[] accessType_type_info = new List<String>{
      ''accessType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] folderShares_type_info = new List<String>{
      ''folderShares'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] publicFolderAccess_type_info = new List<String>{
      ''publicFolderAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessType'',
      ''folderShares'',
      ''name'',
      ''publicFolderAccess'',
      ''sharedTo''
    };
  }
  public class RelatedListItem {
    public String[] customButtons;
    public String[] excludeButtons;
    public String[] fields;
    public String relatedList;
    public String sortField;
    public String sortOrder;
    private String[] customButtons_type_info = new List<String>{
      ''customButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] excludeButtons_type_info = new List<String>{
      ''excludeButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] relatedList_type_info = new List<String>{
      ''relatedList'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sortField_type_info = new List<String>{
      ''sortField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customButtons'',
      ''excludeButtons'',
      ''fields'',
      ''relatedList'',
      ''sortField'',
      ''sortOrder''
    };
  }
  public class FlowNode {
    public String label;
    public Integer locationX;
    public Integer locationY;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] locationX_type_info = new List<String>{
      ''locationX'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] locationY_type_info = new List<String>{
      ''locationY'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''locationX'',
      ''locationY''
    };
  }
  public class ProfileApexClassAccess {
    public String apexClass;
    public Boolean enabled;
    private String[] apexClass_type_info = new List<String>{
      ''apexClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apexClass'',
      ''enabled''
    };
  }
  public class CustomDataTypeComponentTranslation {
    public String developerSuffix;
    public String label;
    private String[] developerSuffix_type_info = new List<String>{
      ''developerSuffix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''developerSuffix'',
      ''label''
    };
  }
  public class ReputationPointsRules {
    public MetadataService.ReputationPointsRule[] pointsRule;
    private String[] pointsRule_type_info = new List<String>{
      ''pointsRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''pointsRule'' };
  }
  public class State {
    public Boolean active;
    public String integrationValue;
    public String isoCode;
    public String label;
    public Boolean standard;
    public Boolean visible;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] integrationValue_type_info = new List<String>{
      ''integrationValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isoCode_type_info = new List<String>{
      ''isoCode'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] standard_type_info = new List<String>{
      ''standard'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] visible_type_info = new List<String>{
      ''visible'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''active'',
      ''integrationValue'',
      ''isoCode'',
      ''label'',
      ''standard'',
      ''visible''
    };
  }
  public class PushNotifications {
    public MetadataService.PushNotification[] pushNotification;
    private String[] pushNotification_type_info = new List<String>{
      ''pushNotification'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''pushNotification''
    };
  }
  public class ConnectedAppCanvasConfig {
    public String accessMethod;
    public String canvasUrl;
    public String lifecycleClass;
    public String[] locations;
    public String[] options;
    public String samlInitiationMethod;
    private String[] accessMethod_type_info = new List<String>{
      ''accessMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] canvasUrl_type_info = new List<String>{
      ''canvasUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lifecycleClass_type_info = new List<String>{
      ''lifecycleClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] locations_type_info = new List<String>{
      ''locations'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] options_type_info = new List<String>{
      ''options'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] samlInitiationMethod_type_info = new List<String>{
      ''samlInitiationMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''accessMethod'',
      ''canvasUrl'',
      ''lifecycleClass'',
      ''locations'',
      ''options'',
      ''samlInitiationMethod''
    };
  }
  public class ReportTypeSectionTranslation {
    public MetadataService.ReportTypeColumnTranslation[] columns;
    public String label;
    public String name;
    private String[] columns_type_info = new List<String>{
      ''columns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''columns'',
      ''label'',
      ''name''
    };
  }
  public class FlowWaitEvent {
    public String conditionLogic;
    public MetadataService.FlowCondition[] conditions;
    public MetadataService.FlowConnector connector;
    public String eventType;
    public MetadataService.FlowWaitEventInputParameter[] inputParameters;
    public String label;
    public MetadataService.FlowWaitEventOutputParameter[] outputParameters;
    private String[] conditionLogic_type_info = new List<String>{
      ''conditionLogic'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] conditions_type_info = new List<String>{
      ''conditions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] eventType_type_info = new List<String>{
      ''eventType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] inputParameters_type_info = new List<String>{
      ''inputParameters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] outputParameters_type_info = new List<String>{
      ''outputParameters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''conditionLogic'',
      ''conditions'',
      ''connector'',
      ''eventType'',
      ''inputParameters'',
      ''label'',
      ''outputParameters''
    };
  }
  public class IpRange {
    public String description;
    public String end_x;
    public String start;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] end_x_type_info = new List<String>{
      ''end'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] start_type_info = new List<String>{
      ''start'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''end_x'',
      ''start''
    };
  }
  public class FlowApexPluginCallOutputParameter {
    public String assignToReference;
    public String name;
    private String[] assignToReference_type_info = new List<String>{
      ''assignToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignToReference'',
      ''name''
    };
  }
  public class ReportBucketField {
    public String bucketType;
    public String developerName;
    public String masterLabel;
    public String nullTreatment;
    public String otherBucketLabel;
    public String sourceColumnName;
    public Boolean useOther;
    public MetadataService.ReportBucketFieldValue[] values;
    private String[] bucketType_type_info = new List<String>{
      ''bucketType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] developerName_type_info = new List<String>{
      ''developerName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] nullTreatment_type_info = new List<String>{
      ''nullTreatment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] otherBucketLabel_type_info = new List<String>{
      ''otherBucketLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sourceColumnName_type_info = new List<String>{
      ''sourceColumnName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] useOther_type_info = new List<String>{
      ''useOther'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] values_type_info = new List<String>{
      ''values'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''bucketType'',
      ''developerName'',
      ''masterLabel'',
      ''nullTreatment'',
      ''otherBucketLabel'',
      ''sourceColumnName'',
      ''useOther'',
      ''values''
    };
  }
  public class Portal extends Metadata {
    public String type = ''Portal'';
    public String fullName;
    public Boolean active;
    public String admin;
    public String defaultLanguage;
    public String description;
    public String emailSenderAddress;
    public String emailSenderName;
    public Boolean enableSelfCloseCase;
    public String footerDocument;
    public String forgotPassTemplate;
    public String headerDocument;
    public Boolean isSelfRegistrationActivated;
    public String loginHeaderDocument;
    public String logoDocument;
    public String logoutUrl;
    public String newCommentTemplate;
    public String newPassTemplate;
    public String newUserTemplate;
    public String ownerNotifyTemplate;
    public String selfRegNewUserUrl;
    public String selfRegUserDefaultProfile;
    public String selfRegUserDefaultRole;
    public String selfRegUserTemplate;
    public Boolean showActionConfirmation;
    public String stylesheetDocument;
    public String type_x;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] admin_type_info = new List<String>{
      ''admin'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultLanguage_type_info = new List<String>{
      ''defaultLanguage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailSenderAddress_type_info = new List<String>{
      ''emailSenderAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] emailSenderName_type_info = new List<String>{
      ''emailSenderName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enableSelfCloseCase_type_info = new List<String>{
      ''enableSelfCloseCase'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] footerDocument_type_info = new List<String>{
      ''footerDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] forgotPassTemplate_type_info = new List<String>{
      ''forgotPassTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] headerDocument_type_info = new List<String>{
      ''headerDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isSelfRegistrationActivated_type_info = new List<String>{
      ''isSelfRegistrationActivated'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] loginHeaderDocument_type_info = new List<String>{
      ''loginHeaderDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logoDocument_type_info = new List<String>{
      ''logoDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logoutUrl_type_info = new List<String>{
      ''logoutUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] newCommentTemplate_type_info = new List<String>{
      ''newCommentTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] newPassTemplate_type_info = new List<String>{
      ''newPassTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] newUserTemplate_type_info = new List<String>{
      ''newUserTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ownerNotifyTemplate_type_info = new List<String>{
      ''ownerNotifyTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegNewUserUrl_type_info = new List<String>{
      ''selfRegNewUserUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegUserDefaultProfile_type_info = new List<String>{
      ''selfRegUserDefaultProfile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegUserDefaultRole_type_info = new List<String>{
      ''selfRegUserDefaultRole'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] selfRegUserTemplate_type_info = new List<String>{
      ''selfRegUserTemplate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showActionConfirmation_type_info = new List<String>{
      ''showActionConfirmation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] stylesheetDocument_type_info = new List<String>{
      ''stylesheetDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''admin'',
      ''defaultLanguage'',
      ''description'',
      ''emailSenderAddress'',
      ''emailSenderName'',
      ''enableSelfCloseCase'',
      ''footerDocument'',
      ''forgotPassTemplate'',
      ''headerDocument'',
      ''isSelfRegistrationActivated'',
      ''loginHeaderDocument'',
      ''logoDocument'',
      ''logoutUrl'',
      ''newCommentTemplate'',
      ''newPassTemplate'',
      ''newUserTemplate'',
      ''ownerNotifyTemplate'',
      ''selfRegNewUserUrl'',
      ''selfRegUserDefaultProfile'',
      ''selfRegUserDefaultRole'',
      ''selfRegUserTemplate'',
      ''showActionConfirmation'',
      ''stylesheetDocument'',
      ''type_x''
    };
  }
  public class DomainWhitelist {
    public String[] domain;
    private String[] domain_type_info = new List<String>{
      ''domain'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''domain'' };
  }
  public class RunTestFailure {
    public String id;
    public String message;
    public String methodName;
    public String name;
    public String namespace;
    public String packageName;
    public Boolean seeAllData;
    public String stackTrace;
    public Double time_x;
    public String type_x;
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] message_type_info = new List<String>{
      ''message'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] methodName_type_info = new List<String>{
      ''methodName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] namespace_type_info = new List<String>{
      ''namespace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] packageName_type_info = new List<String>{
      ''packageName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] seeAllData_type_info = new List<String>{
      ''seeAllData'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] stackTrace_type_info = new List<String>{
      ''stackTrace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] time_x_type_info = new List<String>{
      ''time'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''id'',
      ''message'',
      ''methodName'',
      ''name'',
      ''namespace'',
      ''packageName'',
      ''seeAllData'',
      ''stackTrace'',
      ''time_x'',
      ''type_x''
    };
  }
  public class Territory {
    public String accountAccessLevel;
    public String parentTerritory;
    private String[] accountAccessLevel_type_info = new List<String>{
      ''accountAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] parentTerritory_type_info = new List<String>{
      ''parentTerritory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''accountAccessLevel'',
      ''parentTerritory''
    };
  }
  public class SharedTo {
    public String allCustomerPortalUsers;
    public String allInternalUsers;
    public String allPartnerUsers;
    public String[] group_x;
    public String[] groups;
    public String[] managerSubordinates;
    public String[] managers;
    public String[] portalRole;
    public String[] portalRoleAndSubordinates;
    public String[] queue;
    public String[] role;
    public String[] roleAndSubordinates;
    public String[] roleAndSubordinatesInternal;
    public String[] roles;
    public String[] rolesAndSubordinates;
    public String[] territories;
    public String[] territoriesAndSubordinates;
    public String[] territory;
    public String[] territoryAndSubordinates;
    private String[] allCustomerPortalUsers_type_info = new List<String>{
      ''allCustomerPortalUsers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allInternalUsers_type_info = new List<String>{
      ''allInternalUsers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allPartnerUsers_type_info = new List<String>{
      ''allPartnerUsers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] group_x_type_info = new List<String>{
      ''group'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] groups_type_info = new List<String>{
      ''groups'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] managerSubordinates_type_info = new List<String>{
      ''managerSubordinates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] managers_type_info = new List<String>{
      ''managers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] portalRole_type_info = new List<String>{
      ''portalRole'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] portalRoleAndSubordinates_type_info = new List<String>{
      ''portalRoleAndSubordinates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] queue_type_info = new List<String>{
      ''queue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] role_type_info = new List<String>{
      ''role'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] roleAndSubordinates_type_info = new List<String>{
      ''roleAndSubordinates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] roleAndSubordinatesInternal_type_info = new List<String>{
      ''roleAndSubordinatesInternal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] roles_type_info = new List<String>{
      ''roles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] rolesAndSubordinates_type_info = new List<String>{
      ''rolesAndSubordinates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] territories_type_info = new List<String>{
      ''territories'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] territoriesAndSubordinates_type_info = new List<String>{
      ''territoriesAndSubordinates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] territory_type_info = new List<String>{
      ''territory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] territoryAndSubordinates_type_info = new List<String>{
      ''territoryAndSubordinates'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''allCustomerPortalUsers'',
      ''allInternalUsers'',
      ''allPartnerUsers'',
      ''group_x'',
      ''groups'',
      ''managerSubordinates'',
      ''managers'',
      ''portalRole'',
      ''portalRoleAndSubordinates'',
      ''queue'',
      ''role'',
      ''roleAndSubordinates'',
      ''roleAndSubordinatesInternal'',
      ''roles'',
      ''rolesAndSubordinates'',
      ''territories'',
      ''territoriesAndSubordinates'',
      ''territory'',
      ''territoryAndSubordinates''
    };
  }
  public class DeployDetails {
    public MetadataService.DeployMessage[] componentFailures;
    public MetadataService.DeployMessage[] componentSuccesses;
    public MetadataService.RetrieveResult retrieveResult;
    public MetadataService.RunTestsResult runTestResult;
    private String[] componentFailures_type_info = new List<String>{
      ''componentFailures'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] componentSuccesses_type_info = new List<String>{
      ''componentSuccesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] retrieveResult_type_info = new List<String>{
      ''retrieveResult'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] runTestResult_type_info = new List<String>{
      ''runTestResult'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''componentFailures'',
      ''componentSuccesses'',
      ''retrieveResult'',
      ''runTestResult''
    };
  }
  public class FlowRecordFilter {
    public String field;
    public String operator;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operator_type_info = new List<String>{
      ''operator'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''operator'',
      ''value''
    };
  }
  public class Group_x extends Metadata {
    public String type = ''Group_x'';
    public String fullName;
    public Boolean doesIncludeBosses;
    public String name;
    private String[] doesIncludeBosses_type_info = new List<String>{
      ''doesIncludeBosses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''doesIncludeBosses'',
      ''name''
    };
  }
  public class SubtabComponents {
    public MetadataService.Container[] containers;
    private String[] containers_type_info = new List<String>{
      ''containers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''containers'' };
  }
  public class FlowScreen {
    public Boolean allowBack;
    public Boolean allowFinish;
    public Boolean allowPause;
    public MetadataService.FlowConnector connector;
    public MetadataService.FlowScreenField[] fields;
    public String helpText;
    public String pausedText;
    private String[] allowBack_type_info = new List<String>{
      ''allowBack'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowFinish_type_info = new List<String>{
      ''allowFinish'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] allowPause_type_info = new List<String>{
      ''allowPause'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] helpText_type_info = new List<String>{
      ''helpText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pausedText_type_info = new List<String>{
      ''pausedText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''allowBack'',
      ''allowFinish'',
      ''allowPause'',
      ''connector'',
      ''fields'',
      ''helpText'',
      ''pausedText''
    };
  }
  public class WorkflowAlert extends WorkflowAction {
    public String type = ''WorkflowAlert'';
    public String fullName;
    public String[] ccEmails;
    public String description;
    public Boolean protected_x;
    public MetadataService.WorkflowEmailRecipient[] recipients;
    public String senderAddress;
    public String senderType;
    public String template;
    private String[] ccEmails_type_info = new List<String>{
      ''ccEmails'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] recipients_type_info = new List<String>{
      ''recipients'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] senderAddress_type_info = new List<String>{
      ''senderAddress'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] senderType_type_info = new List<String>{
      ''senderType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] template_type_info = new List<String>{
      ''template'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''ccEmails'',
      ''description'',
      ''protected_x'',
      ''recipients'',
      ''senderAddress'',
      ''senderType'',
      ''template''
    };
  }
  public class CustomPermissionDependencyRequired {
    public String customPermission;
    public Boolean dependency;
    private String[] customPermission_type_info = new List<String>{
      ''customPermission'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] dependency_type_info = new List<String>{
      ''dependency'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customPermission'',
      ''dependency''
    };
  }
  public class ReputationBranding {
    public String smallImage;
    private String[] smallImage_type_info = new List<String>{
      ''smallImage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''smallImage'' };
  }
  public class ForecastRangeSettings {
    public Integer beginning;
    public Integer displaying;
    public String periodType;
    private String[] beginning_type_info = new List<String>{
      ''beginning'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] displaying_type_info = new List<String>{
      ''displaying'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] periodType_type_info = new List<String>{
      ''periodType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''beginning'',
      ''displaying'',
      ''periodType''
    };
  }
  public class SFDCMobileSettings {
    public Boolean enableMobileLite;
    public Boolean enableUserToDeviceLinking;
    private String[] enableMobileLite_type_info = new List<String>{
      ''enableMobileLite'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableUserToDeviceLinking_type_info = new List<String>{
      ''enableUserToDeviceLinking'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enableMobileLite'',
      ''enableUserToDeviceLinking''
    };
  }
  public class LayoutSectionTranslation {
    public String label;
    public String section;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] section_type_info = new List<String>{
      ''section'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''section''
    };
  }
  public class EntitlementProcessMilestoneItem {
    public String businessHours;
    public String criteriaBooleanFilter;
    public MetadataService.FilterItem[] milestoneCriteriaFilterItems;
    public String milestoneCriteriaFormula;
    public String milestoneName;
    public String minutesCustomClass;
    public Integer minutesToComplete;
    public MetadataService.WorkflowActionReference[] successActions;
    public MetadataService.EntitlementProcessMilestoneTimeTrigger[] timeTriggers;
    public Boolean useCriteriaStartTime;
    private String[] businessHours_type_info = new List<String>{
      ''businessHours'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] criteriaBooleanFilter_type_info = new List<String>{
      ''criteriaBooleanFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] milestoneCriteriaFilterItems_type_info = new List<String>{
      ''milestoneCriteriaFilterItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] milestoneCriteriaFormula_type_info = new List<String>{
      ''milestoneCriteriaFormula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] milestoneName_type_info = new List<String>{
      ''milestoneName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] minutesCustomClass_type_info = new List<String>{
      ''minutesCustomClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] minutesToComplete_type_info = new List<String>{
      ''minutesToComplete'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] successActions_type_info = new List<String>{
      ''successActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] timeTriggers_type_info = new List<String>{
      ''timeTriggers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] useCriteriaStartTime_type_info = new List<String>{
      ''useCriteriaStartTime'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''businessHours'',
      ''criteriaBooleanFilter'',
      ''milestoneCriteriaFilterItems'',
      ''milestoneCriteriaFormula'',
      ''milestoneName'',
      ''minutesCustomClass'',
      ''minutesToComplete'',
      ''successActions'',
      ''timeTriggers'',
      ''useCriteriaStartTime''
    };
  }
  public class DataCategoryGroup extends Metadata {
    public String type = ''DataCategoryGroup'';
    public String fullName;
    public Boolean active;
    public MetadataService.DataCategory dataCategory;
    public String description;
    public String label;
    public MetadataService.ObjectUsage objectUsage;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] dataCategory_type_info = new List<String>{
      ''dataCategory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] objectUsage_type_info = new List<String>{
      ''objectUsage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''dataCategory'',
      ''description'',
      ''label'',
      ''objectUsage''
    };
  }
  public class listMetadata_element {
    public MetadataService.ListMetadataQuery[] queries;
    public Double asOfVersion;
    private String[] queries_type_info = new List<String>{
      ''queries'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] asOfVersion_type_info = new List<String>{
      ''asOfVersion'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''queries'',
      ''asOfVersion''
    };
  }
  public class ValidationRule extends Metadata {
    public String type = ''ValidationRule'';
    public String fullName;
    public Boolean active;
    public String description;
    public String errorConditionFormula;
    public String errorDisplayField;
    public String errorMessage;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorConditionFormula_type_info = new List<String>{
      ''errorConditionFormula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] errorDisplayField_type_info = new List<String>{
      ''errorDisplayField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''description'',
      ''errorConditionFormula'',
      ''errorDisplayField'',
      ''errorMessage''
    };
  }
  public class AuraDefinitionBundle extends Metadata {
    public String type = ''AuraDefinitionBundle'';
    public String fullName;
    public String SVGContent;
    public String controllerContent;
    public String designContent;
    public String documentationContent;
    public String helperContent;
    public String markup;
    public String modelContent;
    public String rendererContent;
    public String styleContent;
    public String testsuiteContent;
    public String type_x;
    private String[] SVGContent_type_info = new List<String>{
      ''SVGContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] controllerContent_type_info = new List<String>{
      ''controllerContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] designContent_type_info = new List<String>{
      ''designContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] documentationContent_type_info = new List<String>{
      ''documentationContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] helperContent_type_info = new List<String>{
      ''helperContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] markup_type_info = new List<String>{
      ''markup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] modelContent_type_info = new List<String>{
      ''modelContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] rendererContent_type_info = new List<String>{
      ''rendererContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] styleContent_type_info = new List<String>{
      ''styleContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] testsuiteContent_type_info = new List<String>{
      ''testsuiteContent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''SVGContent'',
      ''controllerContent'',
      ''designContent'',
      ''documentationContent'',
      ''helperContent'',
      ''markup'',
      ''modelContent'',
      ''rendererContent'',
      ''styleContent'',
      ''testsuiteContent'',
      ''type_x''
    };
  }
  public class FlowMetadataValue {
    public String name;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class ValueTypeField {
    public MetadataService.ValueTypeField[] fields;
    public String[] foreignKeyDomain;
    public Boolean isForeignKey;
    public Boolean isNameField;
    public Integer minOccurs;
    public String name;
    public MetadataService.PicklistEntry[] picklistValues;
    public String soapType;
    public Boolean valueRequired;
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] foreignKeyDomain_type_info = new List<String>{
      ''foreignKeyDomain'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] isForeignKey_type_info = new List<String>{
      ''isForeignKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isNameField_type_info = new List<String>{
      ''isNameField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] minOccurs_type_info = new List<String>{
      ''minOccurs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] picklistValues_type_info = new List<String>{
      ''picklistValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] soapType_type_info = new List<String>{
      ''soapType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] valueRequired_type_info = new List<String>{
      ''valueRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fields'',
      ''foreignKeyDomain'',
      ''isForeignKey'',
      ''isNameField'',
      ''minOccurs'',
      ''name'',
      ''picklistValues'',
      ''soapType'',
      ''valueRequired''
    };
  }
  public class VisualizationResource {
    public String description;
    public String file;
    public Integer rank;
    public String type_x;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] file_type_info = new List<String>{
      ''file'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] rank_type_info = new List<String>{
      ''rank'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''file'',
      ''rank'',
      ''type_x''
    };
  }
  public class ValidationRuleTranslation {
    public String errorMessage;
    public String name;
    private String[] errorMessage_type_info = new List<String>{
      ''errorMessage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''errorMessage'',
      ''name''
    };
  }
  public virtual class Metadata {
    public String fullName;
  }
  public class ReportBucketFieldValue {
    public MetadataService.ReportBucketFieldSourceValue[] sourceValues;
    public String value;
    private String[] sourceValues_type_info = new List<String>{
      ''sourceValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''sourceValues'',
      ''value''
    };
  }
  public class FeedItemSettings {
    public Integer characterLimit;
    public Boolean collapseThread;
    public String displayFormat;
    public String feedItemType;
    private String[] characterLimit_type_info = new List<String>{
      ''characterLimit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] collapseThread_type_info = new List<String>{
      ''collapseThread'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] displayFormat_type_info = new List<String>{
      ''displayFormat'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] feedItemType_type_info = new List<String>{
      ''feedItemType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''characterLimit'',
      ''collapseThread'',
      ''displayFormat'',
      ''feedItemType''
    };
  }
  public class FlowSubflow {
    public MetadataService.FlowConnector connector;
    public String flowName;
    public MetadataService.FlowSubflowInputAssignment[] inputAssignments;
    public MetadataService.FlowSubflowOutputAssignment[] outputAssignments;
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] flowName_type_info = new List<String>{
      ''flowName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] inputAssignments_type_info = new List<String>{
      ''inputAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] outputAssignments_type_info = new List<String>{
      ''outputAssignments'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''connector'',
      ''flowName'',
      ''inputAssignments'',
      ''outputAssignments''
    };
  }
  public class TouchMobileSettings {
    public Boolean enableTouchAppIPad;
    public Boolean enableTouchAppIPhone;
    public Boolean enableTouchBrowserIPad;
    public Boolean enableTouchIosPhone;
    public Boolean enableVisualforceInTouch;
    private String[] enableTouchAppIPad_type_info = new List<String>{
      ''enableTouchAppIPad'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableTouchAppIPhone_type_info = new List<String>{
      ''enableTouchAppIPhone'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableTouchBrowserIPad_type_info = new List<String>{
      ''enableTouchBrowserIPad'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableTouchIosPhone_type_info = new List<String>{
      ''enableTouchIosPhone'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableVisualforceInTouch_type_info = new List<String>{
      ''enableVisualforceInTouch'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enableTouchAppIPad'',
      ''enableTouchAppIPhone'',
      ''enableTouchBrowserIPad'',
      ''enableTouchIosPhone'',
      ''enableVisualforceInTouch''
    };
  }
  public class FlowScreenField {
    public String[] choiceReferences;
    public String dataType;
    public String defaultSelectedChoiceReference;
    public MetadataService.FlowElementReferenceOrValue defaultValue;
    public String fieldText;
    public String fieldType;
    public String helpText;
    public Boolean isRequired;
    public Integer scale;
    public MetadataService.FlowInputValidationRule validationRule;
    private String[] choiceReferences_type_info = new List<String>{
      ''choiceReferences'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] dataType_type_info = new List<String>{
      ''dataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultSelectedChoiceReference_type_info = new List<String>{
      ''defaultSelectedChoiceReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultValue_type_info = new List<String>{
      ''defaultValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fieldText_type_info = new List<String>{
      ''fieldText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fieldType_type_info = new List<String>{
      ''fieldType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] helpText_type_info = new List<String>{
      ''helpText'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isRequired_type_info = new List<String>{
      ''isRequired'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scale_type_info = new List<String>{
      ''scale'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] validationRule_type_info = new List<String>{
      ''validationRule'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''choiceReferences'',
      ''dataType'',
      ''defaultSelectedChoiceReference'',
      ''defaultValue'',
      ''fieldText'',
      ''fieldType'',
      ''helpText'',
      ''isRequired'',
      ''scale'',
      ''validationRule''
    };
  }
  public class Dashboard extends Metadata {
    public String type = ''Dashboard'';
    public String fullName;
    public String backgroundEndColor;
    public String backgroundFadeDirection;
    public String backgroundStartColor;
    public MetadataService.DashboardFilter[] dashboardFilters;
    public String dashboardResultRefreshedDate;
    public String dashboardResultRunningUser;
    public String dashboardType;
    public String description;
    public MetadataService.DashboardComponentSection leftSection;
    public MetadataService.DashboardComponentSection middleSection;
    public MetadataService.DashboardComponentSection rightSection;
    public String runningUser;
    public String textColor;
    public String title;
    public String titleColor;
    public Integer titleSize;
    private String[] backgroundEndColor_type_info = new List<String>{
      ''backgroundEndColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] backgroundFadeDirection_type_info = new List<String>{
      ''backgroundFadeDirection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] backgroundStartColor_type_info = new List<String>{
      ''backgroundStartColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] dashboardFilters_type_info = new List<String>{
      ''dashboardFilters'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] dashboardResultRefreshedDate_type_info = new List<String>{
      ''dashboardResultRefreshedDate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dashboardResultRunningUser_type_info = new List<String>{
      ''dashboardResultRunningUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dashboardType_type_info = new List<String>{
      ''dashboardType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] leftSection_type_info = new List<String>{
      ''leftSection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] middleSection_type_info = new List<String>{
      ''middleSection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] rightSection_type_info = new List<String>{
      ''rightSection'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] runningUser_type_info = new List<String>{
      ''runningUser'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] textColor_type_info = new List<String>{
      ''textColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] title_type_info = new List<String>{
      ''title'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] titleColor_type_info = new List<String>{
      ''titleColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] titleSize_type_info = new List<String>{
      ''titleSize'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''backgroundEndColor'',
      ''backgroundFadeDirection'',
      ''backgroundStartColor'',
      ''dashboardFilters'',
      ''dashboardResultRefreshedDate'',
      ''dashboardResultRunningUser'',
      ''dashboardType'',
      ''description'',
      ''leftSection'',
      ''middleSection'',
      ''rightSection'',
      ''runningUser'',
      ''textColor'',
      ''title'',
      ''titleColor'',
      ''titleSize''
    };
  }
  public class ReportDataCategoryFilter {
    public String dataCategory;
    public String dataCategoryGroup;
    public String operator;
    private String[] dataCategory_type_info = new List<String>{
      ''dataCategory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] dataCategoryGroup_type_info = new List<String>{
      ''dataCategoryGroup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operator_type_info = new List<String>{
      ''operator'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dataCategory'',
      ''dataCategoryGroup'',
      ''operator''
    };
  }
  public class MarketingActionSettings extends Metadata {
    public String type = ''MarketingActionSettings'';
    public String fullName;
    public Boolean enableMarketingAction;
    private String[] enableMarketingAction_type_info = new List<String>{
      ''enableMarketingAction'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''enableMarketingAction''
    };
  }
  public class FlowAssignment {
    public MetadataService.FlowAssignmentItem[] assignmentItems;
    public MetadataService.FlowConnector connector;
    private String[] assignmentItems_type_info = new List<String>{
      ''assignmentItems'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] connector_type_info = new List<String>{
      ''connector'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignmentItems'',
      ''connector''
    };
  }
  public class IdeaReputationLevel {
    public String name;
    public Integer value;
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''name'',
      ''value''
    };
  }
  public class NetworkTabSet {
    public String[] customTab;
    public String defaultTab;
    public String[] standardTab;
    private String[] customTab_type_info = new List<String>{
      ''customTab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] defaultTab_type_info = new List<String>{
      ''defaultTab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] standardTab_type_info = new List<String>{
      ''standardTab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customTab'',
      ''defaultTab'',
      ''standardTab''
    };
  }
  public class CustomApplicationComponents {
    public String alignment;
    public String[] customApplicationComponent;
    private String[] alignment_type_info = new List<String>{
      ''alignment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] customApplicationComponent_type_info = new List<String>{
      ''customApplicationComponent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''alignment'',
      ''customApplicationComponent''
    };
  }
  public class SynonymGroup {
    public String[] languages;
    public String[] terms;
    private String[] languages_type_info = new List<String>{
      ''languages'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] terms_type_info = new List<String>{
      ''terms'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''languages'',
      ''terms''
    };
  }
  public class VisualizationType {
    public String description;
    public String developerName;
    public String icon;
    public String masterLabel;
    public String scriptBootstrapMethod;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] developerName_type_info = new List<String>{
      ''developerName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] icon_type_info = new List<String>{
      ''icon'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] scriptBootstrapMethod_type_info = new List<String>{
      ''scriptBootstrapMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''developerName'',
      ''icon'',
      ''masterLabel'',
      ''scriptBootstrapMethod''
    };
  }
  public class DashboardFolder extends Folder {
    public String type = ''DashboardFolder'';
    public String fullName;
    public String accessType;
    public MetadataService.FolderShare[] folderShares;
    public String name;
    public String publicFolderAccess;
    public MetadataService.SharedTo sharedTo;
    private String[] accessType_type_info = new List<String>{
      ''accessType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] folderShares_type_info = new List<String>{
      ''folderShares'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] publicFolderAccess_type_info = new List<String>{
      ''publicFolderAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessType'',
      ''folderShares'',
      ''name'',
      ''publicFolderAccess'',
      ''sharedTo''
    };
  }
  public class PermissionSetApexPageAccess {
    public String apexPage;
    public Boolean enabled;
    private String[] apexPage_type_info = new List<String>{
      ''apexPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enabled_type_info = new List<String>{
      ''enabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apexPage'',
      ''enabled''
    };
  }
  public class CustomObject extends Metadata {
    public String type = ''CustomObject'';
    public String fullName;
    public MetadataService.ActionOverride[] actionOverrides;
    public Boolean allowInChatterGroups;
    public MetadataService.ArticleTypeChannelDisplay articleTypeChannelDisplay;
    public MetadataService.BusinessProcess[] businessProcesses;
    public String compactLayoutAssignment;
    public MetadataService.CompactLayout[] compactLayouts;
    public String customHelp;
    public String customHelpPage;
    public String customSettingsType;
    public String deploymentStatus;
    public Boolean deprecated;
    public String description;
    public Boolean enableActivities;
    public Boolean enableBulkApi;
    public Boolean enableDivisions;
    public Boolean enableEnhancedLookup;
    public Boolean enableFeeds;
    public Boolean enableHistory;
    public Boolean enableReports;
    public Boolean enableSharing;
    public Boolean enableStreamingApi;
    public String externalDataSource;
    public String externalName;
    public String externalRepository;
    public String externalSharingModel;
    public MetadataService.FieldSet[] fieldSets;
    public MetadataService.CustomField[] fields;
    public String gender;
    public MetadataService.HistoryRetentionPolicy historyRetentionPolicy;
    public Boolean household;
    public String label;
    public MetadataService.ListView[] listViews;
    public MetadataService.CustomField nameField;
    public String pluralLabel;
    public Boolean recordTypeTrackFeedHistory;
    public Boolean recordTypeTrackHistory;
    public MetadataService.RecordType[] recordTypes;
    public MetadataService.SearchLayouts searchLayouts;
    public String sharingModel;
    public MetadataService.SharingReason[] sharingReasons;
    public MetadataService.SharingRecalculation[] sharingRecalculations;
    public String startsWith;
    public MetadataService.ValidationRule[] validationRules;
    public String visibility;
    public MetadataService.WebLink[] webLinks;
    private String[] actionOverrides_type_info = new List<String>{
      ''actionOverrides'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] allowInChatterGroups_type_info = new List<String>{
      ''allowInChatterGroups'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] articleTypeChannelDisplay_type_info = new List<String>{
      ''articleTypeChannelDisplay'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] businessProcesses_type_info = new List<String>{
      ''businessProcesses'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] compactLayoutAssignment_type_info = new List<String>{
      ''compactLayoutAssignment'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] compactLayouts_type_info = new List<String>{
      ''compactLayouts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customHelp_type_info = new List<String>{
      ''customHelp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customHelpPage_type_info = new List<String>{
      ''customHelpPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customSettingsType_type_info = new List<String>{
      ''customSettingsType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] deploymentStatus_type_info = new List<String>{
      ''deploymentStatus'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] deprecated_type_info = new List<String>{
      ''deprecated'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableActivities_type_info = new List<String>{
      ''enableActivities'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableBulkApi_type_info = new List<String>{
      ''enableBulkApi'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableDivisions_type_info = new List<String>{
      ''enableDivisions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableEnhancedLookup_type_info = new List<String>{
      ''enableEnhancedLookup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableFeeds_type_info = new List<String>{
      ''enableFeeds'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableHistory_type_info = new List<String>{
      ''enableHistory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableReports_type_info = new List<String>{
      ''enableReports'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableSharing_type_info = new List<String>{
      ''enableSharing'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableStreamingApi_type_info = new List<String>{
      ''enableStreamingApi'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalDataSource_type_info = new List<String>{
      ''externalDataSource'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalName_type_info = new List<String>{
      ''externalName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalRepository_type_info = new List<String>{
      ''externalRepository'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] externalSharingModel_type_info = new List<String>{
      ''externalSharingModel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] fieldSets_type_info = new List<String>{
      ''fieldSets'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] gender_type_info = new List<String>{
      ''gender'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] historyRetentionPolicy_type_info = new List<String>{
      ''historyRetentionPolicy'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] household_type_info = new List<String>{
      ''household'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] listViews_type_info = new List<String>{
      ''listViews'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] nameField_type_info = new List<String>{
      ''nameField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pluralLabel_type_info = new List<String>{
      ''pluralLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recordTypeTrackFeedHistory_type_info = new List<String>{
      ''recordTypeTrackFeedHistory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recordTypeTrackHistory_type_info = new List<String>{
      ''recordTypeTrackHistory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] recordTypes_type_info = new List<String>{
      ''recordTypes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] searchLayouts_type_info = new List<String>{
      ''searchLayouts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharingModel_type_info = new List<String>{
      ''sharingModel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharingReasons_type_info = new List<String>{
      ''sharingReasons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sharingRecalculations_type_info = new List<String>{
      ''sharingRecalculations'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] startsWith_type_info = new List<String>{
      ''startsWith'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] validationRules_type_info = new List<String>{
      ''validationRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] visibility_type_info = new List<String>{
      ''visibility'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] webLinks_type_info = new List<String>{
      ''webLinks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''actionOverrides'',
      ''allowInChatterGroups'',
      ''articleTypeChannelDisplay'',
      ''businessProcesses'',
      ''compactLayoutAssignment'',
      ''compactLayouts'',
      ''customHelp'',
      ''customHelpPage'',
      ''customSettingsType'',
      ''deploymentStatus'',
      ''deprecated'',
      ''description'',
      ''enableActivities'',
      ''enableBulkApi'',
      ''enableDivisions'',
      ''enableEnhancedLookup'',
      ''enableFeeds'',
      ''enableHistory'',
      ''enableReports'',
      ''enableSharing'',
      ''enableStreamingApi'',
      ''externalDataSource'',
      ''externalName'',
      ''externalRepository'',
      ''externalSharingModel'',
      ''fieldSets'',
      ''fields'',
      ''gender'',
      ''historyRetentionPolicy'',
      ''household'',
      ''label'',
      ''listViews'',
      ''nameField'',
      ''pluralLabel'',
      ''recordTypeTrackFeedHistory'',
      ''recordTypeTrackHistory'',
      ''recordTypes'',
      ''searchLayouts'',
      ''sharingModel'',
      ''sharingReasons'',
      ''sharingRecalculations'',
      ''startsWith'',
      ''validationRules'',
      ''visibility'',
      ''webLinks''
    };
  }
  public class CustomMetadataValue {
    public String field;
    public String value;
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''field'',
      ''value''
    };
  }
  public class Translations extends Metadata {
    public String type = ''Translations'';
    public String fullName;
    public MetadataService.CustomApplicationTranslation[] customApplications;
    public MetadataService.CustomDataTypeTranslation[] customDataTypeTranslations;
    public MetadataService.CustomLabelTranslation[] customLabels;
    public MetadataService.CustomPageWebLinkTranslation[] customPageWebLinks;
    public MetadataService.CustomTabTranslation[] customTabs;
    public MetadataService.GlobalQuickActionTranslation[] quickActions;
    public MetadataService.ReportTypeTranslation[] reportTypes;
    public MetadataService.ScontrolTranslation[] scontrols;
    private String[] customApplications_type_info = new List<String>{
      ''customApplications'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customDataTypeTranslations_type_info = new List<String>{
      ''customDataTypeTranslations'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customLabels_type_info = new List<String>{
      ''customLabels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customPageWebLinks_type_info = new List<String>{
      ''customPageWebLinks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] customTabs_type_info = new List<String>{
      ''customTabs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] quickActions_type_info = new List<String>{
      ''quickActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] reportTypes_type_info = new List<String>{
      ''reportTypes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] scontrols_type_info = new List<String>{
      ''scontrols'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''customApplications'',
      ''customDataTypeTranslations'',
      ''customLabels'',
      ''customPageWebLinks'',
      ''customTabs'',
      ''quickActions'',
      ''reportTypes'',
      ''scontrols''
    };
  }
  public class ReportTypeTranslation {
    public String description;
    public String label;
    public String name;
    public MetadataService.ReportTypeSectionTranslation[] sections;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sections_type_info = new List<String>{
      ''sections'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''label'',
      ''name'',
      ''sections''
    };
  }
  public class FlowAssignmentItem {
    public String assignToReference;
    public String operator;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] assignToReference_type_info = new List<String>{
      ''assignToReference'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] operator_type_info = new List<String>{
      ''operator'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''assignToReference'',
      ''operator'',
      ''value''
    };
  }
  public class Territory2SettingsOpportunityFilter {
    public String apexClassName;
    public Boolean enableFilter;
    public Boolean runOnCreate;
    private String[] apexClassName_type_info = new List<String>{
      ''apexClassName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''true''
    };
    private String[] enableFilter_type_info = new List<String>{
      ''enableFilter'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] runOnCreate_type_info = new List<String>{
      ''runOnCreate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''apexClassName'',
      ''enableFilter'',
      ''runOnCreate''
    };
  }
  public class CustomLabels extends Metadata {
    public String type = ''CustomLabels'';
    public String fullName;
    public MetadataService.CustomLabel[] labels;
    private String[] labels_type_info = new List<String>{
      ''labels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''labels''
    };
  }
  public class PackageTypeMembers {
    public String[] members;
    public String name;
    private String[] members_type_info = new List<String>{
      ''members'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''members'',
      ''name''
    };
  }
  public class renameMetadataResponse_element {
    public MetadataService.SaveResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class HistoryRetentionPolicy {
    public Integer archiveAfterMonths;
    public Integer archiveRetentionYears;
    public String description;
    private String[] archiveAfterMonths_type_info = new List<String>{
      ''archiveAfterMonths'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] archiveRetentionYears_type_info = new List<String>{
      ''archiveRetentionYears'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''archiveAfterMonths'',
      ''archiveRetentionYears'',
      ''description''
    };
  }
  public class cancelDeploy_element {
    public String String_x;
    private String[] String_x_type_info = new List<String>{
      ''String'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''String_x'' };
  }
  public class WorkflowSend extends WorkflowAction {
    public String type = ''WorkflowSend'';
    public String fullName;
    public String action;
    public String description;
    public String label;
    public String language;
    public Boolean protected_x;
    private String[] action_type_info = new List<String>{
      ''action'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] language_type_info = new List<String>{
      ''language'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] protected_x_type_info = new List<String>{
      ''protected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''action'',
      ''description'',
      ''label'',
      ''language'',
      ''protected_x''
    };
  }
  public class EntitlementProcessMilestoneTimeTrigger {
    public MetadataService.WorkflowActionReference[] actions;
    public Integer timeLength;
    public String workflowTimeTriggerUnit;
    private String[] actions_type_info = new List<String>{
      ''actions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] timeLength_type_info = new List<String>{
      ''timeLength'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] workflowTimeTriggerUnit_type_info = new List<String>{
      ''workflowTimeTriggerUnit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''actions'',
      ''timeLength'',
      ''workflowTimeTriggerUnit''
    };
  }
  public class ArticleTypeTemplate {
    public String channel;
    public String page_x;
    public String template;
    private String[] channel_type_info = new List<String>{
      ''channel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] template_type_info = new List<String>{
      ''template'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''channel'',
      ''page_x'',
      ''template''
    };
  }
  public class AnalyticSnapshotMapping {
    public String aggregateType;
    public String sourceField;
    public String sourceType;
    public String targetField;
    private String[] aggregateType_type_info = new List<String>{
      ''aggregateType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sourceField_type_info = new List<String>{
      ''sourceField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sourceType_type_info = new List<String>{
      ''sourceType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] targetField_type_info = new List<String>{
      ''targetField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregateType'',
      ''sourceField'',
      ''sourceType'',
      ''targetField''
    };
  }
  public class PermissionSetFieldPermissions {
    public Boolean editable;
    public String field;
    public Boolean readable;
    private String[] editable_type_info = new List<String>{
      ''editable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] readable_type_info = new List<String>{
      ''readable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''editable'',
      ''field'',
      ''readable''
    };
  }
  public class ReportGrouping {
    public String aggregateType;
    public String dateGranularity;
    public String field;
    public String sortByName;
    public String sortOrder;
    public String sortType;
    private String[] aggregateType_type_info = new List<String>{
      ''aggregateType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] dateGranularity_type_info = new List<String>{
      ''dateGranularity'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sortByName_type_info = new List<String>{
      ''sortByName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sortType_type_info = new List<String>{
      ''sortType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregateType'',
      ''dateGranularity'',
      ''field'',
      ''sortByName'',
      ''sortOrder'',
      ''sortType''
    };
  }
  public class SkillProfileAssignments {
    public String[] profile;
    private String[] profile_type_info = new List<String>{
      ''profile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''profile'' };
  }
  public class CancelDeployResult {
    public Boolean done;
    public String id;
    private String[] done_type_info = new List<String>{
      ''done'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] id_type_info = new List<String>{
      ''id'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''done'', ''id'' };
  }
  public class CustomShortcut {
    public String description;
    public String eventName;
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] eventName_type_info = new List<String>{
      ''eventName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''description'',
      ''eventName''
    };
  }
  public class SynonymDictionary extends Metadata {
    public String type = ''SynonymDictionary'';
    public String fullName;
    public MetadataService.SynonymGroup[] groups;
    public Boolean isProtected;
    public String label;
    private String[] groups_type_info = new List<String>{
      ''groups'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] isProtected_type_info = new List<String>{
      ''isProtected'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''groups'',
      ''isProtected'',
      ''label''
    };
  }
  public class CustomTab extends Metadata {
    public String type = ''CustomTab'';
    public String fullName;
    public String auraComponent;
    public Boolean customObject;
    public String description;
    public String flexiPage;
    public Integer frameHeight;
    public Boolean hasSidebar;
    public String icon;
    public String label;
    public Boolean mobileReady;
    public String motif;
    public String page_x;
    public String scontrol;
    public String splashPageLink;
    public String url;
    public String urlEncodingKey;
    private String[] auraComponent_type_info = new List<String>{
      ''auraComponent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customObject_type_info = new List<String>{
      ''customObject'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] flexiPage_type_info = new List<String>{
      ''flexiPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] frameHeight_type_info = new List<String>{
      ''frameHeight'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] hasSidebar_type_info = new List<String>{
      ''hasSidebar'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] icon_type_info = new List<String>{
      ''icon'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] mobileReady_type_info = new List<String>{
      ''mobileReady'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] motif_type_info = new List<String>{
      ''motif'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scontrol_type_info = new List<String>{
      ''scontrol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] splashPageLink_type_info = new List<String>{
      ''splashPageLink'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] url_type_info = new List<String>{
      ''url'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] urlEncodingKey_type_info = new List<String>{
      ''urlEncodingKey'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''auraComponent'',
      ''customObject'',
      ''description'',
      ''flexiPage'',
      ''frameHeight'',
      ''hasSidebar'',
      ''icon'',
      ''label'',
      ''mobileReady'',
      ''motif'',
      ''page_x'',
      ''scontrol'',
      ''splashPageLink'',
      ''url'',
      ''urlEncodingKey''
    };
  }
  public class Letterhead extends Metadata {
    public String type = ''Letterhead'';
    public String fullName;
    public Boolean available;
    public String backgroundColor;
    public String bodyColor;
    public MetadataService.LetterheadLine bottomLine;
    public String description;
    public MetadataService.LetterheadHeaderFooter footer;
    public MetadataService.LetterheadHeaderFooter header;
    public MetadataService.LetterheadLine middleLine;
    public String name;
    public MetadataService.LetterheadLine topLine;
    private String[] available_type_info = new List<String>{
      ''available'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] backgroundColor_type_info = new List<String>{
      ''backgroundColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] bodyColor_type_info = new List<String>{
      ''bodyColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] bottomLine_type_info = new List<String>{
      ''bottomLine'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] footer_type_info = new List<String>{
      ''footer'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] header_type_info = new List<String>{
      ''header'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] middleLine_type_info = new List<String>{
      ''middleLine'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] topLine_type_info = new List<String>{
      ''topLine'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''available'',
      ''backgroundColor'',
      ''bodyColor'',
      ''bottomLine'',
      ''description'',
      ''footer'',
      ''header'',
      ''middleLine'',
      ''name'',
      ''topLine''
    };
  }
  public class ReportTypeColumnTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class CustomPageWebLinkTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class EntitlementSettings extends Metadata {
    public String type = ''EntitlementSettings'';
    public String fullName;
    public Boolean assetLookupLimitedToActiveEntitlementsOnAccount;
    public Boolean assetLookupLimitedToActiveEntitlementsOnContact;
    public Boolean assetLookupLimitedToSameAccount;
    public Boolean assetLookupLimitedToSameContact;
    public Boolean enableEntitlementVersioning;
    public Boolean enableEntitlements;
    public Boolean entitlementLookupLimitedToActiveStatus;
    public Boolean entitlementLookupLimitedToSameAccount;
    public Boolean entitlementLookupLimitedToSameAsset;
    public Boolean entitlementLookupLimitedToSameContact;
    private String[] assetLookupLimitedToActiveEntitlementsOnAccount_type_info = new List<String>{
      ''assetLookupLimitedToActiveEntitlementsOnAccount'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assetLookupLimitedToActiveEntitlementsOnContact_type_info = new List<String>{
      ''assetLookupLimitedToActiveEntitlementsOnContact'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assetLookupLimitedToSameAccount_type_info = new List<String>{
      ''assetLookupLimitedToSameAccount'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assetLookupLimitedToSameContact_type_info = new List<String>{
      ''assetLookupLimitedToSameContact'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableEntitlementVersioning_type_info = new List<String>{
      ''enableEntitlementVersioning'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enableEntitlements_type_info = new List<String>{
      ''enableEntitlements'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] entitlementLookupLimitedToActiveStatus_type_info = new List<String>{
      ''entitlementLookupLimitedToActiveStatus'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entitlementLookupLimitedToSameAccount_type_info = new List<String>{
      ''entitlementLookupLimitedToSameAccount'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entitlementLookupLimitedToSameAsset_type_info = new List<String>{
      ''entitlementLookupLimitedToSameAsset'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] entitlementLookupLimitedToSameContact_type_info = new List<String>{
      ''entitlementLookupLimitedToSameContact'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''assetLookupLimitedToActiveEntitlementsOnAccount'',
      ''assetLookupLimitedToActiveEntitlementsOnContact'',
      ''assetLookupLimitedToSameAccount'',
      ''assetLookupLimitedToSameContact'',
      ''enableEntitlementVersioning'',
      ''enableEntitlements'',
      ''entitlementLookupLimitedToActiveStatus'',
      ''entitlementLookupLimitedToSameAccount'',
      ''entitlementLookupLimitedToSameAsset'',
      ''entitlementLookupLimitedToSameContact''
    };
  }
  public class FlowBaseElement {
    public MetadataService.FlowMetadataValue[] processMetadataValues;
    private String[] processMetadataValues_type_info = new List<String>{
      ''processMetadataValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''processMetadataValues''
    };
  }
  public class cancelDeployResponse_element {
    public MetadataService.CancelDeployResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class DocumentFolder extends Folder {
    public String type = ''DocumentFolder'';
    public String fullName;
    public String accessType;
    public MetadataService.FolderShare[] folderShares;
    public String name;
    public String publicFolderAccess;
    public MetadataService.SharedTo sharedTo;
    private String[] accessType_type_info = new List<String>{
      ''accessType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] folderShares_type_info = new List<String>{
      ''folderShares'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] publicFolderAccess_type_info = new List<String>{
      ''publicFolderAccess'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessType'',
      ''folderShares'',
      ''name'',
      ''publicFolderAccess'',
      ''sharedTo''
    };
  }
  public class FlowConstant {
    public String dataType;
    public MetadataService.FlowElementReferenceOrValue value;
    private String[] dataType_type_info = new List<String>{
      ''dataType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] value_type_info = new List<String>{
      ''value'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''dataType'',
      ''value''
    };
  }
  public class ChatterMobileSettings {
    public Boolean enablePushNotifications;
    private String[] enablePushNotifications_type_info = new List<String>{
      ''enablePushNotifications'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enablePushNotifications''
    };
  }
  public class CallCenterSection {
    public MetadataService.CallCenterItem[] items;
    public String label;
    public String name;
    private String[] items_type_info = new List<String>{
      ''items'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''items'',
      ''label'',
      ''name''
    };
  }
  public class PagesToOpen {
    public String[] pageToOpen;
    private String[] pageToOpen_type_info = new List<String>{
      ''pageToOpen'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''pageToOpen'' };
  }
  public class ReportChart {
    public String backgroundColor1;
    public String backgroundColor2;
    public String backgroundFadeDir;
    public MetadataService.ChartSummary[] chartSummaries;
    public String chartType;
    public Boolean enableHoverLabels;
    public Boolean expandOthers;
    public String groupingColumn;
    public String legendPosition;
    public String location;
    public String secondaryGroupingColumn;
    public Boolean showAxisLabels;
    public Boolean showPercentage;
    public Boolean showTotal;
    public Boolean showValues;
    public String size;
    public Double summaryAxisManualRangeEnd;
    public Double summaryAxisManualRangeStart;
    public String summaryAxisRange;
    public String textColor;
    public Integer textSize;
    public String title;
    public String titleColor;
    public Integer titleSize;
    private String[] backgroundColor1_type_info = new List<String>{
      ''backgroundColor1'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] backgroundColor2_type_info = new List<String>{
      ''backgroundColor2'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] backgroundFadeDir_type_info = new List<String>{
      ''backgroundFadeDir'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] chartSummaries_type_info = new List<String>{
      ''chartSummaries'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] chartType_type_info = new List<String>{
      ''chartType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enableHoverLabels_type_info = new List<String>{
      ''enableHoverLabels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] expandOthers_type_info = new List<String>{
      ''expandOthers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] groupingColumn_type_info = new List<String>{
      ''groupingColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] legendPosition_type_info = new List<String>{
      ''legendPosition'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] location_type_info = new List<String>{
      ''location'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] secondaryGroupingColumn_type_info = new List<String>{
      ''secondaryGroupingColumn'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showAxisLabels_type_info = new List<String>{
      ''showAxisLabels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showPercentage_type_info = new List<String>{
      ''showPercentage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showTotal_type_info = new List<String>{
      ''showTotal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showValues_type_info = new List<String>{
      ''showValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] size_type_info = new List<String>{
      ''size'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryAxisManualRangeEnd_type_info = new List<String>{
      ''summaryAxisManualRangeEnd'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryAxisManualRangeStart_type_info = new List<String>{
      ''summaryAxisManualRangeStart'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] summaryAxisRange_type_info = new List<String>{
      ''summaryAxisRange'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] textColor_type_info = new List<String>{
      ''textColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] textSize_type_info = new List<String>{
      ''textSize'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] title_type_info = new List<String>{
      ''title'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] titleColor_type_info = new List<String>{
      ''titleColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] titleSize_type_info = new List<String>{
      ''titleSize'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''backgroundColor1'',
      ''backgroundColor2'',
      ''backgroundFadeDir'',
      ''chartSummaries'',
      ''chartType'',
      ''enableHoverLabels'',
      ''expandOthers'',
      ''groupingColumn'',
      ''legendPosition'',
      ''location'',
      ''secondaryGroupingColumn'',
      ''showAxisLabels'',
      ''showPercentage'',
      ''showTotal'',
      ''showValues'',
      ''size'',
      ''summaryAxisManualRangeEnd'',
      ''summaryAxisManualRangeStart'',
      ''summaryAxisRange'',
      ''textColor'',
      ''textSize'',
      ''title'',
      ''titleColor'',
      ''titleSize''
    };
  }
  public class checkRetrieveStatusResponse_element {
    public MetadataService.RetrieveResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class KnowledgeCaseSettings {
    public String articlePDFCreationProfile;
    public MetadataService.KnowledgeSitesSettings articlePublicSharingSites;
    public MetadataService.KnowledgeSitesSettings articlePublicSharingSitesChatterAnswers;
    public String assignTo;
    public String customizationClass;
    public String defaultContributionArticleType;
    public String editor;
    public Boolean enableArticleCreation;
    public Boolean enableArticlePublicSharingSites;
    public Boolean useProfileForPDFCreation;
    private String[] articlePDFCreationProfile_type_info = new List<String>{
      ''articlePDFCreationProfile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] articlePublicSharingSites_type_info = new List<String>{
      ''articlePublicSharingSites'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] articlePublicSharingSitesChatterAnswers_type_info = new List<String>{
      ''articlePublicSharingSitesChatterAnswers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] assignTo_type_info = new List<String>{
      ''assignTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customizationClass_type_info = new List<String>{
      ''customizationClass'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultContributionArticleType_type_info = new List<String>{
      ''defaultContributionArticleType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] editor_type_info = new List<String>{
      ''editor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableArticleCreation_type_info = new List<String>{
      ''enableArticleCreation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableArticlePublicSharingSites_type_info = new List<String>{
      ''enableArticlePublicSharingSites'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] useProfileForPDFCreation_type_info = new List<String>{
      ''useProfileForPDFCreation'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''articlePDFCreationProfile'',
      ''articlePublicSharingSites'',
      ''articlePublicSharingSitesChatterAnswers'',
      ''assignTo'',
      ''customizationClass'',
      ''defaultContributionArticleType'',
      ''editor'',
      ''enableArticleCreation'',
      ''enableArticlePublicSharingSites'',
      ''useProfileForPDFCreation''
    };
  }
  public class SharingReason extends Metadata {
    public String type = ''SharingReason'';
    public String fullName;
    public String label;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''label''
    };
  }
  public class ProfileFieldLevelSecurity {
    public Boolean editable;
    public String field;
    public Boolean readable;
    private String[] editable_type_info = new List<String>{
      ''editable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] readable_type_info = new List<String>{
      ''readable'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''editable'',
      ''field'',
      ''readable''
    };
  }
  public class SharingOwnerRule extends SharingBaseRule {
    public String type = ''SharingOwnerRule'';
    public String fullName;
    public String accessLevel;
    public MetadataService.AccountSharingRuleSettings accountSettings;
    public String description;
    public String label;
    public MetadataService.SharedTo sharedTo;
    private String[] accessLevel_type_info = new List<String>{
      ''accessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] accountSettings_type_info = new List<String>{
      ''accountSettings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sharedTo_type_info = new List<String>{
      ''sharedTo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    public MetadataService.SharedTo sharedFrom;
    private String[] sharedFrom_type_info = new List<String>{
      ''sharedFrom'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessLevel'',
      ''accountSettings'',
      ''description'',
      ''label'',
      ''sharedTo'',
      ''sharedFrom''
    };
  }
  public class CompactLayout extends Metadata {
    public String type = ''CompactLayout'';
    public String fullName;
    public String[] fields;
    public String label;
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''fields'',
      ''label''
    };
  }
  public class MiniLayout {
    public String[] fields;
    public MetadataService.RelatedListItem[] relatedLists;
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] relatedLists_type_info = new List<String>{
      ''relatedLists'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fields'',
      ''relatedLists''
    };
  }
  public class ReportBucketFieldSourceValue {
    public String from_x;
    public String sourceValue;
    public String to;
    private String[] from_x_type_info = new List<String>{
      ''from'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sourceValue_type_info = new List<String>{
      ''sourceValue'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] to_type_info = new List<String>{
      ''to'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''from_x'',
      ''sourceValue'',
      ''to''
    };
  }
  public class UpsertResult {
    public Boolean created;
    public MetadataService.Error[] errors;
    public String fullName;
    public Boolean success;
    private String[] created_type_info = new List<String>{
      ''created'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] errors_type_info = new List<String>{
      ''errors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] success_type_info = new List<String>{
      ''success'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''created'',
      ''errors'',
      ''fullName'',
      ''success''
    };
  }
  public class AccessMapping {
    public String accessLevel;
    public String object_x;
    public String objectField;
    public String userField;
    private String[] accessLevel_type_info = new List<String>{
      ''accessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] object_x_type_info = new List<String>{
      ''object'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] objectField_type_info = new List<String>{
      ''objectField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] userField_type_info = new List<String>{
      ''userField'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''accessLevel'',
      ''object_x'',
      ''objectField'',
      ''userField''
    };
  }
  public class CustomDataTypeComponent {
    public String developerSuffix;
    public Boolean enforceFieldRequiredness;
    public String label;
    public Integer length;
    public Integer precision;
    public Integer scale;
    public String sortOrder;
    public Integer sortPriority;
    public String type_x;
    private String[] developerSuffix_type_info = new List<String>{
      ''developerSuffix'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] enforceFieldRequiredness_type_info = new List<String>{
      ''enforceFieldRequiredness'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] length_type_info = new List<String>{
      ''length'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] precision_type_info = new List<String>{
      ''precision'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scale_type_info = new List<String>{
      ''scale'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortOrder_type_info = new List<String>{
      ''sortOrder'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] sortPriority_type_info = new List<String>{
      ''sortPriority'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] type_x_type_info = new List<String>{
      ''type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''developerSuffix'',
      ''enforceFieldRequiredness'',
      ''label'',
      ''length'',
      ''precision'',
      ''scale'',
      ''sortOrder'',
      ''sortPriority'',
      ''type_x''
    };
  }
  public class CustomObjectTranslation extends Metadata {
    public String type = ''CustomObjectTranslation'';
    public String fullName;
    public MetadataService.ObjectNameCaseValue[] caseValues;
    public MetadataService.CustomFieldTranslation[] fields;
    public String gender;
    public MetadataService.LayoutTranslation[] layouts;
    public String nameFieldLabel;
    public MetadataService.QuickActionTranslation[] quickActions;
    public MetadataService.RecordTypeTranslation[] recordTypes;
    public MetadataService.SharingReasonTranslation[] sharingReasons;
    public MetadataService.StandardFieldTranslation[] standardFields;
    public String startsWith;
    public MetadataService.ValidationRuleTranslation[] validationRules;
    public MetadataService.WebLinkTranslation[] webLinks;
    public MetadataService.WorkflowTaskTranslation[] workflowTasks;
    private String[] caseValues_type_info = new List<String>{
      ''caseValues'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fields_type_info = new List<String>{
      ''fields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] gender_type_info = new List<String>{
      ''gender'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] layouts_type_info = new List<String>{
      ''layouts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] nameFieldLabel_type_info = new List<String>{
      ''nameFieldLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] quickActions_type_info = new List<String>{
      ''quickActions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] recordTypes_type_info = new List<String>{
      ''recordTypes'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] sharingReasons_type_info = new List<String>{
      ''sharingReasons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] standardFields_type_info = new List<String>{
      ''standardFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] startsWith_type_info = new List<String>{
      ''startsWith'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] validationRules_type_info = new List<String>{
      ''validationRules'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] webLinks_type_info = new List<String>{
      ''webLinks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] workflowTasks_type_info = new List<String>{
      ''workflowTasks'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''caseValues'',
      ''fields'',
      ''gender'',
      ''layouts'',
      ''nameFieldLabel'',
      ''quickActions'',
      ''recordTypes'',
      ''sharingReasons'',
      ''standardFields'',
      ''startsWith'',
      ''validationRules'',
      ''webLinks'',
      ''workflowTasks''
    };
  }
  public class CustomApplication extends Metadata {
    public String type = ''CustomApplication'';
    public String fullName;
    public MetadataService.CustomApplicationComponents customApplicationComponents;
    public String defaultLandingTab;
    public String description;
    public String detailPageRefreshMethod;
    public MetadataService.DomainWhitelist domainWhitelist;
    public Boolean enableCustomizeMyTabs;
    public Boolean enableKeyboardShortcuts;
    public Boolean enableMultiMonitorComponents;
    public Boolean enablePinTabs;
    public Boolean isServiceCloudConsole;
    public MetadataService.KeyboardShortcuts keyboardShortcuts;
    public String label;
    public MetadataService.ListPlacement listPlacement;
    public String listRefreshMethod;
    public MetadataService.LiveAgentConfig liveAgentConfig;
    public String logo;
    public MetadataService.PushNotifications pushNotifications;
    public Boolean saveUserSessions;
    public String[] tab;
    public MetadataService.WorkspaceMappings workspaceMappings;
    private String[] customApplicationComponents_type_info = new List<String>{
      ''customApplicationComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] defaultLandingTab_type_info = new List<String>{
      ''defaultLandingTab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] detailPageRefreshMethod_type_info = new List<String>{
      ''detailPageRefreshMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] domainWhitelist_type_info = new List<String>{
      ''domainWhitelist'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableCustomizeMyTabs_type_info = new List<String>{
      ''enableCustomizeMyTabs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableKeyboardShortcuts_type_info = new List<String>{
      ''enableKeyboardShortcuts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableMultiMonitorComponents_type_info = new List<String>{
      ''enableMultiMonitorComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enablePinTabs_type_info = new List<String>{
      ''enablePinTabs'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isServiceCloudConsole_type_info = new List<String>{
      ''isServiceCloudConsole'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] keyboardShortcuts_type_info = new List<String>{
      ''keyboardShortcuts'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] listPlacement_type_info = new List<String>{
      ''listPlacement'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] listRefreshMethod_type_info = new List<String>{
      ''listRefreshMethod'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] liveAgentConfig_type_info = new List<String>{
      ''liveAgentConfig'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] logo_type_info = new List<String>{
      ''logo'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] pushNotifications_type_info = new List<String>{
      ''pushNotifications'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] saveUserSessions_type_info = new List<String>{
      ''saveUserSessions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] tab_type_info = new List<String>{
      ''tab'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] workspaceMappings_type_info = new List<String>{
      ''workspaceMappings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''customApplicationComponents'',
      ''defaultLandingTab'',
      ''description'',
      ''detailPageRefreshMethod'',
      ''domainWhitelist'',
      ''enableCustomizeMyTabs'',
      ''enableKeyboardShortcuts'',
      ''enableMultiMonitorComponents'',
      ''enablePinTabs'',
      ''isServiceCloudConsole'',
      ''keyboardShortcuts'',
      ''label'',
      ''listPlacement'',
      ''listRefreshMethod'',
      ''liveAgentConfig'',
      ''logo'',
      ''pushNotifications'',
      ''saveUserSessions'',
      ''tab'',
      ''workspaceMappings''
    };
  }
  public class ReportAggregate {
    public String acrossGroupingContext;
    public String calculatedFormula;
    public String datatype;
    public String description;
    public String developerName;
    public String downGroupingContext;
    public Boolean isActive;
    public Boolean isCrossBlock;
    public String masterLabel;
    public String reportType;
    public Integer scale;
    private String[] acrossGroupingContext_type_info = new List<String>{
      ''acrossGroupingContext'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] calculatedFormula_type_info = new List<String>{
      ''calculatedFormula'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] datatype_type_info = new List<String>{
      ''datatype'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] developerName_type_info = new List<String>{
      ''developerName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] downGroupingContext_type_info = new List<String>{
      ''downGroupingContext'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isActive_type_info = new List<String>{
      ''isActive'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] isCrossBlock_type_info = new List<String>{
      ''isCrossBlock'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] masterLabel_type_info = new List<String>{
      ''masterLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] reportType_type_info = new List<String>{
      ''reportType'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scale_type_info = new List<String>{
      ''scale'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''acrossGroupingContext'',
      ''calculatedFormula'',
      ''datatype'',
      ''description'',
      ''developerName'',
      ''downGroupingContext'',
      ''isActive'',
      ''isCrossBlock'',
      ''masterLabel'',
      ''reportType'',
      ''scale''
    };
  }
  public class AgentConfigUserAssignments {
    public String[] user_x;
    private String[] user_x_type_info = new List<String>{
      ''user'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''user_x'' };
  }
  public class DashboardMobileSettings {
    public Boolean enableDashboardIPadApp;
    private String[] enableDashboardIPadApp_type_info = new List<String>{
      ''enableDashboardIPadApp'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''enableDashboardIPadApp''
    };
  }
  public class NetworkMemberGroup {
    public String[] permissionSet;
    public String[] profile;
    private String[] permissionSet_type_info = new List<String>{
      ''permissionSet'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] profile_type_info = new List<String>{
      ''profile'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''permissionSet'',
      ''profile''
    };
  }
  public class DebuggingInfo_element {
    public String debugLog;
    private String[] debugLog_type_info = new List<String>{
      ''debugLog'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''debugLog'' };
  }
  public class Territory2 extends Metadata {
    public String type = ''Territory2'';
    public String fullName;
    public String accountAccessLevel;
    public String caseAccessLevel;
    public String contactAccessLevel;
    public MetadataService.FieldValue[] customFields;
    public String description;
    public String name;
    public String opportunityAccessLevel;
    public String parentTerritory;
    public MetadataService.Territory2RuleAssociation[] ruleAssociations;
    public String territory2Type;
    private String[] accountAccessLevel_type_info = new List<String>{
      ''accountAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] caseAccessLevel_type_info = new List<String>{
      ''caseAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] contactAccessLevel_type_info = new List<String>{
      ''contactAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customFields_type_info = new List<String>{
      ''customFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] opportunityAccessLevel_type_info = new List<String>{
      ''opportunityAccessLevel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] parentTerritory_type_info = new List<String>{
      ''parentTerritory'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] ruleAssociations_type_info = new List<String>{
      ''ruleAssociations'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] territory2Type_type_info = new List<String>{
      ''territory2Type'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accountAccessLevel'',
      ''caseAccessLevel'',
      ''contactAccessLevel'',
      ''customFields'',
      ''description'',
      ''name'',
      ''opportunityAccessLevel'',
      ''parentTerritory'',
      ''ruleAssociations'',
      ''territory2Type''
    };
  }
  public class Container {
    public Integer height;
    public Boolean isContainerAutoSizeEnabled;
    public String region;
    public MetadataService.SidebarComponent[] sidebarComponents;
    public String style;
    public String unit;
    public Integer width;
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] isContainerAutoSizeEnabled_type_info = new List<String>{
      ''isContainerAutoSizeEnabled'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] region_type_info = new List<String>{
      ''region'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] sidebarComponents_type_info = new List<String>{
      ''sidebarComponents'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] style_type_info = new List<String>{
      ''style'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] unit_type_info = new List<String>{
      ''unit'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''height'',
      ''isContainerAutoSizeEnabled'',
      ''region'',
      ''sidebarComponents'',
      ''style'',
      ''unit'',
      ''width''
    };
  }
  public class FindSimilarOppFilter {
    public String[] similarOpportunitiesDisplayColumns;
    public String[] similarOpportunitiesMatchFields;
    private String[] similarOpportunitiesDisplayColumns_type_info = new List<String>{
      ''similarOpportunitiesDisplayColumns'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] similarOpportunitiesMatchFields_type_info = new List<String>{
      ''similarOpportunitiesMatchFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''similarOpportunitiesDisplayColumns'',
      ''similarOpportunitiesMatchFields''
    };
  }
  public class Community extends Metadata {
    public String type = ''Community'';
    public String fullName;
    public Boolean active;
    public String communityFeedPage;
    public String description;
    public String emailFooterDocument;
    public String emailHeaderDocument;
    public String emailNotificationUrl;
    public Boolean enableChatterAnswers;
    public Boolean enablePrivateQuestions;
    public String expertsGroup;
    public String portal;
    public MetadataService.ReputationLevels reputationLevels;
    public Boolean showInPortal;
    public String site;
    private String[] active_type_info = new List<String>{
      ''active'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] communityFeedPage_type_info = new List<String>{
      ''communityFeedPage'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailFooterDocument_type_info = new List<String>{
      ''emailFooterDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailHeaderDocument_type_info = new List<String>{
      ''emailHeaderDocument'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emailNotificationUrl_type_info = new List<String>{
      ''emailNotificationUrl'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enableChatterAnswers_type_info = new List<String>{
      ''enableChatterAnswers'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] enablePrivateQuestions_type_info = new List<String>{
      ''enablePrivateQuestions'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] expertsGroup_type_info = new List<String>{
      ''expertsGroup'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] portal_type_info = new List<String>{
      ''portal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reputationLevels_type_info = new List<String>{
      ''reputationLevels'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showInPortal_type_info = new List<String>{
      ''showInPortal'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] site_type_info = new List<String>{
      ''site'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''active'',
      ''communityFeedPage'',
      ''description'',
      ''emailFooterDocument'',
      ''emailHeaderDocument'',
      ''emailNotificationUrl'',
      ''enableChatterAnswers'',
      ''enablePrivateQuestions'',
      ''expertsGroup'',
      ''portal'',
      ''reputationLevels'',
      ''showInPortal'',
      ''site''
    };
  }
  public class DeleteResult {
    public MetadataService.Error[] errors;
    public String fullName;
    public Boolean success;
    private String[] errors_type_info = new List<String>{
      ''errors'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] success_type_info = new List<String>{
      ''success'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''errors'',
      ''fullName'',
      ''success''
    };
  }
  public class LayoutItem {
    public MetadataService.AnalyticsCloudComponentLayoutItem analyticsCloudComponent;
    public String behavior;
    public String canvas;
    public String component;
    public String customLink;
    public Boolean emptySpace;
    public String field;
    public Integer height;
    public String page_x;
    public MetadataService.ReportChartComponentLayoutItem reportChartComponent;
    public String scontrol;
    public Boolean showLabel;
    public Boolean showScrollbars;
    public String width;
    private String[] analyticsCloudComponent_type_info = new List<String>{
      ''analyticsCloudComponent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] behavior_type_info = new List<String>{
      ''behavior'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] canvas_type_info = new List<String>{
      ''canvas'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] component_type_info = new List<String>{
      ''component'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] customLink_type_info = new List<String>{
      ''customLink'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] emptySpace_type_info = new List<String>{
      ''emptySpace'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_type_info = new List<String>{
      ''field'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] height_type_info = new List<String>{
      ''height'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] page_x_type_info = new List<String>{
      ''page'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] reportChartComponent_type_info = new List<String>{
      ''reportChartComponent'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] scontrol_type_info = new List<String>{
      ''scontrol'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showLabel_type_info = new List<String>{
      ''showLabel'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] showScrollbars_type_info = new List<String>{
      ''showScrollbars'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] width_type_info = new List<String>{
      ''width'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''analyticsCloudComponent'',
      ''behavior'',
      ''canvas'',
      ''component'',
      ''customLink'',
      ''emptySpace'',
      ''field'',
      ''height'',
      ''page_x'',
      ''reportChartComponent'',
      ''scontrol'',
      ''showLabel'',
      ''showScrollbars'',
      ''width''
    };
  }
  public class SharingReasonTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class SharingSet extends Metadata {
    public String type = ''SharingSet'';
    public String fullName;
    public MetadataService.AccessMapping[] accessMappings;
    public String description;
    public String name;
    public String[] profiles;
    private String[] accessMappings_type_info = new List<String>{
      ''accessMappings'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] description_type_info = new List<String>{
      ''description'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] profiles_type_info = new List<String>{
      ''profiles'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] type_att_info = new List<String>{ ''xsi:type'' };
    private String[] fullName_type_info = new List<String>{
      ''fullName'',
      ''http://www.w3.org/2001/XMLSchema'',
      ''string'',
      ''0'',
      ''1'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''fullName'',
      ''accessMappings'',
      ''description'',
      ''name'',
      ''profiles''
    };
  }
  public class checkDeployStatusResponse_element {
    public MetadataService.DeployResult result;
    private String[] result_type_info = new List<String>{
      ''result'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{ ''result'' };
  }
  public class ReportColorRange {
    public String aggregate;
    public String columnName;
    public Double highBreakpoint;
    public String highColor;
    public Double lowBreakpoint;
    public String lowColor;
    public String midColor;
    private String[] aggregate_type_info = new List<String>{
      ''aggregate'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] columnName_type_info = new List<String>{
      ''columnName'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] highBreakpoint_type_info = new List<String>{
      ''highBreakpoint'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] highColor_type_info = new List<String>{
      ''highColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] lowBreakpoint_type_info = new List<String>{
      ''lowBreakpoint'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''1'',
      ''false''
    };
    private String[] lowColor_type_info = new List<String>{
      ''lowColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] midColor_type_info = new List<String>{
      ''midColor'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''aggregate'',
      ''columnName'',
      ''highBreakpoint'',
      ''highColor'',
      ''lowBreakpoint'',
      ''lowColor'',
      ''midColor''
    };
  }
  public class SearchLayouts {
    public String[] customTabListAdditionalFields;
    public String[] excludedStandardButtons;
    public String[] listViewButtons;
    public String[] lookupDialogsAdditionalFields;
    public String[] lookupFilterFields;
    public String[] lookupPhoneDialogsAdditionalFields;
    public String[] searchFilterFields;
    public String[] searchResultsAdditionalFields;
    public String[] searchResultsCustomButtons;
    private String[] customTabListAdditionalFields_type_info = new List<String>{
      ''customTabListAdditionalFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] excludedStandardButtons_type_info = new List<String>{
      ''excludedStandardButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] listViewButtons_type_info = new List<String>{
      ''listViewButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] lookupDialogsAdditionalFields_type_info = new List<String>{
      ''lookupDialogsAdditionalFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] lookupFilterFields_type_info = new List<String>{
      ''lookupFilterFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] lookupPhoneDialogsAdditionalFields_type_info = new List<String>{
      ''lookupPhoneDialogsAdditionalFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] searchFilterFields_type_info = new List<String>{
      ''searchFilterFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] searchResultsAdditionalFields_type_info = new List<String>{
      ''searchResultsAdditionalFields'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] searchResultsCustomButtons_type_info = new List<String>{
      ''searchResultsCustomButtons'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''0'',
      ''-1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''customTabListAdditionalFields'',
      ''excludedStandardButtons'',
      ''listViewButtons'',
      ''lookupDialogsAdditionalFields'',
      ''lookupFilterFields'',
      ''lookupPhoneDialogsAdditionalFields'',
      ''searchFilterFields'',
      ''searchResultsAdditionalFields'',
      ''searchResultsCustomButtons''
    };
  }
  public class QuickActionTranslation {
    public String label;
    public String name;
    private String[] label_type_info = new List<String>{
      ''label'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] name_type_info = new List<String>{
      ''name'',
      ''http://soap.sforce.com/2006/04/metadata'',
      null,
      ''1'',
      ''1'',
      ''false''
    };
    private String[] apex_schema_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''true'',
      ''false''
    };
    private String[] field_order_type_info = new List<String>{
      ''label'',
      ''name''
    };
  }
  public class MetadataPort {
    public String endpoint_x =
      URL.getOrgDomainUrl().toExternalForm() + ''/services/Soap/m/34.0'';
    public Map<String, String> inputHttpHeaders_x;
    public Map<String, String> outputHttpHeaders_x;
    public String clientCertName_x;
    public String clientCert_x;
    public String clientCertPasswd_x;
    public Integer timeout_x;
    public MetadataService.SessionHeader_element SessionHeader;
    public MetadataService.DebuggingInfo_element DebuggingInfo;
    public MetadataService.AllOrNoneHeader_element AllOrNoneHeader;
    public MetadataService.CallOptions_element CallOptions;
    public MetadataService.DebuggingHeader_element DebuggingHeader;
    private String SessionHeader_hns = ''SessionHeader=http://soap.sforce.com/2006/04/metadata'';
    private String DebuggingInfo_hns = ''DebuggingInfo=http://soap.sforce.com/2006/04/metadata'';
    private String AllOrNoneHeader_hns = ''AllOrNoneHeader=http://soap.sforce.com/2006/04/metadata'';
    private String CallOptions_hns = ''CallOptions=http://soap.sforce.com/2006/04/metadata'';
    private String DebuggingHeader_hns = ''DebuggingHeader=http://soap.sforce.com/2006/04/metadata'';
    private String[] ns_map_type_info = new List<String>{
      ''http://soap.sforce.com/2006/04/metadata'',
      ''MetadataService''
    };
    public MetadataService.SaveResult[] updateMetadata(
      MetadataService.Metadata[] metadata
    ) {
      MetadataService.updateMetadata_element request_x = new MetadataService.updateMetadata_element();
      request_x.metadata = metadata;
      MetadataService.updateMetadataResponse_element response_x;
      Map<String, MetadataService.updateMetadataResponse_element> response_map_x = new Map<String, MetadataService.updateMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''updateMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''updateMetadataResponse'',
          ''MetadataService.updateMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.CancelDeployResult cancelDeploy(String String_x) {
      MetadataService.cancelDeploy_element request_x = new MetadataService.cancelDeploy_element();
      request_x.String_x = String_x;
      MetadataService.cancelDeployResponse_element response_x;
      Map<String, MetadataService.cancelDeployResponse_element> response_map_x = new Map<String, MetadataService.cancelDeployResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''cancelDeploy'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''cancelDeployResponse'',
          ''MetadataService.cancelDeployResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.FileProperties[] listMetadata(
      MetadataService.ListMetadataQuery[] queries,
      Double asOfVersion
    ) {
      MetadataService.listMetadata_element request_x = new MetadataService.listMetadata_element();
      request_x.queries = queries;
      request_x.asOfVersion = asOfVersion;
      MetadataService.listMetadataResponse_element response_x;
      Map<String, MetadataService.listMetadataResponse_element> response_map_x = new Map<String, MetadataService.listMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''listMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''listMetadataResponse'',
          ''MetadataService.listMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.UpsertResult[] upsertMetadata(
      MetadataService.Metadata[] metadata
    ) {
      MetadataService.upsertMetadata_element request_x = new MetadataService.upsertMetadata_element();
      request_x.metadata = metadata;
      MetadataService.upsertMetadataResponse_element response_x;
      Map<String, MetadataService.upsertMetadataResponse_element> response_map_x = new Map<String, MetadataService.upsertMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''upsertMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''upsertMetadataResponse'',
          ''MetadataService.upsertMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.RetrieveResult checkRetrieveStatus(
      String asyncProcessId,
      Boolean includeZip
    ) {
      MetadataService.checkRetrieveStatus_element request_x = new MetadataService.checkRetrieveStatus_element();
      request_x.asyncProcessId = asyncProcessId;
      request_x.includeZip = includeZip;
      MetadataService.checkRetrieveStatusResponse_element response_x;
      Map<String, MetadataService.checkRetrieveStatusResponse_element> response_map_x = new Map<String, MetadataService.checkRetrieveStatusResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''checkRetrieveStatus'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''checkRetrieveStatusResponse'',
          ''MetadataService.checkRetrieveStatusResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.AsyncResult deploy(
      String ZipFile,
      MetadataService.DeployOptions DeployOptions
    ) {
      MetadataService.deploy_element request_x = new MetadataService.deploy_element();
      request_x.ZipFile = ZipFile;
      request_x.DeployOptions = DeployOptions;
      MetadataService.deployResponse_element response_x;
      Map<String, MetadataService.deployResponse_element> response_map_x = new Map<String, MetadataService.deployResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''deploy'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''deployResponse'',
          ''MetadataService.deployResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public String deployRecentValidation(String validationId) {
      MetadataService.deployRecentValidation_element request_x = new MetadataService.deployRecentValidation_element();
      request_x.validationId = validationId;
      MetadataService.deployRecentValidationResponse_element response_x;
      Map<String, MetadataService.deployRecentValidationResponse_element> response_map_x = new Map<String, MetadataService.deployRecentValidationResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''deployRecentValidation'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''deployRecentValidationResponse'',
          ''MetadataService.deployRecentValidationResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.AsyncResult retrieve(
      MetadataService.RetrieveRequest retrieveRequest
    ) {
      MetadataService.retrieve_element request_x = new MetadataService.retrieve_element();
      request_x.retrieveRequest = retrieveRequest;
      MetadataService.retrieveResponse_element response_x;
      Map<String, MetadataService.retrieveResponse_element> response_map_x = new Map<String, MetadataService.retrieveResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''retrieve'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''retrieveResponse'',
          ''MetadataService.retrieveResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.DeployResult checkDeployStatus(
      String asyncProcessId,
      Boolean includeDetails
    ) {
      MetadataService.checkDeployStatus_element request_x = new MetadataService.checkDeployStatus_element();
      request_x.asyncProcessId = asyncProcessId;
      request_x.includeDetails = includeDetails;
      MetadataService.checkDeployStatusResponse_element response_x;
      Map<String, MetadataService.checkDeployStatusResponse_element> response_map_x = new Map<String, MetadataService.checkDeployStatusResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''checkDeployStatus'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''checkDeployStatusResponse'',
          ''MetadataService.checkDeployStatusResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.DescribeValueTypeResult describeValueType(
      String type_x
    ) {
      MetadataService.describeValueType_element request_x = new MetadataService.describeValueType_element();
      request_x.type_x = type_x;
      MetadataService.describeValueTypeResponse_element response_x;
      Map<String, MetadataService.describeValueTypeResponse_element> response_map_x = new Map<String, MetadataService.describeValueTypeResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''describeValueType'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''describeValueTypeResponse'',
          ''MetadataService.describeValueTypeResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.SaveResult renameMetadata(
      String type_x,
      String oldFullName,
      String newFullName
    ) {
      MetadataService.renameMetadata_element request_x = new MetadataService.renameMetadata_element();
      request_x.type_x = type_x;
      request_x.oldFullName = oldFullName;
      request_x.newFullName = newFullName;
      MetadataService.renameMetadataResponse_element response_x;
      Map<String, MetadataService.renameMetadataResponse_element> response_map_x = new Map<String, MetadataService.renameMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''renameMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''renameMetadataResponse'',
          ''MetadataService.renameMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.DeleteResult[] deleteMetadata(
      String type_x,
      String[] fullNames
    ) {
      MetadataService.deleteMetadata_element request_x = new MetadataService.deleteMetadata_element();
      request_x.type_x = type_x;
      request_x.fullNames = fullNames;
      MetadataService.deleteMetadataResponse_element response_x;
      Map<String, MetadataService.deleteMetadataResponse_element> response_map_x = new Map<String, MetadataService.deleteMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''deleteMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''deleteMetadataResponse'',
          ''MetadataService.deleteMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.SaveResult[] createMetadata(
      MetadataService.Metadata[] metadata
    ) {
      MetadataService.createMetadata_element request_x = new MetadataService.createMetadata_element();
      request_x.metadata = metadata;
      MetadataService.createMetadataResponse_element response_x;
      Map<String, MetadataService.createMetadataResponse_element> response_map_x = new Map<String, MetadataService.createMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''createMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''createMetadataResponse'',
          ''MetadataService.createMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.DescribeMetadataResult describeMetadata(
      Double asOfVersion
    ) {
      MetadataService.describeMetadata_element request_x = new MetadataService.describeMetadata_element();
      request_x.asOfVersion = asOfVersion;
      MetadataService.describeMetadataResponse_element response_x;
      Map<String, MetadataService.describeMetadataResponse_element> response_map_x = new Map<String, MetadataService.describeMetadataResponse_element>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''describeMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''describeMetadataResponse'',
          ''MetadataService.describeMetadataResponse_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.result;
    }
    public MetadataService.IReadResult readMetadata(
      String type_x,
      String[] fullNames
    ) {
      MetadataService.readMetadata_element request_x = new MetadataService.readMetadata_element();
      request_x.type_x = type_x;
      request_x.fullNames = fullNames;
      MetadataService.IReadResponseElement response_x;
      Map<String, MetadataService.IReadResponseElement> response_map_x = new Map<String, MetadataService.IReadResponseElement>();
      response_map_x.put(''response_x'', response_x);
      WebServiceCallout.invoke(
        this,
        request_x,
        response_map_x,
        new List<String>{
          endpoint_x,
          '''',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''readMetadata'',
          ''http://soap.sforce.com/2006/04/metadata'',
          ''readMetadataResponse'',
          ''MetadataService.read'' +
          type_x +
          ''Response_element''
        }
      );
      response_x = response_map_x.get(''response_x'');
      return response_x.getResult();
    }
  }
}','2745023999.0','True','MetadataService','997430','Active');
INSERT INTO "ApexClass" VALUES(34,'57.0','@isTest
public class MetadataServiceCalloutMock implements WebServiceMock {
  public void doInvoke(
    Object stub,
    Object request,
    Map<String, Object> response,
    String endpoint,
    String soapAction,
    String requestName,
    String responseNS,
    String responseName,
    String responseType
  ) {
    MetadataService.createMetadataResponse_element responseElement = new MetadataService.createMetadataResponse_element();
    MetadataService.SaveResult res = new MetadataService.SaveResult();
    res.success = true;
    res.fullName = ''myTestResult'';
    responseElement.result = new List<MetadataService.SaveResult>{ res };

    response.put(''response_x'', responseElement);
  }
}','772273342.0','True','MetadataServiceCalloutMock','699','Active');
INSERT INTO "ApexClass" VALUES(35,'57.0','/**
 * Copyright (c) 2012, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * This is a dummy test class to obtain 100% coverage for the generated WSDL2Apex code, it is not a funcitonal test class
 *   You should follow the usual practices to cover your other code, as shown in the MetadataCreateJobTest.cls
 **/
@isTest
private class MetadataServiceTest {
  /**
   * Dummy Metadata API web service mock class (see MetadataCreateJobTest.cls for a better example)
   **/
  private class WebServiceMockImpl implements WebServiceMock {
    public void doInvoke(
      Object stub,
      Object request,
      Map<String, Object> response,
      String endpoint,
      String soapAction,
      String requestName,
      String responseNS,
      String responseName,
      String responseType
    ) {
      if (request instanceof MetadataService.retrieve_element)
        response.put(
          ''response_x'',
          new MetadataService.retrieveResponse_element()
        );
      else if (request instanceof MetadataService.checkDeployStatus_element)
        response.put(
          ''response_x'',
          new MetadataService.checkDeployStatusResponse_element()
        );
      else if (request instanceof MetadataService.listMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.listMetadataResponse_element()
        );
      else if (request instanceof MetadataService.checkRetrieveStatus_element)
        response.put(
          ''response_x'',
          new MetadataService.checkRetrieveStatusResponse_element()
        );
      else if (request instanceof MetadataService.describeMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.describeMetadataResponse_element()
        );
      else if (request instanceof MetadataService.deploy_element)
        response.put(
          ''response_x'',
          new MetadataService.deployResponse_element()
        );
      else if (request instanceof MetadataService.updateMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.updateMetadataResponse_element()
        );
      else if (request instanceof MetadataService.renameMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.renameMetadataResponse_element()
        );
      else if (request instanceof MetadataService.cancelDeploy_element)
        response.put(
          ''response_x'',
          new MetadataService.cancelDeployResponse_element()
        );
      else if (request instanceof MetadataService.deleteMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.deleteMetadataResponse_element()
        );
      else if (request instanceof MetadataService.upsertMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.upsertMetadataResponse_element()
        );
      else if (request instanceof MetadataService.createMetadata_element)
        response.put(
          ''response_x'',
          new MetadataService.createMetadataResponse_element()
        );
      else if (
        request instanceof MetadataService.deployRecentValidation_element
      )
        response.put(
          ''response_x'',
          new MetadataService.deployRecentValidationResponse_element()
        );
      else if (request instanceof MetadataService.describeValueType_element)
        response.put(
          ''response_x'',
          new MetadataService.describeValueTypeResponse_element()
        );
      return;
    }
  }

  @IsTest
  private static void coverGeneratedCodeCRUDOperations() {
    // Null Web Service mock implementation
    System.Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
    // Only required to workaround a current code coverage bug in the platform
    MetadataService metaDataService = new MetadataService();
    // Invoke operations
    MetadataService.MetadataPort metaDataPort = new MetadataService.MetadataPort();
  }

  @IsTest
  private static void coverGeneratedCodeFileBasedOperations1() {
    // Null Web Service mock implementation
    System.Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
    // Only required to workaround a current code coverage bug in the platform
    MetadataService metaDataService = new MetadataService();
    // Invoke operations
    MetadataService.MetadataPort metaDataPort = new MetadataService.MetadataPort();
    metaDataPort.retrieve(null);
    metaDataPort.checkDeployStatus(null, false);
    metaDataPort.listMetadata(null, null);
    metaDataPort.describeMetadata(null);
    metaDataPort.deploy(null, null);
    metaDataPort.checkDeployStatus(null, false);
    metaDataPort.updateMetadata(null);
    metaDataPort.renameMetadata(null, null, null);
    metaDataPort.cancelDeploy(null);
  }

  @IsTest
  private static void coverGeneratedCodeFileBasedOperations2() {
    // Null Web Service mock implementation
    System.Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
    // Only required to workaround a current code coverage bug in the platform
    MetadataService metaDataService = new MetadataService();
    // Invoke operations
    MetadataService.MetadataPort metaDataPort = new MetadataService.MetadataPort();
    metaDataPort.deleteMetadata(null, null);
    metaDataPort.upsertMetadata(null);
    metaDataPort.createMetadata(null);
    metaDataPort.deployRecentValidation(null);
    metaDataPort.describeValueType(null);
  }

  @IsTest
  private static void coverGeneratedCodeTypes() {
    // Reference types
    new MetadataService();
    new MetadataService.listMetadataResponse_element();
    new MetadataService.WorkflowRule();
    new MetadataService.RecordTypeTranslation();
    new MetadataService.checkDeployStatus_element();
    new MetadataService.CodeCoverageWarning();
    new MetadataService.FlowApexPluginCall();
    new MetadataService.FlowInputValidationRule();
    new MetadataService.FlowFormula();
    new MetadataService.PasswordPolicies();
    new MetadataService.QueueSobject();
    new MetadataService.PicklistValueTranslation();
    new MetadataService.CustomDataType();
    new MetadataService.PrimaryTabComponents();
    new MetadataService.WorkflowEmailRecipient();
    new MetadataService.DescribeMetadataResult();
    new MetadataService.RecordType();
    new MetadataService.Scontrol();
    new MetadataService.DashboardComponent();
    new MetadataService.FilterItem();
    new MetadataService.Profile();
    new MetadataService.ReportFilter();
    new MetadataService.PermissionSetApexClassAccess();
    new MetadataService.LogInfo();
    new MetadataService.Layout();
    new MetadataService.WebLink();
    new MetadataService.WorkflowTaskTranslation();
    new MetadataService.FlowElement();
    new MetadataService.ObjectNameCaseValue();
    new MetadataService.FlowInputFieldAssignment();
    new MetadataService.CustomDataTypeTranslation();
    new MetadataService.DashboardComponentSection();
    new MetadataService.ReportTypeColumn();
    new MetadataService.CallOptions_element();
    new MetadataService.CustomFieldTranslation();
    new MetadataService.AnalyticSnapshot();
    new MetadataService.FlowRule();
    new MetadataService.FlowRecordUpdate();
    new MetadataService.CustomSite();
    new MetadataService.ReportBlockInfo();
    new MetadataService.describeMetadataResponse_element();
    new MetadataService.ScontrolTranslation();
    new MetadataService.DeployMessage();
    new MetadataService.FlowSubflowInputAssignment();
    new MetadataService.Group_x();
    new MetadataService.ReportColumn();
    new MetadataService.ReportType();
    new MetadataService.CustomPageWebLink();
    new MetadataService.CodeCoverageResult();
    new MetadataService.ApexComponent();
    new MetadataService.WorkflowKnowledgePublish();
    new MetadataService.NetworkAccess();
    new MetadataService.Workflow();
    new MetadataService.RecordTypePicklistValue();
    new MetadataService.describeMetadata_element();
    new MetadataService.DashboardFilterColumn();
    new MetadataService.FlowChoice();
    new MetadataService.ReportParam();
    new MetadataService.RoleOrTerritory();
    new MetadataService.FlowStep();
    new MetadataService.FlowApexPluginCallInputParameter();
    new MetadataService.WorkflowActionReference();
    new MetadataService.ProfileObjectPermissions();
    new MetadataService.Role();
    new MetadataService.RetrieveResult();
    new MetadataService.SecuritySettings();
    new MetadataService.WorkflowTimeTrigger();
    new MetadataService.retrieve_element();
    new MetadataService.DescribeMetadataObject();
    new MetadataService.DashboardFilterOption();
    new MetadataService.LayoutColumn();
    new MetadataService.WorkflowOutboundMessage();
    new MetadataService.RunTestSuccess();
    new MetadataService.Queue();
    new MetadataService.ListViewFilter();
    new MetadataService.CustomField();
    new MetadataService.WorkflowTask();
    new MetadataService.deployResponse_element();
    new MetadataService.DataCategory();
    new MetadataService.FlowOutputFieldAssignment();
    new MetadataService.EmailTemplate();
    new MetadataService.ReportAggregateReference();
    new MetadataService.ObjectUsage();
    new MetadataService.FileProperties();
    new MetadataService.CustomTabTranslation();
    new MetadataService.BusinessProcess();
    new MetadataService.Flow();
    new MetadataService.PermissionSet();
    new MetadataService.PermissionSetObjectPermissions();
    new MetadataService.ReportCrossFilter();
    new MetadataService.Report();
    new MetadataService.FlowSubflowOutputAssignment();
    new MetadataService.ListView();
    new MetadataService.FlowRecordCreate();
    new MetadataService.DashboardTableColumn();
    new MetadataService.AsyncResult();
    new MetadataService.ArticleTypeChannelDisplay();
    new MetadataService.checkRetrieveStatus_element();
    new MetadataService.ProfileLayoutAssignment();
    new MetadataService.ReportFolder();
    new MetadataService.FlowTextTemplate();
    new MetadataService.RelatedListItem();
    new MetadataService.FlowNode();
    new MetadataService.RetrieveRequest();
    new MetadataService.ListMetadataQuery();
    new MetadataService.FlowConnector();
    new MetadataService.CustomApplicationComponent();
    new MetadataService.FlowRecordLookup();
    new MetadataService.FieldSet();
    new MetadataService.ProfileApexClassAccess();
    new MetadataService.DebuggingHeader_element();
    new MetadataService.CustomDataTypeComponentTranslation();
    new MetadataService.FlowRecordDelete();
    new MetadataService.FlowDecision();
    new MetadataService.ReportTypeSectionTranslation();
    new MetadataService.IpRange();
    new MetadataService.FlowApexPluginCallOutputParameter();
    new MetadataService.ReportBucketField();
    new MetadataService.CustomLabel();
    new MetadataService.Attachment();
    new MetadataService.SharingRules();
    new MetadataService.CustomConsoleComponents();
    new MetadataService.Portal();
    new MetadataService.DomainWhitelist();
    new MetadataService.ChartSummary();
    new MetadataService.RunTestFailure();
    new MetadataService.Territory();
    new MetadataService.SharedTo();
    new MetadataService.FlowRecordFilter();
    new MetadataService.SubtabComponents();
    new MetadataService.FlowScreen();
    new MetadataService.WorkflowAlert();
    new MetadataService.Picklist();
    new MetadataService.ReportLayoutSection();
    new MetadataService.SummaryLayoutItem();
    new MetadataService.LayoutSection();
    new MetadataService.ReportTimeFrameFilter();
    new MetadataService.LayoutSectionTranslation();
    new MetadataService.DataCategoryGroup();
    new MetadataService.listMetadata_element();
    new MetadataService.ValidationRule();
    new MetadataService.WorkspaceMapping();
    new MetadataService.MetadataWithContent();
    new MetadataService.ValidationRuleTranslation();
    new MetadataService.Metadata();
    new MetadataService.ReportBucketFieldValue();
    new MetadataService.HomePageLayout();
    new MetadataService.FlowSubflow();
    new MetadataService.FlowScreenField();
    new MetadataService.SiteWebAddress();
    new MetadataService.RetrieveMessage();
    new MetadataService.Dashboard();
    new MetadataService.EmailFolder();
    new MetadataService.SessionHeader_element();
    new MetadataService.SummaryLayout();
    new MetadataService.FlowCondition();
    new MetadataService.DeployOptions();
    new MetadataService.FlowAssignment();
    new MetadataService.ProfileApplicationVisibility();
    new MetadataService.CustomApplicationComponents();
    new MetadataService.FlowElementReferenceOrValue();
    new MetadataService.EntitlementTemplate();
    new MetadataService.ProfileTabVisibility();
    new MetadataService.ActionOverride();
    new MetadataService.WorkspaceMappings();
    new MetadataService.WorkflowAction();
    new MetadataService.DashboardFolder();
    new MetadataService.PermissionSetApexPageAccess();
    new MetadataService.LayoutTranslation();
    new MetadataService.CustomObject();
    new MetadataService.Translations();
    new MetadataService.ApexTrigger();
    new MetadataService.ReportTypeTranslation();
    new MetadataService.FlowAssignmentItem();
    new MetadataService.CustomApplicationTranslation();
    new MetadataService.CustomLabels();
    new MetadataService.PackageTypeMembers();
    new MetadataService.PicklistValue();
    new MetadataService.RemoteSiteSetting();
    new MetadataService.deploy_element();
    new MetadataService.retrieveResponse_element();
    new MetadataService.ArticleTypeTemplate();
    new MetadataService.ReportGrouping();
    new MetadataService.PermissionSetFieldPermissions();
    new MetadataService.AnalyticSnapshotMapping();
    new MetadataService.SharingRecalculation();
    new MetadataService.ProfileLoginIpRange();
    new MetadataService.WebLinkTranslation();
    new MetadataService.ObjectRelationship();
    new MetadataService.ListPlacement();
    new MetadataService.SiteRedirectMapping();
    new MetadataService.WorkflowFieldUpdate();
    new MetadataService.LetterheadLine();
    new MetadataService.CustomTab();
    new MetadataService.FlowChoiceUserInput();
    new MetadataService.Letterhead();
    new MetadataService.ReportTypeColumnTranslation();
    new MetadataService.CustomPageWebLinkTranslation();
    new MetadataService.DocumentFolder();
    new MetadataService.FlowConstant();
    new MetadataService.ProfileRecordTypeVisibility();
    new MetadataService.PackageVersion();
    new MetadataService.CustomLabelTranslation();
    new MetadataService.ReportChart();
    new MetadataService.checkRetrieveStatusResponse_element();
    new MetadataService.ProfileFieldLevelSecurity();
    new MetadataService.SharingReason();
    new MetadataService.RunTestsResult();
    new MetadataService.PermissionSetUserPermission();
    new MetadataService.MiniLayout();
    new MetadataService.FlowVariable();
    new MetadataService.ProfileLoginHours();
    new MetadataService.DashboardFilter();
    new MetadataService.CodeLocation();
    new MetadataService.ReportBucketFieldSourceValue();
    new MetadataService.FieldSetItem();
    new MetadataService.ReportFilterItem();
    new MetadataService.FlowDynamicChoiceSet();
    new MetadataService.CustomDataTypeComponent();
    new MetadataService.CustomObjectTranslation();
    new MetadataService.CustomApplication();
    new MetadataService.ReportAggregate();
    new MetadataService.ApexClass();
    new MetadataService.DebuggingInfo_element();
    new MetadataService.Package_x();
    new MetadataService.SessionSettings();
    new MetadataService.Document();
    new MetadataService.Folder();
    new MetadataService.DeployResult();
    new MetadataService.LayoutItem();
    new MetadataService.ProfileApexPageAccess();
    new MetadataService.SharingReasonTranslation();
    new MetadataService.checkDeployStatusResponse_element();
    new MetadataService.ReportColorRange();
    new MetadataService.SearchLayouts();
    new MetadataService.LetterheadHeaderFooter();
    new MetadataService.HomePageComponent();
    new MetadataService.MobileSettings();
    new MetadataService.EscalationRules();
    new MetadataService.KnowledgeAnswerSettings();
    new MetadataService.ExternalDataSource();
    new MetadataService.EntitlementProcess();
    new MetadataService.IdeasSettings();
    new MetadataService.Country();
    new MetadataService.ReputationLevels();
    new MetadataService.KnowledgeSitesSettings();
    new MetadataService.AddressSettings();
    new MetadataService.ProfileExternalDataSourceAccess();
    new MetadataService.CallCenterItem();
    new MetadataService.CallCenter();
    new MetadataService.PermissionSetExternalDataSourceAccess();
    new MetadataService.PermissionSetTabSetting();
    new MetadataService.AuthProvider();
    new MetadataService.EmailToCaseSettings();
    new MetadataService.EscalationAction();
    new MetadataService.State();
    new MetadataService.AssignmentRule();
    new MetadataService.AutoResponseRule();
    new MetadataService.CaseSettings();
    new MetadataService.ChatterAnswersSettings();
    new MetadataService.CountriesAndStates();
    new MetadataService.SFDCMobileSettings();
    new MetadataService.EntitlementProcessMilestoneItem();
    new MetadataService.TouchMobileSettings();
    new MetadataService.AssignmentRules();
    new MetadataService.ContractSettings();
    new MetadataService.KnowledgeCaseSettings();
    new MetadataService.ChatterAnswersReputationLevel();
    new MetadataService.KnowledgeSettings();
    new MetadataService.Community();
    new MetadataService.AutoResponseRules();
    new MetadataService.EmailToCaseRoutingAddress();
    new MetadataService.RuleEntry();
    new MetadataService.EntitlementSettings();
    new MetadataService.ApexPage();
    new MetadataService.WorkflowSend();
    new MetadataService.ChatterMobileSettings();
    new MetadataService.CallCenterSection();
    new MetadataService.EntitlementProcessMilestoneTimeTrigger();
    new MetadataService.StaticResource();
    new MetadataService.MilestoneType();
    new MetadataService.FiscalYearSettings();
    new MetadataService.CompanySettings();
    new MetadataService.WebToCaseSettings();
    new MetadataService.EscalationRule();
    new MetadataService.DashboardMobileSettings();
    new MetadataService.FieldOverride();
    new MetadataService.QuotasSettings();
    new MetadataService.Skill();
    new MetadataService.AgentConfigProfileAssignments();
    new MetadataService.LiveAgentSettings();
    new MetadataService.SkillAssignments();
    new MetadataService.ActivitiesSettings();
    new MetadataService.LiveAgentConfig();
    new MetadataService.ApprovalPageField();
    new MetadataService.QuickActionList();
    new MetadataService.LiveChatButtonDeployments();
    new MetadataService.InstalledPackage();
    new MetadataService.PushNotification();
    new MetadataService.LiveChatAgentConfig();
    new MetadataService.AdjustmentsSettings();
    new MetadataService.ForecastingSettings();
    new MetadataService.QuickActionListItem();
    new MetadataService.Branding();
    new MetadataService.QuickActionLayoutItem();
    new MetadataService.OpportunityListFieldsSelectedSettings();
    new MetadataService.ApprovalStepRejectBehavior();
    new MetadataService.FolderShare();
    new MetadataService.ApprovalEntryCriteria();
    new MetadataService.ProductSettings();
    new MetadataService.OpportunitySettings();
    new MetadataService.LiveChatDeployment();
    new MetadataService.QuickActionLayoutColumn();
    new MetadataService.GlobalQuickActionTranslation();
    new MetadataService.ApprovalStepApprover();
    new MetadataService.QuoteSettings();
    new MetadataService.LiveChatButton();
    new MetadataService.Network();
    new MetadataService.LiveChatDeploymentDomainWhitelist();
    new MetadataService.KnowledgeLanguageSettings();
    new MetadataService.Approver();
    new MetadataService.SamlSsoConfig();
    new MetadataService.ApprovalSubmitter();
    new MetadataService.KeyboardShortcuts();
    new MetadataService.ApprovalStep();
    new MetadataService.AgentConfigAssignments();
    new MetadataService.QuickAction();
    new MetadataService.DefaultShortcut();
    new MetadataService.ApprovalAction();
    new MetadataService.KnowledgeLanguage();
    new MetadataService.LiveChatButtonSkills();
    new MetadataService.SkillUserAssignments();
    new MetadataService.NextAutomatedApprover();
    new MetadataService.ApprovalProcess();
    new MetadataService.QuickActionLayout();
    new MetadataService.PushNotifications();
    new MetadataService.ForecastRangeSettings();
    new MetadataService.IdeaReputationLevel();
    new MetadataService.NetworkTabSet();
    new MetadataService.SkillProfileAssignments();
    new MetadataService.CustomShortcut();
    new MetadataService.PagesToOpen();
    new MetadataService.AgentConfigUserAssignments();
    new MetadataService.NetworkMemberGroup();
    new MetadataService.FindSimilarOppFilter();
    new MetadataService.QuickActionTranslation();
    new MetadataService.WorkflowFlowActionParameter();
    new MetadataService.ConnectedAppOauthConfig();
    new MetadataService.FlowLoop();
    new MetadataService.renameMetadata_element();
    new MetadataService.ForecastingTypeSettings();
    new MetadataService.PermissionSetApplicationVisibility();
    new MetadataService.FeedLayout();
    new MetadataService.AppMenuItem();
    new MetadataService.deleteMetadataResponse_element();
    new MetadataService.ConnectedAppAttribute();
    new MetadataService.ReportChartComponentLayoutItem();
    new MetadataService.AppMenu();
    new MetadataService.ConnectedAppIpRange();
    new MetadataService.Error();
    new MetadataService.ComponentInstanceProperty();
    new MetadataService.BusinessHoursEntry();
    new MetadataService.RelatedContent();
    new MetadataService.SupervisorAgentConfigSkills();
    new MetadataService.ComponentInstance();
    new MetadataService.SidebarComponent();
    new MetadataService.Holiday();
    new MetadataService.SaveResult();
    new MetadataService.readMetadataResponse_element();
    new MetadataService.FlexiPageRegion();
    new MetadataService.deleteMetadata_element();
    new MetadataService.ConnectedAppMobileDetailConfig();
    new MetadataService.AccountSettings();
    new MetadataService.PermissionSetRecordTypeVisibility();
    new MetadataService.OrderSettings();
    new MetadataService.ProfileUserPermission();
    new MetadataService.LookupFilterTranslation();
    new MetadataService.WorkflowFlowAction();
    new MetadataService.ConnectedApp();
    new MetadataService.SiteDotCom();
    new MetadataService.createMetadataResponse_element();
    new MetadataService.updateMetadata_element();
    new MetadataService.LookupFilter();
    new MetadataService.updateMetadataResponse_element();
    new MetadataService.FlexiPage();
    new MetadataService.ConnectedAppSamlConfig();
    new MetadataService.createMetadata_element();
    new MetadataService.FeedLayoutComponent();
    new MetadataService.PostTemplate();
    new MetadataService.RelatedContentItem();
    new MetadataService.readMetadata_element();
    new MetadataService.ReadWorkflowRuleResult();
    new MetadataService.readWorkflowRuleResponse_element();
    new MetadataService.ReadSamlSsoConfigResult();
    new MetadataService.readSamlSsoConfigResponse_element();
    new MetadataService.ReadCustomLabelResult();
    new MetadataService.readCustomLabelResponse_element();
    new MetadataService.ReadBusinessHoursEntryResult();
    new MetadataService.readBusinessHoursEntryResponse_element();
    new MetadataService.ReadMobileSettingsResult();
    new MetadataService.readMobileSettingsResponse_element();
    new MetadataService.ReadChatterAnswersSettingsResult();
    new MetadataService.readChatterAnswersSettingsResponse_element();
    new MetadataService.ReadSharingRulesResult();
    new MetadataService.readSharingRulesResponse_element();
    new MetadataService.ReadPortalResult();
    new MetadataService.readPortalResponse_element();
    new MetadataService.ReadSkillResult();
    new MetadataService.readSkillResponse_element();
    new MetadataService.ReadEscalationRulesResult();
    new MetadataService.readEscalationRulesResponse_element();
    new MetadataService.ReadCustomDataTypeResult();
    new MetadataService.readCustomDataTypeResponse_element();
    new MetadataService.ReadExternalDataSourceResult();
    new MetadataService.readExternalDataSourceResponse_element();
    new MetadataService.ReadEntitlementProcessResult();
    new MetadataService.readEntitlementProcessResponse_element();
    new MetadataService.ReadRecordTypeResult();
    new MetadataService.readRecordTypeResponse_element();
    new MetadataService.ReadScontrolResult();
    new MetadataService.readScontrolResponse_element();
    new MetadataService.ReadDataCategoryGroupResult();
    new MetadataService.readDataCategoryGroupResponse_element();
    new MetadataService.ReadValidationRuleResult();
    new MetadataService.readValidationRuleResponse_element();
    new MetadataService.ReadProfileResult();
    new MetadataService.readProfileResponse_element();
    new MetadataService.ReadIdeasSettingsResult();
    new MetadataService.readIdeasSettingsResponse_element();
    new MetadataService.ReadConnectedAppResult();
    new MetadataService.readConnectedAppResponse_element();
    new MetadataService.ReadApexPageResult();
    new MetadataService.readApexPageResponse_element();
    new MetadataService.ReadProductSettingsResult();
    new MetadataService.readProductSettingsResponse_element();
    new MetadataService.ReadLiveAgentSettingsResult();
    new MetadataService.readLiveAgentSettingsResponse_element();
    new MetadataService.ReadOpportunitySettingsResult();
    new MetadataService.readOpportunitySettingsResponse_element();
    new MetadataService.ReadLiveChatDeploymentResult();
    new MetadataService.readLiveChatDeploymentResponse_element();
    new MetadataService.ReadActivitiesSettingsResult();
    new MetadataService.readActivitiesSettingsResponse_element();
    new MetadataService.ReadLayoutResult();
    new MetadataService.readLayoutResponse_element();
    new MetadataService.ReadWebLinkResult();
    new MetadataService.readWebLinkResponse_element();
    new MetadataService.ReadSiteDotComResult();
    new MetadataService.readSiteDotComResponse_element();
    new MetadataService.ReadCompanySettingsResult();
    new MetadataService.readCompanySettingsResponse_element();
    new MetadataService.ReadHomePageLayoutResult();
    new MetadataService.readHomePageLayoutResponse_element();
    new MetadataService.ReadDashboardResult();
    new MetadataService.readDashboardResponse_element();
    new MetadataService.ReadAssignmentRulesResult();
    new MetadataService.readAssignmentRulesResponse_element();
    new MetadataService.ReadAnalyticSnapshotResult();
    new MetadataService.readAnalyticSnapshotResponse_element();
    new MetadataService.ReadEscalationRuleResult();
    new MetadataService.readEscalationRuleResponse_element();
    new MetadataService.ReadCustomSiteResult();
    new MetadataService.readCustomSiteResponse_element();
    new MetadataService.ReadGroupResult();
    new MetadataService.readGroupResponse_element();
    new MetadataService.ReadReportTypeResult();
    new MetadataService.readReportTypeResponse_element();
    new MetadataService.ReadQuickActionResult();
    new MetadataService.readQuickActionResponse_element();
    new MetadataService.ReadCustomPageWebLinkResult();
    new MetadataService.readCustomPageWebLinkResponse_element();
    new MetadataService.ReadApexComponentResult();
    new MetadataService.readApexComponentResponse_element();
    new MetadataService.ReadEntitlementTemplateResult();
    new MetadataService.readEntitlementTemplateResponse_element();
    new MetadataService.ReadFlexiPageResult();
    new MetadataService.readFlexiPageResponse_element();
    new MetadataService.ReadWorkflowResult();
    new MetadataService.readWorkflowResponse_element();
    new MetadataService.ReadWorkflowActionResult();
    new MetadataService.readWorkflowActionResponse_element();
    new MetadataService.ReadAddressSettingsResult();
    new MetadataService.readAddressSettingsResponse_element();
    new MetadataService.ReadContractSettingsResult();
    new MetadataService.readContractSettingsResponse_element();
    new MetadataService.ReadCustomObjectResult();
    new MetadataService.readCustomObjectResponse_element();
    new MetadataService.ReadTranslationsResult();
    new MetadataService.readTranslationsResponse_element();
    new MetadataService.ReadRoleOrTerritoryResult();
    new MetadataService.readRoleOrTerritoryResponse_element();
    new MetadataService.ReadApexTriggerResult();
    new MetadataService.readApexTriggerResponse_element();
    new MetadataService.ReadCustomLabelsResult();
    new MetadataService.readCustomLabelsResponse_element();
    new MetadataService.ReadSecuritySettingsResult();
    new MetadataService.readSecuritySettingsResponse_element();
    new MetadataService.ReadCallCenterResult();
    new MetadataService.readCallCenterResponse_element();
    new MetadataService.ReadPicklistValueResult();
    new MetadataService.readPicklistValueResponse_element();
    new MetadataService.ReadRemoteSiteSettingResult();
    new MetadataService.readRemoteSiteSettingResponse_element();
    new MetadataService.ReadQuoteSettingsResult();
    new MetadataService.readQuoteSettingsResponse_element();
    new MetadataService.ReadSynonymDictionaryResult();
    new MetadataService.readSynonymDictionaryResponse_element();
    new MetadataService.ReadPostTemplateResult();
    new MetadataService.readPostTemplateResponse_element();
    new MetadataService.ReadCustomTabResult();
    new MetadataService.readCustomTabResponse_element();
    new MetadataService.ReadLetterheadResult();
    new MetadataService.readLetterheadResponse_element();
    new MetadataService.ReadInstalledPackageResult();
    new MetadataService.readInstalledPackageResponse_element();
    new MetadataService.ReadQueueResult();
    new MetadataService.readQueueResponse_element();
    new MetadataService.ReadAuthProviderResult();
    new MetadataService.readAuthProviderResponse_element();
    new MetadataService.ReadEntitlementSettingsResult();
    new MetadataService.readEntitlementSettingsResponse_element();
    new MetadataService.ReadCustomFieldResult();
    new MetadataService.readCustomFieldResponse_element();
    new MetadataService.ReadStaticResourceResult();
    new MetadataService.readStaticResourceResponse_element();
    new MetadataService.ReadEmailTemplateResult();
    new MetadataService.readEmailTemplateResponse_element();
    new MetadataService.ReadSharingReasonResult();
    new MetadataService.readSharingReasonResponse_element();
    new MetadataService.ReadLiveChatButtonResult();
    new MetadataService.readLiveChatButtonResponse_element();
    new MetadataService.ReadNetworkResult();
    new MetadataService.readNetworkResponse_element();
    new MetadataService.ReadApprovalProcessResult();
    new MetadataService.readApprovalProcessResponse_element();
    new MetadataService.ReadMilestoneTypeResult();
    new MetadataService.readMilestoneTypeResponse_element();
    new MetadataService.ReadAssignmentRuleResult();
    new MetadataService.readAssignmentRuleResponse_element();
    new MetadataService.ReadCompactLayoutResult();
    new MetadataService.readCompactLayoutResponse_element();
    new MetadataService.ReadLiveChatAgentConfigResult();
    new MetadataService.readLiveChatAgentConfigResponse_element();
    new MetadataService.ReadAccountSettingsResult();
    new MetadataService.readAccountSettingsResponse_element();
    new MetadataService.ReadBusinessProcessResult();
    new MetadataService.readBusinessProcessResponse_element();
    new MetadataService.ReadFlowResult();
    new MetadataService.readFlowResponse_element();
    new MetadataService.ReadAutoResponseRuleResult();
    new MetadataService.readAutoResponseRuleResponse_element();
    new MetadataService.ReadPermissionSetResult();
    new MetadataService.readPermissionSetResponse_element();
    new MetadataService.ReadBusinessHoursSettingsResult();
    new MetadataService.readBusinessHoursSettingsResponse_element();
    new MetadataService.ReadForecastingSettingsResult();
    new MetadataService.readForecastingSettingsResponse_element();
    new MetadataService.ReadReportResult();
    new MetadataService.readReportResponse_element();
    new MetadataService.ReadAppMenuResult();
    new MetadataService.readAppMenuResponse_element();
    new MetadataService.ReadListViewResult();
    new MetadataService.readListViewResponse_element();
    new MetadataService.ReadOrderSettingsResult();
    new MetadataService.readOrderSettingsResponse_element();
    new MetadataService.ReadCustomObjectTranslationResult();
    new MetadataService.readCustomObjectTranslationResponse_element();
    new MetadataService.ReadCustomApplicationResult();
    new MetadataService.readCustomApplicationResponse_element();
    new MetadataService.ReadKnowledgeSettingsResult();
    new MetadataService.readKnowledgeSettingsResponse_element();
    new MetadataService.ReadCaseSettingsResult();
    new MetadataService.readCaseSettingsResponse_element();
    new MetadataService.ReadApexClassResult();
    new MetadataService.readApexClassResponse_element();
    new MetadataService.ReadPackageResult();
    new MetadataService.readPackageResponse_element();
    new MetadataService.ReadCommunityResult();
    new MetadataService.readCommunityResponse_element();
    new MetadataService.ReadDocumentResult();
    new MetadataService.readDocumentResponse_element();
    new MetadataService.ReadAutoResponseRulesResult();
    new MetadataService.readAutoResponseRulesResponse_element();
    new MetadataService.ReadFolderResult();
    new MetadataService.readFolderResponse_element();
    new MetadataService.ReadCustomApplicationComponentResult();
    new MetadataService.readCustomApplicationComponentResponse_element();
    new MetadataService.ReadFieldSetResult();
    new MetadataService.readFieldSetResponse_element();
    new MetadataService.ReadSharingSetResult();
    new MetadataService.readSharingSetResponse_element();
    new MetadataService.ReadHomePageComponentResult();
    new MetadataService.readHomePageComponentResponse_element();
    new MetadataService.ReadResult();
    new MetadataService.BusinessHoursSettings();
    new MetadataService.FeedLayoutFilter();
    new MetadataService.ReportHistoricalSelector();
    new MetadataService.ConnectedAppCanvasConfig();
    new MetadataService.DeployDetails();
    new MetadataService.ReportDataCategoryFilter();
    new MetadataService.SynonymGroup();
    new MetadataService.renameMetadataResponse_element();
    new MetadataService.cancelDeploy_element();
    new MetadataService.CancelDeployResult();
    new MetadataService.SynonymDictionary();
    new MetadataService.cancelDeployResponse_element();
    new MetadataService.CompactLayout();
    new MetadataService.AccessMapping();
    new MetadataService.Container();
    new MetadataService.DeleteResult();
    new MetadataService.SharingSet();
    new MetadataService.ReputationPointsRule();
    new MetadataService.FlowActionCallInputParameter();
    new MetadataService.CustomMetadata();
    new MetadataService.VisualizationPlugin();
    new MetadataService.RelatedList();
    new MetadataService.FlowActionCallOutputParameter();
    new MetadataService.FlowActionCall();
    new MetadataService.CustomPermission();
    new MetadataService.ReputationLevelDefinitions();
    new MetadataService.PermissionSetCustomPermissions();
    new MetadataService.upsertMetadata_element();
    new MetadataService.ProfileCustomPermissions();
    new MetadataService.AgentConfigButtons();
    new MetadataService.AgentConfigSkills();
    new MetadataService.upsertMetadataResponse_element();
    new MetadataService.ReputationLevel();
    new MetadataService.ReadWorkflowAlertResult();
    new MetadataService.readWorkflowAlertResponse_element();
    new MetadataService.ReadCustomPermissionResult();
    new MetadataService.readCustomPermissionResponse_element();
    new MetadataService.ReadSiteDotComResult();
    new MetadataService.ReadEmailFolderResult();
    new MetadataService.readEmailFolderResponse_element();
    new MetadataService.ReadCustomMetadataResult();
    new MetadataService.readCustomMetadataResponse_element();
    new MetadataService.ReadAnalyticSnapshotResult();
    new MetadataService.readAnalyticSnapshotResponse_element();
    new MetadataService.ReadVisualizationPluginResult();
    new MetadataService.readVisualizationPluginResponse_element();
    new MetadataService.ReadEscalationRuleResult();
    new MetadataService.ReadMarketingActionSettingsResult();
    new MetadataService.readMarketingActionSettingsResponse_element();
    new MetadataService.ReadWorkflowKnowledgePublishResult();
    new MetadataService.readWorkflowKnowledgePublishResponse_element();
    new MetadataService.ReadDashboardFolderResult();
    new MetadataService.readDashboardFolderResponse_element();
    new MetadataService.ReadWorkflowSendResult();
    new MetadataService.readWorkflowSendResponse_element();
    new MetadataService.ReadWorkflowOutboundMessageResult();
    new MetadataService.readWorkflowOutboundMessageResponse_element();
    new MetadataService.ReadWorkflowFieldUpdateResult();
    new MetadataService.readWorkflowFieldUpdateResponse_element();
    new MetadataService.ReadDocumentFolderResult();
    new MetadataService.readDocumentFolderResponse_element();
    new MetadataService.ReadWorkflowTaskResult();
    new MetadataService.readWorkflowTaskResponse_element();
    new MetadataService.ReadNameSettingsResult();
    new MetadataService.readNameSettingsResponse_element();
    new MetadataService.ReadReportFolderResult();
    new MetadataService.readReportFolderResponse_element();
    new MetadataService.ReadCustomApplicationComponentResult();
    new MetadataService.NameSettings();
    new MetadataService.ReputationPointsRules();
    new MetadataService.FlowMetadataValue();
    new MetadataService.VisualizationResource();
    new MetadataService.MarketingActionSettings();
    new MetadataService.VisualizationType();
    new MetadataService.CustomMetadataValue();
    new MetadataService.HistoryRetentionPolicy();
    new MetadataService.UpsertResult();
    new MetaDataService.Territory2RuleAssociation();
    new MetadataService.ManagedTopics();
    new MetaDataService.XOrgHub();
    new MetaDataService.FlowWaitEventInputParameter();
    new MetadataService.ManagedTopic();
    new MetadataService.Territory2RuleItem();
    new MetadataService.DataPipeline();
    new MetadataService.UiPlugin();
    new MetadataService.Territory2Rule();
    new MetaDataService.XOrgHubSharedObject();
    new MetadataService.Territory2Type();
    new MetadataService.CorsWhitelistOrigin();
    new MetadataService.StandardFieldTranslation();
    new MetadataService.Territory2Model();
    new MetadataService.PersonListSettings();
    new MetadataService.ChannelLayoutItem();
    new MetadataService.FlowWait();
    new MetadataService.Territory2Settings();
    new MetadataService.FieldValue();
    new MetadataService.ChannelLayout();
    new MetadataService.ReadXOrgHubResult();
    new MetadataService.readXOrgHubResponse_element();
    new MetadataService.ReadAuraDefinitionBundleResult();
    new MetadataService.readAuraDefinitionBundleResponse_element();
    new MetadataService.ReadTerritory2SettingsResult();
    new MetadataService.readTerritory2SettingsResponse_element();
    new MetadataService.ReadTerritory2TypeResult();
    new MetadataService.readTerritory2TypeResponse_element();
    new MetadataService.ReadQuoteSettingsResult();
    new MetadataService.readQuoteSettingsResponse_element();
    new MetadataService.ReadCorsWhitelistOriginResult();
    new MetadataService.readCorsWhitelistOriginResponse_element();
    new MetadataService.ReadManagedTopicsResult();
    new MetadataService.readManagedTopicsResponse_element();
    new MetadataService.ReadTerritory2Result();
    new MetadataService.readTerritory2Response_element();
    new MetadataService.ReadCommunityResult();
    new MetadataService.readCommunityResponse_element();
    new MetadataService.ReadDocumentResult();
    new MetadataService.readDocumentResponse_element();
    new MetadataService.ReadTerritory2ModelResult();
    new MetadataService.readTerritory2ModelResponse_element();
    new MetadataService.FlowWaitEventOutputParameter();
    new MetadataService.FlowWaitEvent();
    new MetadataService.CustomPermissionDependencyRequired();
    new MetadataService.ReputationBranding();
    new MetadataService.AuraDefinitionBundle();
    new MetadataService.FeedItemSettings();
    new MetadataService.FlowBaseElement();
    new MetadataService.Territory2();
    new MetaDataService.deployRecentValidationResponse_element();
    new MetaDataService.SharingCriteriaRule();
    new MetaDataService.ActionLinkGroupTemplate();
    new MetaDataService.MatchingRule();
    new MetaDataService.describeValueType_element();
    new MetaDataService.LicensedCustomPermissions();
    new MetaDataService.MatchingRuleItem();
    new MetaDataService.MarketingResourceType();
    new MetaDataService.SharingBaseRule();
    new MetaDataService.MatchingRules();
    new MetaDataService.deployRecentValidation_element();
    new MetaDataService.ActionLinkTemplate();
    new MetaDataService.SharingTerritoryRule();
    new MetaDataService.PersonalJourneySettings();
    new MetaDataService.LicenseDefinition();
    new MetaDataService.AccountSharingRuleSettings();
    new MetaDataService.NamedCredential();
    new MetaDataService.DescribeValueTypeResult();
    new MetaDataService.ReadSharingTerritoryRuleResult();
    new MetaDataService.readSharingTerritoryRuleResponse_element();
    new MetadataService.ReadPersonalJourneySettingsResult();
    new MetaDataService.readPersonalJourneySettingsResponse_element();
    new MetaDataService.ReadMarketingResourceTypeResult();
    new MetaDataService.readMarketingResourceTypeResponse_element();
    new MetaDataService.ReadSharingCriteriaRuleResult();
    new MetaDataService.readSharingCriteriaRuleResponse_element();
    new MetaDataService.ReadLicenseDefinitionResult();
    new MetaDataService.readLicenseDefinitionResponse_element();
    new MetaDataService.ReadActionLinkGroupTemplateResult();
    new MetaDataService.readActionLinkGroupTemplateResponse_element();
    new MetaDataService.ReadNamedCredentialResult();
    new MetaDataService.readNamedCredentialResponse_element();
    new MetaDataService.ReadSharingOwnerRuleResult();
    new MetaDataService.readSharingOwnerRuleResponse_element();
    new MetaDataService.ReadSharingBaseRuleResult();
    new MetaDataService.readSharingBaseRuleResponse_element();
    new MetaDataService.ReadMatchingRulesResult();
    new MetaDataService.readMatchingRulesResponse_element();
    new MetaDataService.ReadMatchingRuleResult();
    new MetaDataService.readMatchingRuleResponse_element();
    new MetaDataService.SharingOwnerRule();
    new MetaDataService.PicklistEntry();
    new MetaDataService.ValueTypeField();
  }
}','1675705896.0','True','MetadataServiceTest','42581','Active');
INSERT INTO "ApexClass" VALUES(36,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public with sharing class OptimizerComponentController {
  // Map notification status from the service to UI severity
  private static Map<OptimizerService.NotificationStatus, String> mapNotificationStatusToUIServerity = new Map<OptimizerService.NotificationStatus, String>{
    OptimizerService.NotificationStatus.CheckFailed => ''error'',
    OptimizerService.NotificationStatus.Warning => ''info'',
    OptimizerService.NotificationStatus.Attention => ''warning''
  };

  // Map summary status from the service to UI severity
  private static Map<OptimizerService.SummaryStatus, String> mapSummaryStatusToUIServerity = new Map<OptimizerService.SummaryStatus, String>{
    OptimizerService.SummaryStatus.Complete => ''info'',
    OptimizerService.SummaryStatus.CompleteWithWarnings => ''warning'',
    OptimizerService.SummaryStatus.CompleteNeedsAttention => ''error''
  };
  private static Map<OptimizerService.SummaryStatus, String> mapSummaryStatusToUITitle = new Map<OptimizerService.SummaryStatus, String>{
    OptimizerService.SummaryStatus.Complete => ''Status: Good'',
    OptimizerService.SummaryStatus.CompleteWithWarnings => ''Status: Warnings'',
    OptimizerService.SummaryStatus.CompleteNeedsAttention => ''Status: Take Action''
  };
  private static Map<OptimizerService.SummaryStatus, String> mapSummaryStatusToUIMessage = new Map<OptimizerService.SummaryStatus, String>{
    OptimizerService.SummaryStatus.Complete => ''It looks like you are all good for the moment, check back again regularly!'',
    OptimizerService.SummaryStatus.CompleteWithWarnings => ''It looks like you have some warnings to review.'',
    OptimizerService.SummaryStatus.CompleteNeedsAttention => ''It looks like you have some actions to review.''
  };

  @AuraEnabled
  public static Summary analyze() {
    try {
      OptimizerService.Summary summary = OptimizerService.analyize();
      // Marshall into a response the Aura serializer supports
      Summary responseSummary = new Summary();
      responseSummary.severity = mapSummaryStatusToUIServerity.get(
        summary.Status
      );
      responseSummary.title = mapSummaryStatusToUITitle.get(summary.Status);
      responseSummary.message = mapSummaryStatusToUIMessage.get(summary.Status);
      responseSummary.notifications = new List<Notification>();
      for (
        OptimizerService.Notification notification : summary.Notifications.values()
      ) {
        Notification responseNotification = new Notification();
        responseNotification.id = notification.Id.name();
        responseNotification.severity = mapNotificationStatusToUIServerity.get(
          notification.Status
        );
        responseNotification.message = notification.Message;
        responseNotification.moreInfoUrl = notification.MoreInfoURL;
        responseSummary.notifications.add(responseNotification);
      }
      return responseSummary;
    } catch (Exception e) {
      // Marshall into an exception the Aura serializer supports
      throw new AuraHandledException(e.getMessage());
    }
  }

  public class Summary {
    @AuraEnabled
    public String severity;
    @AuraEnabled
    public String title;
    @AuraEnabled
    public String message;
    @AuraEnabled
    public List<Notification> notifications;
  }

  public class Notification {
    @AuraEnabled
    public String id;
    @AuraEnabled
    public String severity;
    @AuraEnabled
    public String message;
    @AuraEnabled
    public string moreInfoURL;
  }
}','1804082342.0','False','OptimizerComponentController','3212','Active');
INSERT INTO "ApexClass" VALUES(37,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Performs various queries on the ApexClass object
 **/
public class ApexClassesSelector extends fflib_SObjectSelector {
  public List<Schema.SObjectField> getSObjectFieldList() {
    return new List<Schema.SObjectField>{
      ApexClass.SystemModstamp,
      ApexClass.Status,
      ApexClass.NamespacePrefix,
      ApexClass.Name,
      ApexClass.LengthWithoutComments,
      ApexClass.LastModifiedDate,
      ApexClass.LastModifiedById,
      ApexClass.IsValid,
      ApexClass.Id,
      ApexClass.CreatedDate,
      ApexClass.CreatedById,
      ApexClass.BodyCrc,
      ApexClass.Body,
      ApexClass.ApiVersion
    };
  }

  public Schema.SObjectType getSObjectType() {
    return ApexClass.sObjectType;
  }

  /**
   * Returns ApexClass that match the given name
   **/
  public Map<String, ApexClass> selectByName(Set<String> names) {
    List<ApexClass> apexClasses = Database.query(
      newQueryFactory().setCondition(''Name in :names'').toSOQL()
    );
    Map<String, ApexClass> mapByName = new Map<String, ApexClass>();
    for (ApexClass apexClass : apexClasses)
      mapByName.put(apexClass.Name, apexClass);
    return mapByName;
  }
}','740715793.0','True','ApexClassesSelector','1033','Active');
INSERT INTO "ApexClass" VALUES(38,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Performs various queries on the ApexTrigger object
 **/
public class ApexTriggersSelector extends fflib_SObjectSelector {
  public List<Schema.SObjectField> getSObjectFieldList() {
    return new List<Schema.SObjectField>{
      ApexTrigger.Name,
      ApexTrigger.UsageIsBulk,
      ApexTrigger.UsageBeforeUpdate,
      ApexTrigger.UsageBeforeInsert,
      ApexTrigger.UsageBeforeDelete,
      ApexTrigger.UsageAfterUpdate,
      ApexTrigger.UsageAfterUndelete,
      ApexTrigger.UsageAfterInsert,
      ApexTrigger.UsageAfterDelete,
      ApexTrigger.TableEnumOrId,
      ApexTrigger.SystemModstamp,
      ApexTrigger.Status,
      ApexTrigger.NamespacePrefix,
      ApexTrigger.LengthWithoutComments,
      ApexTrigger.LastModifiedDate,
      ApexTrigger.LastModifiedById,
      ApexTrigger.IsValid,
      ApexTrigger.Id,
      ApexTrigger.CreatedDate,
      ApexTrigger.CreatedById,
      ApexTrigger.BodyCrc,
      ApexTrigger.Body,
      ApexTrigger.ApiVersion
    };
  }

  public Schema.SObjectType getSObjectType() {
    return ApexTrigger.sObjectType;
  }

  /**
   * Returns ApexTriggers that match the given name
   **/
  public Map<String, ApexTrigger> selectByName(Set<String> names) {
    List<ApexTrigger> apexTriggers = Database.query(
      newQueryFactory().setCondition(''Name in :names'').toSOQL()
    );
    Map<String, ApexTrigger> mapByName = new Map<String, ApexTrigger>();
    for (ApexTrigger apexTrigger : apexTriggers)
      mapByName.put(apexTrigger.Name, apexTrigger);
    return mapByName;
  }
}','147538821.0','True','ApexTriggersSelector','1403','Active');
INSERT INTO "ApexClass" VALUES(39,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public class AsyncApexJobsSelector extends fflib_SObjectSelector {
  List<Schema.SObjectField> getSObjectFieldList() {
    return new List<Schema.SObjectField>{
      AsyncApexJob.Id,
      AsyncApexJob.Status,
      AsyncApexJob.ExtendedStatus,
      AsyncApexJob.CreatedDate,
      AsyncApexJob.CompletedDate,
      AsyncApexJob.JobItemsProcessed,
      AsyncApexJob.TotalJobItems,
      AsyncApexJob.NumberOfErrors
    };
  }

  Schema.SObjectType getSObjectType() {
    return AsyncApexJob.sObjectType;
  }

  public override String getOrderBy() {
    return ''CreatedDate'';
  }

  public List<AsyncApexJob> selectById(Set<ID> idSet) {
    return (List<AsyncApexJob>) selectSObjectsById(idSet);
  }

  /**
   * True if any of the given jobs (expressed by their class names) are queued, processing or preparing
   **/
  public Boolean jobsExecuting(Set<String> classNames) {
    Set<String> statuses = new Set<String>{
      ''Queued'',
      ''Processing'',
      ''Preparing''
    };
    String jobType = ''BatchApex'';
    String query = newQueryFactory()
      .setCondition(
        ''JobType = :jobType And '' +
        ''ApexClass.Name in :classNames And '' +
        ''Status in :statuses''
      )
      .toSOQL();
    List<AsyncApexJob> jobs = (List<AsyncApexJob>) Database.query(query);
    return jobs.size() > 0;
  }
}','644960944.0','True','AsyncApexJobsSelector','1199','Active');
INSERT INTO "ApexClass" VALUES(40,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Performs various health checks to keeping the tool running in tip top shape!
 **/
global with sharing class OptimizerService {
  /**
   * Run all know checks
   **/
  global static Summary analyize() {
    return analyize(
      new Set<NotificationReference>(NotificationReference.values())
    );
  }

  /**
   * Run specified checks
   **/
  global static Summary analyize(Set<NotificationReference> checksToRun) {
    Summary summary = new Summary();
    summary.Notifications = new Map<NotificationReference, Notification>();
    for (NotificationReference ref : checksToRun) {
      // Look for an inner class in the service implementing the check
      Type checkType = Type.forName(OptimizerService.class + ''.'' + ref.name());
      if (checkType != null) {
        OptimizationCheckRunner check = (OptimizationCheckRunner) checkType.newInstance();
        try {
          // Run the optimization check
          Notification notification = check.execute();
          if (notification != null) {
            // Return the notiifcation for this check
            summary.Notifications.put(ref, notification);
            // Summary status reflects the most significant notificaiton status
            if (
              notification.Status == NotificationStatus.Warning &&
              summary.Status != SummaryStatus.CompleteNeedsAttention
            ) {
              summary.Status = SummaryStatus.CompleteWithWarnings;
            } else if (notification.Status == NotificationStatus.Attention) {
              summary.Status = SummaryStatus.CompleteNeedsAttention;
            }
          }
        } catch (Exception e) {
          // Return a failed notification notification!
          Notification failedCheck = new Notification();
          failedCheck.Status = NotificationStatus.CheckFailed;
          failedCheck.Message =
            ''Optimization check '' +
            ref +
            '' failed to complete: '' +
            e.getMessage();
          failedCheck.MoreInfoURL = null;
          summary.Notifications.put(ref, failedCheck);
          summary.Status = SummaryStatus.CompleteNeedsAttention;
        }
      }
    }
    if (summary.Status == null) {
      summary.Status = SummaryStatus.Complete;
    }
    return summary;
  }

  /**
   * Results of the optimizer analysis
   **/
  global class Summary {
    global SummaryStatus Status { get; private set; }
    global Map<NotificationReference, Notification> Notifications {
      get;
      private set;
    }
  }

  /**
   * Notification to the user from a given analysis
   **/
  global class Notification {
    global NotificationReference Id { get; private set; }
    global NotificationStatus Status { get; private set; }
    global String Message { get; private set; }
    global String MoreInfoURL { get; private set; }
  }

  /**
   * Status of the optimizer analysis (in future this may require background processing)
   **/
  global enum SummaryStatus {
    Complete,
    CompleteWithWarnings,
    CompleteNeedsAttention
  }

  global enum NotificationStatus {
    CheckFailed,
    Warning,
    Attention
  }

  /**
   * Known optimization notications this service can return, use .values() to enumerate
   **/
  global enum NotificationReference {
    LookupRollupSummaryLogsExist,
    LookupRollupSummaryScheduleItemsInError,
    LookupShadowRecordsNeedDeleting,
    LookupRollupSummaryScheduleItemsCount,
    LookupRollupSummaryScheduleItemsFieldDeletion,
    LookupRollupSummaryScheduleItemsWithFullCalcScheduleJob
  }

  /**
   * Notifies the user if they have some records in the LookupRollupSummaryLogs__c record
   **/
  public class LookupRollupSummaryLogsExist extends OptimizationCheckRunner {
    public override Notification execute() {
      List<LookupRollupSummaryLog__c> logs = [
        SELECT Id
        FROM LookupRollupSummaryLog__c
        LIMIT 1
      ];
      if (logs.size() > 0) {
        Notification notification = new Notification();
        notification.Id = NotificationReference.LookupRollupSummaryLogsExist;
        notification.Status = NotificationStatus.Warning;
        notification.Message = ''Check the Lookup Rollup Summary Log tab for errors updating rollups.'';
        notification.MoreInfoURL = ''https://sfdo-community-sprints.github.io/DLRS-Documentation/Issues/#attention-need-to-delete-unused-field-on-dlrs__lookuprollupsummaryscheduleitems__c'';
        return notification;
      }
      return null;
    }
  }

  /**
   * Notifies the user if they have to perform the post install step to clean out the unused field on LookupRollupSummaryScheduleItems__c
   */
  public class LookupRollupSummaryScheduleItemsFieldDeletion extends OptimizationCheckRunner {
    public override Notification execute() {
      Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.LookupRollupSummaryScheduleItems__c.fields.getMap();
      Schema.SObjectField legacyLookupRollupSummaryField = fieldMap.get(
        ''dlrs__LookupRollupSummary__c''
      );
      if (legacyLookupRollupSummaryField != null) {
        Notification notification = new Notification();
        notification.Id = NotificationReference.LookupRollupSummaryScheduleItemsFieldDeletion;
        notification.Status = NotificationStatus.Attention;
        notification.Message = ''This version of the tool no longer requires the field dlrs__LookupRollupSummary__c on dlrs__LookupRollupSummaryScheduleItems__c. For optimum configuration and performance please delete it after reading the further information provided.'';
        notification.MoreInfoURL = ''https://sfdo-community-sprints.github.io/DLRS-Documentation/Issues/#attention-need-to-delete-unused-field-on-dlrs__lookuprollupsummaryscheduleitems__c'';
        return notification;
      }
      return null;
    }
  }

  /**
   * Notifies the user if they have to run the "RollupJob" class to process LookupRollupSummaryScheduleItems__c records
   */
  public class LookupRollupSummaryScheduleItemsCount extends OptimizationCheckRunner {
    public override Notification execute() {
      // Check if RollupJob is scheduled
      Integer countScheduled = [
        SELECT COUNT()
        FROM AsyncApexJob
        WHERE
          JobType = ''ScheduledApex''
          AND status = ''Queued''
          AND ApexClass.name LIKE ''%RollupJob%''
      ];

      //No need to warn user if scheduled items are going to be processed
      if (countScheduled > 0) {
        return null;
      }

      //Count() aggregate does not hit Row limit.
      Integer count = [
        SELECT COUNT()
        FROM LookupRollupSummaryScheduleItems__c
        LIMIT 5000
      ];
      if (count > 0) {
        //Estimated custom object records at 2kb
        Integer kilobytesPerRecord = 2;
        Integer bytes = 1024;
        Integer megabytesOfDataspaceUsed = (count * kilobytesPerRecord) / bytes;

        Notification notification = new Notification();
        notification.Id = NotificationReference.LookupRollupSummaryScheduleItemsCount;
        notification.Status = NotificationStatus.Warning;
        notification.Message =
          ''There are '' +
          count +
          '' Scheduled Items - Clear or Schedule the Lookup Rollup Summary Schedule Items. You are using an estimated '' +
          megabytesOfDataspaceUsed +
          '' MB of data storage.'';
        notification.MoreInfoURL = ''https://sfdo-community-sprints.github.io/DLRS-Documentation/Architecture/calculates.html#scheduled-incremental-calculate'';
        return notification;
      }
      return null;
    }
  }

  /**
   * Ability to run a optimization check
   **/
  public abstract class OptimizationCheckRunner {
    public abstract Notification execute();
  }
}','1877090903.0','False','OptimizerService','6240','Active');
INSERT INTO "ApexClass" VALUES(41,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class OptimizerServiceTest {
  @IsTest
  public static void givenLogRecordsThenCompletedWithWarnings() {
    // Given
    LookupRollupSummaryLog__c log1 = new LookupRollupSummaryLog__c(
      ParentId__c = ''abc''
    );
    LookupRollupSummaryLog__c log2 = new LookupRollupSummaryLog__c(
      ParentId__c = ''xyz''
    );
    insert new List<LookupRollupSummaryLog__c>{ log1, log2 };

    // When
    OptimizerService.Summary summary = OptimizerService.analyize();

    // Then
    System.assertEquals(
      OptimizerService.SummaryStatus.CompleteWithWarnings,
      summary.Status
    );
    System.assertEquals(
      OptimizerService.NotificationStatus.Warning,
      summary.Notifications.get(
          OptimizerService.NotificationReference.LookupRollupSummaryLogsExist
        )
        .Status
    );
  }

  @IsTest
  public static void givenNoLogRecordsThenCompleteWithoutWarnings() {
    // Given
    // No Logs

    // When
    OptimizerService.Summary summary = OptimizerService.analyize();

    // Then
    System.assertEquals(
      OptimizerService.SummaryStatus.Complete,
      summary.Status
    );
    System.assertEquals(0, summary.Notifications.size());
  }

  @IsTest
  static void givenManyScheduleItemsThenCompleteWithWarning() {
    // Given
    OptimizerService.NotificationReference nf = OptimizerService.NotificationReference.LookupRollupSummaryScheduleItemsCount;

    //When
    Test.startTest();
    List<LookupRollupSummaryScheduleItems__c> newList = new List<LookupRollupSummaryScheduleItems__c>();

    for (Integer i = 5; i < 300; i++) {
      LookupRollupSummaryScheduleItems__c item = new LookupRollupSummaryScheduleItems__c();
      item.QualifiedParentId__c = String.valueOf(i);
      newList.add(item);
    }

    insert newList;

    OptimizerService.Summary summary = OptimizerService.analyize(
      new Set<OptimizerService.NotificationReference>{ nf }
    );
    Test.stopTest();

    //Then
    System.assertEquals(
      OptimizerService.SummaryStatus.CompleteWithWarnings,
      summary.Status,
      ''Status should have completed with warnings given scheduled items in queue''
    );
  }

  @IsTest
  static void givenNoScheduleItemsThenCompleteWithoutWarning() {
    // Given
    OptimizerService.NotificationReference nf = OptimizerService.NotificationReference.LookupRollupSummaryScheduleItemsCount;

    //When
    Test.startTest();
    OptimizerService.Summary summary = OptimizerService.analyize(
      new Set<OptimizerService.NotificationReference>{ nf }
    );
    Test.stopTest();

    //Then
    System.assertEquals(
      OptimizerService.SummaryStatus.Complete,
      summary.Status,
      ''Status should have completed without warnings given no scheduled items in queue''
    );
  }
}','2001144103.0','False','OptimizerServiceTest','2587','Active');
INSERT INTO "ApexClass" VALUES(42,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Invocable method allows Processs Builder and Visual Flow to invoke the rollup engine
 *   (rollup summaries needed to be set to Process Builder)
 **/
global with sharing class RollupActionCalculate {
  /**
   * Describes a specific rollup to process
   **/
  global class RollupToCalculate {
    @InvocableVariable(label=''Parent Record Id'' required=true)
    global Id ParentId;
    @InvocableVariable(label=''Rollup Summary Unique Name'' required=true)
    global String RollupSummaryUniqueName;
    private RollupService.RollupToCalculate toServiceRollupToCalculate() {
      RollupService.RollupToCalculate rollupToCalculate = new RollupService.RollupToCalculate();
      rollupToCalculate.parentId = parentId;
      rollupToCalculate.rollupSummaryUniqueName = rollupSummaryUniqueName;
      return rollupToCalculate;
    }
  }

  @InvocableMethod(
    label=''Calculates a rollup''
    description=''Provide the Id of the parent record and the unique name of the rollup to calculate, you specificy the same Id multiple times to invoke multiple rollups''
  )
  global static void calculate(List<RollupToCalculate> rollupsToCalculate) {
    List<RollupService.RollupToCalculate> rollupsToCalc = new List<RollupService.RollupToCalculate>();
    for (RollupToCalculate rollupToCalc : rollupsToCalculate)
      rollupsToCalc.add(rollupToCalc.toServiceRollupToCalculate());
    RollupService.rollup(rollupsToCalc);
  }
}','4104901897.0','False','RollupActionCalculate','1205','Active');
INSERT INTO "ApexClass" VALUES(43,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupSummaryEnhancedControllerTest {
}','3840603716.0','True','RollupSummaryEnhancedControllerTest','62','Active');
INSERT INTO "ApexClass" VALUES(44,'57.0','/**
 * Copyright (c) 2017, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public with sharing class RollupSummaryLogDeleteController {
  private ApexPages.StandardSetController standardController;

  public RollupSummaryLogDeleteController(
    ApexPages.StandardSetController standardController
  ) {
    this.standardController = standardController;
  }

  public PageReference deleteLog() {
    Set<Id> selected = new Map<Id, SObject>(standardController.getSelected())
      .keySet();
    delete [SELECT Id FROM LookupRollupSummaryLog__c WHERE Id IN :selected];
    return standardController.cancel();
  }
}','3989002782.0','False','RollupSummaryLogDeleteController','536','Active');
INSERT INTO "ApexClass" VALUES(45,'57.0','/**
 * Copyright (c) 2017, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
public with sharing class RollupSummaryLogDeleteControllerTest {
  @IsTest
  public static void givenRecordsToDeleteThenDeleted() {
    // Given
    LookupRollupSummaryLog__c log1 = new LookupRollupSummaryLog__c(
      ParentId__c = ''abc''
    );
    LookupRollupSummaryLog__c log2 = new LookupRollupSummaryLog__c(
      ParentId__c = ''xyz''
    );
    insert new List<LookupRollupSummaryLog__c>{ log1, log2 };
    ApexPages.StandardSetController std = new ApexPages.StandardSetController(
      new List<LookupRollupSummaryLog__c>{ log1 }
    );
    std.setSelected(new List<LookupRollupSummaryLog__c>{ log1 });
    RollupSummaryLogDeleteController ctrl = new RollupSummaryLogDeleteController(
      std
    );

    // When
    ctrl.deleteLog();

    // Then
    System.assertEquals(1, [SELECT Id FROM LookupRollupSummaryLog__c].size());
  }

  @IsTest
  public static void givenNoRecordsToDeleteThenNotDeleted() {
    // Given
    LookupRollupSummaryLog__c log1 = new LookupRollupSummaryLog__c(
      ParentId__c = ''abc''
    );
    LookupRollupSummaryLog__c log2 = new LookupRollupSummaryLog__c(
      ParentId__c = ''xyz''
    );
    insert new List<LookupRollupSummaryLog__c>{ log1, log2 };
    ApexPages.StandardSetController std = new ApexPages.StandardSetController(
      new List<LookupRollupSummaryLog__c>{}
    );
    RollupSummaryLogDeleteController ctrl = new RollupSummaryLogDeleteController(
      std
    );

    // When
    ctrl.deleteLog();

    // Then
    System.assertEquals(2, [SELECT Id FROM LookupRollupSummaryLog__c].size());
  }
}','3802864320.0','False','RollupSummaryLogDeleteControllerTest','1482','Active');
INSERT INTO "ApexClass" VALUES(46,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public class RollupSummaryScheduleItemsSelector extends fflib_SObjectSelector {
  public List<Schema.SObjectField> getSObjectFieldList() {
    List<Schema.SObjectField> fields = new List<Schema.SObjectField>{
      LookupRollupSummaryScheduleItems__c.Name,
      LookupRollupSummaryScheduleItems__c.ParentId__c,
      LookupRollupSummaryScheduleItems__c.ParentKeyPrefix__c,
      LookupRollupSummaryScheduleItems__c.LookupRollupSummary2__c
    };

    // Historically packaged field (now removed from package) but maybe in subscriber orgs
    Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.LookupRollupSummaryScheduleItems__c.fields.getMap();
    Schema.SObjectField legacyLookupRollupSummaryField = fieldMap.get(
      ''dlrs__LookupRollupSummary__c''
    );
    if (legacyLookupRollupSummaryField != null) {
      fields.add(legacyLookupRollupSummaryField);
    }

    return fields;
  }

  public Schema.SObjectType getSObjectType() {
    return LookupRollupSummaryScheduleItems__c.sObjectType;
  }

  public override String getOrderBy() {
    return ''ParentKeyPrefix__c'';
  }

  public Database.Querylocator selectAllQueryLocator() {
    return Database.getQueryLocator(newQueryFactory().toSOQL());
  }

  public List<LookupRollupSummaryScheduleItems__c> selectById(Set<ID> idSet) {
    return (List<LookupRollupSummaryScheduleItems__c>) selectSObjectsById(
      idSet
    );
  }
}','3151450086.0','True','RollupSummaryScheduleItemsSelector','1304','Active');
INSERT INTO "ApexClass" VALUES(47,'57.0','//depends
public with sharing class RollupSummaryViewController {
  private Map<String, ViewerObject> viewerRecords;
  private List<RollupSummary> rollupRecords;
  private List<CronTrigger> cronRecords;

  public RollupSummaryViewController() {
    setupData();
  }

  @TestVisible
  private RollupSummaryViewController(
    List<RollupSummary> rs,
    List<CronTrigger> ct
  ) {
    this.viewerRecords = new Map<String, ViewerObject>();
    this.rollupRecords = rs;
    this.cronRecords = ct;
  }

  //Visualforce page needs access to this method
  public pagereference redirect() {
    try {
      PageReference redirectPageWithId = Page.managelookuprollupsummaries;
      redirectPageWithId.setRedirect(true);
      redirectPageWithId.getParameters()
        .put(
          ''id'',
          Apexpages.currentPage().getParameters().get(''newid'').escapeHtml4()
        );
      return redirectPageWithId;
    } catch (Exception e) {
      return Page.RollupSummaryView;
    }
  }

  //visualforce page needs access to this method
  public List<ViewerObject> getView() {
    //if no rollups then impossible to have scheduled jobs attached to them.
    if (rollupRecords.isEmpty()) {
      return null;
    }
    setRollupRecords();
    setCronRecords();
    return viewerRecords.values();
  }

  //setup instance varaibles with SOQL data
  private void setupData() {
    rollupRecords = new RollupSummariesSelector().selectAll();
    CronRecords = new CronTriggersSelector().selectAllScheduledApex();
    viewerRecords = new Map<String, ViewerObject>();
  }

  private void setRollupRecords() {
    for (RollupSummary rollup : rollupRecords) {
      ViewerObject viewObj = new ViewerObject();
      viewObj.label = rollup.UniqueName;
      viewObj.calcMode = rollup.CalculationMode;
      viewObj.RecordId = rollup.id;
      viewerRecords.put(rollup.id.substring(0, 15), viewObj);
    }
  }

  private void setCronRecords() {
    for (CronTrigger c : cronRecords) {
      String id = c.CronJobDetail.Name.substringBetween(''('', '')'');
      if (viewerRecords.containsKey(id)) {
        viewerRecords.get(id).apexJobName = c.CronJobDetail.Name;
        viewerRecords.get(id).scheduledTime = c.NextFireTime.format();
        viewerRecords.get(id).jobFiredCount = c.TimesTriggered;
      }
    }
  }

  //Getter and Setter required for Visualforce page
  public class ViewerObject {
    public string recordId { get; set; }
    public string label { get; set; }
    public string calcMode { get; set; }

    public string scheduledTime { get; set; }
    public Integer jobFiredCount { get; set; }
    public string apexJobName { get; set; }
  }
}','2929865918.0','False','RollupSummaryViewController','2351','Active');
INSERT INTO "ApexClass" VALUES(48,'57.0','@IsTest
private class RollupSummaryViewControllerTest {
  @IsTest
  private static void testRollupSummaryEmpty() {
    RollupSummaryViewController controller = new RollupSummaryViewController(
      new List<RollupSummary>(),
      testCronTriggerData()
    );

    Test.startTest();
    List<RollupSummaryViewController.ViewerObject> viewer = controller.getView();
    Test.stopTest();

    System.assertEquals(
      null,
      viewer,
      ''Empty RollupSummary should return null value''
    );
  }

  @IsTest
  private static void testRollupSummaryWithData() {
    RollupSummaryViewController controller = new RollupSummaryViewController(
      testRollupData(),
      testCronTriggerData()
    );

    Test.startTest();
    List<RollupSummaryViewController.ViewerObject> viewer = controller.getView();
    Test.stopTest();

    System.assert(
      viewer.size() == 2,
      ''Test that viewer list contains two records''
    );
  }
  @IsTest
  private static void testCronTriggerEmpty() {
    RollupSummaryViewController controller = new RollupSummaryViewController(
      testRollupData(),
      new List<CronTrigger>()
    );

    Test.startTest();
    List<RollupSummaryViewController.ViewerObject> viewer = controller.getView();
    Test.stopTest();

    for (RollupSummaryViewController.ViewerObject vo : viewer) {
      System.assertEquals(
        null,
        vo.scheduledTime,
        ''scheduledTime should be null''
      );
      System.assertEquals(
        null,
        vo.jobFiredCount,
        ''jobFiredCount should be null''
      );
      System.assertEquals(null, vo.apexJobName, ''apexJobName should be null'');
    }
  }

  @IsTest
  private static void testCronTriggerWithData() {
    RollupSummaryViewController controller = new RollupSummaryViewController(
      testRollupData(),
      testCronTriggerData()
    );

    Test.startTest();
    List<RollupSummaryViewController.ViewerObject> viewer = controller.getView();
    Test.stopTest();

    for (RollupSummaryViewController.ViewerObject vo : viewer) {
      System.assert(vo.scheduledTime != null, ''scheduledTime should be null'');
      System.assert(vo.jobFiredCount != null, ''jobFiredCount should be null'');
      System.assert(vo.apexJobName != null, ''apexJobName should be null'');
    }
  }

  @IsTest
  private static void testRedirectBadId() {
    RollupSummaryViewController controller = new RollupSummaryViewController();
    Pagereference listView = Page.RollupSummaryView;

    Test.startTest();
    Test.setCurrentPage(listView);
    Pagereference redirectPage = controller.redirect();
    Test.stopTest();

    System.assertEquals(
      redirectPage.getURL(),
      listView.getURL(),
      ''If newID is not valid then it reload current page''
    );
  }

  @IsTest
  private static void testRedirectGoodId() {
    RollupSummaryViewController controller = new RollupSummaryViewController();
    String recordID = ''m007A0000000Ua6QAE'';

    Pagereference listView = Page.RollupSummaryView;
    listView.getParameters().put(''newid'', recordID);

    Test.startTest();
    Test.setCurrentPage(listView);
    Pagereference redirectPage = controller.redirect();
    Test.stopTest();

    String namespace = Utilities.namespace();
    String expectedURL =
      ''/apex/'' +
      (namespace.length() > 0 ? namespace + ''__'' : '''') +
      ''managelookuprollupsummaries'' +
      ''?id='' +
      recordID;
    System.assertEquals(
      expectedURL,
      redirectPage.getURL(),
      ''If newID is valid then it puts id in parameters of VF page of managelookuprollupsummaries''
    );
  }

  @IsTest
  private static void testConstructor() {
    RollupSummaryViewController controller = new RollupSummaryViewController();
    controller.getView();

    System.assert(
      Type.forName(''RollupSummaryViewController'') ==
      RollupSummaryViewController.class,
      ''Same class''
    );
  }

  private static List<RollupSummary> testRollupData() {
    LookupRollupSummary2__mdt rollupSummaryA = new LookupRollupSummary2__mdt();
    LookupRollupSummary2__mdt rollupSummaryB = new LookupRollupSummary2__mdt();

    ID id1 = fflib_IDGenerator.generate(LookupRollupSummary2__mdt.SobjectType);
    ID id2 = fflib_IDGenerator.generate(LookupRollupSummary2__mdt.SobjectType);

    rollupSummaryA.id = ''m007A0000000Ua6QAE'';
    rollupSummaryA.Label = ''test10'';
    rollupSummaryA.DeveloperName = ''test10'';
    rollupSummaryA.ParentObject__c = ''Account'';
    rollupSummaryA.ChildObject__c = ''Opportunity'';
    rollupSummaryA.RelationShipField__c = ''AccountId'';
    rollupSummaryA.FieldToAggregate__c = ''Amount'';
    rollupSummaryA.AggregateOperation__c = ''Sum'';
    rollupSummaryA.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryA.CalculationMode__c = ''Realtime'';
    rollupSummaryA.CalculationSharingMode__c = ''User'';
    rollupSummaryA.RowLimit__c = 0;
    rollupSummaryA.AggregateAllRows__c = false;
    rollupSummaryA.Active__c = false;
    rollupSummaryA.TestCodeSeeAllData__c = false;

    rollupSummaryB.id = ''m007A0000000UaBQAU'';
    rollupSummaryB.Label = ''test11'';
    rollupSummaryB.DeveloperName = ''test11'';
    rollupSummaryB.ParentObject__c = ''Account'';
    rollupSummaryB.ChildObject__c = ''Opportunity'';
    rollupSummaryB.RelationShipField__c = ''AccountId'';
    rollupSummaryB.FieldToAggregate__c = ''Amount'';
    rollupSummaryB.AggregateOperation__c = ''Sum'';
    rollupSummaryB.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummaryB.CalculationMode__c = ''Realtime'';
    rollupSummaryB.CalculationSharingMode__c = ''User'';
    rollupSummaryB.RowLimit__c = 0;
    rollupSummaryB.AggregateAllRows__c = false;
    rollupSummaryB.Active__c = false;
    rollupSummaryB.TestCodeSeeAllData__c = false;

    List<Sobject> sol = new List<Sobject>{ rollupSummaryA, rollupSummaryB };
    List<RollupSummary> rollups = RollupSummary.toList(sol);

    return rollups;
  }

  private static List<CronTrigger> testCronTriggerData() {
    String jsonCronTrigger1 = ''{ "CronTrigger" : { "id": "08e7A00000SlgHHQAZ", "TimesTriggered" : 0, "State":"WAITING", "NextFireTime": "2030-10-30T15:27:02.000Z", "CronExpression": "0 3 2 * * ?", "CronJobDetail" : {"Id":"08a7A00000SlsJYQAZ","Name":"rollup_test10 (m007A0000000Ua6)"} } }'';
    String jsonCronTrigger2 = ''{ "CronTrigger" : { "id": "08e7A00000SlgBnQAJ", "TimesTriggered" : 0, "State":"WAITING", "NextFireTime": "2030-10-30T15:27:02.000Z", "CronExpression": "0 3 2 * * ?", "CronJobDetail" : {"Id":"08a7A00000SlsE4QAJ","Name":"rollup_test11 (m007A0000000UaB)"} } }'';

    CronTrigger ct1 = (CronTrigger) JSON.deserialize(
      jsonCronTrigger1,
      CronTrigger.class
    );
    CronTrigger ct2 = (CronTrigger) JSON.deserialize(
      jsonCronTrigger2,
      CronTrigger.class
    );

    return new List<CronTrigger>{ ct1, ct2 };
  }
}','3002871677.0','False','RollupSummaryViewControllerTest','6747','Active');
INSERT INTO "ApexClass" VALUES(49,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@isTest
private class fflib_SecurityUtilsTest {
  @TestSetup
  static void testSetup() {
    // #315 Create a Permission Set that grants "Read" access to Account, Contact and Lead. We will use this in
    // Spring ''21 orgs that lack the "Read Only" Profile. See:
    // https://help.salesforce.com/articleView?id=release-notes.rn_profiles_and_perms_read_only_new.htm&release=230&type=5).
    PermissionSet ps = new PermissionSet(
      Label = ''Read Only Permission Set'',
      Name = ''ReadOnlyPermissionSet''
    );
    insert ps;

    // Grant Read access to the SObjects we use for CRUD tests
    List<ObjectPermissions> objectPerms = new List<ObjectPermissions>();
    objectPerms.add(
      createObjectPermissions(ps.Id, ''Account'', false, true, false, false)
    );
    objectPerms.add(
      createObjectPermissions(ps.Id, ''Contact'', false, true, false, false)
    );
    objectPerms.add(
      createObjectPermissions(ps.Id, ''Lead'', false, true, false, false)
    );
    insert objectPerms;

    // Grant Read/Edit access to the SObject fields we use for FLS tests
    List<FieldPermissions> fieldPerms = new List<FieldPermissions>();
    fieldPerms.add(
      createFieldPermissions(ps.Id, ''Contact'', ''Birthdate'', true, false)
    );
    fieldPerms.add(
      createFieldPermissions(ps.Id, ''Contact'', ''Email'', true, false)
    );
    insert fieldPerms;
  }

  static Profile getProfile(String profileName) {
    return [SELECT Id, Name FROM Profile WHERE Name = :profileName];
  }

  static ObjectPermissions createObjectPermissions(
    Id permSetId,
    String objectType,
    Boolean canCreate,
    Boolean canRead,
    Boolean canUpdate,
    Boolean canDelete
  ) {
    return new ObjectPermissions(
      ParentId = permSetId,
      SobjectType = objectType,
      PermissionsCreate = canCreate,
      PermissionsRead = canRead,
      PermissionsEdit = canUpdate,
      PermissionsDelete = canDelete
    );
  }

  static FieldPermissions createFieldPermissions(
    Id permSetId,
    String objectType,
    String fieldName,
    Boolean canRead,
    Boolean canEdit
  ) {
    return new FieldPermissions(
      ParentId = permSetId,
      SobjectType = objectType,
      Field = objectType + ''.'' + fieldName,
      PermissionsRead = canRead,
      PermissionsEdit = canEdit
    );
  }

  static User setupTestUser(String profileName) {
    Profile p;
    Boolean usedMinimumAccessProfile = false;
    if (profileName == ''Read Only'') {
      try {
        p = getProfile(profileName);
      } catch (QueryException ex) {
        if (
          ex.getMessage().contains(''List has no rows for assignment to SObject'')
        ) {
          // #315 If the "Read Only" Profile is absent, then assume it''s a Spring ''21 org and see if there''s a
          // "Minimum Access - Salesforce" Profile we can use instead.
          p = getProfile(''Minimum Access - Salesforce'');
          usedMinimumAccessProfile = true;
        }
      }
    } else {
      p = getProfile(profileName);
    }

    //username global uniqueness is still enforced in tests
    //make sure we get something unique to avoid issues with parallel tests
    String uniqueness = DateTime.now() + '':'' + Math.random();
    try {
      throw new NullPointerException();
    } catch (Exception e) {
      uniqueness += e.getStackTraceString(); //includes the top level test method name without having to pass it
    }
    User usr = new User(
      username = UserInfo.getUserId() +
        ''.'' +
        uniqueness.HashCode() +
        ''@'' +
        UserInfo.getOrganizationId() +
        ''.sfdcOrg'',
      alias = ''testExec'',
      email = ''apextests@example.com'',
      emailencodingkey = ''UTF-8'',
      lastname = ''Testing'',
      languagelocalekey = ''en_US'',
      localesidkey = ''en_US'',
      profileid = p.Id,
      timezonesidkey = ''America/Los_Angeles''
    );
    insert usr;

    if (usedMinimumAccessProfile) {
      // #315 We need to assign the Perm Set to grant Account "Read" access
      PermissionSet accountReadPS = [
        SELECT Id
        FROM PermissionSet
        WHERE Name = ''ReadOnlyPermissionSet''
      ];
      PermissionSetAssignment psa = new PermissionSetAssignment(
        AssigneeId = usr.Id,
        PermissionSetId = accountReadPS.Id
      );
      insert psa;
    }
    return usr;
  }

  @isTest
  static void readonly_field_access() {
    User testUser = setupTestUser(''Read Only'');
    System.runAs(testUser) {
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkFieldIsInsertable(
            Account.SObjectType,
            ''naMe''
          );
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to insert Account.Name''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.FlsException,
          ''Expected an FlsException, got '' + ex.getTypeName()
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkFieldIsReadable(
            Contact.SObjectType,
            ''LastNAME''
          );
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertEquals(
          null,
          ex,
          ''Read only profile should be able to read Contact.LastName''
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkFieldIsUpdateable(
            Lead.SObjectType,
            ''cOMPANY''
          );
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to update Lead.Company''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.FlsException,
          ''Expected an FlsException, got '' + ex.getTypeName()
        );
      }

      fflib_SecurityUtils.BYPASS_INTERNAL_FLS_AND_CRUD = true;
      {
        //no exceptions, despite no rights
        fflib_SecurityUtils.checkFieldIsInsertable(Account.SObjectType, ''naMe'');
        fflib_SecurityUtils.checkFieldIsReadable(
          Contact.SObjectType,
          ''LastNAME''
        );
        fflib_SecurityUtils.checkFieldIsUpdateable(Lead.SObjectType, ''cOMPANY'');
      }
    }
  }

  @isTest
  static void readonly_object_access() {
    User testUser = setupTestUser(''Read Only'');
    System.runAs(testUser) {
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkObjectIsInsertable(Account.SObjectType);
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to insert Account''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.CrudException,
          ''Expected an CrudException, got '' + ex.getTypeName()
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkObjectIsReadable(Contact.SObjectType);
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertEquals(
          null,
          ex,
          ''Read only profile should be able to read Contact''
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkObjectIsUpdateable(Lead.SObjectType);
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to update Lead''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.CrudException,
          ''Expected an CrudException, got '' + ex.getTypeName()
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkObjectIsDeletable(Opportunity.SObjectType);
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to delete Opportunity''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.CrudException,
          ''Expected an CrudException, got '' + ex.getTypeName()
        );
      }

      fflib_SecurityUtils.BYPASS_INTERNAL_FLS_AND_CRUD = true;
      {
        //no exceptions, despite no rights
        fflib_SecurityUtils.checkObjectIsInsertable(Account.SObjectType);
        fflib_SecurityUtils.checkObjectIsReadable(Contact.SObjectType);
        fflib_SecurityUtils.checkObjectIsUpdateable(Lead.SObjectType);
        fflib_SecurityUtils.checkObjectIsDeletable(Opportunity.SObjectType);
      }
    }
  }

  @isTest
  static void readonly_objectAndField_access() {
    User testUser = setupTestUser(''Read Only'');
    System.runAs(testUser) {
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkInsert(
            Account.SObjectType,
            new List<String>{ ''Name'', ''ParentId'', ''ownerId'' }
          );
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to insert Account''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.CrudException,
          ''Expected an CrudException, got '' + ex.getTypeName()
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkRead(
            Contact.SObjectType,
            new List<String>{ ''LastName'', ''eMaiL'', ''BirthDATE'' }
          );
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertEquals(
          null,
          ex,
          ''Read only profile should be able to read Contact''
        );
      }
      {
        fflib_SecurityUtils.SecurityException ex;
        try {
          fflib_SecurityUtils.checkUpdate(
            Lead.SObjectType,
            new List<String>{ ''LastName'', ''FirstNAMe'', ''cOMPANY'' }
          );
        } catch (fflib_SecurityUtils.SecurityException e) {
          ex = e;
        }
        System.assertNotEquals(
          null,
          ex,
          ''Read only profile should not be able to update Lead''
        );
        System.assert(
          ex instanceof fflib_SecurityUtils.CrudException,
          ''Expected an CrudException, got '' + ex.getTypeName()
        );
      }

      fflib_SecurityUtils.BYPASS_INTERNAL_FLS_AND_CRUD = true;
      {
        //no exceptions, despite no rights
        fflib_SecurityUtils.checkInsert(
          Account.SObjectType,
          new List<String>{ ''Name'', ''Type'', ''ownerId'' }
        );
        fflib_SecurityUtils.checkRead(
          Contact.SObjectType,
          new List<String>{ ''LastName'', ''accountId'', ''ownerId'' }
        );
        fflib_SecurityUtils.checkUpdate(
          Lead.SObjectType,
          new List<String>{ ''LastName'', ''FirstNAMe'', ''cOMPANY'' }
        );
      }
    }
  }

  @isTest
  static void sysadmin_objectAndField_access() {
    User testUser = setupTestUser(''System Administrator'');
    System.runAs(testUser) {
      fflib_SecurityUtils.checkInsert(
        Account.SObjectType,
        new List<Schema.SObjectField>{
          Account.SObjectType.fields.Name,
          Account.SObjectType.fields.ParentId,
          Account.SObjectType.fields.ownerId
        }
      );
      fflib_SecurityUtils.checkRead(
        Contact.SObjectType,
        new List<Schema.SObjectField>{
          Contact.SObjectType.fields.LastName,
          Contact.SObjectType.fields.accountId,
          Contact.SObjectType.fields.ownerId
        }
      );
      fflib_SecurityUtils.checkUpdate(
        Lead.SObjectType,
        new List<Schema.SObjectField>{
          Lead.SObjectType.fields.LastName,
          Lead.SObjectType.fields.FirstNAMe,
          Lead.SObjectType.fields.cOMPANY
        }
      );
    }
  }
}','2199416890.0','True','fflib_SecurityUtilsTest','11263','Active');
INSERT INTO "ApexClass" VALUES(50,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public class TestContext {
  private TestContext() {
  }

  public static Boolean OpportunityTestTriggerEnabled = true;

  public static Boolean AccountTestTriggerEnabled = true;

  public static Boolean DeleteParentRecord = false;

  /**
   * Tests are only executed when the test trigger is present (not packaged)
   **/
  public static Boolean isSupported() {
    return (new ApexTriggersSelector()
      .selectByName(new Set<String>{ ''UnpackagedRollupServiceTestTrigger'' })
      .size() > 0);
  }
}','1588782086.0','True','TestContext','411','Active');
INSERT INTO "ApexClass" VALUES(51,'57.0','/*
Copyright (c) tgerm.com
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/**
	This test case uses standard objects Opportunity and Account for the purpose of testing. This is done to avoid
	any dependency on custom objects and keep the code base simple and easy to deploy in new orgs.
	
*/
@isTest
private class TestLREngine {
  // common master records for the test case
  static Account acc1, acc2, acc3, acc4;
  // common bunch of detail records for the test case
  static Opportunity[] detailRecords;
  static Opportunity[] detailRecords2;
  static Opportunity[] detailRecordsAcc1;
  static Opportunity[] detailRecordsAcc3;
  // dynamic reference to this field to avoid it being included in the package
  static Schema.SObjectField ACCOUNT_SLA_EXPIRATION_DATE;
  static Schema.SObjectField ACCOUNT_NUMBER_OF_EMPLOYEES;
  static Schema.SObjectField ANNUALIZED_RECCURING_REVENUE;
  static {
    // dynamically resolve these fields, if they are not present when the test runs, the test will return as passed to avoid failures in subscriber org when packaged
    Map<String, Schema.SObjectField> accountFields = Schema.SObjectType.Account.fields.getMap();
    ACCOUNT_SLA_EXPIRATION_DATE = accountFields.get(''SLAExpirationDate__c'');
    ACCOUNT_NUMBER_OF_EMPLOYEES = accountFields.get(''NumberOfEmployees'');
    Map<String, Schema.SObjectField> opportunityFields = Schema.SObjectType.Opportunity.fields.getMap();
    ANNUALIZED_RECCURING_REVENUE = opportunityFields.get(
      ''Annualized_Recurring_Revenue__c''
    );
  }

  /*
		 added to support multi-currency detection
		 */

  private static String CURRENCYISOCODENAME = ''CurrencyIsoCode'';
  //http://advancedapex.com/2013/07/07/optional-features/
  private static Boolean m_IsMultiCurrency = null;
  public static Boolean IsMultiCurrencyOrg() {
    if (m_IsMultiCurrency != null)
      return m_IsMultiCurrency;
    m_IsMultiCurrency = UserInfo.isMultiCurrencyOrganization();
    return m_IsMultiCurrency;
  }

  private static Boolean m_HasMultiCurrency = null;
  public static Boolean hasMultiCurrency() {
    if (m_HasMultiCurrency != null)
      return m_HasMultiCurrency;
    m_HasMultiCurrency = (Database.countQuery(
      ''select count() from CurrencyType WHERE IsActive = true AND IsCorporate = false AND ConversionRate != 1''
    ) > 0);
    return m_HasMultiCurrency;
  }

  /*
		 creates the common seed data using Opportunity and Account objects. 
		 */
  static void prepareData() {
    acc1 = new Account(Name = ''Acc1'');
    acc2 = new Account(Name = ''Acc2'');
    insert new List<Account>{ acc1, acc2 };

    Opportunity o1Acc1 = new Opportunity(
      Name = ''o1Acc1'',
      AccountId = acc1.Id,
      Amount = 100.00,
      CloseDate = System.today(),
      StageName = ''test''
    );
    Opportunity o2Acc1 = new Opportunity(
      Name = ''o2Acc1'',
      AccountId = acc1.Id,
      Amount = 300.00,
      CloseDate = System.today().addMonths(1),
      StageName = ''test''
    );

    Opportunity o3Acc1 = new Opportunity(
      Name = ''o3Acc1'',
      AccountId = acc1.Id,
      Amount = 50.00,
      CloseDate = System.today().addMonths(-1),
      StageName = ''test''
    );

    Opportunity o1Acc2 = new Opportunity(
      Name = ''o1Acc2'',
      AccountId = acc2.Id,
      Amount = 200.00,
      CloseDate = System.today().addMonths(2),
      StageName = ''Won''
    );

    Opportunity o2Acc2 = new Opportunity(
      Name = ''o2Acc2'',
      AccountId = acc2.Id,
      Amount = 400.00,
      CloseDate = System.today().addMonths(3),
      StageName = ''Lost''
    );

    Opportunity o3Acc2 = new Opportunity(
      Name = ''o3Acc2'',
      AccountId = acc2.Id,
      Amount = 300.00,
      CloseDate = System.today().addMonths(4),
      StageName = ''Won''
    );
    detailRecords = new List<Opportunity>{
      o1Acc1,
      o2Acc1,
      o3Acc1,
      o1Acc2,
      o2Acc2,
      o3Acc2
    };
    if (ANNUALIZED_RECCURING_REVENUE != null)
      for (Opportunity detailRecord : detailRecords)
        detailRecord.put(ANNUALIZED_RECCURING_REVENUE, 1000);
    detailRecordsAcc1 = new List<Opportunity>{ o1Acc1, o2Acc1, o3Acc1 };
    insert detailRecords;
  }

  /*
         creates the common seed data using Opportunity and Account objects. 
         */
  static void prepareData2() {
    acc3 = new Account(Name = ''Acc3'');
    acc4 = new Account(Name = ''Acc4'');
    insert new List<Account>{ acc3, acc4 };

    Date today = System.today();
    Opportunity o1Acc3 = new Opportunity(
      Name = ''o1Acc3'',
      AccountId = acc3.Id,
      Amount = 100.00,
      CloseDate = today,
      Type = ''New Customer'',
      StageName = ''red''
    );
    Opportunity o2Acc3 = new Opportunity(
      Name = ''o2Acc3'',
      AccountId = acc3.Id,
      Amount = 100.00,
      CloseDate = today,
      Type = ''New Customer'',
      StageName = ''yellow''
    );

    Opportunity o3Acc3 = new Opportunity(
      Name = ''o3Acc3'',
      AccountId = acc3.Id,
      Amount = null,
      CloseDate = today,
      Type = ''New Customer'',
      StageName = ''blue''
    );

    Opportunity o1Acc4 = new Opportunity(
      Name = ''o1Acc4'',
      AccountId = acc4.Id,
      Amount = 100.00,
      CloseDate = today,
      Type = ''New Customer'',
      StageName = ''orange''
    );

    Opportunity o2Acc4 = new Opportunity(
      Name = ''o2Acc4'',
      AccountId = acc4.Id,
      Amount = 100.00,
      CloseDate = today,
      Type = ''New Customer'',
      StageName = ''green''
    );

    Opportunity o3Acc4 = new Opportunity(
      Name = ''o3Acc4'',
      AccountId = acc4.Id,
      Amount = 100.00,
      CloseDate = today,
      Type = ''New Customer'',
      StageName = ''purple''
    );
    detailRecords2 = new List<Opportunity>{
      o1Acc3,
      o2Acc3,
      o3Acc3,
      o1Acc4,
      o2Acc4,
      o3Acc4
    };
    if (ANNUALIZED_RECCURING_REVENUE != null)
      for (Opportunity detailRecord : detailRecords2)
        detailRecord.put(ANNUALIZED_RECCURING_REVENUE, 1000);
    detailRecordsAcc3 = new List<Opportunity>{ o1Acc3, o2Acc3, o3Acc3 };
    insert detailRecords2;
  }

  /*
		Tests sum and max operations on currency and date fields
	*/
  static testMethod void testSumAndMaxOperations() {
    // Required custom field/s present?
    if (ACCOUNT_SLA_EXPIRATION_DATE == null)
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );

    //Select o.TotalOpportunityQuantity, o.ExpectedRevenue, o.CloseDate, o.Account.rollups__SLAExpirationDate__c,
    // o.Account.rollups__NumberofLocations__c, o.AccountId From Opportunity o
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Sum
      )
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        ACCOUNT_SLA_EXPIRATION_DATE.getDescribe(),
        Schema.SObjectType.Opportunity.fields.CloseDate,
        LREngine.RollupOperation.Max
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    // 2 masters should be back
    System.assertEquals(2, masters.size());

    System.debug(masters + '' '' + acc1 + '' '' + acc2);
    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }
    System.assertEquals(450.00, reloadedAcc1.AnnualRevenue);
    System.assertEquals(900.00, reloadedAcc2.AnnualRevenue);

    System.assertEquals(
      System.today().addMonths(1),
      reloadedAcc1.get(ACCOUNT_SLA_EXPIRATION_DATE)
    );
    System.assertEquals(
      System.today().addMonths(4),
      reloadedAcc2.get(ACCOUNT_SLA_EXPIRATION_DATE)
    );
  }

  /*
		Tests sum and max operations on currency and date fields
	*/
  static testMethod void testAvgAndCountOperations() {
    // Required custom field/s present?
    if (ACCOUNT_NUMBER_OF_EMPLOYEES == null)
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );

    //Select o.TotalOpportunityQuantity, o.ExpectedRevenue, o.CloseDate, o.Account.rollups__SLAExpirationDate__c,
    // o.Account.rollups__NumberofLocations__c, o.AccountId From Opportunity o
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Avg
      )
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        ACCOUNT_NUMBER_OF_EMPLOYEES.getDescribe(),
        Schema.SObjectType.Opportunity.fields.CloseDate,
        LREngine.RollupOperation.Count
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    // 2 masters should be back
    System.assertEquals(2, masters.size());

    System.debug(masters + '' '' + acc1 + '' '' + acc2);
    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }
    // avg would be (50 + 100 + 300) / 3 = 150
    System.assertEquals(150.00, reloadedAcc1.AnnualRevenue);
    System.assertEquals(300.00, reloadedAcc2.AnnualRevenue);

    System.assertEquals(3, reloadedAcc1.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
    System.assertEquals(3, reloadedAcc2.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
  }

  /*
        Tests sum and max operations on currency and date fields
    */
  static testMethod void testAvgAndCountOperationsSameAggregateField() {
    // Required custom field/s present?
    if (ACCOUNT_NUMBER_OF_EMPLOYEES == null)
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );

    //Select o.TotalOpportunityQuantity, o.ExpectedRevenue, o.CloseDate, o.Account.rollups__SLAExpirationDate__c,
    // o.Account.rollups__NumberofLocations__c, o.AccountId From Opportunity o
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Avg
      )
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        ACCOUNT_NUMBER_OF_EMPLOYEES.getDescribe(),
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Count
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    // 2 masters should be back
    System.assertEquals(2, masters.size());

    System.debug(masters + '' '' + acc1 + '' '' + acc2);
    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }
    // avg would be (50 + 100 + 300) / 3 = 150
    System.assertEquals(150.00, reloadedAcc1.AnnualRevenue);
    System.assertEquals(300.00, reloadedAcc2.AnnualRevenue);

    System.assertEquals(3, reloadedAcc1.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
    System.assertEquals(3, reloadedAcc2.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
  }

  /*
        Tests count distinct
    */
  static testMethod void testCountDistinctOperations() {
    // Required custom field/s present?
    if (ACCOUNT_NUMBER_OF_EMPLOYEES == null)
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Count_Distinct
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    // 2 masters should be back
    System.assertEquals(2, masters.size());

    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }

    System.assertEquals(1, reloadedAcc1.AnnualRevenue); // Only one set of distinct StageName''s on Account 1
    System.assertEquals(2, reloadedAcc2.AnnualRevenue); // Two sets of distinct StageName''s on Account 2
  }

  /*
		Tests sum and max operations on currency and date fields
		Here we will pass our custom criteria to filter certain records in detail, just like master detail rollup fields
	*/
  static testMethod void testAvgAndCountOperationsWithFilter() {
    // Required custom field/s present?
    if (ACCOUNT_NUMBER_OF_EMPLOYEES == null)
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      ''Amount > 200'' // filter out any opps with amount less than 200
    );

    //Select o.TotalOpportunityQuantity, o.ExpectedRevenue, o.CloseDate, o.Account.rollups__SLAExpirationDate__c,
    // o.Account.rollups__NumberofLocations__c, o.AccountId From Opportunity o
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Avg
      )
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        ACCOUNT_NUMBER_OF_EMPLOYEES.getDescribe(),
        Schema.SObjectType.Opportunity.fields.CloseDate,
        LREngine.RollupOperation.Count
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    // 2 masters should be back
    System.assertEquals(2, masters.size());

    System.debug(masters + '' '' + acc1 + '' '' + acc2);
    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }
    // avg would be 300 as other two records of amount 50 and 100 should be skipped
    System.assertEquals(300, reloadedAcc1.AnnualRevenue);
    System.assertEquals(350.00, reloadedAcc2.AnnualRevenue);

    System.assertEquals(1, reloadedAcc1.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
    System.assertEquals(2, reloadedAcc2.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
  }

  /**
   * Test fix where rollup field on master records where not
   * cleared or zerod when all children deleted
   **/
  static testMethod void testDeletingChildRecords() {
    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      ''Amount > 200''
    ); // filter out any opps with amount less than 200
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Avg
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    Map<Id, Sobject> mastersById = new Map<Id, Sobject>(masters);
    System.assertEquals(2, masters.size());
    System.assertEquals(
      300,
      ((Account) mastersById.get(acc1.id)).AnnualRevenue
    );
    System.assertEquals(
      350.00,
      ((Account) mastersById.get(acc2.id)).AnnualRevenue
    );

    // Delete all children
    delete [SELECT Id FROM Opportunity];

    // Recacluate rollups again
    masters = LREngine.rollUp(ctx, detailRecords);
    mastersById = new Map<Id, Sobject>(masters);
    System.assertEquals(0, ((Account) mastersById.get(acc1.id)).AnnualRevenue);
    System.assertEquals(0, ((Account) mastersById.get(acc2.id)).AnnualRevenue);
  }

  /**
   * Test enhancement where AllRows is used, which includes deleted rows
   **/
  static testMethod void testDeletingChildRecordsWithAllRowsSet() {
    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      ''Amount > 200'', // filter out any opps with amount less than 200
      null,
      null,
      true
    ); // Include child rows including deleted
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Avg
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    Map<Id, Sobject> mastersById = new Map<Id, Sobject>(masters);
    System.assertEquals(2, masters.size());
    System.assertEquals(
      300,
      ((Account) mastersById.get(acc1.id)).AnnualRevenue
    );
    System.assertEquals(
      350.00,
      ((Account) mastersById.get(acc2.id)).AnnualRevenue
    );

    // Delete all children
    delete [SELECT Id FROM Opportunity];

    // Recacluate rollups again
    masters = LREngine.rollUp(ctx, detailRecords);
    mastersById = new Map<Id, Sobject>(masters);
    System.assertEquals(
      300,
      ((Account) mastersById.get(acc1.id)).AnnualRevenue
    );
    System.assertEquals(
      350.00,
      ((Account) mastersById.get(acc2.id)).AnnualRevenue
    );
  }

  /**
   * Test enhancement to ensure the SOQL Aggregate only applies to child records
   *  related to masters referenced in incoming child records
   **/
  static testMethod void testConstrainedAggregateQuery() {
    // Required custom field/s present?
    if (ACCOUNT_SLA_EXPIRATION_DATE == null)
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Sum
      )
    );
    ctx.add(
      new LREngine.RollupSummaryField(
        ACCOUNT_SLA_EXPIRATION_DATE.getDescribe(),
        Schema.SObjectType.Opportunity.fields.CloseDate,
        LREngine.RollupOperation.Max
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecordsAcc1);

    // Verify the results of the query
    System.assertEquals(1, masters.size());
    System.assertEquals(450.00, masters.get(0).get(''AnnualRevenue''));
  }

  /*
        Fixed crash when using field names longer then 25 chars.
        System.QueryException: alias is too long, maximum of 25 characters: Annualized_Recurring_Revenue__c
        To test this please create a custom Number field by api name "Annualized_Recurring_Revenue__c" in Opportunity
    */
  static testMethod void testLongDetailFields() {
    // Required custom field/s present?
    if (
      ANNUALIZED_RECCURING_REVENUE == null ||
      ACCOUNT_NUMBER_OF_EMPLOYEES == null
    )
      return;

    // create seed data
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      ''Amount > 200'' // filter out any opps with amount less than 200
    );

    ctx.add(
      new LREngine.RollupSummaryField(
        ACCOUNT_NUMBER_OF_EMPLOYEES.getDescribe(),
        ANNUALIZED_RECCURING_REVENUE.getDescribe(),
        LREngine.RollupOperation.Count
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);
    // 2 masters should be back
    System.assertEquals(2, masters.size());

    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }

    System.assertEquals(1, reloadedAcc1.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
    System.assertEquals(2, reloadedAcc2.get(ACCOUNT_NUMBER_OF_EMPLOYEES));
  }

  /*
	Test Multi-Currency installations
	*/
  static testMethod void testCurrencyConversionFields() {
    // is org multi-currency?
    // org has at least one non-corporate, not equivalent, currency installed.
    if (IsMultiCurrencyOrg() == false || hasMultiCurrency() == false)
      return;

    // create seed data
    prepareData();

    // change the currency of one of the master records to force currency conversion
    sObject ct = Database.query(
      ''select IsoCode, ConversionRate from CurrencyType where IsActive = true AND IsCorporate = false AND ConversionRate != 1 limit 1''
    );
    acc1.put(CURRENCYISOCODENAME, ct.get(''IsoCode''));
    update acc1;

    //change currency of one account
    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );

    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Amount,
        LREngine.RollupOperation.Sum
      )
    );

    Sobject[] masters = LREngine.rollUp(ctx, detailRecords);

    Decimal acct1Val = 0.0;
    Decimal acct2Val = 0.0;
    for (Sobject so : detailRecords) {
      if (so.get(''AccountId'') == acc1.Id)
        acct1Val += (Decimal) so.get(''Amount'');
      if (so.get(''AccountId'') == acc2.Id)
        acct2Val += (Decimal) so.get(''Amount'');
    }
    System.Debug(''Conversion Rate:'' + ct.get(''ConversionRate''));
    System.Debug(''Acct1 Val:'' + acct1Val);

    acct1Val = acct1Val * (Decimal) ct.get(''ConversionRate'');

    System.Debug(''Acct1 Conv Val:'' + acct1Val);

    Account reloadedAcc1, reloadedAcc2;
    for (Sobject so : masters) {
      if (so.Id == acc1.id)
        reloadedAcc1 = (Account) so;
      if (so.Id == acc2.id)
        reloadedAcc2 = (Account) so;
    }

    //Test amount values for conversion accuracy
    System.assertEquals(acct1Val, (Decimal) reloadedAcc1.get(''AnnualRevenue''));
    System.assertEquals(acct2Val, (Decimal) reloadedAcc2.get(''AnnualRevenue''));
  }

  static testMethod void testRollupSummaryFieldValidation() {
    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId
    );

    // Valid
    ctx.add(
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AnnualRevenue,
        Schema.SObjectType.Opportunity.fields.Id,
        LREngine.RollupOperation.Count
      )
    );

    try {
      // Not Valid
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Id,
          LREngine.RollupOperation.Sum
        )
      );
      System.assert(false, ''Expecting an exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''Only Date/DateTime/Time/Numeric fields are allowed for Sum, Max, Min and Avg'',
        e.getMessage()
      );
    }
  }

  static testMethod void testRollupContextsValidRollupFieldCombosOnly() {
    // Cannot mix (Sum, Max, Min, Avg, Count, Count_Distinct) with (Concatenate, Concatenate_Distinct, First, Last)
    try {
      LREngine.Context ctx = new LREngine.Context(
        Account.SobjectType,
        Opportunity.SobjectType,
        Schema.SObjectType.Opportunity.fields.AccountId
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.Description,
          Schema.SObjectType.Opportunity.fields.StageName,
          LREngine.RollupOperation.Concatenate
        )
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Amount,
          LREngine.RollupOperation.Sum
        )
      );
      System.assert(false, ''Expecting an exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''Cannot mix Sum, Max, Min, Avg, Count, Count_Distinct operations with Concatenate, Concatenate_Distinct, First, Last operations'',
        e.getMessage()
      );
    }
    try {
      LREngine.Context ctx = new LREngine.Context(
        Account.SobjectType,
        Opportunity.SobjectType,
        Schema.SObjectType.Opportunity.fields.AccountId
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Amount,
          LREngine.RollupOperation.Sum
        )
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.Description,
          Schema.SObjectType.Opportunity.fields.StageName,
          LREngine.RollupOperation.Concatenate
        )
      );
      System.assert(false, ''Expecting an exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''Cannot mix Sum, Max, Min, Avg, Count, Count_Distinct operations with Concatenate, Concatenate_Distinct, First, Last operations'',
        e.getMessage()
      );
    }
  }

  static testMethod void testRollupSummaryFieldValidationConcatenate() {
    // Master must be text type
    try {
      LREngine.Context ctx = new LREngine.Context(
        Account.SobjectType,
        Opportunity.SobjectType,
        Schema.SObjectType.Opportunity.fields.AccountId
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Id,
          LREngine.RollupOperation.Concatenate
        )
      );
      System.assert(false, ''Expecting an exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''Only Text/Text Area fields are allowed for Concatenate and Concatenate Distinct'',
        e.getMessage()
      );
    }
  }

  static testMethod void testRollupSummaryFieldValidationFirstAndLast() {
    // Master and detail field type must match
    try {
      LREngine.Context ctx = new LREngine.Context(
        Account.SobjectType,
        Opportunity.SobjectType,
        Schema.SObjectType.Opportunity.fields.AccountId
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Id,
          LREngine.RollupOperation.Last
        )
      );
      System.assert(false, ''Expecting an exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''Master and detail fields must be the same field type (or text/Id based) for First or Last operations'',
        e.getMessage()
      );
    }
    try {
      LREngine.Context ctx = new LREngine.Context(
        Account.SobjectType,
        Opportunity.SobjectType,
        Schema.SObjectType.Opportunity.fields.AccountId
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Id,
          LREngine.RollupOperation.First
        )
      );
      System.assert(false, ''Expecting an exception'');
    } catch (Exception e) {
      System.assertEquals(
        ''Master and detail fields must be the same field type (or text/Id based) for First or Last operations'',
        e.getMessage()
      );
    }
    // Master and detail field type match
    try {
      LREngine.Context ctx = new LREngine.Context(
        Account.SobjectType,
        Opportunity.SobjectType,
        Schema.SObjectType.Opportunity.fields.AccountId
      );
      ctx.add(
        new LREngine.RollupSummaryField(
          Schema.SObjectType.Account.fields.AnnualRevenue,
          Schema.SObjectType.Opportunity.fields.Amount,
          LREngine.RollupOperation.First
        )
      );
    } catch (Exception e) {
      System.assert(false, ''Not expecting an exception '' + e.getMessage());
    }
  }

  static testMethod void testRollupConcatenateTruncate() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.AccountNumber,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''01234567890123456789,''
      ),
      ''test01234567890123456789,test01234567...'',
      ''Lost01234567890123456789,Won012345678...''
    );
  }

  static testMethod void testRollupConcatenate() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''test,test,test'',
      ''Lost,Won,Won''
    );
  }

  static testMethod void testRollupConcatenateLimited() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '','',
        2
      ),
      ''test,test'',
      ''Lost,Won''
    );
  }

  static testMethod void testRollupConcatenateDeletedChildRows() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''test,test,test'',
      ''Lost,Won,Won'',
      true
    );
  }

  static testMethod void testRollupConcatenateBR() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''BR()''
      ),
      ''test\ntest\ntest'',
      ''Lost\nWon\nWon''
    );
  }

  static testMethod void testRollupConcatenateMultipleBR() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''BR()BR()BR()''
      ),
      ''test\n\n\ntest\n\n\ntest'',
      ''Lost\n\n\nWon\n\n\nWon''
    );
  }

  static testMethod void testRollupConcatenateCommaBR() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',BR()''
      ),
      ''test,\ntest,\ntest'',
      ''Lost,\nWon,\nWon''
    );
  }

  static testMethod void testRollupConcatenateSP() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''SP()''
      ),
      ''test test test'',
      ''Lost Won Won''
    );
  }

  static testMethod void testRollupConcatenateMultipleSP() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''SP()SP()SP()''
      ),
      ''test   test   test'',
      ''Lost   Won   Won''
    );
  }

  static testMethod void testRollupConcatenateCommaSP() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',SP()''
      ),
      ''test, test, test'',
      ''Lost, Won, Won''
    );
  }

  static testMethod void testRollupConcatenateTB() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''TB()''
      ),
      ''test\ttest\ttest'',
      ''Lost\tWon\tWon''
    );
  }

  static testMethod void testRollupConcatenateMultipleTB() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''TB()TB()TB()''
      ),
      ''test\t\t\ttest\t\t\ttest'',
      ''Lost\t\t\tWon\t\t\tWon''
    );
  }

  static testMethod void testRollupConcatenateCommaTB() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',TB()''
      ),
      ''test,\ttest,\ttest'',
      ''Lost,\tWon,\tWon''
    );
  }

  static testMethod void testRollupConcatenateAllTokens() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        ''TB()BR()SP()''
      ),
      ''test\t\n test\t\n test'',
      ''Lost\t\n Won\t\n Won''
    );
  }

  static testMethod void testRollupConcatenateCommaAllTokens() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',TB()BR()SP()''
      ),
      ''test,\t\n test,\t\n test'',
      ''Lost,\t\n Won,\t\n Won''
    );
  }

  static testMethod void testRollupConcatenateOrderBy() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.Amount.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''test,test,test'',
      ''Won,Won,Lost''
    );
  }

  static testMethod void testRollupConcatenateOrderByMultipleAscendingNullsFirst() {
    testRollup2(
      ''CloseDate, Type, Amount, Name'',
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''blue,red,yellow'',
      ''orange,green,purple''
    );
  }

  static testMethod void testRollupConcatenateOrderByMultipleAscendingNullsLast() {
    testRollup2(
      ''CloseDate NULLS LAST, Type NULLS LAST, Amount NULLS LAST, Name NULLS LAST'',
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''red,yellow,blue'',
      ''orange,green,purple''
    );
  }

  static testMethod void testRollupConcatenateOrderByMultipleDescendingNullsFirst() {
    testRollup2(
      ''CloseDate DESC, Type DESC, Amount DESC, Name DESC'',
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''blue,yellow,red'',
      ''purple,green,orange''
    );
  }

  static testMethod void testRollupConcatenateOrderByMultipleDescendingNullsLast() {
    testRollup2(
      ''CloseDate DESC NULLS LAST, Type DESC NULLS LAST, Amount DESC NULLS LAST, Name DESC NULLS LAST'',
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        '',''
      ),
      ''yellow,red,blue'',
      ''purple,green,orange''
    );
  }

  static testMethod void testRollupConcatenateNoDelimiter() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate,
        null
      ),
      ''testtesttest'',
      ''LostWonWon''
    );
  }

  static testMethod void testRollupConcatenateDistinct() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.StageName.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate_Distinct,
        '',''
      ),
      ''test'',
      ''Lost,Won''
    );
  }

  static testMethod void testRollupConcatenateDistinctWithOrderBy() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.Amount.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate_Distinct,
        '',''
      ),
      ''test'',
      ''Won,Lost''
    );
  }

  static testMethod void testRollupConcatenateDistinctWithMultipleFieldsOrderBy() {
    testRollup(
      ''Amount DESC, CloseDate DESC, Type DESC, Name DESC'',
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Concatenate_Distinct,
        '',''
      ),
      ''test'',
      ''Lost,Won''
    );
  }

  static testMethod void testRollupFirst() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.Amount.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.First,
        null
      ),
      ''test'',
      ''Won''
    );
  }

  static testMethod void testRollupLast() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.Amount.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Last,
        null
      ),
      ''test'',
      ''Lost''
    );
  }

  static testMethod void testRollupLastLimit() {
    testRollup(
      Schema.SObjectType.Opportunity.fields.Amount.getName(),
      new LREngine.RollupSummaryField(
        Schema.SObjectType.Account.fields.Description,
        Schema.SObjectType.Opportunity.fields.StageName,
        LREngine.RollupOperation.Last,
        null,
        2
      ),
      ''test'',
      ''Won''
    );
  }

  static testMethod void testMultipleRollupsSameResultField() {
    prepareData();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      null,
      Schema.SObjectType.Opportunity.fields.Amount.getName()
    );

    LREngine.RollupSummaryField rollupField1 = new LREngine.RollupSummaryField(
      Schema.SObjectType.Account.fields.Description,
      Schema.SObjectType.Opportunity.fields.StageName,
      LREngine.RollupOperation.Last,
      null
    );
    ctx.add(rollupField1);
    LREngine.RollupSummaryField rollupField2 = new LREngine.RollupSummaryField(
      Schema.SObjectType.Account.fields.Sic,
      Schema.SObjectType.Opportunity.fields.StageName,
      LREngine.RollupOperation.First,
      null
    );
    ctx.add(rollupField2);

    SObject[] masters = LREngine.rollUp(ctx, detailRecords);

    Map<Id, SObject> mastersById = new Map<Id, SObject>(masters);
    Account reloadedAcc1 = (Account) mastersById.get(acc1.Id);
    Account reloadedAcc2 = (Account) mastersById.get(acc2.Id);
    System.assertEquals(2, masters.size());
    System.assertEquals(
      ''test'',
      reloadedAcc1.get(rollupField1.master.getName())
    );
    System.assertEquals(
      ''test'',
      reloadedAcc1.get(rollupField2.master.getName())
    );
    System.assertEquals(
      ''Lost'',
      reloadedAcc2.get(rollupField1.master.getName())
    );
    System.assertEquals(''Won'', reloadedAcc2.get(rollupField2.master.getName()));
  }

  static testMethod void testIsAggregateOrQueryBasedRollup() {
    // map of operations with flag indicating if it is an aggregate operation
    Map<LREngine.RollupOperation, Boolean> operations = new Map<LREngine.RollupOperation, Boolean>{
      LREngine.RollupOperation.Sum => true,
      LREngine.RollupOperation.Min => true,
      LREngine.RollupOperation.Max => true,
      LREngine.RollupOperation.Avg => true,
      LREngine.RollupOperation.Count => true,
      LREngine.RollupOperation.Count_Distinct => true,
      LREngine.RollupOperation.Concatenate => false,
      LREngine.RollupOperation.Concatenate_Distinct => false,
      LREngine.RollupOperation.First => false,
      LREngine.RollupOperation.Last => false
    };
    for (LREngine.RollupOperation op : operations.keySet()) {
      Boolean isAggregate = operations.get(op);
      System.assertEquals(isAggregate, LREngine.isAggregateBasedRollup(op));
      System.assertEquals(!isAggregate, LREngine.isQueryBasedRollup(op));
    }
  }

  static private void testRollup(
    String detailOrderByClause,
    LREngine.RollupSummaryField rollupField,
    String expected1,
    String expected2
  ) {
    testRollup(detailOrderByClause, rollupField, expected1, expected2, false);
  }

  static private void testRollup(
    String detailOrderByClause,
    LREngine.RollupSummaryField rollupField,
    String expected1,
    String expected2,
    boolean allRows
  ) {
    prepareData();

    if (allRows)
      delete detailRecordsAcc1;

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      null, // detailWhereClause
      null,
      detailOrderByClause,
      allRows
    );

    ctx.add(rollupField);

    SObject[] masters = LREngine.rollUp(ctx, detailRecords);

    Map<Id, SObject> mastersById = new Map<Id, SObject>(masters);
    Account reloadedAcc1 = (Account) mastersById.get(acc1.Id);
    Account reloadedAcc2 = (Account) mastersById.get(acc2.Id);
    System.assertEquals(2, masters.size());
    System.assertEquals(
      expected1,
      reloadedAcc1.get(rollupField.master.getName())
    );
    System.assertEquals(
      expected2,
      reloadedAcc2.get(rollupField.master.getName())
    );
  }

  static private void testRollup2(
    String detailOrderByClause,
    LREngine.RollupSummaryField rollupField,
    String expected1,
    String expected2
  ) {
    prepareData2();

    LREngine.Context ctx = new LREngine.Context(
      Account.SobjectType,
      Opportunity.SobjectType,
      Schema.SObjectType.Opportunity.fields.AccountId,
      null, // detailWhereClause
      detailOrderByClause
    );

    ctx.add(rollupField);

    SObject[] masters = LREngine.rollUp(ctx, detailRecords2);

    Map<Id, SObject> mastersById = new Map<Id, SObject>(masters);
    Account reloadedAcc3 = (Account) mastersById.get(acc3.Id);
    Account reloadedAcc4 = (Account) mastersById.get(acc4.Id);
    System.assertEquals(2, masters.size());
    System.assertEquals(
      expected1,
      reloadedAcc3.get(rollupField.master.getName())
    );
    System.assertEquals(
      expected2,
      reloadedAcc4.get(rollupField.master.getName())
    );
  }
}','3057062891.0','True','TestLREngine','39488','Active');
INSERT INTO "ApexClass" VALUES(52,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

public class Utilities {
  /**
   * Get the namespace of this package
   **/
  public static String namespace() {
    Schema.DescribeSObjectResult describe = LookupRollupSummary__c.sObjectType.getDescribe();
    String name = describe.getName();
    String localName = describe.getLocalName();
    String namespace = name.removeEnd(localName).removeEnd(''__'');
    return namespace;
  }

  /**
   * Get the component prefix based on the current namespace
   **/
  public static String componentPrefix() {
    String namespace = namespace();
    return String.isEmpty(namespace) ? '''' : (namespace + ''_'');
  }

  /**
   * Get the class prefix based on the current namespace
   **/
  public static String classPrefix() {
    String namespace = namespace();
    return String.isEmpty(namespace) ? '''' : (namespace + ''.'');
  }

  /**
   * Get the object prefix based on the current namespace
   **/
  public static String objectPrefix() {
    String namespace = namespace();
    return String.isEmpty(namespace) ? '''' : (namespace + ''__'');
  }

  /**
   * Parse a string that follows the SOQL Order By standard
   *
   * @param orderByClause - order by clause (not including ORDER BY keywords) following standard at https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select_orderby.htm
   *
   * @return list containing one LREngine.Ordering element for each field in the order by clause
   *
   * @throw  OrderByInvalidException when order by is not in proper format
   **/
  public static List<Utilities.Ordering> parseOrderByClause(
    String orderByClause
  ) {
    if (String.isBlank(orderByClause)) {
      return null;
    }

    List<Utilities.Ordering> orderByFields = new List<Utilities.Ordering>();
    List<String> orderByClauseFields = orderByClause.split('','');
    for (String field : orderByClauseFields) {
      orderByFields.add(parseOrderByField(field));
    }

    return orderByFields;
  }

  // Regular expression for Order By Clause
  // Case-Insensitive pattern
  // Group 1 - Field Name (required)
  // Group 2 - ASC/DESC (optional)
  // Group 3 - NULLS FIRST (optional)
  // Group 4 - NULLS (required if Group 3 != null)
  // Group 5 - FIRST (required if Group 3 != null)
  private static Pattern orderByPattern = Pattern.compile(
    ''^(?i)[\\s]*([\\w]+)[\\s]*(ASC|DESC)?[\\s]*((NULLS)[\\s]*(FIRST|LAST))?[\\s]*$''
  );
  private static Utilities.Ordering parseOrderByField(String orderByField) {
    Matcher matcher = orderByPattern.matcher(orderByField);
    if (!matcher.matches() || matcher.groupCount() != 5) {
      throw new Utilities.OrderByInvalidException(''Invalid order by clause.'');
    }

    // regex enforces that fieldname cannot be blank
    String fieldName = matcher.group(1);

    // regex enforces that ordering be null, ASC or DESC
    // == operator is case-insensitive
    String ordering = matcher.group(2);
    Utilities.SortOrder sortOrder = (ordering == null)
      ? null
      : (ordering == ''DESC''
          ? Utilities.SortOrder.DESCENDING
          : Utilities.SortOrder.ASCENDING);

    // regex enforces that firstLast be null, FIRST or LAST
    // == operator is case-insensitive
    String firstLast = matcher.group(5);
    Boolean nullsLast = (firstLast == null) ? null : (firstLast == ''LAST'');

    return new Utilities.Ordering(fieldName, sortOrder, nullsLast);
  }

  /**
        Sort Order
    */
  public enum SortOrder {
    ASCENDING,
    DESCENDING
  }

  /**
        Represents a single portion of the Order By clause for SOQL statement
    */
  public class Ordering {
    private SortOrder direction;
    private Boolean nullsLast;
    private String field;
    private Boolean directionSpecified; // if direction was specified during construction
    private Boolean nullsLastSpecified; // if nullsLast was specified during construction

    /**
     * Construct a new ordering instance
     **/
    public Ordering(String field) {
      this(field, null);
    }
    public Ordering(String field, SortOrder direction) {
      this(field, direction, null);
    }
    public Ordering(String field, SortOrder direction, Boolean nullsLast) {
      setField(field);
      this.directionSpecified = direction != null;
      this.nullsLastSpecified = nullsLast != null;
      this.direction = this.directionSpecified
        ? direction
        : SortOrder.ASCENDING; //SOQL docs ASC is default behavior
      this.nullsLast = this.nullsLastSpecified ? nullsLast : false; //SOQL docs state NULLS FIRST is default behavior
    }
    public String getField() {
      return field;
    }
    public void setField(String field) {
      if (String.isBlank(field)) {
        throw new Utilities.BadOrderingStateException(''field cannot be blank.'');
      }
      this.field = field;
    }
    public SortOrder getDirection() {
      return direction;
    }
    public Boolean getNullsLast() {
      return nullsLast;
    }
    public override String toString() {
      return field +
        '' '' +
        (direction == Utilities.SortOrder.ASCENDING ? ''ASC'' : ''DESC'') +
        '' '' +
        (nullsLast ? ''NULLS LAST'' : ''NULLS FIRST'');
    }
    public String toAsSpecifiedString() {
      // emit order by using describe info with the direction and nullsLast
      // that was provided during construction.  This allows to regurgitate
      // the proper SOQL order by using exactly what was passed in
      return field +
        (directionSpecified
          ? (direction == Utilities.SortOrder.ASCENDING ? '' ASC'' : '' DESC'')
          : '''') +
        (nullsLastSpecified
          ? (nullsLast ? '' NULLS LAST'' : '' NULLS FIRST'')
          : '''');
    }
  }

  /**
        Exception thrown if Order by clause is invalid
    */
  public class OrderByInvalidException extends Exception {
  }

  /**
        Exception thrown if Ordering is in bad state
    */
  public class BadOrderingStateException extends Exception {
  }
}','2785197940.0','True','Utilities','3915','Active');
INSERT INTO "ApexClass" VALUES(53,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Controller logic ensures there is a valid connection to the Metadata API (aka a Remote Site Setting exists for the appropite URL)
 **/
public with sharing class WelcomeController {
  public String Host { get; set; }

  public String MetadataAPIUrl { get; set; }

  public String RemoteSiteName {
    get {
      return Utilities.componentPrefix() + ''mdapi'';
    }
  }

  public String MetadataResponse { get; set; }

  public Boolean MetadataConnectionWarning { get; set; }

  public String MetadataApiException { get; set; }

  public PageReference checkMetadataAPIConnection() {
    // Get Host Domain
    Host = ApexPages.currentPage().getHeaders().get(''Host'');
    // Get Metadata API URL
    MetadataAPIUrl = URL.getOrgDomainUrl().toExternalForm();

    // Attempt to connect to the Metadata API
    MetadataConnectionWarning = false;
    if (!RollupService.checkMetadataAPIConnection()) {
      MetadataConnectionWarning = true;
      MetadataApiException = '''';
      if (RollupService.LastMetadataAPIConnectionException != null)
        MetadataApiException = RollupService.LastMetadataAPIConnectionException.getMessage();

      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Error,
          ''Unable to connect to the Salesforce Metadata API.''
        )
      );
      if (MetadataApiException != null)
        ApexPages.addMessage(
          new ApexPages.Message(ApexPages.Severity.Error, MetadataApiException)
        );
    }

    return null;
  }

  public PageReference displayMetadataResponse() {
    // Display the response from the client side Metadata API callout
    if (metadataResponse.length() == 0) {
      ApexPages.addMessage(
        new ApexPages.Message(
          ApexPages.Severity.Info,
          ''Remote Site Setting '' +
          RemoteSiteName +
          '' has been created.''
        )
      );
      MetadataConnectionWarning = false;
    } else {
      ApexPages.addMessage(
        new ApexPages.Message(ApexPages.Severity.Error, metadataResponse)
      );
      MetadataConnectionWarning = true;
    }
    return null;
  }
}','4204354048.0','True','WelcomeController','1788','Active');
INSERT INTO "ApexClass" VALUES(54,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class WelcomeControllerTest {
  @IsTest
  private static void testCheckMetadataAPIConnection() {
    // Metadata API web Service mock implementation for tests
    Test.setMock(WebServiceMock.class, new WebServiceMockImpl());

    WelcomeController controller = new WelcomeController();
    controller.checkMetadataAPIConnection();
    System.assertEquals(true, controller.MetadataConnectionWarning);
    controller.MetadataResponse = '''';
    controller.displayMetadataResponse();
    System.assertEquals(false, controller.MetadataConnectionWarning);
    controller.MetadataResponse = ''Some Error Creating Remote Site Setting'';
    controller.displayMetadataResponse();
    System.assertEquals(true, controller.MetadataConnectionWarning);
  }

  /**
   * Metadata API web service mock class for tests above
   **/
  private class WebServiceMockImpl implements WebServiceMock {
    public void doInvoke(
      Object stub,
      Object request,
      Map<String, Object> response,
      String endpoint,
      String soapAction,
      String requestName,
      String responseNS,
      String responseName,
      String responseType
    ) {
      throw new TestException();
    }
  }

  public class TestException extends Exception {
  }
}','3724398454.0','False','WelcomeControllerTest','1119','Active');
INSERT INTO "ApexClass" VALUES(55,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 *	Interface for the answering framework.
 *	This interface must be implemented inside the test class and implement the call back method answer.
 *	@group Core
 */
public interface fflib_Answer {
  /**
   *	Method to be implemented in the test class to implement the call back method.
   *	@param invocation The invocation on the mock.
   *	@throws The exception to be thrown.
   *	@return The value to be returned.
   */
  Object answer(fflib_InvocationOnMock invocation);
}','3658292644.0','True','fflib_Answer','86','Active');
INSERT INTO "ApexClass" VALUES(56,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @nodoc
 */
@isTest
private class fflib_AnswerTest {
  private static fflib_InvocationOnMock actualInvocation = null;

  @isTest
  static void thatAnswersWithException() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.ExceptionForAnswer());
    mocks.stopStubbing();

    // When
    try {
      mockList.get2(0, ''Hi hi Hello Hi hi'');
      System.assert(
        false,
        ''an exception is expected to be thrown on the answer execution''
      );
    } catch (fflib_ApexMocks.ApexMocksException ansExpt) {
      String expectedMessage = ''an error occurs on the execution of the answer'';
      // Then
      System.assertEquals(
        expectedMessage,
        ansExpt.getMessage(),
        ''the message from the answer is not as expected''
      );
    }
  }

  @isTest
  static void thatStoresMethodIntoInvocationOnMock() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.BasicAnswer());
    mocks.stopStubbing();

    // When
    mockList.get2(0, ''Hi hi Hello Hi hi'');

    // Then

    Object methodCalled = actualInvocation.getMethod();
    System.assert(
      methodCalled instanceof fflib_QualifiedMethod,
      ''the object returned is not a method as expected''
    );

    String expectedMethodSignature =
      fflib_MyList.getStubClassName() + ''.get2(Integer, String)'';
    System.assertEquals(
      expectedMethodSignature,
      ((fflib_QualifiedMethod) methodCalled).toString(),
      '' the method is no the one expected''
    );
  }

  @isTest
  static void thatAnswerOnlyForTheMethodStubbedWithAnswer() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(3)).thenReturn(''ted'');
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.BasicAnswer());
    mocks.stopStubbing();

    // When
    mockList.add(''one'');
    String noAnswered = mockList.get(3);
    mockList.get2(0, ''Hi hi Hello Hi hi'');

    // Then
    Object methodCalled = actualInvocation.getMethod();
    System.assert(
      methodCalled instanceof fflib_QualifiedMethod,
      ''the object returned is not a method as expected''
    );

    String expectedMethodSignature =
      fflib_MyList.getStubClassName() + ''.get2(Integer, String)'';
    System.assertEquals(
      expectedMethodSignature,
      ((fflib_QualifiedMethod) methodCalled).toString(),
      '' the method is no the one expected''
    );

    System.assertEquals(
      ''ted'',
      noAnswered,
      ''the get method should have returned the stubbed string''
    );
  }

  @isTest
  static void thatMultipleAnswersAreHandled() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(3)).thenAnswer(new fflib_AnswerTest.FirstAnswer());
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.SecondAnswer());
    mocks.stopStubbing();

    // When
    mockList.add(''one'');
    String answer1 = mockList.get(3);
    String answer2 = mockList.get2(0, ''Hi hi Hello Hi hi'');

    System.assertEquals(
      ''this is the first answer'',
      answer1,
      ''the answer wasnt the one expected''
    );
    System.assertEquals(
      ''and this is the second one'',
      answer2,
      ''the answer wasnt the one expected''
    );
  }

  @isTest
  static void thatStoresMockInstanceIntoInvocationOnMock() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.BasicAnswer());
    mocks.stopStubbing();

    // When
    String mockCalled = mockList.get2(0, ''Hi hi Hello Hi hi'');

    // Then
    System.assert(
      actualInvocation.getMock() instanceof fflib_MyList.IList,
      ''the object returned is not a mock instance as expected''
    );
    System.assertEquals(
      mockList,
      actualInvocation.getMock(),
      ''the mock returned should be the mockList used in the stubbing''
    );
  }

  @isTest
  static void thatMethodsParametersAreAccessible() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.ProcessArgumentAnswer());
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get2(0, ''Hi hi Hello Hi hi'');

    // Then
    System.assertEquals(
      ''Bye hi Hello Bye hi'',
      actualValue,
      ''the answer is not correct''
    );
  }

  @isTest
  static void thatAnswerOnlyForTheStubbedParameter() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.ProcessArgumentAnswer());
    mocks.stopStubbing();

    // When
    String actualValue1 = mockList.get2(0, ''some string for my method'');
    String actualValue2 = mockList.get2(0, ''Hi hi Hello Hi hi'');
    String actualValue3 = mockList.get2(
      0,
      ''another string for the same method''
    );

    // Then
    System.assertEquals(
      ''Bye hi Hello Bye hi'',
      actualValue2,
      ''the answer is not correct''
    );
    System.assertEquals(null, actualValue1, ''the answer is not correct'');
    System.assertEquals(null, actualValue3, ''the answer is not correct'');
  }

  @isTest
  static void thatMethodsParametersAreAccessibleWhenCalledWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(fflib_Match.anyInteger(), fflib_Match.anyString()))
      .thenAnswer(new fflib_AnswerTest.ProcessArgumentAnswer());
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get2(0, ''Hi hi Hello Hi hi'');

    // Then
    System.assertEquals(
      ''Bye hi Hello Bye hi'',
      actualValue,
      ''the answer is not correct''
    );
  }

  @isTest
  static void thatExceptionIsThrownWhenAccessOutOfIndexArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.ExceptionForArgumentsOutOfBound());
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get2(0, ''Hi hi Hello Hi hi'');
  }

  @isTest
  static void thatExceptionIsThrownWhenAccessNegativeIndexArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''Hi hi Hello Hi hi''))
      .thenAnswer(new fflib_AnswerTest.ExceptionForNegativeArgumentIndex());
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get2(0, ''Hi hi Hello Hi hi'');
  }

  @isTest
  static void thatArgumentListEmptyForMethodWithNoArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.isEmpty())
      .thenAnswer(
        new fflib_AnswerTest.ArgumentListEmptyForMethodWithNoArgument()
      );
    mocks.stopStubbing();

    // When
    Boolean actualValue = mockList.isEmpty();
  }

  @isTest
  static void thatAnswerToVoidMethod() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    ((fflib_MyList) mocks.doAnswer(
        new fflib_AnswerTest.BasicAnswer(),
        mockList
      ))
      .addMore(''Hi hi Hello Hi hi'');
    mocks.stopStubbing();

    // When
    mockList.addMore(''Hi hi Hello Hi hi'');

    // Then
    Object methodCalled = actualInvocation.getMethod();
    System.assert(
      methodCalled instanceof fflib_QualifiedMethod,
      ''the object returned is not a method as expected''
    );

    String expectedMethodSignature =
      fflib_MyList.getStubClassName() + ''.addMore(String)'';
    System.assertEquals(
      expectedMethodSignature,
      ((fflib_QualifiedMethod) methodCalled).toString(),
      ''Unexpected method name: '' + methodCalled
    );
  }

  @isTest
  static void thatAnswerToVoidAndNotVoidMethods() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    ((fflib_MyList) mocks.doAnswer(
        new fflib_AnswerTest.FirstAnswer(),
        mockList
      ))
      .get(3);
    ((fflib_MyList) mocks.doAnswer(
        new fflib_AnswerTest.BasicAnswer(),
        mockList
      ))
      .addMore(''Hi hi Hello Hi hi'');
    ((fflib_MyList) mocks.doAnswer(
        new fflib_AnswerTest.SecondAnswer(),
        mockList
      ))
      .get2(4, ''Hi hi Hello Hi hi'');
    mocks.stopStubbing();

    // When
    String answer1 = mockList.get(3);
    String answer2 = mockList.get2(4, ''Hi hi Hello Hi hi'');
    mockList.addMore(''Hi hi Hello Hi hi'');

    // Then
    Object methodCalled = actualInvocation.getMethod();
    System.assert(
      methodCalled instanceof fflib_QualifiedMethod,
      ''the object returned is not a method as expected''
    );

    String expectedMethodSignature =
      fflib_MyList.getStubClassName() + ''.addMore(String)'';
    System.assertEquals(
      expectedMethodSignature,
      ((fflib_QualifiedMethod) methodCalled).toString(),
      ''the last method called should be the addMore, so should be the last to set the actualInvocation variable.''
    );

    System.assertEquals(
      ''this is the first answer'',
      answer1,
      ''the answer was not the one expected''
    );
    System.assertEquals(
      ''and this is the second one'',
      answer2,
      ''the answer was not the one expected''
    );
  }

  @isTest
  static void thatAnswerToDifferentVoidMethods() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    fflib_AnswerTest.FirstAnswer answer1 = new fflib_AnswerTest.FirstAnswer();
    fflib_AnswerTest.SecondAnswer answer2 = new fflib_AnswerTest.SecondAnswer();

    System.assertEquals(
      null,
      answer1.getMessage(),
      ''the answer message should be null at this stage''
    );
    System.assertEquals(
      null,
      answer2.getMessage(),
      ''the answer message should be null at this stage''
    );

    mocks.startStubbing();
    ((fflib_MyList) mocks.doAnswer(answer1, mockList))
      .addMore(''Hi hi Hello Hi hi'');
    ((fflib_MyList) mocks.doAnswer(answer2, mockList)).add(''Hello'');
    mocks.stopStubbing();

    // When
    mockList.addMore(''Hi hi Hello Hi hi'');
    mockList.add(''Hello'');

    // Then
    System.assertEquals(
      ''this is the first answer'',
      answer1.getMessage(),
      ''the answer was not the one expected''
    );
    System.assertEquals(
      ''and this is the second one'',
      answer2.getMessage(),
      ''the answer was not the one expected''
    );
  }

  //Answers

  public class BasicAnswer implements fflib_Answer {
    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;
      return null;
    }
  }

  public class ExceptionForAnswer implements fflib_Answer {
    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      throw new fflib_ApexMocks.ApexMocksException(
        ''an error occurs on the execution of the answer''
      );
    }
  }

  public class ExceptionForArgumentsOutOfBound implements fflib_Answer {
    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      try {
        Object noExistingObj = invocation.getArgument(2);
        System.assert(
          false,
          ''an exception was expected because the argument in the method are only 2''
        );
      } catch (fflib_ApexMocks.ApexMocksException exp) {
        String expectedMessage = ''Invalid index, must be greater or equal to zero and less of 2.'';
        String actualMessage = exp.getMessage();
        System.assertEquals(
          expectedMessage,
          actualMessage,
          ''the message return by the exception is not as expected''
        );
      }
      return null;
    }
  }

  public class ExceptionForNegativeArgumentIndex implements fflib_Answer {
    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      try {
        Object noExistingObj = invocation.getArgument(-1);
        System.assert(
          false,
          ''an exception was expected because the argument index cannot be negative''
        );
      } catch (fflib_ApexMocks.ApexMocksException exp) {
        String expectedMessage = ''Invalid index, must be greater or equal to zero and less of 2.'';
        String actualMessage = exp.getMessage();
        System.assertEquals(
          expectedMessage,
          actualMessage,
          ''the message return by the exception is not as expected''
        );
      }
      return null;
    }
  }

  public class ArgumentListEmptyForMethodWithNoArgument implements fflib_Answer {
    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      List<Object> emptyList = invocation.getArguments();

      System.assertEquals(
        0,
        emptyList.size(),
        ''the argument list from a method without arguments should be empty''
      );

      return null;
    }
  }

  public class FirstAnswer implements fflib_Answer {
    private String answerMessage;

    public String getMessage() {
      return this.answerMessage;
    }

    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      this.answerMessage = ''this is the first answer'';

      return answerMessage;
    }
  }

  public class SecondAnswer implements fflib_Answer {
    private String answerMessage;

    public String getMessage() {
      return this.answerMessage;
    }

    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      this.answerMessage = ''and this is the second one'';

      return answerMessage;
    }
  }

  public class ProcessArgumentAnswer implements fflib_Answer {
    public Object answer(fflib_InvocationOnMock invocation) {
      actualInvocation = invocation;

      String argument = (String) invocation.getArgument(1);
      System.assertNotEquals(
        null,
        argument,
        '' the argument should have some value''
      );
      argument = argument.replace(''Hi'', ''Bye'');
      return argument;
    }
  }
}','1680216697.0','True','fflib_AnswerTest','14959','Active');
INSERT INTO "ApexClass" VALUES(57,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 *	''Classic'' invocation verifier - checks that a method was called with the given arguments the expected number of times.
 *	The order of method calls is not important.
 *	@group Core
 */
public class fflib_AnyOrder extends fflib_MethodVerifier {
  /*
   * Verifies a method was invoked the expected number of times, with the expected arguments.
   * @param qualifiedMethod The method to be verified.
   * @param methodArg The arguments of the method that needs to be verified.
   * @param verificationMode The verification mode that holds the setting about how the verification should be performed.
   */
  protected override void verify(
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues methodArg,
    fflib_VerificationMode verificationMode
  ) {
    Integer methodCount = getMethodCount(qm, methodArg);

    String qualifier = '''';
    Integer expectedCount = null;

    if (
      (verificationMode.VerifyMin == verificationMode.VerifyMax) &&
      methodCount != verificationMode.VerifyMin
    ) {
      expectedCount = verificationMode.VerifyMin;
    } else if (
      verificationMode.VerifyMin != null &&
      verificationMode.VerifyMin > methodCount
    ) {
      expectedCount = verificationMode.VerifyMin;
      qualifier = '' or more times'';
    } else if (
      verificationMode.VerifyMax != null &&
      verificationMode.VerifyMax < methodCount
    ) {
      expectedCount = verificationMode.VerifyMax;
      qualifier = '' or fewer times'';
    }

    if (expectedCount != null) {
      throwException(
        qm,
        '''',
        expectedCount,
        qualifier,
        methodCount,
        verificationMode.CustomAssertMessage
      );
    }
  }

  private Integer getMethodCount(
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues methodArg
  ) {
    List<fflib_IMatcher> matchers = fflib_Match.Matching
      ? fflib_Match.getAndClearMatchers(methodArg.argValues.size())
      : null;
    Integer retval = 0;

    List<fflib_MethodArgValues> methodArgs = fflib_MethodCountRecorder.getMethodArgumentsByTypeName()
      .get(qm);

    if (methodArgs != null) {
      if (matchers != null) {
        for (fflib_MethodArgValues args : methodArgs) {
          if (fflib_Match.matchesAllArgs(args, matchers)) {
            capture(matchers);

            retval++;
          }
        }
      } else {
        return countCalls(methodArgs, methodArg);
      }
    }

    return retval;
  }

  private Integer countCalls(
    List<fflib_MethodArgValues> methodArgs,
    fflib_MethodArgValues methodArg
  ) {
    Integer count = 0;

    for (fflib_MethodArgValues arg : methodArgs) {
      if (arg == methodArg)
        count++;
    }

    return count;
  }

  /*
   * Method that validate the verification mode used in the verify.
   * Not all the methods from the fflib_VerificationMode are implemented for the different classes that extends the fflib_MethodVerifier.
   * The error is thrown at run time, so this method is called in the method that actually performs the verify.
   * @param verificationMode The verification mode that have to been verified.
   * @throws Exception with message for the fflib_VerificationMode not implemented.
   */
  protected override void validateMode(
    fflib_VerificationMode verificationMode
  ) {
    if (verificationMode.Method == fflib_VerificationMode.ModeName.CALLS) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''The calls() method is available only in the InOrder Verification.''
      );
    }
  }
}','3182378612.0','True','fflib_AnyOrder','2444','Active');
INSERT INTO "ApexClass" VALUES(58,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @nodoc
 */
@isTest
private class fflib_AnyOrderTest {
  private static final String BASIC_VERIFY_ASSERTION_MESSAGE = ''Expected : {0}, Actual: {1} -- Wanted but not invoked: '';

  /*
   *	replicating the apex mocks tests with the new syntax
   */

  @isTest
  private static void whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
      .add(fflib_Match.anyString());
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''fred'');
    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(fflib_Match.stringContains(''fred''));
  }

  @isTest
  private static void whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never()))
      .add(
        (String) fflib_Match.allOf(
          fflib_Match.eq(''bob''),
          fflib_Match.stringContains(''re'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        (String) fflib_Match.allOf(
          fflib_Match.eq(''fred''),
          fflib_Match.stringContains(''re'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
      .add(
        (String) fflib_Match.anyOf(
          fflib_Match.eq(''bob''),
          fflib_Match.eq(''fred'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        (String) fflib_Match.anyOf(
          fflib_Match.eq(''bob''),
          fflib_Match.eq(''jack'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
      .add(
        (String) fflib_Match.noneOf(
          fflib_Match.eq(''jack''),
          fflib_Match.eq(''tim'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
      .add(
        (String) fflib_Match.noneOf(
          fflib_Match.anyOf(fflib_Match.eq(''jack''), fflib_Match.eq(''jill'')),
          fflib_Match.allOf(
            fflib_Match.eq(''tim''),
            fflib_Match.stringContains(''i'')
          )
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
      .add((String) fflib_Match.isNot(fflib_Match.eq(''jack'')));
  }

  @isTest
  private static void whenVerifyCustomMatchersCanBeUsed() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.get(1);
    mockList.get(2);
    mockList.get(3);
    mockList.get(4);
    mockList.get(5);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(3)))
      .get((Integer) fflib_Match.matches(new isOdd()));
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
      .get((Integer) fflib_Match.matches(new isEven()));
  }

  @isTest
  private static void verifyMultipleMethodCallsWithSameSingleArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2))).add(''bob'');
  }

  @isTest
  private static void verifyMethodNotCalled() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.get(0);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never())).add(''bob'');
    ((fflib_MyList.IList) mocks.verify(mockList)).get(0);
  }

  @isTest
  private static void verifySingleMethodCallWithMultipleArguments() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.set(0, ''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList)).set(0, ''bob'');
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never())).set(0, ''fred'');
  }

  @isTest
  private static void verifyMethodCallWhenNoCallsBeenMadeForType() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never())).add(''bob'');
  }

  @isTest
  private static void whenVerifyMethodNeverCalledMatchersAreReset() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never()))
      .get(fflib_Match.anyInteger());
    ((fflib_MyList.IList) mocks.verify(mockList)).add(fflib_Match.anyString());
  }

  /*
   *	times
   */

  @isTest
  private static void verifyTimesMethodHasBeenCalled() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(3))).add(''bob'');
  }

  @isTest
  private static void verifyTimesMethodHasBeenCalledWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob1'');
    mockList.add(''bob2'');
    mockList.add(''bob3'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(3)))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatVerifyTimesMethodFailsWhenCalledLessTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(4))).add(''bob'');

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      assertFailMessage(exc.getMessage(), 4, 3);
    }
  }

  @isTest
  private static void thatVerifyTimesMethodFailsWhenCalledMoreTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2))).add(''bob'');

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      assertFailMessage(exc.getMessage(), 2, 3);
    }
  }

  @isTest
  private static void thatVerifyTimesMethodFailsWhenCalledLessTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(4)))
        .add(fflib_Match.anyString());

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      assertFailMessage(exc.getMessage(), 4, 3);
    }
  }

  @isTest
  private static void thatVerifyTimesMethodFailsWhenCalledMoreTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.times(2)))
        .add(fflib_Match.anyString());

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      assertFailMessage(exc.getMessage(), 2, 3);
    }
  }

  /*
   *	description
   */

  @isTest
  private static void thatCustomMessageIsAdded() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    String customAssertMessage = ''Custom message to explain the reason of the verification'';

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(
          mockList,
          mocks.times(2).description(customAssertMessage)
        ))
        .add(fflib_Match.anyString());

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      String exceptionMessage = exc.getMessage();

      String expectedMessage =
        String.format(
          BASIC_VERIFY_ASSERTION_MESSAGE,
          new List<String>{ ''2'', ''3'' }
        ) +
        fflib_MyList.getStubClassName() +
        ''.add(String). '' +
        customAssertMessage +
        ''.'';

      System.assertEquals(
        expectedMessage,
        exceptionMessage,
        ''The exception was caught, but the message was not as expected. '' +
        ''Expected: ['' +
        expectedMessage +
        ''],  Actual: ['' +
        exceptionMessage +
        ''].''
      );
    }
  }

  /*
   *	atLeast
   */

  @isTest
  private static void thatVerifiesAtLeastNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeast(2))).add(''bob'');
  }

  @isTest
  private static void thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeast(2))).add(''bob'');
  }

  @isTest
  private static void thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeast(3)))
        .add(''bob'');

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called 3 times when instead is called only twice''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 3 or more times, Actual: 2 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatVerifiesAtLeastNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeast(2)))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeast(2)))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeast(3)))
        .add(fflib_Match.anyString());

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called 3 times when instead is called only twice''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 3 or more times, Actual: 2 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  /*
   *	atMost
   */

  @isTest
  private static void thatVerifiesAtMostNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atMost(5))).add(''bob'');
  }

  @isTest
  private static void thatVerifiesAtMostSameNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atMost(3))).add(''bob'');
  }

  @isTest
  private static void thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atMost(3))).add(''bob'');

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called 3 times when instead is called four times''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 3 or fewer times, Actual: 4 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatVerifiesAtMostNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atMost(5)))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatVerifiesAtMostSameNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atMost(3)))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atMost(3)))
        .add(fflib_Match.anyString());

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called 3 times when instead is called four times''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 3 or fewer times, Actual: 4 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  /*
   *	atLeastOnce
   */

  @isTest
  private static void thatVerifiesAtLeastOnceNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(''bob'');
  }

  @isTest
  private static void thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(''bob'');
  }

  @isTest
  private static void thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''rob'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
        .add(''bob'');

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called at least once when instead is never called''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 1 or more times, Actual: 0 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatVerifiesAtLeastOnceNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
        .add(fflib_Match.anyString());

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called at lest once when instead is never called''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 1 or more times, Actual: 0 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  /*
   *	between
   */

  @isTest
  private static void thatVerifiesBetweenNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.between(3, 5)))
      .add(''bob'');
  }

  @isTest
  private static void thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.between(3, 5)))
        .add(''bob'');

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called at least 3 times when instead is called only twice''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 3 or more times, Actual: 2 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatVerifiesBetweenNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.between(3, 5)))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.between(3, 5)))
        .add(fflib_Match.anyString());

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called 3 times when instead is called only twice''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 3 or more times, Actual: 2 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.between(3, 5)))
        .add(''bob'');

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called at most 5 times when instead is called six times''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 5 or fewer times, Actual: 6 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.between(3, 5)))
        .add(fflib_Match.anyString());

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called 5 times when instead is called six times''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 5 or fewer times, Actual: 6 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  /*
   *	never
   */

  @isTest
  private static void verifyNeverMethodHasNotBeenCalled() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob1'');
    mockList.add(''bob2'');
    mockList.add(''bob3'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never())).add(''bob'');
  }

  @isTest
  private static void verifyNeverMethodHasBeenNotCalledWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');
    mockList.add(''fred'', ''fred'', ''fred'', ''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.never()))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatVerifyNeverFailsWhenCalledMoreTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.never())).add(''bob'');

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      assertFailMessage(exc.getMessage(), 0, 2);
    }
  }

  @isTest
  private static void thatVerifyNeverFailsWhenCalledMoreTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.never()))
        .add(fflib_Match.anyString());

      System.assert(false, ''an exception was expected'');
    } catch (Exception exc) {
      assertFailMessage(exc.getMessage(), 0, 3);
    }
  }

  /*
   *	atLeastOnce
   */

  @isTest
  private static void thatVerifiesAtLeastOnce() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(''bob'');
  }

  @isTest
  private static void thatVerifiesAtLeastOnceWhenIsCalledMoreTimes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(''bob'');
  }

  @isTest
  private static void thatThrownExceptionIfCalledLessThanAtLeastOnce() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''bob'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
        .add(''rob'');

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called one times when instead is not called''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 1 or more times, Actual: 0 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  private static void thatVerifiesAtLeastOnceWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatVerifiesAtLeastOnceWhenIsCalledMoreTimesWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');
    mockList.add(''fred'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
      .add(fflib_Match.anyString());
  }

  @isTest
  private static void thatThrownExceptionIfCalledLessThanAtLeastOnceWithMatchers() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList, mocks.atLeastOnce()))
        .add(fflib_Match.stringStartsWith(''rob''));

      System.assert(
        false,
        ''an exception was expected because we are asserting that the method is called once when instead is not called''
      );
    } catch (fflib_ApexMocks.ApexMocksException ex) {
      String expectedMessage =
        ''Expected : 1 or more times, Actual: 0 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      String actualMessage = ex.getMessage();
      System.assertEquals(
        expectedMessage,
        actualMessage,
        ''the exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  /*
   *	HELPER METHODS
   */

  private static void assertFailMessage(
    String exceptionMessage,
    Integer expectedInvocations,
    Integer actualsInvocations
  ) {
    String expectedMessage = String.format(
      BASIC_VERIFY_ASSERTION_MESSAGE,
      new List<String>{
        String.valueOf(expectedInvocations),
        String.valueOf(actualsInvocations)
      }
    );
    System.assert(
      exceptionMessage.contains(expectedMessage),
      ''The exception was caught, but the message was not as expected. '' +
      ''Expected: ['' +
      expectedMessage +
      ''],  Actual: ['' +
      exceptionMessage +
      ''].''
    );
  }

  /*
   *	HELPER CLASSES
   */

  private class isOdd implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg instanceof Integer ? Math.mod((Integer) arg, 2) == 1 : false;
    }
  }

  private class isEven implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg instanceof Integer ? Math.mod((Integer) arg, 2) == 0 : false;
    }
  }
}','233513179.0','True','fflib_AnyOrderTest','32176','Active');
INSERT INTO "ApexClass" VALUES(59,'57.0','/*
 Copyright (c) 2014-2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @group Core
 */
public with sharing class fflib_ApexMocks implements System.StubProvider {
  public static final Integer NEVER = 0;

  private final fflib_MethodCountRecorder methodCountRecorder;
  private final fflib_MethodReturnValueRecorder methodReturnValueRecorder;

  private fflib_MethodVerifier methodVerifier;
  private fflib_VerificationMode verificationMode;
  private fflib_Answer myAnswer;

  public Boolean Verifying { get; set; }

  public Boolean Stubbing {
    get {
      return methodReturnValueRecorder.Stubbing;
    }
    private set;
  }

  public List<Exception> DoThrowWhenExceptions {
    get {
      return methodReturnValueRecorder.DoThrowWhenExceptions;
    }
    set {
      methodReturnValueRecorder.DoThrowWhenExceptions = value;
    }
  }

  /**
   * Construct an ApexMocks instance.
   */
  public fflib_ApexMocks() {
    Verifying = false;

    this.methodCountRecorder = new fflib_MethodCountRecorder();
    this.verificationMode = new fflib_VerificationMode();
    this.methodVerifier = new fflib_AnyOrder();

    this.methodReturnValueRecorder = new fflib_MethodReturnValueRecorder();

    this.methodReturnValueRecorder.Stubbing = false;
  }

  /**
   * Creates mock object of given class or interface.
   * @param classToMock class or interface to mock.
   * @return mock object.
   */
  public Object mock(Type classToMock) {
    return Test.createStub(classToMock, this);
  }

  /**
   * Inherited from StubProvider.
   * @param stubbedObject The stubbed object.
   * @param stubbedMethodName The name of the invoked method.
   * @param returnType The return type of the invoked method.
   * @param listOfParamTypes A list of the parameter types of the invoked method.
   * @param listOfParamNames A list of the parameter names of the invoked method.
   * @param listOfArgs The actual argument values passed into this method at runtime.
   * @return The stubbed return value. Null by default, unless you prepared one that matches this method and argument values in stubbing.
   */
  public Object handleMethodCall(
    Object stubbedObject,
    String stubbedMethodName,
    Type returnType,
    List<type> listOfParamTypes,
    List<String> listOfParamNames,
    List<Object> listOfArgs
  ) {
    return mockNonVoidMethod(
      stubbedObject,
      stubbedMethodName,
      listOfParamTypes,
      listOfArgs
    );
  }

  public static String extractTypeName(Object mockInstance) {
    return String.valueOf(mockInstance).split('':'').get(0);
  }

  /**
   * Verify a method was called on a mock object.
   * @param mockInstance The mock object instance.
   * @return The mock object instance.
   */
  public Object verify(Object mockInstance) {
    return verify(mockInstance, this.times(1));
  }

  /**
   * Verify a method was called on a mock object.
   * @param mockInstance The mock object instance.
   * @param verificationMode Defines the constraints for performing the verification (e.g. the minimum and maximum expected invocation counts).
   * @return The mock object instance.
   */
  public Object verify(
    Object mockInstance,
    fflib_VerificationMode verificationMode
  ) {
    Verifying = true;
    this.verificationMode = verificationMode;

    return mockInstance;
  }

  /**
   * Verify a method was called on a mock object.
   * @param mockInstance The mock object instance.
   * @param times The number of times you expect the method to have been called.
   * @return The mock object instance.
   */
  public Object verify(Object mockInstance, Integer times) {
    return verify(mockInstance, this.times(times));
  }

  /**
   * Verfiy a method was called on a mock object.
   * @param mockInvocation The invocation on the mock containing information about the method and the arguments.
   */
  public void verifyMethodCall(fflib_InvocationOnMock mockInvocation) {
    this.methodVerifier.verifyMethodCall(mockInvocation, verificationMode);
    this.methodVerifier = new fflib_AnyOrder();

    Verifying = false;
  }

  /**
   * Tell ApexMocks framework you are about to start stubbing using when() calls.
   */
  public void startStubbing() {
    methodReturnValueRecorder.Stubbing = true;
  }

  /**
   * Tell ApexMocks framework you are about to stop stubbing using when() calls.
   */
  public void stopStubbing() {
    methodReturnValueRecorder.Stubbing = false;
  }

  /**
   * Setup when stubbing for a mock object instance.
   * @param ignoredRetVal This is the return value from the method called on the mockInstance, and is ignored here since we are about to setup
   *        the stubbed return value using thenReturn() (see MethodReturnValue class below).
   */
  public fflib_MethodReturnValue when(Object ignoredRetVal) {
    return methodReturnValueRecorder.MethodReturnValue;
  }

  /**
   * Record a method was called on a mock object.
   * @param mockInvocation The invocation on the mock containing information about the method and the arguments.
   */
  public void recordMethod(fflib_InvocationOnMock mockInvocation) {
    methodCountRecorder.recordMethod(mockInvocation);
  }

  /**
   * Prepare a stubbed method return value.
   * @param mockInvocation The invocation on the mock containing information about the method and the arguments.
   * @return The MethodReturnValue instance.
   */
  public fflib_MethodReturnValue prepareMethodReturnValue(
    fflib_InvocationOnMock mockInvocation
  ) {
    return methodReturnValueRecorder.prepareMethodReturnValue(mockInvocation);
  }

  /**
   * Get the method return value for the given method call.
   * @param mockInvocation The invocation on the mock containing information about the method and the arguments.
   * @return The MethodReturnValue instance.
   */
  public fflib_MethodReturnValue getMethodReturnValue(
    fflib_InvocationOnMock mockInvocation
  ) {
    return methodReturnValueRecorder.getMethodReturnValue(mockInvocation);
  }

  /**
   * Setup exception stubbing for a void method.
   * @param e The exception to throw.
   * @param mockInstance The mock object instance.
   */
  public Object doThrowWhen(Exception e, Object mockInstance) {
    methodReturnValueRecorder.prepareDoThrowWhenExceptions(
      new List<Exception>{ e }
    );
    return mockInstance;
  }

  /**
   * Setup exception stubbing for a void method.
   * @param exps The list of exceptions to throw.
   * @param mockInstance The mock object instance.
   */
  public Object doThrowWhen(List<Exception> exps, Object mockInstance) {
    methodReturnValueRecorder.prepareDoThrowWhenExceptions(exps);
    return mockInstance;
  }

  /**
   * Setup answer stubbing for a void method.
   * @param answer The answer to invoke.
   * @param mockInstance The mock object instance.
   */
  public Object doAnswer(fflib_Answer answer, Object mockInstance) {
    this.myAnswer = answer;
    return mockInstance;
  }

  /**
   * Mock a void method. Called by generated mock instance classes, not directly by a developers
   * code.
   * @param mockInstance The mock object instance.
   * @param methodName The method for which to prepare a return value.
   * @param methodArgTypes The method argument types for which to prepare a return value.
   * @param methodArgValues The method argument values for which to prepare a return value.
   */
  public void mockVoidMethod(
    Object mockInstance,
    String methodName,
    List<Type> methodArgTypes,
    List<Object> methodArgValues
  ) {
    mockNonVoidMethod(
      mockInstance,
      methodName,
      methodArgTypes,
      methodArgValues
    );
  }

  /**
   * Mock a non-void method. Called by generated mock instance classes, not directly by a developers
   * code.
   * @param mockInstance The mock object instance.
   * @param methodName The method for which to prepare a return value.
   * @param methodArgTypes The method argument types for which to prepare a return value.
   * @param methodArgValues The method argument values for which to prepare a return value.
   */
  public Object mockNonVoidMethod(
    Object mockInstance,
    String methodName,
    List<Type> methodArgTypes,
    List<Object> methodArgValues
  ) {
    fflib_QualifiedMethod qm = new fflib_QualifiedMethod(
      extractTypeName(mockInstance),
      methodName,
      methodArgTypes,
      mockInstance
    );
    fflib_MethodArgValues argValues = new fflib_MethodArgValues(
      methodArgValues
    );

    fflib_InvocationOnMock invocation = new fflib_InvocationOnMock(
      qm,
      argValues,
      mockInstance
    );

    if (Verifying) {
      verifyMethodCall(invocation);
    } else if (Stubbing) {
      fflib_MethodReturnValue methotReturnValue = prepareMethodReturnValue(
        invocation
      );

      if (DoThrowWhenExceptions != null) {
        methotReturnValue.thenThrowMulti(DoThrowWhenExceptions);
        DoThrowWhenExceptions = null;
        return null;
      }

      if (this.myAnswer != null) {
        methotReturnValue.thenAnswer(this.myAnswer);
        this.myAnswer = null;
        return null;
      }

      return null;
    } else {
      recordMethod(invocation);
      return returnValue(invocation);
    }

    return null;
  }

  public class ApexMocksException extends Exception {
  }

  private Object returnValue(fflib_InvocationOnMock invocation) {
    fflib_MethodReturnValue methodReturnValue = getMethodReturnValue(
      invocation
    );

    if (methodReturnValue != null) {
      if (methodReturnValue.Answer == null) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''The stubbing is not correct, no return values have been set.''
        );
      }

      Object returnedValue = methodReturnValue.Answer.answer(invocation);

      if (returnedValue == null) {
        return null;
      }

      if (returnedValue instanceof Exception) {
        throw ((Exception) returnedValue);
      }

      return returnedValue;
    }

    return null;
  }

  /**
   * Sets how many times the method is expected to be called.
   * For InOrder verification we copy Mockito behavior which is as follows;
   * <ul>
   * <li>Consume the specified number of matching invocations, ignoring non-matching invocations in between</li>
   * <li>Fail an assert if the very next invocation matches, but additional matches can still exist so long as at least one non-matching invocation exists before them</li>
   * </ul>
   * For example if you had a(); a(); b(); a();
   * then inOrder.verify(myMock, 2)).a(); or inOrder.verify(myMock, 3)).a(); would pass but not inOrder.verify(myMock, 1)).a();
   * @param times The number of times you expect the method to have been called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode times(Integer times) {
    return new fflib_VerificationMode().times(times);
  }

  /**
   * Sets how many times the method is expected to be called for an InOrder verifier. Available Only with the InOrder verification.
   * A verification mode using calls will not fail if the method is called more times than expected.
   * @param times The number of times you expect the method to have been called in the InOrder verifying ( no greedy verify).
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode calls(Integer times) {
    return new fflib_VerificationMode().calls(times);
  }

  /**
   * Sets a custom assert message for the verify.
   * @param customAssertMessage The custom message for the assert in case the assert is false. The custom message is queued to the default message.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode description(String customAssertMessage) {
    return new fflib_VerificationMode().description(customAssertMessage);
  }

  /**
   * Sets the minimum number of times the method is expected to be called.
   * With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified.
   * @param atLeastTimes The minimum number of times you expect the method to have been called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode atLeast(Integer atLeastTimes) {
    return new fflib_VerificationMode().atLeast(atLeastTimes);
  }

  /**
   * Sets the maximum number of times the method is expected to be called. Not available in the InOrder verification.
   * @param atMostTimes The maximum number of times the method is expected to be called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode atMost(Integer atMostTimes) {
    return new fflib_VerificationMode().atMost(atMostTimes);
  }

  /**
   * Sets that the method is called at least once.
   * With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode atLeastOnce() {
    return new fflib_VerificationMode().atLeastOnce();
  }

  /**
   * Sets the range of how many times the method is expected to be called. Not available in the InOrder verification.
   * @param atLeastTimes The minimum number of times you expect the method to have been called.
   * @param atMostTimes The maximum number of times the method is expected to be called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode between(
    Integer atLeastTimes,
    Integer atMostTimes
  ) {
    return new fflib_VerificationMode().between(atLeastTimes, atMostTimes);
  }

  /**
   * Sets that the method is not expected to be called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode never() {
    return new fflib_VerificationMode().never();
  }

  /**
   * Sets the fflib_VerificationMode object.
   * To internal use only.
   * Used to pass the verification mode that has been set in the  verify of the fflib_InOrder class.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public void setOrderedVerifier(fflib_InOrder verifyOrderingMode) {
    this.methodVerifier = verifyOrderingMode;
  }
}','243921146.0','True','fflib_ApexMocks','6875','Active');
INSERT INTO "ApexClass" VALUES(60,'57.0','/*
 * Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */
@IsTest
public class fflib_ApexMocksConfig {
  /**
   * When false, stubbed behaviour and invocation counts are shared among all test spies.
   * - See fflib_ApexMocksTest.thatMultipleInstancesCanBeMockedDependently
   * - This is the default for backwards compatibility.
   * When true, each test spy instance has its own stubbed behaviour and invocations.
   * - See fflib_ApexMocksTest.thatMultipleInstancesCanBeMockedIndependently
   */
  public static Boolean HasIndependentMocks { get; set; }

  static {
    HasIndependentMocks = false;
  }
}','3860645470.0','True','fflib_ApexMocksConfig','153','Active');
INSERT INTO "ApexClass" VALUES(61,'57.0','/*
 * Copyright (c) 2014-2017 FinancialForce.com, inc.  All rights reserved.
 */
@isTest
private class fflib_ApexMocksTest {
  private static final fflib_ApexMocks MY_MOCKS = new fflib_ApexMocks();
  private static final fflib_MyList MY_MOCK_LIST = (fflib_MyList) MY_MOCKS.mock(
    fflib_MyList.class
  );

  @isTest
  static void whenStubMultipleCallsWithMatchersShouldReturnExpectedValues() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(fflib_Match.anyInteger(), fflib_Match.anyString()))
      .thenReturn(''any'');
    mocks.when(
        mockList.get2(
          fflib_Match.anyInteger(),
          fflib_Match.stringContains(''Hello'')
        )
      )
      .thenReturn(''hello'');
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get2(0, ''Hi hi Hello Hi hi'');

    // Then
    System.assertEquals(''hello'', actualValue);
  }

  @isTest
  static void whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add(fflib_Match.anyString());
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''fred'');
    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(fflib_Match.stringContains(''fred''));
  }

  @isTest
  static void whenStubExceptionWithMatchersShouldThrowException() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new MyException(''Matcher Exception''),
        mockList
      ))
      .add(fflib_Match.stringContains(''Hello''));
    mocks.stopStubbing();

    // When
    mockList.add(''Hi'');

    try {
      mockList.add(''Hi Hello Hi'');
      System.assert(false, ''Expected exception'');
    } catch (MyException e) {
      //Then
      System.assertEquals(''Matcher Exception'', e.getMessage());
    }
  }

  @isTest
  static void whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, 0))
      .add(
        (String) fflib_Match.allOf(
          fflib_Match.eq(''bob''),
          fflib_Match.stringContains(''re'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        (String) fflib_Match.allOf(
          fflib_Match.eq(''fred''),
          fflib_Match.stringContains(''re'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add(
        (String) fflib_Match.anyOf(
          fflib_Match.eq(''bob''),
          fflib_Match.eq(''fred'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, 1))
      .add(
        (String) fflib_Match.anyOf(
          fflib_Match.eq(''bob''),
          fflib_Match.eq(''jack'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add(
        (String) fflib_Match.noneOf(
          fflib_Match.eq(''jack''),
          fflib_Match.eq(''tim'')
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add(
        (String) fflib_Match.noneOf(
          fflib_Match.anyOf(fflib_Match.eq(''jack''), fflib_Match.eq(''jill'')),
          fflib_Match.allOf(
            fflib_Match.eq(''tim''),
            fflib_Match.stringContains(''i'')
          )
        )
      );

    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add((String) fflib_Match.isNot(fflib_Match.eq(''jack'')));
  }

  @isTest
  static void whenStubCustomMatchersCanBeUsed() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get((Integer) fflib_Match.matches(new isOdd())))
      .thenReturn(''Odd'');
    mocks.when(mockList.get((Integer) fflib_Match.matches(new isEven())))
      .thenReturn(''Even'');
    mocks.stopStubbing();

    // When
    String s1 = mockList.get(1);
    String s2 = mockList.get(2);
    String s3 = mockList.get(3);
    String s4 = mockList.get(4);
    String s5 = mockList.get(5);

    // Then
    System.assertEquals(''Odd'', s1);
    System.assertEquals(''Even'', s2);
    System.assertEquals(''Odd'', s3);
    System.assertEquals(''Even'', s4);
    System.assertEquals(''Odd'', s5);
  }

  @isTest
  static void whenVerifyCustomMatchersCanBeUsed() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.get(1);
    mockList.get(2);
    mockList.get(3);
    mockList.get(4);
    mockList.get(5);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, 3))
      .get((Integer) fflib_Match.matches(new isOdd()));
    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .get((Integer) fflib_Match.matches(new isEven()));
  }

  @isTest
  static void whenStubWithMatcherAndNonMatcherArgumentsShouldThrowException() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    String expectedError =
      ''The number of matchers defined (1).'' +
      '' does not match the number expected (2)\n'' +
      ''If you are using matchers all arguments must be passed in as matchers.\n'' +
      ''For example myList.add(fflib_Match.anyInteger(), \''String\'') should be defined as myList.add(fflib_Match.anyInteger(), fflib_Match.eq(\''String\'')).'';

    // Then
    try {
      mocks.startStubbing();
      mocks.when(mockList.get2(fflib_Match.anyInteger(), ''String literal''))
        .thenReturn(''fail'');
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(expectedError, e.getMessage());
    }
  }

  @isTest
  static void whenVerifyWithMatcherAndNonMatcherArgumentsShouldThrowException() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    String expectedError =
      ''The number of matchers defined (1).'' +
      '' does not match the number expected (2)\n'' +
      ''If you are using matchers all arguments must be passed in as matchers.\n'' +
      ''For example myList.add(fflib_Match.anyInteger(), \''String\'') should be defined as myList.add(fflib_Match.anyInteger(), fflib_Match.eq(\''String\'')).'';

    mockList.get2(1, ''String literal'');

    // Then
    try {
      ((fflib_MyList.IList) mocks.verify(mockList))
        .get2(fflib_Match.anyInteger(), ''String literal'');
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(expectedError, e.getMessage());
    }
  }

  @isTest
  static void whenStubSameMethodWithMatchersAndNonMatchersShouldStubInOrder() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();

    mocks.when(mockList.get2(1, ''Non-matcher first'')).thenReturn(''Bad''); //Set the return value using the non-matcher arguments
    mocks.when(
        mockList.get2(
          fflib_Match.eqInteger(1),
          fflib_Match.stringContains(''Non-matcher first'')
        )
      )
      .thenReturn(''Good''); //Override the return value using matcher arguments

    mocks.when(
        mockList.get2(
          fflib_Match.eqInteger(1),
          fflib_Match.stringContains(''Matcher first'')
        )
      )
      .thenReturn(''Bad''); //Set the return value using the matcher arguments
    mocks.when(mockList.get2(1, ''Matcher first'')).thenReturn(''Good''); //Override the return value using non-matcher arguments

    mocks.stopStubbing();

    // When/Thens
    System.assertEquals(''Good'', mockList.get2(1, ''Non-matcher first''));
    System.assertEquals(''Good'', mockList.get2(1, ''Matcher first''));
  }

  @isTest
  static void whenStubExceptionSameMethodWithMatchersAndNonMatchersShouldStubInOrder() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();

    ((fflib_MyList.IList) mocks.doThrowWhen(
        new fflib_ApexMocks.ApexMocksException(''Bad''),
        mockList
      ))
      .add(''Non-matcher first''); //Set the exception value using the non-matcher arguments
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new fflib_ApexMocks.ApexMocksException(''Good''),
        mockList
      ))
      .add(fflib_Match.stringContains(''Non-matcher first'')); //Override the exception value using matcher arguments

    ((fflib_MyList.IList) mocks.doThrowWhen(
        new fflib_ApexMocks.ApexMocksException(''Bad''),
        mockList
      ))
      .add(fflib_Match.stringContains(''Matcher first'')); //Set the exception value using the matcher arguments
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new fflib_ApexMocks.ApexMocksException(''Good''),
        mockList
      ))
      .add(''Matcher first''); //Override the exception value using non-matcher arguments

    mocks.stopStubbing();

    // When/Thens
    try {
      mockList.add(''Non-matcher first'');
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Good'', e.getMessage());
    }

    try {
      mockList.add(''Matcher first'');
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Good'', e.getMessage());
    }
  }

  @isTest
  static void whenStubSingleCallWithSingleArgumentShouldReturnStubbedValue() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(0)).thenReturn(''bob'');
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get(0);

    // Then
    System.assertEquals(''bob'', actualValue);
  }

  @isTest
  static void whenStubSingleCallWithNullReturnValueItShouldReturnNull() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(0)).thenReturn(null);
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get(0);

    // Then
    System.assertEquals(null, actualValue);
  }

  @isTest
  static void whenStubMultipleCallsWithSingleArgumentShouldReturnStubbedValues() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(0)).thenReturn(''bob'');
    mocks.when(mockList.get(1)).thenReturn(''fred'');
    mocks.stopStubbing();

    // When
    String actualValueArg0 = mockList.get(0);
    String actualValueArg1 = mockList.get(1);
    String actualValueArg2 = mockList.get(2);

    // Then
    System.assertEquals(''bob'', actualValueArg0);
    System.assertEquals(''fred'', actualValueArg1);
    System.assertEquals(null, actualValueArg2);
  }

  @isTest
  static void whenStubSameCallWithDifferentArgumentValueShouldReturnLastStubbedValue() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(0)).thenReturn(''bob1'');
    mocks.when(mockList.get(0)).thenReturn(''bob2'');
    mocks.stopStubbing();

    // When
    String actualValue = mockList.get(0);

    // Then
    System.assertEquals(''bob2'', actualValue);
  }

  @isTest
  static void whenStubCallWithNoArgumentsShouldReturnStubbedValue() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.isEmpty()).thenReturn(false);
    mocks.stopStubbing();

    // When
    Boolean actualValue = mockList.isEmpty();

    // Then
    System.assertEquals(false, actualValue);
  }

  @isTest
  static void verifySingleMethodCallWithNoArguments() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.isEmpty();

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList)).isEmpty();
  }

  @isTest
  static void verifySingleMethodCallWithSingleArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''bob'');
  }

  @isTest
  static void verifyMultipleMethodCallsWithSameSingleArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, 2)).add(''bob'');
  }

  @isTest
  static void verifyMultipleMethodCallsWithDifferentSingleArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(''fred'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''bob'');
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''fred'');
  }

  @isTest
  static void verifyMethodCallsWithSameNameButDifferentArgumentTypes() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');
    mockList.add(new List<String>{ ''bob'' });
    mockList.add((String) null);
    mockList.add((String[]) null);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''bob'');
    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(new List<String>{ ''bob'' });
    ((fflib_MyList.IList) mocks.verify(mockList)).add((String) null);
    ((fflib_MyList.IList) mocks.verify(mockList)).add((String[]) null);
  }

  @isTest
  static void verifyMethodNotCalled() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.get(0);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, fflib_ApexMocks.NEVER))
      .add(''bob'');
    ((fflib_MyList.IList) mocks.verify(mockList)).get(0);
  }

  @isTest
  static void stubAndVerifyMethodCallsWithNoArguments() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.isEmpty()).thenReturn(false);
    mocks.stopStubbing();

    mockList.clear();

    // When
    Boolean actualValue = mockList.isEmpty();

    // Then
    System.assertEquals(false, actualValue);
    ((fflib_MyList.IList) mocks.verify(mockList)).clear();
  }

  @isTest
  static void whenStubExceptionTheExceptionShouldBeThrown() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get(0))
      .thenThrow(new MyException(''Stubbed exception.''));
    mocks.stopStubbing();

    // When
    try {
      mockList.get(0);
      System.assert(false, ''Stubbed exception should have been thrown.'');
    } catch (Exception e) {
      // Then
      System.assert(e instanceof MyException);
      System.assertEquals(''Stubbed exception.'', e.getMessage());
    }
  }

  @isTest
  static void whenStubVoidMethodWithExceptionThenExceptionShouldBeThrown() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new MyException(''Stubbed exception.''),
        mockList
      ))
      .clear();
    mocks.stopStubbing();

    // When
    try {
      mockList.clear();
      System.assert(false, ''Stubbed exception should have been thrown.'');
    } catch (Exception e) {
      // Then
      System.assert(e instanceof MyException);
      System.assertEquals(''Stubbed exception.'', e.getMessage());
    }
  }

  @isTest
  static void whenStubMultipleVoidMethodsWithExceptionsThenExceptionsShouldBeThrown() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new MyException(''clear stubbed exception.''),
        mockList
      ))
      .clear();
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new MyException(''add stubbed exception.''),
        mockList
      ))
      .add(''bob'');
    mocks.stopStubbing();

    // When
    try {
      mockList.clear();
      System.assert(false, ''Stubbed exception should have been thrown.'');
    } catch (Exception e) {
      // Then
      System.assert(e instanceof MyException);
      System.assertEquals(''clear stubbed exception.'', e.getMessage());
    }

    // When
    try {
      mockList.add(''bob'');
      System.assert(false, ''Stubbed exception should have been thrown.'');
    } catch (Exception e) {
      // Then
      System.assert(e instanceof MyException);
      System.assertEquals(''add stubbed exception.'', e.getMessage());
    }
  }

  @isTest
  static void whenStubVoidMethodWithExceptionAndCallMethodTwiceThenExceptionShouldBeThrownTwice() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    ((fflib_MyList.IList) mocks.doThrowWhen(
        new MyException(''clear stubbed exception.''),
        mockList
      ))
      .clear();
    mocks.stopStubbing();

    // When
    try {
      mockList.clear();
      System.assert(false, ''Stubbed exception should have been thrown.'');
    } catch (Exception e) {
      // Then
      System.assert(e instanceof MyException);
      System.assertEquals(''clear stubbed exception.'', e.getMessage());
    }

    // When
    try {
      mockList.clear();
      System.assert(false, ''Stubbed exception should have been thrown.'');
    } catch (Exception e) {
      // Then
      System.assert(e instanceof MyException);
      System.assertEquals(''clear stubbed exception.'', e.getMessage());
    }
  }

  @isTest
  static void verifyMethodCallWhenNoCallsBeenMadeForType() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, fflib_ApexMocks.NEVER))
      .add(''bob'');
  }

  @isTest
  static void verifySingleMethodCallWithMultipleArguments() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.set(0, ''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList)).set(0, ''bob'');
    ((fflib_MyList.IList) mocks.verify(mockList, fflib_ApexMocks.NEVER))
      .set(0, ''fred'');
  }

  @isTest
  static void whenStubMultipleCallsWithMultipleArgumentShouldReturnStubbedValues() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(mockList.get2(0, ''zero'')).thenReturn(''bob'');
    mocks.when(mockList.get2(1, ''one'')).thenReturn(''fred'');
    mocks.when(mockList.get2(0, ''two'')).thenReturn(''bob'');
    mocks.when(mockList.get2(1, ''three'')).thenReturn(''bub'');
    mocks.stopStubbing();

    // When
    String actualValueArg0 = mockList.get2(0, ''zero'');
    String actualValueArg1 = mockList.get2(1, ''one'');
    String actualValueArg2 = mockList.get2(0, ''two'');
    String actualValueArg3 = mockList.get2(1, ''three'');
    String actualValueArg4 = mockList.get2(0, ''three'');

    // Then
    System.assertEquals(''bob'', actualValueArg0);
    System.assertEquals(''fred'', actualValueArg1);
    System.assertEquals(''bob'', actualValueArg2);
    System.assertEquals(''bub'', actualValueArg3);
    System.assertEquals(null, actualValueArg4);
  }

  @isTest
  static void whenStubNullConcreteArgValueCorrectValueIsReturned() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    String expected = ''hello'';

    mocks.startStubbing();
    mocks.when(mockList.get(null)).thenReturn(expected);
    mocks.stopStubbing();

    // When
    String actual = mockList.get(null);

    // Then
    System.assertEquals(expected, actual);
  }

  @isTest
  static void whenSetDoThrowWhenExceptionsValuesAreSet() {
    //Given
    MyException e = new MyException(''Test'');
    fflib_ApexMocks mocks = new fflib_ApexMocks();

    List<Exception> expsList = new List<Exception>{ e };

    //When
    mocks.DoThrowWhenExceptions = expsList;

    //Then
    System.assert(expsList === mocks.DoThrowWhenExceptions);
  }

  @isTest
  static void whenVerifyMethodNeverCalledMatchersAreReset() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, fflib_ApexMocks.NEVER))
      .get(fflib_Match.anyInteger());
    ((fflib_MyList.IList) mocks.verify(mockList)).add(fflib_Match.anyString());
  }

  @isTest
  static void whenMockIsGeneratedCanVerify() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList.IList mockList = new fflib_Mocks.Mockfflib_MyList(mocks);

    // When
    mockList.add(''bob'');

    // Then
    ((fflib_MyList.IList) mocks.verify(mockList, fflib_ApexMocks.NEVER))
      .get(fflib_Match.anyInteger());
    ((fflib_MyList.IList) mocks.verify(mockList)).add(''bob'');
  }

  @isTest
  static void whenMockIsGeneratedCanStubVerify() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList.IList mockList = new fflib_Mocks.Mockfflib_MyList(mocks);

    // When
    mocks.startStubbing();
    mocks.when(mockList.get(1)).thenReturn(''One'');
    mocks.when(mockList.get(fflib_Match.integerMoreThan(2))).thenReturn(''>Two'');
    mocks.stopStubbing();

    // Then
    System.assertEquals(null, mockList.get(0));
    System.assertEquals(''One'', mockList.get(1));
    System.assertEquals(null, mockList.get(2));
    System.assertEquals(''>Two'', mockList.get(3));
  }

  @isTest
  static void thatMultipleInstancesCanBeMockedIndependently() {
    fflib_ApexMocksConfig.HasIndependentMocks = true;

    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList first = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_MyList second = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(first.get(0)).thenReturn(''First'');
    mocks.when(second.get(0)).thenReturn(''Second'');
    mocks.stopStubbing();

    // When
    String actual = first.get(0);

    // Then
    System.assertEquals(''First'', actual, ''Should have returned stubbed value'');
    ((fflib_MyList) mocks.verify(first)).get(0);
    ((fflib_MyList) mocks.verify(second, mocks.never())).get(0);
  }

  @isTest
  static void thatMultipleInstancesCanBeMockedDependently() {
    fflib_ApexMocksConfig.HasIndependentMocks = false;

    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList first = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_MyList second = (fflib_MyList) mocks.mock(fflib_MyList.class);

    mocks.startStubbing();
    mocks.when(first.get(0)).thenReturn(''First'');
    mocks.when(second.get(0)).thenReturn(''Second'');
    mocks.stopStubbing();

    // When
    String actual = first.get(0);

    // Then
    System.assertEquals(''Second'', actual, ''Should have returned stubbed value'');
    ((fflib_MyList) mocks.verify(first)).get(0);
    ((fflib_MyList) mocks.verify(second)).get(0);
  }

  static void thatStubbingCanBeChainedFirstExceptionThenValue() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrow(new MyException(''Stubbed exception.''))
      .thenReturn(''One'');
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''Stubbed exception.'');
    assertReturnedValue(''One'');
  }

  @isTest
  static void thatStubbingCanBeChainedFirstValueThenException() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturn(''One'')
      .thenThrow(new MyException(''Stubbed exception.''));
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertExceptionMessage(''Stubbed exception.'');
  }

  @isTest
  static void thatStubbingMultipleMethodsCanBeChainedFirstExceptionThenValue() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrow(new MyException(''Stubbed exception.''))
      .thenReturn(''One'');
    MY_MOCKS.when(MY_MOCK_LIST.get2(2, ''Hello.''))
      .thenThrow(new MyException(''Stubbed exception2.''))
      .thenReturn(''One2'');
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''Stubbed exception.'');
    assertReturnedValue(''One'');
    assertExceptionMessageForGet2(''Stubbed exception2.'');
    assertReturnedValueForGet2(''One2'');
  }

  @isTest
  static void thatStubbingMultipleMethodsCanBeChainedFirstValueThenException() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturn(''One'')
      .thenThrow(new MyException(''Stubbed exception.''));
    MY_MOCKS.when(MY_MOCK_LIST.get2(2, ''Hello.''))
      .thenReturn(''One2'')
      .thenThrow(new MyException(''Stubbed exception2.''));
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertExceptionMessage(''Stubbed exception.'');
    assertReturnedValueForGet2(''One2'');
    assertExceptionMessageForGet2(''Stubbed exception2.'');
  }

  @isTest
  static void thatStubbingReturnsDifferentValuesForDifferentCalls() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertReturnedValue(''Two'');
    assertReturnedValue(''Three'');
  }

  @isTest
  static void thatStubbingReturnsDifferentValuesForDifferentCallsAndRepeatLastValuesForFurtherCalls() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertReturnedValue(''Two'');
    assertReturnedValue(''Three'');

    assertReturnedValue(''Three'');
    assertReturnedValue(''Three'');
  }

  @isTest
  static void thatStubbingThrowsDifferentExceptionsForDifferentCalls() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');
  }

  @isTest
  static void thatStubbingThrowsDifferentExceptionsForDifferentCallsAndRepeatLastExceptionForFurtherCalls() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');

    assertExceptionMessage(''third.'');
    assertExceptionMessage(''third.'');
  }

  @isTest
  static void thatStubbingThrowsAndReturnsDifferentExceptionsAndValuesForDifferentCalls() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third })
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');

    assertReturnedValue(''One'');
    assertReturnedValue(''Two'');
    assertReturnedValue(''Three'');

    assertReturnedValue(''Three'');
    assertReturnedValue(''Three'');
  }

  @isTest
  static void thatStubbingReturnsAndThrowsDifferentValuesAndExceptionsForDifferentCalls() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' })
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertReturnedValue(''Two'');
    assertReturnedValue(''Three'');

    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');

    assertExceptionMessage(''third.'');
    assertExceptionMessage(''third.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleValue() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''One'');
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''Two'');
    assertReturnedValue(''Two'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleValue() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''Two'');
    assertReturnedValue(''Two'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiValue() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''Four'', ''Five'', ''Six'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''Four'');
    assertReturnedValue(''Five'');
    assertReturnedValue(''Six'');

    assertReturnedValue(''Six'');
    assertReturnedValue(''Six'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiValues() {
    // Given
    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertReturnedValue(''Two'');
    assertReturnedValue(''Three'');

    assertReturnedValue(''Three'');
    assertReturnedValue(''Three'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleException() {
    // Given
    MyException first = new MyException(''first.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(first);
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''first.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiExceptions() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');

    assertExceptionMessage(''third.'');
    assertExceptionMessage(''third.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiExceptions() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');

    assertExceptionMessage(''third.'');
    assertExceptionMessage(''third.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleException() {
    // Given
    MyException first = new MyException(''first.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(first);
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''first.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleValue() {
    // Given
    MyException first = new MyException(''first.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(first);
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''Two'');
    assertReturnedValue(''Two'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleValue() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(''Two'');
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''Two'');
    assertReturnedValue(''Two'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiValue() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''Four'', ''Five'', ''Six'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''Four'');
    assertReturnedValue(''Five'');
    assertReturnedValue(''Six'');

    assertReturnedValue(''Six'');
    assertReturnedValue(''Six'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiValues() {
    // Given
    MyException first = new MyException(''first.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(first);
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenReturnMulti(new List<String>{ ''One'', ''Two'', ''Three'' });
    MY_MOCKS.stopStubbing();

    // Then
    assertReturnedValue(''One'');
    assertReturnedValue(''Two'');
    assertReturnedValue(''Three'');

    assertReturnedValue(''Three'');
    assertReturnedValue(''Three'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleException() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');
    MyException fourth = new MyException(''fourth.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(fourth);
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''fourth.'');
    assertExceptionMessage(''fourth.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiExceptions() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    MyException fourth = new MyException(''fourth.'');
    MyException fifth = new MyException(''fifth.'');
    MyException sixth = new MyException(''sixth.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ fourth, fifth, sixth });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''fourth.'');
    assertExceptionMessage(''fifth.'');
    assertExceptionMessage(''sixth.'');

    assertExceptionMessage(''sixth.'');
    assertExceptionMessage(''sixth.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiExceptions() {
    // Given
    MyException beforeFirst = new MyException(''before first.'');

    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(beforeFirst);
    MY_MOCKS.when(MY_MOCK_LIST.get(1))
      .thenThrowMulti(new List<Exception>{ first, second, third });
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''second.'');
    assertExceptionMessage(''third.'');

    assertExceptionMessage(''third.'');
    assertExceptionMessage(''third.'');
  }

  @isTest
  static void thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleException() {
    // Given
    MyException beforeFirst = new MyException(''before first.'');
    MyException first = new MyException(''first.'');

    // When
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(beforeFirst);
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(first);
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessage(''first.'');
    assertExceptionMessage(''first.'');
  }

  @isTest
  static void thatVoidMethodThrowsMultipleExceptions() {
    // Given
    MyException beforeFirst = new MyException(''before first.'');

    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    // When
    MY_MOCKS.startStubbing();
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(
        new List<Exception>{ first, second, third },
        MY_MOCK_LIST
      ))
      .add(''Hello'');
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessageOnVoidMethod(''first.'');
    assertExceptionMessageOnVoidMethod(''second.'');
    assertExceptionMessageOnVoidMethod(''third.'');

    assertExceptionMessageOnVoidMethod(''third.'');
    assertExceptionMessageOnVoidMethod(''third.'');
  }

  @isTest
  static void thatMultipleVoidMethodsThrowsMultipleExceptions() {
    // Given
    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    MyException first2 = new MyException(''first2.'');
    MyException second2 = new MyException(''second2.'');
    MyException third2 = new MyException(''third2.'');

    // When
    MY_MOCKS.startStubbing();
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(
        new List<Exception>{ first2, second2, third2 },
        MY_MOCK_LIST
      ))
      .addMore(''Hello'');
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(
        new List<Exception>{ first, second, third },
        MY_MOCK_LIST
      ))
      .add(''Hello'');
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessageOnVoidMethod(''first.'');
    assertExceptionMessageOnVoidMethod(''second.'');
    assertExceptionMessageOnVoidMethod(''third.'');

    assertExceptionMessageOnVoidMethod(''third.'');
    assertExceptionMessageOnVoidMethod(''third.'');

    assertExceptionMessageOnAddMoreVoidMethod(''first2.'');
    assertExceptionMessageOnAddMoreVoidMethod(''second2.'');
    assertExceptionMessageOnAddMoreVoidMethod(''third2.'');

    assertExceptionMessageOnAddMoreVoidMethod(''third2.'');
    assertExceptionMessageOnAddMoreVoidMethod(''third2.'');
  }

  @isTest
  static void thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverride() {
    // Given
    MyException beforeFirst = new MyException(''before first.'');

    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    MyException fourth = new MyException(''fourth.'');
    MyException fifth = new MyException(''fifth.'');
    MyException sixth = new MyException(''sixth.'');

    // When
    MY_MOCKS.startStubbing();
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(
        new List<Exception>{ first, second, third },
        MY_MOCK_LIST
      ))
      .add(''Hello'');
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(
        new List<Exception>{ fourth, fifth, sixth },
        MY_MOCK_LIST
      ))
      .add(''Hello'');
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessageOnVoidMethod(''fourth.'');
    assertExceptionMessageOnVoidMethod(''fifth.'');
    assertExceptionMessageOnVoidMethod(''sixth.'');

    assertExceptionMessageOnVoidMethod(''sixth.'');
    assertExceptionMessageOnVoidMethod(''sixth.'');
  }

  @isTest
  static void thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverrideWithSingleException() {
    // Given
    MyException beforeFirst = new MyException(''before first.'');

    MyException first = new MyException(''first.'');
    MyException second = new MyException(''second.'');
    MyException third = new MyException(''third.'');

    MyException fourth = new MyException(''fourth.'');
    MyException fifth = new MyException(''fifth.'');
    MyException sixth = new MyException(''sixth.'');

    // When
    MY_MOCKS.startStubbing();
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(
        new List<Exception>{ first, second, third },
        MY_MOCK_LIST
      ))
      .add(''Hello'');
    ((fflib_MyList.IList) MY_MOCKS.doThrowWhen(fourth, MY_MOCK_LIST))
      .add(''Hello'');
    MY_MOCKS.stopStubbing();

    // Then
    assertExceptionMessageOnVoidMethod(''fourth.'');
    assertExceptionMessageOnVoidMethod(''fourth.'');
  }

  @isTest
  static void thatExceptionIsthrownWhenStubbingIsNotDone() {
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1));
    MY_MOCKS.stopStubbing();

    try {
      MY_MOCK_LIST.get(1);

      System.assert(false, ''an exception was expected'');
    } catch (fflib_ApexMocks.ApexMocksException myex) {
      System.assertEquals(
        ''The stubbing is not correct, no return values have been set.'',
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  @isTest
  static void thatExceptionIsthrownWhenReturnMultiPassEmptyList() {
    try {
      MY_MOCKS.startStubbing();
      MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturnMulti(new List<Object>());
      MY_MOCKS.stopStubbing();
      System.assert(false, ''an exception was expected'');
    } catch (fflib_ApexMocks.ApexMocksException myex) {
      System.assertEquals(
        ''The stubbing is not correct, no return values have been set.'',
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  @isTest
  static void thatExceptionIsthrownWhenReturnMultiPassNullList() {
    try {
      MY_MOCKS.startStubbing();
      MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturnMulti(null);
      MY_MOCKS.stopStubbing();
      System.assert(false, ''an exception was expected'');
    } catch (fflib_ApexMocks.ApexMocksException myex) {
      System.assertEquals(
        ''The stubbing is not correct, no return values have been set.'',
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  @isTest
  static void thatExceptionIsthrownWhenThrowMultiPassEmptyList() {
    try {
      MY_MOCKS.startStubbing();
      MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrowMulti(new List<Exception>());
      MY_MOCKS.stopStubbing();
      System.assert(false, ''an exception was expected'');
    } catch (fflib_ApexMocks.ApexMocksException myex) {
      System.assertEquals(
        ''The stubbing is not correct, no return values have been set.'',
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  @isTest
  static void thatExceptionIsthrownWhenThrowMultiPassNullList() {
    try {
      MY_MOCKS.startStubbing();
      MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrowMulti(null);
      MY_MOCKS.stopStubbing();

      System.assert(false, ''an exception was expected'');
    } catch (fflib_ApexMocks.ApexMocksException myex) {
      System.assertEquals(
        ''The stubbing is not correct, no return values have been set.'',
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  @isTest
  static void thatNullCanBeUsedAsReturnValue() {
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenReturn(null);
    MY_MOCKS.stopStubbing();

    System.assertEquals(
      null,
      MY_MOCK_LIST.get(1),
      ''it should be possible stub using the null value''
    );
  }

  @isTest
  static void thatNullCanBeUsedAsExceptionvalue() {
    MY_MOCKS.startStubbing();
    MY_MOCKS.when(MY_MOCK_LIST.get(1)).thenThrow(null);
    MY_MOCKS.stopStubbing();

    System.assertEquals(
      null,
      MY_MOCK_LIST.get(1),
      ''it should be possible stub using the null value''
    );
  }

  private static void assertExceptionMessage(String expectedMessage) {
    try {
      MY_MOCK_LIST.get(1);
      System.assert(false, ''an exception was expected'');
    } catch (MyException myex) {
      System.assertEquals(
        expectedMessage,
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  private static void assertExceptionMessageForGet2(String expectedMessage) {
    try {
      MY_MOCK_LIST.get2(2, ''Hello.'');
      System.assert(false, ''an exception was expected'');
    } catch (MyException myex) {
      System.assertEquals(
        expectedMessage,
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  private static void assertExceptionMessageOnVoidMethod(
    String expectedMessage
  ) {
    try {
      MY_MOCK_LIST.add(''Hello'');
      System.assert(false, ''an exception was expected'');
    } catch (MyException myex) {
      System.assertEquals(
        expectedMessage,
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  private static void assertExceptionMessageOnAddMoreVoidMethod(
    String expectedMessage
  ) {
    try {
      MY_MOCK_LIST.addMore(''Hello'');
      System.assert(false, ''an exception was expected'');
    } catch (MyException myex) {
      System.assertEquals(
        expectedMessage,
        myex.getMessage(),
        ''the message reported by the exception is not correct''
      );
    }
  }

  private static void assertReturnedValue(String expectedValue) {
    System.assertEquals(
      expectedValue,
      MY_MOCK_LIST.get(1),
      ''the method did not returned the expected value''
    );
  }

  private static void assertReturnedValueForGet2(String expectedValue) {
    System.assertEquals(
      expectedValue,
      MY_MOCK_LIST.get2(2, ''Hello.''),
      ''the method did not returned the expected value''
    );
  }

  private class MyException extends Exception {
  }

  private class isOdd implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg instanceof Integer ? Math.mod((Integer) arg, 2) == 1 : false;
    }
  }

  private class isEven implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg instanceof Integer ? Math.mod((Integer) arg, 2) == 0 : false;
    }
  }
}','388164636.0','True','fflib_ApexMocksTest','46762','Active');
INSERT INTO "ApexClass" VALUES(62,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@isTest
public class fflib_ApexMocksUtilsTest {
  public static Schema.FieldSet findAnyFieldSet() {
    for (Schema.SObjectType objectType : Schema.getGlobalDescribe().values()) {
      for (
        Schema.FieldSet fs : objectType.getDescribe()
          .FieldSets.getMap()
          .values()
      ) {
        return fs;
      }
    }

    return null;
  }

  @isTest
  private static void makeRelationship_returnsObjectsWithRelationFieldSet() {
    //Given
    Account acc = new Account(
      Id = fflib_IDGenerator.generate(Account.SObjectType),
      Name = ''AccName'',
      NumberOfEmployees = 7
    );

    Contact contact1 = new Contact(
      Id = fflib_IDGenerator.generate(Contact.SObjectType),
      DoNotCall = true
    );

    Contact contact2 = new Contact(
      Id = fflib_IDGenerator.generate(Contact.SObjectType),
      DoNotCall = false
    );

    //When
    Account accWithRelationships = ((List<Account>) fflib_ApexMocksUtils.makeRelationship(
      List<Account>.class,
      new List<Account>{ acc },
      Contact.AccountId,
      new List<List<Contact>>{ new List<Contact>{ contact1, contact2 } }
    ))[0];

    //Then
    System.assertEquals(acc.Id, accWithRelationships.Id);
    System.assertEquals(acc.Name, accWithRelationships.Name);
    System.assertEquals(
      acc.NumberOfEmployees,
      accWithRelationships.NumberOfEmployees
    );

    //Assert relationship fields
    List<Contact> contacts = accWithRelationships.Contacts;
    System.assertNotEquals(null, contacts);
    System.assertEquals(2, contacts.size());

    System.assertEquals(contact1.Id, contacts[0].Id);
    System.assertEquals(contact1.DoNotCall, contacts[0].DoNotCall);

    System.assertEquals(contact2.Id, contacts[1].Id);
    System.assertEquals(contact2.DoNotCall, contacts[1].DoNotCall);
  }
}','1065979884.0','True','fflib_ApexMocksUtilsTest','1735','Active');
INSERT INTO "ApexClass" VALUES(63,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Class provides inner classes implementing factories for the main components
 * of the Apex Enterprise Patterns, Service, Unit Of Work, Selector and Domain.
 *   See the sample applications Application.cls file for an example
 **/
public class fflib_Application {
  /**
   * Class implements a Unit of Work factory
   **/
  public class UnitOfWorkFactory {
    private List<SObjectType> m_objectTypes;
    private fflib_ISObjectUnitOfWork m_mockUow;

    /**
     * Constructs a Unit Of Work factory
     *
     * @param objectTypes List of SObjectTypes in dependency order
     **/
    public UnitOfWorkFactory(List<SObjectType> objectTypes) {
      m_objectTypes = objectTypes.clone();
    }

    /**
     * Returns a new fflib_SObjectUnitOfWork configured with the
     *   SObjectType list provided in the constructor, returns a Mock implementation
     *   if set via the setMock method
     **/
    public fflib_ISObjectUnitOfWork newInstance() {
      // Mock?
      if (m_mockUow != null)
        return m_mockUow;
      return new fflib_SObjectUnitOfWork(m_objectTypes);
    }

    /**
     * Returns a new fflib_SObjectUnitOfWork configured with the
     *   SObjectType list specified, returns a Mock implementation
     *   if set via the setMock method
     *
     * @remark If mock is set, the list of SObjectType in the mock could be different
     *         then the list of SObjectType specified in this method call
     **/
    public fflib_ISObjectUnitOfWork newInstance(List<SObjectType> objectTypes) {
      // Mock?
      if (m_mockUow != null)
        return m_mockUow;
      return new fflib_SObjectUnitOfWork(objectTypes);
    }

    @TestVisible
    private void setMock(fflib_ISObjectUnitOfWork mockUow) {
      m_mockUow = mockUow;
    }
  }

  /**
   * Simple Service Factory implementaiton
   **/
  public class ServiceFactory {
    private Map<Type, Type> m_serviceInterfaceTypeByServiceImplType;

    private Map<Type, Object> m_serviceInterfaceTypeByMockService;

    /**
     * Constructs a simple Service Factory,
     *   using a Map of Apex Interfaces to Apex Classes implementing the interface
     *   Note that this will not check the Apex Classes given actually implement the interfaces
     *     as this information is not presently available via the Apex runtime
     *
     * @param serviceInterfaceTypeByServiceImplType Map ofi interfaces to classes
     **/
    public ServiceFactory(
      Map<Type, Type> serviceInterfaceTypeByServiceImplType
    ) {
      m_serviceInterfaceTypeByServiceImplType = serviceInterfaceTypeByServiceImplType;
      m_serviceInterfaceTypeByMockService = new Map<Type, Object>();
    }

    /**
     * Returns a new instance of the Apex class associated with the given Apex interface
     *   Will return any mock implementation of the interface provided via setMock
     *   Note that this method will not check the configured Apex class actually implements the interface
     *
     * @param serviceInterfaceType Apex interface type
     * @exception Is thrown if there is no registered Apex class for the interface type
     **/
    public Object newInstance(Type serviceInterfaceType) {
      // Mock implementation?
      if (m_serviceInterfaceTypeByMockService.containsKey(serviceInterfaceType))
        return m_serviceInterfaceTypeByMockService.get(serviceInterfaceType);

      // Create an instance of the type impleneting the given interface
      Type serviceImpl = m_serviceInterfaceTypeByServiceImplType.get(
        serviceInterfaceType
      );
      if (serviceImpl == null)
        throw new DeveloperException(
          ''No implementation registered for service interface '' +
          serviceInterfaceType.getName()
        );
      return serviceImpl.newInstance();
    }

    @TestVisible
    private void setMock(Type serviceInterfaceType, Object serviceImpl) {
      m_serviceInterfaceTypeByMockService.put(
        serviceInterfaceType,
        serviceImpl
      );
    }
  }

  /**
   * Class implements a Selector class factory
   **/
  public class SelectorFactory {
    private Map<SObjectType, Type> m_sObjectBySelectorType;
    private Map<SObjectType, fflib_ISObjectSelector> m_sObjectByMockSelector;

    /**
     * Consturcts a Selector Factory linking SObjectType''s with Apex Classes implement the fflib_ISObjectSelector interface
     *   Note that the factory does not chekc the given Apex Classes implement the interface
     *     currently this is not possible in Apex.
     *
     * @Param sObjectBySelectorType Map of SObjectType''s to Selector Apex Classes
     **/
    public SelectorFactory(Map<SObjectType, Type> sObjectBySelectorType) {
      m_sObjectBySelectorType = sObjectBySelectorType;
      m_sObjectByMockSelector = new Map<SObjectType, fflib_ISObjectSelector>();
    }

    /**
     * Creates a new instance of the associated Apex Class implementing fflib_ISObjectSelector
     *   for the given SObjectType, or if provided via setMock returns the Mock implementaton
     *
     * @param sObjectType An SObjectType token, e.g. Account.SObjectType
     **/
    public fflib_ISObjectSelector newInstance(SObjectType sObjectType) {
      // Mock implementation?
      if (m_sObjectByMockSelector.containsKey(sObjectType))
        return m_sObjectByMockSelector.get(sObjectType);

      // Determine Apex class for Selector class
      Type selectorClass = m_sObjectBySelectorType.get(sObjectType);
      if (selectorClass == null)
        throw new DeveloperException(
          ''Selector class not found for SObjectType '' + sObjectType
        );

      // Construct Selector class and query by Id for the records
      return (fflib_ISObjectSelector) selectorClass.newInstance();
    }

    /**
     * Helper method to query the given SObject records
     *   Internally creates an instance of the registered Selector and calls its
     *     selectSObjectById method
     *
     * @param recordIds The SObject record Ids, must be all the same SObjectType
     * @exception Is thrown if the record Ids are not all the same or the SObjectType is not registered
     **/
    public List<SObject> selectById(Set<Id> recordIds) {
      // No point creating an empty Domain class, nor can we determine the SObjectType anyway
      if (recordIds == null || recordIds.size() == 0)
        throw new DeveloperException(''Invalid record Id\''s set'');

      // Determine SObjectType
      SObjectType domainSObjectType = new List<Id>(recordIds)[0]
        .getSObjectType();
      for (Id recordId : recordIds)
        if (recordId.getSobjectType() != domainSObjectType)
          throw new DeveloperException(
            ''Unable to determine SObjectType, Set contains Id\''s from different SObject types''
          );

      // Construct Selector class and query by Id for the records
      return newInstance(domainSObjectType).selectSObjectsById(recordIds);
    }

    /**
     * Helper method to query related records to those provided, for example
     *   if passed a list of Opportunity records and the Account Id field will
     *   construct internally a list of Account Ids and call the registered
     *   Account selector to query the related Account records, e.g.
     *
     *     List<Account> accounts =
     *        (List<Account>) Applicaiton.Selector.selectByRelationship(myOpps, Opportunity.AccountId);
     *
     * @param relatedRecords used to extract the related record Ids, e.g. Opportunty records
     * @param relationshipField field in the passed records that contains the relationship records to query, e.g. Opportunity.AccountId
     **/
    public List<SObject> selectByRelationship(
      List<SObject> relatedRecords,
      SObjectField relationshipField
    ) {
      Set<Id> relatedIds = new Set<Id>();
      for (SObject relatedRecord : relatedRecords) {
        Id relatedId = (Id) relatedRecord.get(relationshipField);
        if (relatedId != null)
          relatedIds.add(relatedId);
      }
      return selectById(relatedIds);
    }

    @TestVisible
    private void setMock(fflib_ISObjectSelector selectorInstance) {
      m_sObjectByMockSelector.put(
        selectorInstance.sObjectType(),
        selectorInstance
      );
    }
  }

  /**
   * Class implements a Domain class factory
   **/
  public class DomainFactory {
    private fflib_Application.SelectorFactory m_selectorFactory;

    private Map<SObjectType, Type> m_sObjectByDomainConstructorType;

    private Map<SObjectType, fflib_ISObjectDomain> m_sObjectByMockDomain;

    /**
     * Consturcts a Domain factory, using an instance of the Selector Factory
     *   and a map of Apex classes implementing fflib_ISObjectDomain by SObjectType
     *   Note this will not check the Apex classes provided actually implement the interfaces
     *     since this is not possible in the Apex runtime at present
     *
     * @param selectorFactory, e.g. Application.Selector
     * @param sObjectByDomainConstructorType Map of Apex classes by SObjectType
     **/
    public DomainFactory(
      fflib_Application.SelectorFactory selectorFactory,
      Map<SObjectType, Type> sObjectByDomainConstructorType
    ) {
      m_selectorFactory = selectorFactory;
      m_sObjectByDomainConstructorType = sObjectByDomainConstructorType;
      m_sObjectByMockDomain = new Map<SObjectType, fflib_ISObjectDomain>();
    }

    /**
     * Dynamically constructs an instance of a Domain class for the given record Ids
     *   Internally uses the Selector Factory to query the records before passing to a
     *   dynamically constructed instance of the application Apex Domain class
     *
     * @param recordIds A list of Id''s of the same type
     * @exception Throws an exception via the Selector Factory if the Ids are not all of the same SObjectType
     **/
    public fflib_ISObjectDomain newInstance(Set<Id> recordIds) {
      return newInstance(m_selectorFactory.selectById(recordIds));
    }

    /**
     * Dynamically constructs an instace of the Domain class for the given records
     *   Will return a Mock implementation if one has been provided via setMock
     *
     * @param records A concreate list (e.g. List<Account> vs List<SObject>) of records
     * @exception Throws an exception if the SObjectType cannot be determined from the list
     *              or the constructor for Domain class was not registered for the SOBjectType
     **/
    public fflib_ISObjectDomain newInstance(List<SObject> records) {
      SObjectType domainSObjectType = records.getSObjectType();
      if (domainSObjectType == null)
        throw new DeveloperException(''Unable to determine SObjectType'');

      // Mock implementation?
      if (m_sObjectByMockDomain.containsKey(domainSObjectType))
        return m_sObjectByMockDomain.get(domainSObjectType);

      // Determine SObjectType and Apex classes for Domain class
      Type domainConstructorClass = m_sObjectByDomainConstructorType.get(
        domainSObjectType
      );
      if (domainConstructorClass == null)
        throw new DeveloperException(
          ''Domain constructor class not found for SObjectType '' +
          domainSObjectType
        );

      // Construct Domain class passing in the queried records
      fflib_SObjectDomain.IConstructable domainConstructor = (fflib_SObjectDomain.IConstructable) domainConstructorClass.newInstance();
      return (fflib_ISObjectDomain) domainConstructor.construct(records);
    }

    /**
     * Dynamically constructs an instace of the Domain class for the given records and SObjectType
     *   Will return a Mock implementation if one has been provided via setMock
     *
     * @param records A list records
     * @param domainSObjectType SObjectType for list of records
     * @exception Throws an exception if the SObjectType is not specified or if constructor for Domain class was not registered for the SObjectType
     *
     * @remark Will support List<SObject> but all records in the list will be assumed to be of
     *         the type specified in sObjectType
     **/
    public fflib_ISObjectDomain newInstance(
      List<SObject> records,
      SObjectType domainSObjectType
    ) {
      if (domainSObjectType == null)
        throw new DeveloperException(''Must specify sObjectType'');

      // Mock implementation?
      if (m_sObjectByMockDomain.containsKey(domainSObjectType))
        return m_sObjectByMockDomain.get(domainSObjectType);

      // Determine SObjectType and Apex classes for Domain class
      Type domainConstructorClass = m_sObjectByDomainConstructorType.get(
        domainSObjectType
      );
      if (domainConstructorClass == null)
        throw new DeveloperException(
          ''Domain constructor class not found for SObjectType '' +
          domainSObjectType
        );

      // Construct Domain class passing in the queried records
      fflib_SObjectDomain.IConstructable2 domainConstructor = (fflib_SObjectDomain.IConstructable2) domainConstructorClass.newInstance();
      return (fflib_ISObjectDomain) domainConstructor.construct(
        records,
        domainSObjectType
      );
    }

    @TestVisible
    private void setMock(fflib_ISObjectDomain mockDomain) {
      m_sObjectByMockDomain.put(mockDomain.sObjectType(), mockDomain);
    }
  }

  public class ApplicationException extends Exception {
  }

  /**
   * Exception representing a developer coding error, not intended for end user eyes
   **/
  public class DeveloperException extends Exception {
  }
}','2696191584.0','True','fflib_Application','6803','Active');
INSERT INTO "ApexClass" VALUES(64,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class fflib_ApexMocksUtils {
  /**
   * This is taken from https://gist.github.com/afawcett/8dbfc0e1d8c43c982881.
   *
   * This method works on the principle that serializing and deserialising child records is supported
   *
   *   System.assertEquals(1, ((List<Master__c>)
   *    JSON.deserialize(
   *	    JSON.serialize(
   *         [select Id, Name,
   *            (select Id, Name from Children__r) from Master__c]), List<Master__c>.class))
   *               [0].Children__r.size());
   *
   * This method results internally in constructing this JSON, before deserialising it back into SObject''s
   *
   *		[
   *		    {
   *		        "attributes": {
   *		            "type": "Master__c",
   *		            "url": "/services/data/v32.0/sobjects/Master__c/a0YG0000005Jn5uMAC"
   *		        },
   *		        "Name": "Fred",
   *		        "Id": "a0YG0000005Jn5uMAC",
   *		        "Children__r": {
   *		            "totalSize": 1,
   *		            "done": true,
   *		            "records": [
   *		                {
   *		                    "attributes": {
   *		                        "type": "Child__c",
   *		                        "url": "/services/data/v32.0/sobjects/Child__c/a0ZG0000006JGPAMA4"
   *		                    },
   *		                    "Name": "Bob",
   *		                    "Id": "a0ZG0000006JGPAMA4",
   *		                    "Master__c": "a0YG0000005Jn5uMAC"
   *		                }
   *		            ]
   *		        }
   * 		]
   */
  public static Object makeRelationship(
    Type parentsType,
    List<SObject> parents,
    SObjectField relationshipField,
    List<List<SObject>> children
  ) {
    // Find out more about this relationship...
    String relationshipFieldName = relationshipField.getDescribe().getName();
    DescribeSObjectResult parentDescribe = parents.getSObjectType()
      .getDescribe();
    List<Schema.ChildRelationship> childRelationships = parentDescribe.getChildRelationships();
    String relationshipName = null;
    for (Schema.ChildRelationship childRelationship : childRelationships) {
      if (childRelationship.getField() == relationshipField) {
        relationshipName = childRelationship.getRelationshipName();
        break;
      }
    }

    // Stream the parsed JSON representation of the parent objects back out, injecting children as it goes
    JSONParser parentsParser = JSON.createParser(JSON.serialize(parents));
    JSONParser childrenParser = JSON.createParser(JSON.serialize(children));
    JSONGenerator combinedOutput = JSON.createGenerator(false);
    streamTokens(
      parentsParser,
      combinedOutput,
      new InjectChildrenEventHandler(childrenParser, relationshipName, children)
    );

    // Derserialise back into SObject list complete with children
    return JSON.deserialize(combinedOutput.getAsString(), parentsType);
  }

  /**
   * Monitors stream events for end of object for each SObject contained in the parent list
   *   then injects the respective childs record list into the stream
   **/
  private class InjectChildrenEventHandler implements JSONParserEvents {
    private JSONParser childrenParser;
    private String relationshipName;
    private List<List<SObject>> children;
    private Integer childListIdx = 0;

    public InjectChildrenEventHandler(
      JSONParser childrenParser,
      String relationshipName,
      List<List<SObject>> children
    ) {
      this.childrenParser = childrenParser;
      this.relationshipName = relationshipName;
      this.children = children;
      this.childrenParser.nextToken(); // Consume the outer array token
    }

    public void nextToken(
      JSONParser fromStream,
      Integer depth,
      JSONGenerator toStream
    ) {
      // Inject children?
      JSONToken currentToken = fromStream.getCurrentToken();
      if (depth == 2 && currentToken == JSONToken.END_OBJECT) {
        toStream.writeFieldName(relationshipName);
        toStream.writeStartObject();
        toStream.writeNumberField(''totalSize'', children[childListIdx].size());
        toStream.writeBooleanField(''done'', true);
        toStream.writeFieldName(''records'');
        streamTokens(childrenParser, toStream, null);
        toStream.writeEndObject();
        childListIdx++;
      }
    }
  }

  /**
   * Utility function to stream tokens from a reader to a write, while providing a basic eventing model
   **/
  private static void streamTokens(
    JSONParser fromStream,
    JSONGenerator toStream,
    JSONParserEvents events
  ) {
    Integer depth = 0;
    while (fromStream.nextToken() != null) {
      // Give event handler chance to inject
      if (events != null)
        events.nextToken(fromStream, depth, toStream);
      // Forward to output stream
      JSONToken currentToken = fromStream.getCurrentToken();
      if (currentToken == JSONToken.START_ARRAY) {
        toStream.writeStartArray();
        depth++;
      } else if (currentToken == JSONToken.START_OBJECT) {
        toStream.writeStartObject();
        depth++;
      } else if (currentToken == JSONToken.FIELD_NAME)
        toStream.writeFieldName(fromStream.getCurrentName());
      else if (
        currentToken == JSONToken.VALUE_STRING ||
        currentToken == JSONToken.VALUE_FALSE ||
        currentToken == JSONToken.VALUE_TRUE ||
        currentToken == JSONToken.VALUE_NUMBER_FLOAT ||
        currentToken == JSONToken.VALUE_NUMBER_INT
      )
        toStream.writeString(fromStream.getText());
      else if (currentToken == JSONToken.END_OBJECT) {
        toStream.writeEndObject();
        depth--;
      } else if (currentToken == JSONToken.END_ARRAY) {
        toStream.writeEndArray();
        depth--;
      }
      // Don''t continue to stream beyond the initial starting point
      if (depth == 0)
        break;
    }
  }

  /**
   * Basic event used during the above streaming
   **/
  private interface JSONParserEvents {
    void nextToken(
      JSONParser fromStream,
      Integer depth,
      JSONGenerator toStream
    );
  }
}','4245324174.0','True','fflib_ApexMocksUtils','3773','Active');
INSERT INTO "ApexClass" VALUES(65,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class fflib_ApplicationTest {
  @IsTest
  private static void callingDomainFactoryShouldGiveRegisteredImplsAndMocks() {
    // Registered Accounts domain class by SObject List
    Id testAccountId = fflib_IDGenerator.generate(Account.SObjectType);
    fflib_ISObjectDomain domainObjectAcct = Domain.newInstance(
      new List<Account>{
        new Account(Id = testAccountId, Name = ''Test Account'')
      }
    );
    System.assert(domainObjectAcct instanceof AccountsDomain);
    System.assertEquals(testAccountId, domainObjectAcct.getRecords()[0].Id);

    // Registered Accounts domain class by SObject List
    testAccountId = fflib_IDGenerator.generate(Account.SObjectType);
    domainObjectAcct = Domain.newInstance(
      new List<SObject>{
        new Account(Id = testAccountId, Name = ''Test Account'')
      },
      Account.SObjectType
    );
    System.assert(domainObjectAcct instanceof AccountsDomain);
    System.assertEquals(testAccountId, domainObjectAcct.getRecords()[0].Id);

    // Registered Opportunities domain class by SObject List
    Id testOpportunityId = fflib_IDGenerator.generate(Opportunity.SObjectType);
    fflib_ISObjectDomain domainObjectOpp = Domain.newInstance(
      new List<Opportunity>{
        new Opportunity(Id = testOpportunityId, Name = ''Test Opportunity'')
      }
    );
    System.assertEquals(testOpportunityId, domainObjectOpp.getRecords()[0].Id);
    System.assert(domainObjectOpp instanceof OpportuntiesDomain);

    // Test failure for creating new instance using IConstructable2
    // for domain class that does not support it
    testOpportunityId = fflib_IDGenerator.generate(Opportunity.SObjectType);
    domainObjectOpp = Domain.newInstance(
      new List<SObject>{
        new Opportunity(Id = testOpportunityId, Name = ''Test Opportunity'')
      },
      Opportunity.SObjectType
    );
    System.assertEquals(testOpportunityId, domainObjectOpp.getRecords()[0].Id);
    System.assert(domainObjectOpp instanceof OpportuntiesDomain);

    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    mocks.startStubbing();
    fflib_ISObjectDomain domainMock = new fflib_SObjectMocks.SObjectDomain(
      mocks
    );
    mocks.when(domainMock.sObjectType()).thenReturn(Account.SObjectType);
    mocks.stopStubbing();
    Domain.setMock(domainMock);

    // When
    domainObjectAcct = Domain.newInstance(
      new List<Account>{
        new Account(Id = testAccountId, Name = ''Test Account'')
      }
    );

    // Then
    System.assert(domainObjectAcct instanceof fflib_SObjectMocks.SObjectDomain);

    // When
    domainObjectAcct = Domain.newInstance(
      new List<SObject>{
        new Account(Id = testAccountId, Name = ''Test Account'')
      },
      Account.SObjectType
    );

    // Then
    System.assert(domainObjectAcct instanceof fflib_SObjectMocks.SObjectDomain);
  }

  @IsTest
  private static void callingDomainFactoryWithIdsShouldGiveRegisteredImpls() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    mocks.startStubbing();
    fflib_ISObjectSelector selectorMock = new fflib_SObjectMocks.SObjectSelector(
      mocks
    );
    Id testAccountId = fflib_IDGenerator.generate(Account.SObjectType);
    List<Account> accounts = new List<Account>{
      new Account(Id = testAccountId, Name = ''Test Account'')
    };
    Set<Id> accountIds = new Map<Id, Account>(accounts).keySet();
    mocks.when(selectorMock.selectSObjectsById(accountIds))
      .thenReturn(accounts);
    mocks.when(selectorMock.sObjectType()).thenReturn(Account.SObjectType);
    mocks.stopStubbing();

    // When
    Selector.setMock(selectorMock);
    fflib_ISObjectDomain domainObjectAcc = Domain.newInstance(
      new Set<Id>{ testAccountId }
    );

    // Then
    List<Account> assertAccounts = (List<Account>) domainObjectAcc.getRecords();
    System.assert(domainObjectAcc instanceof AccountsDomain);
    System.assertEquals(testAccountId, domainObjectAcc.getRecords()[0].Id);
    System.assertEquals(1, assertAccounts.size());
    System.assertEquals(testAccountId, assertAccounts[0].Id);
    System.assertEquals(''Test Account'', assertAccounts[0].Name);
  }

  @IsTest
  private static void callingDomainFactoryWithGenericListShouldGiveException() {
    try {
      Domain.newInstance(new List<SObject>());
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(''Unable to determine SObjectType'', e.getMessage());
    }
  }

  @IsTest
  private static void callingDomainFactoryWithNoSObjectTypeShouldGiveException() {
    try {
      Domain.newInstance(new List<SObject>(), null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(''Must specify sObjectType'', e.getMessage());
    }
  }

  @IsTest
  private static void callingDomainFactoryWithInAccessableConstructorShouldGiveException() {
    try {
      Domain.newInstance(
        new List<Product2>{ new Product2(Name = ''Test Product'') }
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(
        ''Domain constructor class not found for SObjectType Product2'',
        e.getMessage()
      );
    }

    try {
      Domain.newInstance(
        new List<SObject>{ new Product2(Name = ''Test Product'') },
        Product2.SObjectType
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(
        ''Domain constructor class not found for SObjectType Product2'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void callingDomainFactoryWithContructorClassThatDoesNotSupportIConstructableShouldGiveException() {
    try {
      Domain.newInstance(
        new List<Contact>{ new Contact(LastName = ''TestContactLName'') }
      );
      System.assert(false, ''Expected exception'');
    } catch (System.TypeException e) {
      System.assert(
        Pattern.Matches(
          ''Invalid conversion from runtime type \\w*\\.?fflib_ApplicationTest\\.ContactsConstructor to \\w*\\.?fflib_SObjectDomain\\.IConstructable'',
          e.getMessage()
        ),
        ''Exception message did not match the expected pattern: '' +
        e.getMessage()
      );
    }

    try {
      Domain.newInstance(
        new List<SObject>{ new Contact(LastName = ''TestContactLName'') },
        Contact.SObjectType
      );
      System.assert(false, ''Expected exception'');
    } catch (System.TypeException e) {
      System.assert(
        Pattern.Matches(
          ''Invalid conversion from runtime type \\w*\\.?fflib_ApplicationTest\\.ContactsConstructor to \\w*\\.?fflib_SObjectDomain\\.IConstructable2'',
          e.getMessage()
        ),
        ''Exception message did not match the expected pattern: '' +
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void callingUnitOfWorkFactoryShouldGivenStandardImplsAndMockImpls() {
    // Standard behaviour
    System.assert(UnitOfWork.newInstance() instanceof fflib_SObjectUnitOfWork);

    // Mocking behaviour
    UnitOfWork.setMock(
      new fflib_SObjectMocks.SObjectUnitOfWork(new fflib_ApexMocks())
    );
    System.assert(
      UnitOfWork.newInstance() instanceof fflib_SObjectMocks.SObjectUnitOfWork
    );
  }

  @IsTest
  private static void callingServiceFactoryShouldGiveRegisteredImplsAndMockImpls() {
    // Standard behaviour
    System.assert(
      Service.newInstance(IAccountService.class) instanceof AccountsServiceImpl
    );
    System.assert(
      Service.newInstance(
        IOpportunitiesService.class
      ) instanceof OpportunitiesServiceImpl
    );
    try {
      Service.newInstance(IContactService.class);
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(
        ''No implementation registered for service interface '' +
        IContactService.class.getName(),
        e.getMessage()
      );
    }

    // Mocking behaviour
    Service.setMock(IAccountService.class, new AccountsServiceMock());
    System.assert(
      Service.newInstance(
        IOpportunitiesService.class
      ) instanceof OpportunitiesServiceImpl
    );
    System.assert(
      Service.newInstance(IAccountService.class) instanceof AccountsServiceMock
    );
  }

  @IsTest
  private static void callingSelectorFactoryShouldGiveRegisteredImpls() {
    // Standard behaviour
    System.assert(
      Selector.newInstance(Account.SObjectType) instanceof AccountsSelector
    );
    System.assert(
      Selector.newInstance(
        Opportunity.SObjectType
      ) instanceof OpportuntiesSelector
    );
    try {
      Selector.newInstance(User.SObjectType);
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(
        ''Selector class not found for SObjectType User'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void callingSelectorFactorySelectByIdWithEmptyListShouldGiveException() {
    try {
      Selector.selectById(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(''Invalid record Id\''s set'', e.getMessage());
    }
    try {
      Selector.selectById(new Set<Id>());
      System.assert(false, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(''Invalid record Id\''s set'', e.getMessage());
    }
  }

  @IsTest
  private static void callingSelectorFactorySelectByIdWithMixedIdTypeListShouldGiveException() {
    try {
      Selector.selectById(
        new Set<Id>{
          fflib_IDGenerator.generate(Opportunity.SObjectType),
          fflib_IDGenerator.generate(Account.SObjectType)
        }
      );
      System.assert(true, ''Expected exception'');
    } catch (fflib_Application.DeveloperException e) {
      System.assertEquals(
        ''Unable to determine SObjectType, Set contains Id\''s from different SObject types'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void callingSelectoryFactorySelectByIdShouldReturnResults() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    mocks.startStubbing();
    fflib_ISObjectSelector selectorMock = new fflib_SObjectMocks.SObjectSelector(
      mocks
    );
    Id testAccountId = fflib_IDGenerator.generate(Account.SObjectType);
    List<Account> accounts = new List<Account>{
      new Account(Id = testAccountId, Name = ''Test Account'')
    };
    Set<Id> accountIds = new Map<Id, Account>(accounts).keySet();
    mocks.when(selectorMock.selectSObjectsById(accountIds))
      .thenReturn(accounts);
    mocks.when(selectorMock.sObjectType()).thenReturn(Account.SObjectType);
    mocks.stopStubbing();

    // When
    Selector.setMock(selectorMock);
    List<Account> assertAccounts = Selector.selectById(accountIds);

    // Then
    System.assert(
      Selector.newInstance(
        Account.SObjectType
      ) instanceof fflib_SObjectMocks.SObjectSelector
    );
    System.assertEquals(1, assertAccounts.size());
    System.assertEquals(testAccountId, assertAccounts[0].Id);
    System.assertEquals(''Test Account'', assertAccounts[0].Name);
    System.assert(
      Selector.newInstance(
        Opportunity.SObjectType
      ) instanceof OpportuntiesSelector
    );
  }

  @IsTest
  private static void callingSelectoryFactorySselectByRelationshipPassRelatedIds() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    mocks.startStubbing();
    fflib_ISObjectSelector selectorMock = new fflib_SObjectMocks.SObjectSelector(
      mocks
    );
    Id testAccountId = fflib_IDGenerator.generate(Account.SObjectType);
    Id testOpportunityId = fflib_IDGenerator.generate(Opportunity.SObjectType);
    List<Account> accounts = new List<Account>{
      new Account(Id = testAccountId, Name = ''Test Account'')
    };
    Set<Id> accountIds = new Map<Id, Account>(accounts).keySet();
    mocks.when(selectorMock.selectSObjectsById(accountIds))
      .thenReturn(accounts);
    mocks.when(selectorMock.sObjectType()).thenReturn(Account.SObjectType);
    mocks.stopStubbing();
    Selector.setMock(selectorMock);

    // When
    List<Opportunity> opportunties = new List<Opportunity>{
      new Opportunity(
        Id = testOpportunityId,
        Account = accounts[0],
        AccountId = testAccountId,
        Name = ''Test Opportunity 1''
      ),
      new Opportunity(Id = testOpportunityId, Name = ''Test Opportunity 2'')
    };
    List<Account> assertAccounts = Selector.selectByRelationship(
      opportunties,
      Opportunity.AccountId
    );

    // Then
    System.assert(
      Selector.newInstance(
        Account.SObjectType
      ) instanceof fflib_SObjectMocks.SObjectSelector
    );
    System.assertEquals(1, assertAccounts.size());
    System.assertEquals(testAccountId, assertAccounts[0].Id);
    System.assertEquals(''Test Account'', assertAccounts[0].Name);
    System.assert(
      Selector.newInstance(
        Opportunity.SObjectType
      ) instanceof OpportuntiesSelector
    );
  }

  // Configure and create the ServiceFactory for this Application
  public static final fflib_Application.ServiceFactory Service = new fflib_Application.ServiceFactory(
    new Map<Type, Type>{
      IOpportunitiesService.class => OpportunitiesServiceImpl.class,
      IAccountService.class => AccountsServiceImpl.class
    }
  );

  // Configure and create the UnitOfWorkFactory for this Application
  public static final fflib_Application.UnitOfWorkFactory UnitOfWork = new fflib_Application.UnitOfWorkFactory(
    new List<SObjectType>{
      Account.SObjectType,
      Opportunity.SObjectType,
      OpportunityLineItem.SObjectType
    }
  );

  // Configure and create the SelectorFactory for this Application
  public static final fflib_Application.SelectorFactory Selector = new fflib_Application.SelectorFactory(
    new Map<SObjectType, Type>{
      Account.SObjectType => AccountsSelector.class,
      Opportunity.SObjectType => OpportuntiesSelector.class
    }
  );

  // Configure and create the DomainFactory for this Application
  public static final fflib_Application.DomainFactory Domain = new fflib_Application.DomainFactory(
    fflib_ApplicationTest.Selector,
    new Map<SObjectType, Type>{
      Account.SObjectType => AccountsConstructor.class,
      Opportunity.SObjectType => OpportuntiesConstructor.class,
      Contact.SObjectType => ContactsConstructor.class
    }
  );

  public class AccountsDomain extends fflib_SObjectDomain {
    public AccountsDomain(List<Account> sObjectList) {
      super(sObjectList);
    }

    public AccountsDomain(List<SObject> sObjectList, SObjectType sObjectType) {
      super(sObjectList, sObjectType);
    }
  }

  public class AccountsConstructor implements fflib_SObjectDomain.IConstructable2 {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new AccountsDomain(sObjectList);
    }

    public fflib_SObjectDomain construct(
      List<SObject> sObjectList,
      SObjectType sObjectType
    ) {
      return new AccountsDomain(sObjectList, sObjectType);
    }
  }

  public class OpportuntiesDomain extends fflib_SObjectDomain {
    public OpportuntiesDomain(List<Opportunity> sObjectList) {
      super(sObjectList);
    }

    public OpportuntiesDomain(
      List<SObject> sObjectList,
      SObjectType sObjectType
    ) {
      super(sObjectList, sObjectType);
    }
  }

  public class OpportuntiesConstructor implements fflib_SObjectDomain.IConstructable2 {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new OpportuntiesDomain(sObjectList);
    }

    public fflib_SObjectDomain construct(
      List<SObject> sObjectList,
      SObjectType sObjectType
    ) {
      return new OpportuntiesDomain(sObjectList, sObjectType);
    }
  }

  public class ContactsDomain extends fflib_SObjectDomain {
    public ContactsDomain(List<Opportunity> sObjectList) {
      super(sObjectList);
    }

    public ContactsDomain(List<SObject> sObjectList, SObjectType sObjectType) {
      super(sObjectList, sObjectType);
    }
  }

  // Intentionally does not support IConstructable or IConstructable2 interfaces in order to support testing
  public class ContactsConstructor {
  }

  class OpportuntiesSelector extends fflib_SObjectSelector {
    public List<Schema.SObjectField> getSObjectFieldList() {
      return new List<Schema.SObjectField>{ Opportunity.Name, Opportunity.Id };
    }

    public Schema.SObjectType getSObjectType() {
      return Opportunity.sObjectType;
    }
  }

  class AccountsSelector extends fflib_SObjectSelector {
    public List<Schema.SObjectField> getSObjectFieldList() {
      return new List<Schema.SObjectField>{
        Account.Name,
        Account.Id,
        Account.AccountNumber,
        Account.AnnualRevenue
      };
    }

    public Schema.SObjectType getSObjectType() {
      return Account.sObjectType;
    }
  }

  public interface IContactService {
  }

  public interface IOpportunitiesService {
  }

  public interface IAccountService {
  }

  public class OpportunitiesServiceImpl implements IOpportunitiesService {
  }

  public class AccountsServiceImpl implements IAccountService {
  }

  public class AccountsServiceMock implements IAccountService {
  }
}','1082222761.0','True','fflib_ApplicationTest','16449','Active');
INSERT INTO "ApexClass" VALUES(66,'57.0','/*
 * Copyright (c) 2016, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * 	This class implements the capturing framework for ApexMocks
 *	According to Mockito''s syntax the type is passed in the capturer construction,
 *	however Apex cannot perform the auto casting that Java can.
 *	To be consistent with Mockito, the capturer does not perform any checks on the type of the argument.
 * 	@group Core
 */
public with sharing class fflib_ArgumentCaptor {
  protected List<Object> argumentsCaptured = new List<Object>();

  /**
   *	Factory method to create a new fflib_ArgumentCaptor.
   * 	Takes the captured argument''s Type for consistency with Mockito syntax.
   * 	The Type is IGNORED because we can''t determine an object instance''s Type at runtime unlike in Java.
   *	Rigorous type checking may be introduced in a future release, so you should specify the expected argument type correctly.
   *
   * 	@param 	ignoredCaptureType Type (class) of the captured argument
   * 	@return A new fflib_ArgumentCaptor.
   */
  public static fflib_ArgumentCaptor forClass(Type ignoredCaptureType) {
    return new fflib_ArgumentCaptor();
  }

  /**
   *	Use it to capture the argument. This method must be used inside verification.
   *	Internally, this method registers a special implementation of a Matcher.
   * 	This argument matcher stores the argument value so that you can use it later to perform assertions.
   *
   * 	@return a special matcher that matches any argument and remembers the value.
   */
  public Object capture() {
    AnyObject myMatcher = new AnyObject(this);

    return fflib_Match.matches(myMatcher);
  }

  /**
   *	Returns the captured value of the argument. When capturing all arguments use getAllValues().
   *	If verified method was called multiple times then this method returns the latest captured value.
   *
   * 	@return	captured argument value.
   */
  public Object getValue() {
    if (argumentsCaptured == null || argumentsCaptured.size() == 0) {
      return null;
    }

    //returns the last argument called
    return argumentsCaptured.get(argumentsCaptured.size() - 1);
  }

  /**
   *	Returns all captured values. Use it when capturing multiple arguments or when the verified method was called multiple times.
   *	When capturing multiple arguments is called multiple times, this method returns a merged list of all values from all invocations.
   *
   * 	@return	Returns all captured values. Use it when capturing multiple arguments on the same call or when the verified method was called multiple times.
   */
  public List<Object> getAllValues() {
    return argumentsCaptured;
  }

  public class AnyObject implements fflib_IMatcher {
    private fflib_ArgumentCaptor captor;
    private Object value;

    public AnyObject(fflib_ArgumentCaptor captor) {
      this.captor = captor;
    }

    //match with all the possible values and store the arg value
    public Boolean matches(Object arg) {
      value = arg;
      return true;
    }

    //store the argument in the list ( this would be called inside the method counter where is compared with the matchers of the method)
    public void storeArgument() {
      captor.argumentsCaptured.add(value);
    }
  }
}','430052176.0','True','fflib_ArgumentCaptor','997','Active');
INSERT INTO "ApexClass" VALUES(67,'57.0','/*
 * Copyright (c) 2016-2017 FinancialForce.com, inc.  All rights reserved.
 */
/**
 * @nodoc
 */
@isTest
private class fflib_ArgumentCaptorTest {
  @isTest
  static void thatArgumentValueIsCaptured() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);
    ((fflib_MyList.IList) mocks.verify(mockList))
      .add((String) argument.capture());

    System.assertEquals(
      ''Fred'',
      (String) argument.getValue(),
      ''the argument captured is not as expected''
    );
  }

  @isTest
  static void thatCanPerformFurtherAssertionsOnCapturedArgumentValue() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    //When
    TestInnerClass testValue = new TestInnerClass();
    testValue.i = 4;
    testValue.s = ''5'';

    mockList.set(1, testValue);

    //Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(
      TestInnerClass.class
    );

    ((fflib_MyList.IList) mocks.verify(mockList))
      .set(fflib_Match.anyInteger(), argument.capture());

    Object capturedArg = argument.getValue();
    System.assertNotEquals(null, capturedArg, ''CapturedArg should not be null'');

    System.assert(
      capturedArg instanceof TestInnerClass,
      ''CapturedArg should be SObject, instead was '' + capturedArg
    );

    TestInnerClass testValueCaptured = (TestInnerClass) capturedArg;

    System.assertEquals(
      4,
      testValueCaptured.i,
      ''the values inside the argument captured should be the same of the original one''
    );
    System.assertEquals(
      ''5'',
      testValueCaptured.s,
      ''the values inside the argument captured should be the same of the original one''
    );
  }

  @isTest
  static void thatCaptureArgumentOnlyFromVerifiedMethod() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'');
    //the next call should be ignored because is not the method that has under verify,
    //even if have the same type specified in the capturer.
    mockList.addMore(''Barney'');

    // Then

    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);
    ((fflib_MyList.IList) mocks.verify(mockList))
      .add((String) argument.capture());

    System.assertEquals(
      ''Fred'',
      (String) argument.getValue(),
      ''the argument captured is not as expected''
    );
    System.assertEquals(
      1,
      argument.getAllValues().size(),
      ''the argument captured should be only one''
    );
  }

  @isTest
  static void thatCaptureAllArgumentsForTheVerifiedMethods() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    List<String> stringList = new List<String>{ ''3'' };
    // When
    mockList.add(''Fred'');
    mockList.add(stringList);

    mockList.clear();

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add((String) argument.capture());
    ((fflib_MyList.IList) mocks.verify(mockList))
      .add((List<String>) argument.capture());

    System.assertEquals(
      stringList,
      (List<String>) argument.getValue(),
      ''the argument captured is not as expected''
    );

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      2,
      argsCaptured.size(),
      ''expected 2 argument to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
  }

  @isTest
  static void thatCaptureArgumentFromRequestedParameter() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'', ''Barney'', ''Wilma'', ''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        (String) fflib_Match.eq(''Fred''),
        (String) fflib_Match.eq(''Barney''),
        (String) argument.capture(),
        (String) fflib_Match.eq(''Betty'')
      );

    System.assertEquals(
      ''Wilma'',
      (String) argument.getValue(),
      ''the argument captured is not as expected, should be Wilma because is the 3rd parameter in the call''
    );
  }

  @isTest
  static void thatCaptureLastArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Barney'');
    mockList.add(''Fred'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add((String) argument.capture());

    System.assertEquals(
      ''Fred'',
      (String) argument.getValue(),
      ''the argument captured is not as expected''
    );
  }

  @isTest
  static void thatCaptureAllArguments() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'');
    mockList.add(''Barney'');
    mockList.add(''Wilma'');
    mockList.add(''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList, 4))
      .add((String) argument.capture());

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      4,
      argsCaptured.size(),
      ''expected 4 argument to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );
    System.assertEquals(
      ''Wilma'',
      (String) argsCaptured[2],
      ''the third value is not as expected''
    );
    System.assertEquals(
      ''Betty'',
      (String) argsCaptured[3],
      ''the forth value is not as expected''
    );
  }

  @isTest
  static void thatCaptureAllArgumentsFromMultipleMethods() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'');
    mockList.add(''Barney'');
    mockList.get2(3, ''pebble'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList, 2))
      .add((String) argument.capture());

    ((fflib_MyList.IList) mocks.verify(mockList))
      .get2((Integer) fflib_Match.eq(3), (String) argument.capture());

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      3,
      argsCaptured.size(),
      ''expected 3 argument to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );

    System.assertEquals(
      ''pebble'',
      (String) argsCaptured[2],
      ''the third value is not as expected''
    );
  }

  @isTest
  static void thatCanHandleMultipleCapturesInOneMethodCall() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'', ''Barney'', ''Wilma'', ''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        (String) fflib_Match.eq(''Fred''),
        (String) argument.capture(),
        (String) argument.capture(),
        (String) fflib_Match.eq(''Betty'')
      );

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      2,
      argsCaptured.size(),
      ''expected 2 argument to be captured''
    );

    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );

    System.assertEquals(
      ''Wilma'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );
  }

  @isTest
  static void thatDoesNotCaptureIfNotVerified() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''3'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(
      List<String>.class
    );

    ((fflib_MyList.IList) mocks.verify(mockList, fflib_ApexMocks.NEVER))
      .add((List<String>) argument.capture());

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      0,
      argsCaptured.size(),
      ''expected 0 argument to be captured''
    );

    System.assertEquals(
      null,
      argument.getValue(),
      ''no value should be captured, so must return null''
    );
  }

  @isTest
  static void thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWell() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Same'', ''Same'', ''First call'', ''First call'');
    mockList.add(''Same'', ''Same'', ''Second call'', ''Second call'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        fflib_Match.eqString(''Same''),
        fflib_Match.eqString(''Same''),
        (String) argument.capture(),
        fflib_Match.eqString(''First call'')
      );

    System.assertEquals(''First call'', (String) argument.getValue());
  }

  @isTest
  static void thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcher() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Same'', ''Same'', ''First call'', ''First call'');
    mockList.add(''Same'', ''Same'', ''Second call'', ''Second call'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList))
      .add(
        (String) fflib_Match.allOf(
          fflib_Match.eqString(''Same''),
          fflib_Match.eqString(''Same''),
          argument.capture()
        ),
        (String) fflib_Match.allOf(
          fflib_Match.eqString(''Same''),
          fflib_Match.eqString(''Same''),
          argument.capture()
        ),
        (String) fflib_Match.allOf(
          argument.capture(),
          fflib_Match.eqString(''First call'')
        ),
        (String) fflib_Match.allOf(
          argument.capture(),
          fflib_Match.eqString(''First call'')
        )
      );

    List<Object> capturedValues = argument.getAllValues();

    System.assertEquals(
      0,
      capturedValues.size(),
      ''nothing should have been capture because the matcher it not really a capture type, but a allOf()''
    );
    System.assertEquals(
      null,
      (String) argument.getValue(),
      ''nothing should have been capture because the matcher it not really a capture type, but a allOf()''
    );
  }

  @isTest
  static void thatArgumentValueIsCapturedWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Fred'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add((String) argument.capture());

    System.assertEquals(
      ''Fred'',
      (String) argument.getValue(),
      ''the argument captured is not as expected''
    );
  }

  @isTest
  static void thatCanPerformFurtherAssertionsOnCapturedArgumentValueWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    //When
    TestInnerClass testValue = new TestInnerClass();
    testValue.i = 4;
    testValue.s = ''5'';

    mockList.set(1, testValue);

    //Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(
      TestInnerClass.class
    );

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .set(fflib_Match.anyInteger(), argument.capture());

    Object capturedArg = argument.getValue();
    System.assertNotEquals(null, capturedArg, ''CapturedArg should not be null'');

    System.assert(
      capturedArg instanceof TestInnerClass,
      ''CapturedArg should be SObject, instead was '' + capturedArg
    );

    TestInnerClass testValueCaptured = (TestInnerClass) capturedArg;

    System.assertEquals(
      4,
      testValueCaptured.i,
      ''the values inside the argument captured should be the same of the original one''
    );
    System.assertEquals(
      ''5'',
      testValueCaptured.s,
      ''the values inside the argument captured should be the same of the original one''
    );
  }

  @isTest
  static void thatCaptureArgumentOnlyFromVerifiedMethodWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Fred'');
    //the next call should be ignored because is not the method that has under verify,
    //even if have the same type specified in the capturer.
    mockList.addMore(''Barney'');

    // Then

    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);
    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add((String) argument.capture());

    System.assertEquals(
      ''Fred'',
      (String) argument.getValue(),
      ''the argument captured is not as expected''
    );
    System.assertEquals(
      1,
      argument.getAllValues().size(),
      ''the argument captured should be only one''
    );
  }

  @isTest
  static void thatCaptureAllArgumentsForTheVerifiedMethodsWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    List<String> stringList = new List<String>{ ''3'' };
    // When
    mockList.add(''Fred'');
    mockList.add(stringList);

    mockList.clear();

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add((String) argument.capture());
    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add((List<String>) argument.capture());

    System.assertEquals(
      stringList,
      (List<String>) argument.getValue(),
      ''the argument captured is not as expected''
    );

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      2,
      argsCaptured.size(),
      ''expected 2 argument to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
  }

  @isTest
  static void thatCaptureArgumentFromRequestedParameterWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Fred'', ''Barney'', ''Wilma'', ''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add(
        (String) fflib_Match.eq(''Fred''),
        (String) fflib_Match.eq(''Barney''),
        (String) argument.capture(),
        (String) fflib_Match.eq(''Betty'')
      );

    System.assertEquals(
      ''Wilma'',
      (String) argument.getValue(),
      ''the argument captured is not as expected, should be Wilma because is the 3rd parameter in the call''
    );
  }

  @isTest
  static void thatCaptureLastArgumentWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Barney'');
    mockList.add(''Fred'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(2)))
      .add((String) argument.capture());

    System.assertEquals(
      ''Fred'',
      (String) argument.getValue(),
      ''the argument captured is not as expected''
    );
  }

  @isTest
  static void thatCaptureAllArgumentsWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Fred'');
    mockList.add(''Barney'');
    mockList.add(''Wilma'');
    mockList.add(''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(4)))
      .add((String) argument.capture());

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      4,
      argsCaptured.size(),
      ''expected 4 argument to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );
    System.assertEquals(
      ''Wilma'',
      (String) argsCaptured[2],
      ''the third value is not as expected''
    );
    System.assertEquals(
      ''Betty'',
      (String) argsCaptured[3],
      ''the forth value is not as expected''
    );
  }

  @isTest
  static void thatCaptureAllArgumentsFromMultipleMethodsWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Fred'');
    mockList.add(''Barney'');
    mockList.get2(3, ''pebble'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(2)))
      .add((String) argument.capture());

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .get2((Integer) fflib_Match.eq(3), (String) argument.capture());

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      3,
      argsCaptured.size(),
      ''expected 3 argument to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );

    System.assertEquals(
      ''pebble'',
      (String) argsCaptured[2],
      ''the third value is not as expected''
    );
  }

  @isTest
  static void thatCanHandleMultipleCapturesInOneMethodCallWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Fred'', ''Barney'', ''Wilma'', ''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add(
        (String) fflib_Match.eq(''Fred''),
        (String) argument.capture(),
        (String) argument.capture(),
        (String) fflib_Match.eq(''Betty'')
      );

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      2,
      argsCaptured.size(),
      ''expected 2 argument to be captured''
    );

    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );

    System.assertEquals(
      ''Wilma'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );
  }

  @isTest
  static void thatDoesNotCaptureIfNotVerifiedWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''3'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(
      List<String>.class
    );

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.never()))
      .add((List<String>) argument.capture());

    List<Object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      0,
      argsCaptured.size(),
      ''expected 0 argument to be captured''
    );

    System.assertEquals(
      null,
      argument.getValue(),
      ''no value should be captured, so must return null''
    );
  }

  @isTest
  static void thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWellWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Same'', ''Same'', ''First call'', ''First call'');
    mockList.add(''Same'', ''Same'', ''Second call'', ''Second call'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add(
        fflib_Match.eqString(''Same''),
        fflib_Match.eqString(''Same''),
        (String) argument.capture(),
        fflib_Match.eqString(''First call'')
      );

    System.assertEquals(''First call'', (String) argument.getValue());
  }

  @isTest
  static void thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcherWithInOrderVerification() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      mocks,
      new List<Object>{ mockList }
    );

    // When
    mockList.add(''Same'', ''Same'', ''First call'', ''First call'');
    mockList.add(''Same'', ''Same'', ''Second call'', ''Second call'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(mockList, mocks.calls(1)))
      .add(
        (String) fflib_Match.allOf(
          fflib_Match.eqString(''Same''),
          fflib_Match.eqString(''Same''),
          argument.capture()
        ),
        (String) fflib_Match.allOf(
          fflib_Match.eqString(''Same''),
          fflib_Match.eqString(''Same''),
          argument.capture()
        ),
        (String) fflib_Match.allOf(
          argument.capture(),
          fflib_Match.eqString(''First call'')
        ),
        (String) fflib_Match.allOf(
          argument.capture(),
          fflib_Match.eqString(''First call'')
        )
      );

    List<Object> capturedValues = argument.getAllValues();

    System.assertEquals(
      0,
      capturedValues.size(),
      ''nothing should have been capture because the matcher it not really a capture type, but a allOf()''
    );
    System.assertEquals(
      null,
      (String) argument.getValue(),
      ''nothing should have been capture because the matcher it not really a capture type, but a allOf()''
    );
  }

  @isTest
  static void thatCaptureAllArgumentswhenMethodIsCalledWithTheSameArgument() {
    // Given
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_MyList mockList = (fflib_MyList) mocks.mock(fflib_MyList.class);

    // When
    mockList.add(''Fred'');
    mockList.add(''Barney'');
    mockList.add(''Wilma'');
    mockList.add(''Barney'');
    mockList.add(''Barney'');
    mockList.add(''Betty'');

    // Then
    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) mocks.verify(mockList, 6))
      .add((String) argument.capture());

    List<object> argsCaptured = argument.getAllValues();

    System.assertEquals(
      6,
      argsCaptured.size(),
      ''expected 6 arguments to be captured''
    );

    System.assertEquals(
      ''Fred'',
      (String) argsCaptured[0],
      ''the first value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[1],
      ''the second value is not as expected''
    );
    System.assertEquals(
      ''Wilma'',
      (String) argsCaptured[2],
      ''the third value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[3],
      ''the fourth value is not as expected''
    );
    System.assertEquals(
      ''Barney'',
      (String) argsCaptured[4],
      ''the fifth value is not as expected''
    );
    System.assertEquals(
      ''Betty'',
      (String) argsCaptured[5],
      ''the sixth value is not as expected''
    );
  }

  private class TestInnerClass {
    public Integer i;
    public String s;
  }
}','3001082603.0','True','fflib_ArgumentCaptorTest','25071','Active');
INSERT INTO "ApexClass" VALUES(68,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public with sharing class fflib_IDGenerator {
  private static Integer fakeIdCount = 0;
  private static final String ID_PATTERN = ''000000000000'';

  /**
   * Generate a fake Salesforce Id for the given SObjectType
   */
  public static Id generate(Schema.SObjectType sobjectType) {
    String keyPrefix = sobjectType.getDescribe().getKeyPrefix();
    fakeIdCount++;

    String fakeIdPrefix = ID_PATTERN.substring(
      0,
      12 - fakeIdCount.format().length()
    );

    return Id.valueOf(keyPrefix + fakeIdPrefix + fakeIdCount);
  }
}','6058614.0','True','fflib_IDGenerator','467','Active');
INSERT INTO "ApexClass" VALUES(69,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@isTest
private class fflib_IDGeneratorTest {
  @isTest
  static void itShouldGenerateValidIDs() {
    String id1 = fflib_IDGenerator.generate(Account.SObjectType);
    String id2 = fflib_IDGenerator.generate(Account.SObjectType);
    String id3 = fflib_IDGenerator.generate(Account.SObjectType);
    String id4 = fflib_IDGenerator.generate(Account.SObjectType);
    String id5 = fflib_IDGenerator.generate(Account.SObjectType);
    String id6 = fflib_IDGenerator.generate(Account.SObjectType);
    String id7 = fflib_IDGenerator.generate(Account.SObjectType);
    String id8 = fflib_IDGenerator.generate(Account.SObjectType);
    String id9 = fflib_IDGenerator.generate(Account.SObjectType);
    String id10 = fflib_IDGenerator.generate(Account.SObjectType);
    String id11 = fflib_IDGenerator.generate(Account.SObjectType);

    System.assertEquals(''001000000000001AAA'', id1);
    System.assertEquals(''001000000000002AAA'', id2);
    System.assertEquals(''001000000000003AAA'', id3);
    System.assertEquals(''001000000000004AAA'', id4);
    System.assertEquals(''001000000000005AAA'', id5);
    System.assertEquals(''001000000000006AAA'', id6);
    System.assertEquals(''001000000000007AAA'', id7);
    System.assertEquals(''001000000000008AAA'', id8);
    System.assertEquals(''001000000000009AAA'', id9);
    System.assertEquals(''001000000000010AAA'', id10);
    System.assertEquals(''001000000000011AAA'', id11);
  }
}','2596393956.0','True','fflib_IDGeneratorTest','1407','Active');
INSERT INTO "ApexClass" VALUES(70,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public interface fflib_IMatcher {
  /**
   * Whether or not the supplied argument is a match.
   * Any supplementary information (e.g. boundary conditions, objects to match to etc)
   * should be cached by the matcher constructor.
   * @param arg The argument value supplied to the method
   * @return Boolean True if the argument value is a match, false otherwise.
   */
  Boolean matches(Object arg);
}','997763998.0','True','fflib_IMatcher','67','Active');
INSERT INTO "ApexClass" VALUES(71,'57.0','/*
 * FinancialForce.com, inc. claims copyright in this software, its screen
 * display designs and supporting documentation. FinancialForce and
 * FinancialForce.com are trademarks of FinancialForce.com, inc. Any
 * unauthorized use, copying or sale of the above may constitute an
 * infringement of copyright and may result in criminal or other legal
 * proceedings.
 *
 * Copyright (c) 2013 FinancialForce.com, inc. All rights reserved.
 */

public interface fflib_ISObjectDomain {
  /**
   * Returns the SObjectType this Domain class represents
   **/
  Schema.SObjectType sObjectType();

  /**
   * Alternative to the Records property, provided to support mocking of Domain classes
   **/
  List<SObject> getRecords();
}','1231392516.0','True','fflib_ISObjectDomain','108','Active');
INSERT INTO "ApexClass" VALUES(72,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private with sharing class fflib_StringBuilderTest {
  static testMethod void testfflib_StringBuilder1() {
    fflib_StringBuilder sb = new fflib_StringBuilder();
    sb.add(''this is a string'');
    sb.add(
      new List<String>{
        '', which is made'',
        '' up from\r '',
        ''a number of smaller strings'',
        ''. 5 in this case!''
      }
    );
    system.assertEquals(
      sb.getStringValue(),
      ''this is a string, which is made up from\r a number of smaller strings. 5 in this case!''
    );
  }

  static testMethod void testfflib_StringBuilder2() {
    fflib_StringBuilder sb = new fflib_StringBuilder(
      new List<String>{ ''apples'', '' and '', ''pears'', '': stairs. '' }
    );
    sb.add(''this is a string'');
    sb.add(
      new List<String>{
        '', which is made'',
        '' up from\r '',
        ''a number of smaller strings'',
        ''. 5 in this case!''
      }
    );
    system.assertEquals(
      sb.getStringValue(),
      ''apples and pears: stairs. this is a string, which is made up from\r a number of smaller strings. 5 in this case!''
    );
  }

  static testMethod void testCommaDelimitedBuilder1() {
    fflib_StringBuilder.CommaDelimitedListBuilder sb = new fflib_StringBuilder.CommaDelimitedListBuilder();
    sb.add(''a'');
    sb.add(new List<String>{ ''b'', ''c'', ''d'' });
    system.assertEquals(sb.getStringValue(), ''a,b,c,d'');
  }

  static testMethod void testCommaDelimitedBuilder2() {
    fflib_StringBuilder.CommaDelimitedListBuilder sb = new fflib_StringBuilder.CommaDelimitedListBuilder(
      new List<String>{ ''x'', ''y'' }
    );
    sb.add(''a'');
    sb.add(new List<String>{ ''b'', ''c'', ''d'' });
    system.assertEquals(sb.getStringValue(), ''x,y,a,b,c,d'');
  }

  static testMethod void testCommanDelimitedBuilderWithItemPrefix() {
    fflib_StringBuilder.CommaDelimitedListBuilder sb = new fflib_StringBuilder.CommaDelimitedListBuilder(
      new List<String>{ ''x'', ''y'' }
    );
    sb.add(''a'');
    sb.add(new List<String>{ ''b'', ''c'', ''d'' });
    system.assertEquals(sb.getStringValue(''$''), ''$x,$y,$a,$b,$c,$d'');
  }

  static testMethod void testCommanDelimitedBuilderWithAlternativeDelimiter() {
    fflib_StringBuilder.CommaDelimitedListBuilder sb = new fflib_StringBuilder.CommaDelimitedListBuilder(
      new List<String>{ ''x'', ''y'' }
    );
    sb.setDelimiter('';'');
    sb.add(''a'');
    sb.add(new List<String>{ ''b'', ''c'', ''d'' });
    system.assertEquals(sb.getStringValue(), ''x;y;a;b;c;d'');
  }

  static testMethod void testCommanDelimitedBuilderWithAlternativeDelimiterAndPrefix() {
    fflib_StringBuilder.CommaDelimitedListBuilder sb = new fflib_StringBuilder.CommaDelimitedListBuilder(
      new List<String>{ ''x'', ''y'' }
    );
    sb.setItemPrefix(''#'');
    sb.setDelimiter('':'');
    sb.add(''a'');
    sb.add(new List<String>{ ''b'', ''c'', ''d'' });
    system.assertEquals(sb.getStringValue(), ''#x:#y:#a:#b:#c:#d'');
  }

  static testMethod void testFieldListBuilder() {
    List<Schema.SObjectField> fields = new List<Schema.SObjectField>{
      Account.Name,
      Account.Id,
      Account.AccountNumber,
      Account.AccountNumber,
      Account.AnnualRevenue
    };
    fflib_StringBuilder.FieldListBuilder sb = new fflib_StringBuilder.FieldListBuilder(
      fields
    );
    List<String> fieldList = sb.getStringValue().split('','');
    Set<String> fieldSet = new Set<String>(fieldList);
    system.assertEquals(4, fieldSet.size());
    system.assert(fieldSet.contains(''Name''));
    system.assert(fieldSet.contains(''Id''));
    system.assert(fieldSet.contains(''AccountNumber''));
    system.assert(fieldSet.contains(''AnnualRevenue''));
  }

  static testMethod void testMultiCurrencyFieldListBuilder() {
    List<Schema.SObjectField> fields = new List<Schema.SObjectField>{
      Account.Name,
      Account.Id,
      Account.AccountNumber,
      Account.AnnualRevenue
    };
    fflib_StringBuilder.MultiCurrencyFieldListBuilder sb = new fflib_StringBuilder.MultiCurrencyFieldListBuilder(
      fields
    );
    List<String> fieldList = sb.getStringValue().split('','');
    Set<String> fieldSet = new Set<String>(fieldList);
    system.assert(fieldSet.contains(''Name''));
    system.assert(fieldSet.contains(''Id''));
    system.assert(fieldSet.contains(''AccountNumber''));
    system.assert(fieldSet.contains(''AnnualRevenue''));
    if (UserInfo.isMultiCurrencyOrganization())
      system.assert(fieldSet.contains(''CurrencyIsoCode''));
  }
}','2289711025.0','True','fflib_StringBuilderTest','4403','Active');
INSERT INTO "ApexClass" VALUES(73,'57.0','/*
 * Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @group Core
 * Contains counterparts for helper methods in the native System class.
 */

public class fflib_System {
  /**
   * Verifies that the supplied argument is meaningfully equivalent to the expected argument, as defined by its matcher.
   * See fflib_SystemTest for examples of usage.
   * @param ignoredRetval Dummy value, returned on registering an fflib_IMatcher.
   * @param value         The object instance upon which we are checking equality.
   */
  public static void assertEquals(Object ignoredRetval, Object value) {
    assertEquals(ignoredRetval, value, null);
  }

  /**
   * Verifies that the supplied argument is meaningfully equivalent to the expected argument, as defined by its matcher.
   * See fflib_SystemTest for examples of usage.
   * @param ignoredRetval Dummy value, returned on registering an fflib_IMatcher.
   * @param value         The object instance upon which we are checking equality.
   * @param customAssertMessage Provides context or additional information for the assertion.
   */
  public static void assertEquals(
    Object ignoredRetval,
    Object value,
    String customAssertMessage
  ) {
    fflib_IMatcher matcher = null;
    try {
      List<fflib_IMatcher> matchers = fflib_Match.getAndClearMatchers(1);
      matcher = matchers[0];
    } catch (fflib_ApexMocks.ApexMocksException e) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''fflib_System.assertEquals expects you to register exactly 1 fflib_IMatcher (typically through the helpers in fflib_Match).''
      );
    }

    if (!matcher.matches(value)) {
      throw new fflib_ApexMocks.ApexMocksException(
        String.format(
          ''Expected : {0}, Actual: {1}{2}'',
          new List<String>{
            String.valueOf(matcher),
            String.valueOf(value),
            String.isBlank(customAssertMessage)
              ? ''''
              : ('' -- '' + customAssertMessage)
          }
        )
      );
    }
  }
}','4139675979.0','True','fflib_System','1078','Active');
INSERT INTO "ApexClass" VALUES(74,'57.0','/*
 * Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */
@IsTest
private class fflib_SystemTest {
  @IsTest
  private static void assertEquals_WithNoMatchers_ShouldThrowException() {
    try {
      fflib_System.assertEquals(''Test String'', ''Test String'');
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(
        ''fflib_System.assertEquals expects you to register exactly 1 fflib_IMatcher (typically through the helpers in fflib_Match).'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void assertEquals_WithTooManyMatchers_ShouldThrowException() {
    //Register matchers prematurely
    fflib_Match.stringStartsWith(''Test S'');
    fflib_Match.stringEndsWith(''t String'');
    fflib_Match.stringIsNotBlank();

    try {
      fflib_System.assertEquals(
        fflib_Match.stringStartsWith(''Test S''),
        ''Test String''
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(
        ''fflib_System.assertEquals expects you to register exactly 1 fflib_IMatcher (typically through the helpers in fflib_Match).'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void assertEquals_WithMismatch_ShouldThrowException() {
    try {
      fflib_System.assertEquals(
        fflib_Match.stringStartsWith(''Test X''),
        ''Test String''
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String expected = ''Actual: Test String'';
      String actual = e.getMessage();
      System.assert(
        actual.contains(expected),
        ''Expected: '' +
        expected +
        '', Actual: '' +
        actual
      );
    }
  }

  @IsTest
  private static void assertEquals_WithMatch_ShouldPass() {
    fflib_System.assertEquals(
      fflib_Match.stringStartsWith(''Test S''),
      ''Test String''
    );
  }

  @IsTest
  private static void assertEquals_WithCombinedMatcher_ShouldPass() {
    fflib_System.assertEquals(
      fflib_Match.allOf(
        fflib_Match.stringStartsWith(''Test S''),
        fflib_Match.stringEndsWith(''t String''),
        fflib_Match.stringIsNotBlank()
      ),
      ''Test String''
    );
  }

  @IsTest
  private static void assertEquals_WithCustomMessage_WithNoMatchers_ShouldThrowException() {
    try {
      fflib_System.assertEquals(
        ''Test String'',
        ''Test String'',
        ''My Custom Message''
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(
        ''fflib_System.assertEquals expects you to register exactly 1 fflib_IMatcher (typically through the helpers in fflib_Match).'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void assertEquals_WithCustomMessage_WithTooManyMatchers_ShouldThrowException() {
    //Register matchers prematurely
    fflib_Match.stringStartsWith(''Test S'');
    fflib_Match.stringEndsWith(''t String'');
    fflib_Match.stringIsNotBlank();

    try {
      fflib_System.assertEquals(
        fflib_Match.stringStartsWith(''Test S''),
        ''Test String'',
        ''My Custom Message''
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(
        ''fflib_System.assertEquals expects you to register exactly 1 fflib_IMatcher (typically through the helpers in fflib_Match).'',
        e.getMessage()
      );
    }
  }

  @IsTest
  private static void assertEquals_WithCustomMessage_WithMismatch_ShouldThrowException() {
    try {
      fflib_System.assertEquals(
        fflib_Match.stringStartsWith(''Test X''),
        ''Test String'',
        ''My Custom Message''
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String expected = ''Actual: Test String -- My Custom Message'';
      String actual = e.getMessage();
      System.assert(
        actual.contains(expected),
        ''Expected: '' +
        expected +
        '', Actual: '' +
        actual
      );
    }
  }

  @IsTest
  private static void assertEquals_WithCustomMessage_WithMatch_ShouldPass() {
    fflib_System.assertEquals(
      fflib_Match.stringStartsWith(''Test S''),
      ''Test String'',
      ''My Custom Message''
    );
  }

  @IsTest
  private static void assertEquals_WithCustomMessage_WithCombinedMatcher_ShouldPass() {
    fflib_System.assertEquals(
      fflib_Match.allOf(
        fflib_Match.stringStartsWith(''Test S''),
        fflib_Match.stringEndsWith(''t String''),
        fflib_Match.stringIsNotBlank()
      ),
      ''Test String'',
      ''My Custom Message''
    );
  }
}','27965877.0','True','fflib_SystemTest','4605','Active');
INSERT INTO "ApexClass" VALUES(75,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 *	This class implements the verification modes with Mockito syntax style.
 *	It can be used in the classic verify and in the ordered verify.
 *	@group Core
 */
public with sharing class fflib_VerificationMode {
  public Integer VerifyMin { get; set; }
  public Integer VerifyMax { get; set; }
  public String CustomAssertMessage { get; set; }

  public enum ModeName {
    times,
    atLeast,
    atMost,
    between,
    atLeastOnce,
    calls
  }

  public ModeName Method;

  public fflib_VerificationMode() {
    VerifyMin = 1;
    VerifyMax = null;
    CustomAssertMessage = null;
    Method = null;
  }

  /**
   * Sets how many times the method is expected to be called.
   * For InOrder verification we copy Mockito behavior which is as follows;
   * <ul>
   * <li>Consume the specified number of matching invocations, ignoring non-matching invocations in between</li>
   * <li>Fail an assert if the very next invocation matches, but additional matches can still exist so long as at least one non-matching invocation exists before them</li>
   * </ul>
   * For example if you had a(); a(); b(); a();
   * then inOrder.verify(myMock, 2)).a(); or inOrder.verify(myMock, 3)).a(); would pass but not inOrder.verify(myMock, 1)).a();
   * @param times The number of times you expect the method to have been called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode times(Integer times) {
    this.Method = ModeName.times;
    this.VerifyMin = this.VerifyMax = times;
    return this;
  }

  /**
   * Sets a custom assert message for the verify.
   * @param customAssertMessage The custom message for the assert in case the assert is false. The custom message is queued to the default message.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode description(String customAssertMessage) {
    this.CustomAssertMessage = customAssertMessage;
    return this;
  }

  /**
   * Sets the minimum number of times the method is expected to be called.
   * With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified.
   * @param atLeastTimes The minimum number of times you expect the method to have been called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode atLeast(Integer atLeastTimes) {
    this.Method = ModeName.atLeast;
    this.VerifyMin = atLeastTimes;

    return this;
  }

  /**
   * Sets the maximum number of times the method is expected to be called. Not available in the InOrder verification.
   * @param atMostTimes The maximum number of times the method is expected to be called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode atMost(Integer atMostTimes) {
    this.Method = ModeName.atMost;
    this.VerifyMax = atMostTimes;

    return this;
  }

  /**
   * Sets that the method is called at least once.
   * With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode atLeastOnce() {
    this.Method = ModeName.atLeastOnce;
    this.VerifyMin = 1;

    return this;
  }

  /**
   * Sets the range of how many times the method is expected to be called. Not available in the InOrder verification.
   * @param atLeastTimes The minimum number of times you expect the method to have been called.
   * @param atMostTimes The maximum number of times the method is expected to be called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode between(
    Integer atLeastTimes,
    Integer atMostTimes
  ) {
    this.Method = ModeName.between;
    this.VerifyMin = atLeastTimes;
    this.VerifyMax = atMostTimes;

    return this;
  }

  /**
   * Sets that the method is not expected to be called.
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode never() {
    this.VerifyMin = fflib_ApexMocks.NEVER;
    this.VerifyMax = fflib_ApexMocks.NEVER;

    return this;
  }

  /**
   * Sets how many times the method is expected to be called for an InOrder verifier. Available Only with the InOrder verification.
   * A verification mode using calls will not fail if the method is called more times than expected.
   * @param callingTimes The number of times you expect the method to have been called in the InOrder verifying (no greedy verify).
   * @return The fflib_VerificationMode object instance with the proper settings.
   */
  public fflib_VerificationMode calls(Integer callingTimes) {
    this.Method = ModeName.calls;
    this.VerifyMin = callingTimes;
    this.VerifyMax = null;

    return this;
  }
}','4260459225.0','True','fflib_VerificationMode','1744','Active');
INSERT INTO "ApexClass" VALUES(76,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Helper class, roughly based on the Java version, but subclassed to assist in a number of use cases in this library
 *
 * NOTE: Aspects of this where developed before recent improvements to String handling, as such could likely be enhanced at this stage.
 **/
public virtual class fflib_StringBuilder {
  protected List<String> buffer = new List<String>();

  /**
   * Construct an empty StringBuilder
   **/
  public fflib_StringBuilder() {
  }

  /**
   * Construct a StringBuilder with the given values
   **/
  public fflib_StringBuilder(List<String> values) {
    add(values);
  }

  /**
   * Add the given values to the StringBuilder
   **/
  public virtual void add(List<String> values) {
    buffer.addAll(values);
  }

  /**
   * Add the given value to the StringBuilder
   **/
  public virtual void add(String value) {
    buffer.add(value);
  }

  public virtual override String toString() {
    return String.join(buffer, '''');
  }

  /**
   * Return the state of the StringBuilder
   **/
  public virtual String getStringValue() {
    return toString();
  }

  /**
   * Subclasses the StringBuilder to produce a comma delimited contactination of strings
   **/
  public virtual with sharing class CommaDelimitedListBuilder extends fflib_StringBuilder {
    String itemPrefix = '''';
    String delimiter = '','';

    public CommaDelimitedListBuilder() {
    }

    public CommaDelimitedListBuilder(List<String> values) {
      super(values);
    }

    public void setItemPrefix(String itemPrefix) {
      this.itemPrefix = itemPrefix;
    }

    public void setDelimiter(String delimiter) {
      this.delimiter = delimiter;
    }

    public String getStringValue(String itemPrefix) {
      setItemPrefix(itemPrefix);
      return toString();
    }

    public override String toString() {
      return itemPrefix + String.join(buffer, delimiter + itemPrefix);
    }
  }

  /**
   * Subclasses the StringCommaDelimitedBuilder to accept native SObjectField tokens and optional FieldSet definitions to concatinate when building queries
   **/
  public virtual with sharing class FieldListBuilder extends CommaDelimitedListBuilder {
    public FieldListBuilder(List<Schema.SObjectField> values) {
      this(values, null);
    }

    public FieldListBuilder(
      List<Schema.SObjectField> values,
      List<Schema.Fieldset> fieldSets
    ) {
      // Create a distinct set of fields (or field paths) to select
      for (Schema.SObjectField value : values)
        add(String.valueOf(value)); // Alternative to value.getDescribe().getName()

      if (fieldSets != null)
        for (Schema.Fieldset fieldSet : fieldSets)
          for (Schema.FieldSetMember fieldSetMember : fieldSet.getFields())
            add(fieldSetMember.getFieldPath());
    }
  }

  /**
   * Subclasses the FieldListBuilder to auto sense and include when needed the CurrencyIsoCode field in the field list
   **/
  public with sharing class MultiCurrencyFieldListBuilder extends FieldListBuilder {
    public MultiCurrencyFieldListBuilder(List<Schema.SObjectField> values) {
      this(values, null);
    }

    public MultiCurrencyFieldListBuilder(
      List<Schema.SObjectField> values,
      List<Schema.FieldSet> fieldSets
    ) {
      super(values, fieldSets);

      // Dynamically add CurrencyIsoCode field for mult-currency organisations
      if (Userinfo.isMultiCurrencyOrganization())
        add(''CurrencyIsoCode'');
    }
  }
}','1824929365.0','True','fflib_StringBuilder','2261','Active');
INSERT INTO "ApexClass" VALUES(77,'57.0','/*
 * FinancialForce.com, inc. claims copyright in this software, its screen
 * display designs and supporting documentation. FinancialForce and
 * FinancialForce.com are trademarks of FinancialForce.com, inc. Any
 * unauthorized use, copying or sale of the above may constitute an
 * infringement of copyright and may result in criminal or other legal
 * proceedings.
 *
 * Copyright (c) 2013 FinancialForce.com, inc. All rights reserved.
 */

/**
 * @see fflib_SObjectUnitOfWork
 **/
public interface fflib_ISObjectUnitOfWork {
  /**
   * Register a newly created SObject instance to be inserted when commitWork is called
   *
   * @param record A newly created SObject instance to be inserted during commitWork
   **/
  void registerNew(SObject record);
  /**
   * Register a list of newly created SObject instances to be inserted when commitWork is called
   *
   * @param records A list of newly created SObject instances to be inserted during commitWork
   **/
  void registerNew(List<SObject> records);
  /**
   * Register a newly created SObject instance to be inserted when commitWork is called,
   *   you may also provide a reference to the parent record instance (should also be registered as new separatly)
   *
   * @param record A newly created SObject instance to be inserted during commitWork
   * @param relatedToParentField A SObjectField reference to the child field that associates the child record with its parent
   * @param relatedToParentRecord A SObject instance of the parent record (should also be registered as new separatly)
   **/
  void registerNew(
    SObject record,
    Schema.sObjectField relatedToParentField,
    SObject relatedToParentRecord
  );
  /**
   * Register a relationship between two records that have yet to be inserted to the database. This information will be
   *  used during the commitWork phase to make the references only when related records have been inserted to the database.
   *
   * @param record An existing or newly created record
   * @param relatedToField A SObjectField referene to the lookup field that relates the two records together
   * @param relatedTo A SOBject instance (yet to be commited to the database)
   */
  void registerRelationship(
    SObject record,
    Schema.sObjectField relatedToField,
    SObject relatedTo
  );
  /**
   * Registers a relationship between a record and a Messaging.Email where the record has yet to be inserted
   *  to the database.  This information will be
   *  used during the commitWork phase to make the references only when related records have been inserted to the database.
   *
   * @param a single email message instance
   * @param relatedTo A SOBject instance (yet to be commited to the database)
   */
  void registerRelationship(
    Messaging.SingleEmailMessage email,
    SObject relatedTo
  );
  /**
   * Register an existing record to be updated during the commitWork method
   *
   * @param record An existing record
   **/
  void registerDirty(SObject record);
  /**
   * Register an existing record to be updated when commitWork is called,
   *   you may also provide a reference to the parent record instance (should also be registered as new separatly)
   *
   * @param record A newly created SObject instance to be inserted during commitWork
   * @param relatedToParentField A SObjectField reference to the child field that associates the child record with its parent
   * @param relatedToParentRecord A SObject instance of the parent record (should also be registered as new separatly)
   **/
  void registerDirty(
    SObject record,
    Schema.sObjectField relatedToParentField,
    SObject relatedToParentRecord
  );
  /**
   * Register a list of existing records to be updated during the commitWork method
   *
   * @param records A list of existing records
   **/
  void registerDirty(List<SObject> records);
  /**
   * Register an existing record to be deleted during the commitWork method
   *
   * @param record An existing record
   **/
  void registerDeleted(SObject record);
  /**
   * Register a list of existing records to be deleted during the commitWork method
   *
   * @param records A list of existing records
   **/
  void registerDeleted(List<SObject> records);
  /**
   * Takes all the work that has been registered with the UnitOfWork and commits it to the database
   **/
  void commitWork();
  /**
   * Register a generic peace of work to be invoked during the commitWork phase
   *
   * @param work Work to be registered
   **/
  void registerWork(fflib_SObjectUnitOfWork.IDoWork work);
  /**
   * Registers the given email to be sent during the commitWork
   *
   * @param email Email to be sent
   **/
  void registerEmail(Messaging.Email email);
}','1698194112.0','True','fflib_ISObjectUnitOfWork','884','Active');
INSERT INTO "ApexClass" VALUES(78,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @group Core
 */
public with sharing class fflib_InOrder extends fflib_MethodVerifier {
  private final List<Object> unorderedMockInstances;
  private Integer idxMethodCall = 0;

  private Set<fflib_VerificationMode.ModeName> notImplementedMethods = new Set<fflib_VerificationMode.ModeName>{
    fflib_VerificationMode.ModeName.atMost,
    fflib_VerificationMode.ModeName.between
  };

  private final fflib_ApexMocks mocks;

  /**
   * Construct the InOrder instance.
   * @param mocks The apex mock object instance.
   * @param unorderedMockInstances One or more mock implementation classes (listed in any order), whose ordered method calls require verification.
   */
  public fflib_InOrder(
    fflib_ApexMocks mocks,
    List<Object> unorderedMockInstances
  ) {
    this.unorderedMockInstances = unorderedMockInstances;
    this.mocks = mocks;
  }

  /**
   * Verify a method was called on a mock object.
   * It performs a no strict ordered verification.
   * The verification could be either greedy or not depending of the verificationMode passed.
   * Check the fflib_VerificationMode methods for details.
   * @param mockInstance The mock object instance.
   * @param verificationMode Defines the constraints for performing the verification (e.g. the minimum and maximum expected invocation counts).
   * @return The mock object instance.
   */
  public Object verify(
    Object mockInstance,
    fflib_VerificationMode verificationMode
  ) {
    mocks.setOrderedVerifier(this);
    return mocks.verify(mockInstance, verificationMode);
  }

  /**
   * Verify a method was called on a mock object.
   * It performs the default times(1) verification for the InOrder.
   * @param mockInstance The mock object instance.
   * @return The mock object instance.
   */
  public Object verify(Object mockInstance) {
    mocks.setOrderedVerifier(this);
    return mocks.verify(mockInstance);
  }

  /**
   * Verify a method was called on a mock object.
   * Wrapper for the new syntax call to be conformed to the old style notation
   * It performs the equivalent of times(times) verification for the InOrder.
   * @param mockInstance The mock object instance.
   * @param times The number of times you expect the method to have been called.
   * @return The mock object instance.
   */
  public Object verify(Object mockInstance, Integer times) {
    mocks.setOrderedVerifier(this);
    return mocks.verify(mockInstance, times);
  }

  /**
   * Verify that after the last successful verified method no more interactions happened on the inOrderMock instance.
   * @throws Exception with message to help to identify the last method called.
   */
  public void verifyNoMoreInteractions() {
    if (idxMethodCall == 0) {
      verifyNoInteractions();
    }

    if (hasNextInteraction(unorderedMockInstances, idxMethodCall)) {
      fflib_InvocationOnMock invocation = fflib_MethodCountRecorder.getOrderedMethodCalls()
        .get(idxMethodCall - 1);

      throw new fflib_ApexMocks.ApexMocksException(
        ''No more Interactions were expected after the '' +
        invocation.getMethod() +
        '' method.''
      );
    }
  }

  /**
   * Verify that no interactions at all happened on the inOrderMock instance.
   * @throws Exception with message.
   */
  public void verifyNoInteractions() {
    if (hasNextInteraction(unorderedMockInstances, 0)) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''No Interactions expected on this InOrder Mock instance!''
      );
    }
  }

  /*
   * Verifies a method was invoked the expected number of times, with the expected arguments.
   * The in-order verifier remembers the last method invocation it successfully verified,
   * and only considers subsequent method invocations for subsequent verifications.
   * @param qualifiedMethod The method to be verified.
   * @param methodArg The arguments of the method that needs to be verified.
   * @param verificationMode The verification mode that holds the setting about how the verification should be performed.
   */
  protected override void verify(
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues methodArg,
    fflib_VerificationMode verificationMode
  ) {
    String inOrder = ''In Order: '';
    List<fflib_IMatcher> matchers = fflib_Match.Matching
      ? fflib_Match.getAndClearMatchers(methodArg.argValues.size())
      : null;

    if (verificationMode.VerifyMin == 0 && verificationMode.VerifyMax == 0) {
      Integer methodCounts = countInteractions(matchers, qm, methodArg);
      if (methodCounts != 0)
        throwException(
          qm,
          inOrder,
          fflib_ApexMocks.NEVER,
          '''',
          methodCounts,
          verificationMode.CustomAssertMessage
        );
    }

    Integer i = 0;
    for (; i < verificationMode.VerifyMin; i++) {
      if (!verifyMethodCalled(matchers, qm, methodArg)) {
        throwException(
          qm,
          inOrder,
          verificationMode.VerifyMin,
          '''',
          i,
          verificationMode.CustomAssertMessage
        );
      }
    }

    if (verificationMode.VerifyMin == verificationMode.VerifyMax) {
      if (hasNextInteraction(unorderedMockInstances, idxMethodCall)) {
        fflib_InvocationOnMock nextMethod = getNextMethodCall(false);

        if (
          nextMethod.getMethod() == qm &&
          argumentsMatch(nextMethod.getMethodArgValues(), matchers, methodArg)
        ) {
          Integer methodCounts = i + countInteractions(matchers, qm, methodArg);
          throwException(
            qm,
            inOrder,
            verificationMode.VerifyMin,
            '''',
            methodCounts,
            verificationMode.CustomAssertMessage
          );
        }
      }

      return;
    }

    //consuming all the calls in case is the atLeast or atLeastOnce method
    if (
      verificationMode.Method == fflib_VerificationMode.ModeName.atLeast ||
      verificationMode.Method == fflib_VerificationMode.ModeName.atLeastOnce
    ) {
      consumeInteractions(matchers, qm, methodArg);
    }
  }

  private Boolean verifyMethodCalled(
    List<fflib_IMatcher> matchers,
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues methodArg
  ) {
    fflib_InvocationOnMock calledMethod = getNextMethodCall();
    while (calledMethod != null) {
      if (
        calledMethod.getMethod() == qm &&
        argumentsMatch(calledMethod.getMethodArgValues(), matchers, methodArg)
      ) {
        //it''s our method
        if (matchers != null) {
          capture(matchers);
        }
        return true;
      }

      calledMethod = getNextMethodCall();
    }

    return false;
  }

  private Integer countInteractions(
    List<fflib_IMatcher> matchers,
    fflib_QualifiedMethod qualifiedMethod,
    fflib_MethodArgValues methodArg
  ) {
    Integer interactionsCouter = 0;

    for (
      Integer i = idxMethodCall,
        len = fflib_MethodCountRecorder.getOrderedMethodCalls().size();
      i < len;
      i++
    ) {
      fflib_InvocationOnMock invocation = fflib_MethodCountRecorder.getOrderedMethodCalls()
        .get(i);
      for (Object mockInstance : unorderedMockInstances) {
        if (
          invocation.getMock() === mockInstance &&
          (qualifiedMethod == invocation.getMethod()) &&
          (argumentsMatch(invocation.getMethodArgValues(), matchers, methodArg))
        ) {
          interactionsCouter++;
        }
      }
    }

    return interactionsCouter;
  }

  private void consumeInteractions(
    List<fflib_IMatcher> matchers,
    fflib_QualifiedMethod qualifiedMethod,
    fflib_MethodArgValues methodArg
  ) {
    Integer lastInteracionIndex = 0;

    //going all through the orderedMethodCalls to find all the interaction of the method
    for (
      Integer i = idxMethodCall,
        len = fflib_MethodCountRecorder.getOrderedMethodCalls().size();
      i < len;
      i++
    ) {
      fflib_InvocationOnMock invocation = fflib_MethodCountRecorder.getOrderedMethodCalls()
        .get(i);
      for (Object mockInstance : unorderedMockInstances) {
        if (
          invocation.getMock() === mockInstance &&
          (qualifiedMethod == invocation.getMethod()) &&
          (argumentsMatch(invocation.getMethodArgValues(), matchers, methodArg))
        ) {
          //it''s our method
          lastInteracionIndex = i;
          if (matchers != null) {
            capture(matchers);
          }
        }
      }
    }

    //now we can move the index to our last call
    idxMethodCall = lastInteracionIndex + 1;
  }

  private Boolean argumentsMatch(
    fflib_MethodArgValues calledMethodArg,
    List<fflib_IMatcher> matchers,
    fflib_MethodArgValues methodArg
  ) {
    //Check it was called with the right args.
    if (matchers != null) {
      if (fflib_Match.matchesAllArgs(calledMethodArg, matchers)) {
        //Return now we''ve matched the method call
        return true;
      }
    } else if (calledMethodArg == methodArg) {
      //Return now we''ve matched the method call
      return true;
    }

    return false;
  }

  private fflib_InvocationOnMock getNextMethodCall() {
    return getNextMethodCall(true);
  }

  private fflib_InvocationOnMock getNextMethodCall(
    Boolean updateIdxMethodCall
  ) {
    Integer idx = 0;
    for (
      fflib_InvocationOnMock invocation : fflib_MethodCountRecorder.getOrderedMethodCalls()
    ) {
      if (idx == idxMethodCall) {
        if (isForMockInstance(invocation)) {
          if (updateIdxMethodCall)
            idxMethodCall++;
          return invocation;
        }
      } else {
        idx++;
      }
    }

    return null;
  }

  private Boolean isForMockInstance(fflib_InvocationOnMock invocation) {
    for (Object mi : unorderedMockInstances) {
      if (mi === invocation.getMock()) {
        return true;
      }
    }

    return false;
  }

  /*
   * Used by the fflib_InOrder invocation verifier to find further interactions with a given mock instances.
   * @param mockInstances The tracked mock instances - only methods called on these objects are counted as an invocation.
   * @param idxLastMethodCalled The index of the last matched method, used to offset the search for invocations so we don''t double count invocations.
   * @return Whether or not there were further interactions.
   */
  private Boolean hasNextInteraction(
    List<Object> mockInstances,
    Integer idxLastMethodCalled
  ) {
    Integer idx = 0;

    for (
      fflib_InvocationOnMock methodCall : fflib_MethodCountRecorder.getOrderedMethodCalls()
    ) {
      if (isForMockInstance(methodCall)) {
        idx++;
        if (idx > idxLastMethodCalled) {
          return true;
        }
      }
    }

    return false;
  }

  /*
   * Method that validate the verification mode used in the verify.
   * Not all the methods from the fflib_VerificationMode are implemented for the different classes that extends the fflib_MethodVerifier.
   * The error is thrown at run time, so this method is called in the method that actually performs the verify.
   * @param verificationMode The verification mode that have to been verified.
   * @throws Exception with message for the fflib_VerificationMode not implemented.
   */
  protected override void validateMode(
    fflib_VerificationMode verificationMode
  ) {
    if (notImplementedMethods.contains(verificationMode.Method)) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''The '' +
        verificationMode.Method.name() +
        '' method is not implemented for the fflib_InOrder class''
      );
    }
  }
}','3681059724.0','True','fflib_InOrder','7895','Active');
INSERT INTO "ApexClass" VALUES(79,'57.0','/*
 Copyright (c) 2014-2017 FinancialForce.com, inc.  All rights reserved.
 */

@isTest
private class fflib_InOrderTest {
  private static fflib_ApexMocks MY_MOCKS = new fflib_ApexMocks();

  @isTest
  static void thatVerifyInOrderAllTheMethodsCalled() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''1-2'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-2'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-3'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-4'');

    assertVerifyInOrderExceptionForAddMethod(
      ''1-2'',
      inOrder1,
      firstMock,
      ''It should fail because 1-2 is in the wrong order'',
      1,
      0
    );
  }

  @isTest
  static void thatVerifyInOrderDifferentMethodsCalledWithSameArguments() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.addMore(''1-1'');
    firstMock.add(''1-2'');
    firstMock.addMore(''1-2'');
    firstMock.add(''1-3'');
    firstMock.addMore(''1-3'');
    firstMock.add(''1-4'');
    firstMock.addMore(''1-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .addMore(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .addMore(''1-3'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-4'');
  }

  @isTest
  static void thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsOrderFail() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.addMore(''1-1'');
    firstMock.add(''1-2'');
    firstMock.addMore(''1-2'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .addMore(''1-1'');

    assertVerifyInOrderExceptionForAddMethod(
      ''1-1'',
      inOrder1,
      firstMock,
      ''It should fail because 1-1 is called before the addMore(1-1)'',
      1,
      0
    );
  }

  @isTest
  static void thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsDoubleCallFail() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.addMore(''1-1'');
    firstMock.add(''1-2'');
    firstMock.addMore(''1-2'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .addMore(''1-1'');

    assertVerifyInOrderExceptionForAddMoreMethod(
      ''1-1'',
      inOrder1,
      firstMock,
      ''It should fail because addMore(1-1) is called only Once'',
      1,
      0
    );
  }

  @isTest
  static void thatVerifyInOrderCallMethodWithMatches() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-0'');
    firstMock.add(''1-11'');
    firstMock.add(''1-12'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(2)))
      .add(fflib_Match.stringStartsWith(''1-1''));
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-4'');
  }

  @isTest
  static void thatVerifyInOrderCallMethodWithMatchesFailsIfVerifyACallAlreadyInTheMatcher() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-0'');
    firstMock.add(''1-11'');
    firstMock.add(''1-12'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(2)))
      .add(fflib_Match.stringStartsWith(''1-1''));
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-4'');

    assertVerifyInOrderExceptionForAddMethod(
      ''1-11'',
      inOrder1,
      firstMock,
      ''It should fail because addMore(1-11) has been already verified using the matchers'',
      1,
      0
    );
  }

  @isTest
  static void thatVerifyInOrderCallMethodWithMultipleMatches() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When

    firstMock.add(''1-0'');
    firstMock.add(''1-1'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    firstMock.add(''2-0'');
    firstMock.add(''2-1'');
    firstMock.add(''2-3'');
    firstMock.add(''2-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(4)))
      .add(fflib_Match.stringStartsWith(''1-''));
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(4)))
      .add(fflib_Match.stringStartsWith(''2-''));
  }

  @isTest
  static void thatVerifyInOrderCallMethodWithMultipleMatchesMixed() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-2'');
    firstMock.add(''2-2'');
    firstMock.add(''1-3'');
    firstMock.add(''2-3'');
    firstMock.add(''1-4'');
    firstMock.add(''2-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(4)))
      .add(fflib_Match.stringStartsWith(''1-''));
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(fflib_Match.stringStartsWith(''2-''));
  }

  @isTest
  static void thatVerifyInOrderCallMethodWithMultipleMatchesMixedFailWhenMatcherHaveAlreadyVerifiedMethod() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-2'');
    firstMock.add(''2-2'');
    firstMock.add(''1-3'');
    firstMock.add(''2-3'');
    firstMock.add(''1-4'');
    firstMock.add(''2-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(4)))
      .add(fflib_Match.stringStartsWith(''1-''));

    assertVerifyInOrderExceptionForAddMethod(
      ''1-11'',
      inOrder1,
      firstMock,
      ''It should fail because only one call for the 2- is available to verify'',
      4,
      0
    );
  }

  @isTest
  static void thatVerifyInOrderCanSkipMethodsCalledUntilFindTheOneThatNeedsVerify() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''1-2'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-4'');

    assertVerifyInOrderExceptionForAddMethod(
      ''1-2'',
      inOrder1,
      firstMock,
      ''It should fail because is out of order'',
      1,
      0
    );
  }

  @isTest
  static void thatVerifyInOrderCanHandleMultipleMethodsCalls() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''1-2'');
    firstMock.add(''1-2'');
    firstMock.add(''1-2'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(3)))
      .add(''1-2'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-4'');
  }

  @isTest
  static void thatVerifyInOrderCanHandleMultipleMethodsCallsAndNotFailsIfVerifyCountIsGreaterThenExpected() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''1-2'');
    firstMock.add(''1-2'');
    firstMock.add(''1-2'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(2)))
      .add(''1-2'');
  }

  @isTest
  static void thatVerifyInOrderCanHandleMultipleMethodsCallsButFailsIfVerifyCountIsLessThenExpected() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''1-2'');
    firstMock.add(''1-2'');
    firstMock.add(''1-2'');
    firstMock.add(''1-3'');
    firstMock.add(''1-4'');

    // Then

    assertVerifyInOrderExceptionForAddMethod(
      ''1-2'',
      inOrder1,
      firstMock,
      ''It should fail because is actually called only 3 times'',
      4,
      3
    );
  }

  @isTest
  static void thatVerifyInOrderCanHandleMultipleMocks() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList secondMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList thirdMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);

    fflib_InOrder inOrder = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock, secondMock }
    );

    // When
    firstMock.add(''1-1'');
    secondMock.add(''2-1'');
    thirdMock.add(''3-1'');

    firstMock.add(''1-2'');
    secondMock.add(''2-2'');
    thirdMock.add(''3-2'');

    firstMock.add(''1-1'');
    firstMock.add(''1-3'');
    secondMock.add(''2-3'');
    thirdMock.add(''3-3'');

    // Then
    ((fflib_MyList.IList) inOrder.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder.verify(secondMock, MY_MOCKS.calls(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-2'');
    ((fflib_MyList.IList) inOrder.verify(secondMock, MY_MOCKS.calls(1)))
      .add(''2-2'');
    ((fflib_MyList.IList) inOrder.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-3'');
    ((fflib_MyList.IList) inOrder.verify(secondMock, MY_MOCKS.calls(1)))
      .add(''2-3'');

    ((fflib_MyList.IList) MY_MOCKS.verify(thirdMock, MY_MOCKS.times(3)))
      .add(fflib_Match.stringStartsWith(''3-''));
  }

  @isTest
  static void thatVerifyInOrderCanHandleMixedInOrderInstance() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList secondMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList thirdMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);

    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );
    fflib_InOrder inOrder2 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock, secondMock }
    );

    // When
    firstMock.add(''1-1'');
    secondMock.add(''2-1'');
    thirdMock.add(''3-1'');

    firstMock.add(''1-2'');
    secondMock.add(''2-2'');
    thirdMock.add(''3-2'');

    firstMock.add(''1-1'');
    firstMock.add(''1-3'');
    secondMock.add(''2-3'');
    thirdMock.add(''3-3'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(2)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-3'');

    ((fflib_MyList.IList) inOrder2.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder2.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-2'');
    ((fflib_MyList.IList) inOrder2.verify(secondMock, MY_MOCKS.calls(1)))
      .add(''2-2'');
    ((fflib_MyList.IList) inOrder2.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-3'');
    ((fflib_MyList.IList) inOrder2.verify(secondMock, MY_MOCKS.calls(1)))
      .add(''2-3'');

    ((fflib_MyList.IList) MY_MOCKS.verify(thirdMock, MY_MOCKS.times(3)))
      .add(fflib_Match.stringStartsWith(''3-''));
  }

  @isTest
  static void thatVerifyInOrderThrownExceptionIfVerifyMockInstanceNotInTheSet() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList secondMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);

    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    secondMock.add(''2-1'');

    // Then

    try {
      ((fflib_MyList.IList) inOrder1.verify(secondMock, MY_MOCKS.calls(1)))
        .add(''2-1'');
      System.assert(
        false,
        ''An exception was expected, because this verify is not in the list of the mocks to verify''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockexcep) {
      String expectedMessage =
        ''In Order: Expected : 1, Actual: 0 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockexcep.getMessage(),
        ''an exception has been caught as expected, however the message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyInOrderThrownExceptionWithCustomMessage() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);

    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    String customErrorMesage = ''Some custom error message'';

    // When
    firstMock.add(''1-1'');
    firstMock.add(''1-2'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-2'');
    // Then
    try {
      ((fflib_MyList.IList) inOrder1.verify(
          firstMock,
          MY_MOCKS.description(customErrorMesage)
        ))
        .add(''1-1'');
      System.assert(false, ''expected some exception '');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String expectedMessage =
        ''In Order: Expected : 1, Actual: 0 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String). Some custom error message.'';
      System.assertEquals(
        expectedMessage,
        e.getMessage(),
        ''the verify throw an Exception, but the message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyAtMostThrowsExceptionBecauseNotImplemented() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atMost(3)))
        .add(''1-1'');
      System.assert(
        false,
        ''an exception was expected because the method is not implemented for the InOrder class''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''The atMost method is not implemented for the fflib_InOrder class'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyBetweenThrowsExceptionBecauseNotImplemented() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.between(3, 5)))
        .add(''1-1'');
      System.assert(
        false,
        ''an exception was expected because the method is not implemented for the InOrder class''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''The between method is not implemented for the fflib_InOrder class'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNever() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.never()))
      .add(''3-1'');
  }

  @isTest
  static void thatVerifyNeverWithMatchers() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.never()))
      .add(fflib_Match.stringStartsWith(''3-''));
  }

  @isTest
  static void thatVerifyNeverFailsWhenCalled() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.never()))
        .add(''1-1'');
      System.assert(
        false,
        ''expected some exception because the method has been called''
      );
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String expectedMessage =
        ''In Order: Expected : 0, Actual: 4 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';

      System.assertEquals(
        expectedMessage,
        e.getMessage(),
        ''the verify throw an Exception, but the message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNeverFailsWhenCalledWithMatchers() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.never()))
        .add(fflib_Match.stringStartsWith(''1-''));
      System.assert(
        false,
        ''expected some exception because the method has been called''
      );
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String expectedMessage =
        ''In Order: Expected : 0, Actual: 4 -- Wanted but not invoked: '' +
        fflib_MyList.getStubClassName() +
        ''.add(String).'';

      System.assertEquals(
        expectedMessage,
        e.getMessage(),
        ''the verify throw an Exception, but the message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyThrowsExceptionWhenCallsIsInvochedFromStandardMock() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    try {
      ((fflib_MyList.IList) MY_MOCKS.verify(firstMock, MY_MOCKS.calls(1)))
        .add(''1-1'');
      System.assert(
        false,
        ''an exception was expected because the method is only implemented for the InOrder class''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''The calls() method is available only in the InOrder Verification.'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNoMoreInteractionsFails() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'', ''1-1'', ''1-1'', ''1-1'');
    firstMock.addMore(''2-1'');
    firstMock.add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'', ''1-1'', ''1-1'', ''1-1'');

    // Then
    try {
      inOrder1.verifyNoMoreInteractions();
      System.assert(
        false,
        ''an exception was expected because there are other interactions''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage =
        ''No more Interactions were expected after the '' +
        fflib_MyList.getStubClassName() +
        ''.add(String, String, String, String) method.'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNoMoreInteractionsFailsWhenOnLyOneMethodLeft() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'', ''1-1'', ''1-1'', ''1-1'');
    firstMock.addMore(''2-1'');
    firstMock.add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .addMore(''2-1'');

    // Then
    try {
      inOrder1.verifyNoMoreInteractions();
      System.assert(
        false,
        ''an exception was expected because there are other interactions''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage =
        ''No more Interactions were expected after the '' +
        fflib_MyList.getStubClassName() +
        ''.addMore(String) method.'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNoMoreInteractionsPass() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList secondMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );
    fflib_InOrder inOrder2 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ secondMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    secondMock.add(''1-1'');
    secondMock.add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');

    inOrder1.verifyNoMoreInteractions();

    ((fflib_MyList.IList) inOrder2.verify(secondMock, MY_MOCKS.calls(2)))
      .add(''1-1'');

    inOrder2.verifyNoMoreInteractions();
  }

  @isTest
  static void thatVerifyNoMoreInteractionsFailsWhenNoInteracionOccurs() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    try {
      inOrder1.verifyNoMoreInteractions();
      System.assert(
        false,
        ''an exception was expected because there are other interactions''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''No Interactions expected on this InOrder Mock instance!'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNoInteractionsFails() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    try {
      inOrder1.verifyNoInteractions();
      System.assert(
        false,
        ''an exception was expected because there are other interactions''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''No Interactions expected on this InOrder Mock instance!'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyNoInteractionsPass() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_MyList secondMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    secondMock.add(''1-2'');
    //Then
    inOrder1.verifyNoInteractions();
  }

  @isTest
  static void thatStrictVerificationCanBePerformed() {
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''4-1'');
    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''4-1'');
  }

  @isTest
  static void thatMixedVerificationDoNotInterfierWithOtherImplementationChecking() {
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''4-1'');
    // Then
    ((fflib_MyList.IList) MY_MOCKS.verify(firstMock, MY_MOCKS.times(2)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''4-1'');

    ((fflib_MyList.IList) MY_MOCKS.verify(firstMock, MY_MOCKS.times(2)))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyAtLeastPassWithSameCallsOfAssertion() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''1-1'');
    firstMock.add(''2-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1''); //all consumed until there by -> verify(firstMock, MY_MOCKS.atLeast(3))).add(''1-1'');
    firstMock.add(''2-1''); //finally consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(3)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');
  }

  @isTest
  static void thatVerifyAtLeastPassWithMoreCallsThenAsserted() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''1-1'');
    firstMock.add(''2-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1''); //it verifies until here, but
    firstMock.add(''1-1''); //this is consumed as well
    firstMock.add(''2-1''); //finally consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(2)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');
  }

  @isTest
  static void thatVerifyAtLeastThrowsErrorIfCalledLessTimes() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''1-1'');
    firstMock.add(''2-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1''); //there are then only 3 calls available, the assert 4 would fail
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(4)))
        .add(''1-1'');
      System.assert(
        false,
        ''an exception was expected because the atLeast is asserting for 4 calls when instead there are only 3 not consumed calls''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 4, Actual: 3 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyAtLeastConsumeAllTheInstances() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''1-1'');
    firstMock.add(''2-1''); //consumed by -> verify(firstMock, MY_MOCKS.calls(1))).add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1''); // the verify atLeast(2) it verifies until here, but it keep going through the instances
    firstMock.add(''1-1'');
    firstMock.add(''2-1''); //so this would fail because have to first consume all the instances of the (''1-1'')
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(2)))
      .add(''1-1'');

    // Then
    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
        .add(''2-1'');
      System.assert(
        false,
        ''an exception was expected because the atLeast have consumed all the interactions of 1-1''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 1, Actual: 0 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyAtLeastConsumeAllTheInstancesForOnlyTheMethodVerified() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1''); // verify(firstMock, MY_MOCKS.atLeast(2))).add(''2-1''); consume until here
    firstMock.add(''1-1'');
    firstMock.add(''1-1''); //those are then free for the second atLeast assertion

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(2)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(2)))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyAtLeastOnce() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeastOnce()))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyAtLeastOnceConsumesInstancesUntilLastMethodVerified() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1''); // consumed until there by -> verify(firstMock, MY_MOCKS.atLeastOnce())).add(''1-1'');
    firstMock.add(''2-1''); // free for another assertion

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeastOnce()))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeastOnce()))
      .add(''2-1'');
  }

  @isTest
  static void thatVerifyAtLeastOnceThrowsErrorIfCalledLessTimes() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeastOnce()))
        .add(''1-3'');
      System.assert(
        false,
        ''an exception was expected because the atLeastOnce is asserting for 1 calls when instead the method is not called at all with that argument''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 1, Actual: 0 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyAtLeastOnceConsumesAllTheInstances() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1''); //all the instance have been consumed

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeastOnce()))
      .add(''1-1'');

    // Then
    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
        .add(''2-1'');
      System.assert(
        false,
        ''an exception was expected because the atLeast have consumed all the interactions of 1-1''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 1, Actual: 0 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyTimes() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(3)))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyTimesThrowsExceptionIfCalledMoreTimesThanExpected() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(2)))
        .add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 2, Actual: 3 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyTimesThrowsExceptionIfCalledLessTimesThanExpected() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(4)))
        .add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 4, Actual: 3 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(4)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
  }

  @isTest
  static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls2() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(3)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls3() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(3)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(2)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls4() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(5)))
      .add(''1-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''1-1'');
  }

  @isTest
  static void thatVerifyTimesThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(5)))
        .add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 5, Actual: 4 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatStrictVerificationCanBeEnforced() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(3)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(1)))
      .add(''2-1'');
  }

  @isTest
  static void thatTimesOneIsTheDefaultVerification() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 1, Actual: 4 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatWithOldNotation() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, 3)).add(''1-1'');
  }

  @isTest
  static void thatWithOldNotationThrowsExceptionIfCalledMoreTimesThanExpected() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, 2)).add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 2, Actual: 3 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatWithOldNotationThrowsExceptionIfCalledLessTimesThanExpected() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, 4)).add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 4, Actual: 3 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatWithOldNotationPassWhenAnotherMethodIsCalledBetweenMethodsCalls() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    ((fflib_MyList.IList) inOrder1.verify(firstMock, 4)).add(''1-1'');
  }

  @isTest
  static void thatWithOldNotationThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
      .add(''2-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, 5)).add(''1-1'');
      System.assert(
        false,
        ''exception expected because the method is called more times than expected in the verification''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 5, Actual: 4 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void thatStrictVerificationCanBeEnforcedWithOldNotation() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 1)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 1)).add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 3)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 1)).add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 1)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 1)).add(''2-1'');
  }

  @isTest
  static void thatStrictVerificationCanBeEnforcedWithOldNotationUsingDefaultTimesOne() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    // When
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock, 3)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''2-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''1-1'');
    ((fflib_MyList.IList) inOrder1.verify(firstMock)).add(''2-1'');
  }

  @isTest
  static void thatVerifyAtLeastConsumesAllTheInstances2() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    //When
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''1-1'');
    firstMock.add(''2-1'');
    firstMock.add(''2-1'');
    firstMock.add(''2-1'');
    firstMock.add(''2-1'');
    firstMock.add(''2-1'');
    firstMock.add(''1-1'');

    // Then
    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(2)))
      .add(''1-1'');

    try {
      ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(1)))
        .add(''2-1'');
      System.assert(
        false,
        ''exception expected because the atLeast have consumed all the calls''
      );
    } catch (fflib_ApexMocks.ApexMocksException mockExcept) {
      String expectedMessage = ''In Order: Expected : 1, Actual: 0 -- Wanted but not invoked: fflib_MyList__sfdc_ApexStub.add(String).'';
      System.assertEquals(
        expectedMessage,
        mockExcept.getMessage(),
        '' the error message is not as expected''
      );
    }
  }

  @isTest
  static void verifyAtLeastAndCapture() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    //When
    firstMock.get2(1, ''1-1'');
    firstMock.get2(2, ''2-1'');
    firstMock.get2(1, ''3-1'');
    firstMock.get2(1, ''4-1'');
    firstMock.get2(2, ''5-1'');

    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.atLeast(2)))
      .get2(fflib_Match.eqInteger(1), (String) argument.capture());

    System.assertEquals(
      ''4-1'',
      (string) argument.getValue(),
      ''the last value captured is not as expected''
    );
  }

  @isTest
  static void verifyTimesAndCaptor() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    //When
    firstMock.get2(1, ''1-1'');
    firstMock.get2(2, ''1-2'');
    firstMock.get2(1, ''2-1'');
    firstMock.get2(2, ''2-2'');
    firstMock.get2(1, ''3-1'');
    firstMock.get2(2, ''3-2'');
    firstMock.get2(1, ''4-1'');
    firstMock.get2(2, ''4-2'');
    firstMock.get2(1, ''5-1'');
    firstMock.get2(2, ''5-2'');

    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.times(5)))
      .get2(fflib_Match.eqInteger(1), (String) argument.capture());

    System.assertEquals(
      ''5-1'',
      (string) argument.getValue(),
      ''the last value captured is not as expected''
    );
  }

  @isTest
  static void verifyCallsAndCapture() {
    // Given
    fflib_MyList firstMock = (fflib_MyList) MY_MOCKS.mock(fflib_MyList.class);
    fflib_InOrder inOrder1 = new fflib_InOrder(
      MY_MOCKS,
      new List<Object>{ firstMock }
    );

    //When
    firstMock.get2(1, ''1-1'');
    firstMock.get2(2, ''1-2'');
    firstMock.get2(1, ''2-1'');
    firstMock.get2(2, ''2-2'');
    firstMock.get2(1, ''3-1'');
    firstMock.get2(2, ''3-2'');
    firstMock.get2(1, ''4-1'');
    firstMock.get2(2, ''4-2'');
    firstMock.get2(1, ''5-1'');
    firstMock.get2(2, ''5-2'');

    fflib_ArgumentCaptor argument = fflib_ArgumentCaptor.forClass(String.class);

    ((fflib_MyList.IList) inOrder1.verify(firstMock, MY_MOCKS.calls(2)))
      .get2(fflib_Match.eqInteger(1), (String) argument.capture());

    System.assertEquals(
      ''2-1'',
      (string) argument.getValue(),
      ''the last value captured is not as expected''
    );
  }

  private static void assertVerifyInOrderExceptionForAddMoreMethod(
    String argument,
    fflib_InOrder inOrderInstance,
    fflib_MyList.IList mockToVerify,
    String expectedFailingReasson,
    Integer expectedCount,
    Integer actualCounts
  ) {
    try {
      ((fflib_MyList.IList) inOrderInstance.verify(
          mockToVerify,
          MY_MOCKS.calls(1)
        ))
        .addMore(argument);
      System.assert(false, ''expected some exception '' + expectedFailingReasson);
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String message = ''In Order: Expected : {0}, Actual: {1} -- Wanted but not invoked: {2}.addMore(String).'';

      String expectedMessage = String.format(
        message,
        new List<String>{
          '''' + expectedCount,
          '''' + actualCounts,
          fflib_MyList.getStubClassName()
        }
      );

      System.assertEquals(
        expectedMessage,
        e.getMessage(),
        ''the verify throw an Exception, but the message is not as expected''
      );
    }
  }

  private static void assertVerifyInOrderExceptionForAddMethod(
    String argument,
    fflib_InOrder inOrderInstance,
    fflib_MyList.IList mockToVerify,
    String expectedFailingReasson,
    Integer expectedCount,
    Integer actualCounts
  ) {
    try {
      ((fflib_MyList.IList) inOrderInstance.verify(
          mockToVerify,
          MY_MOCKS.calls(expectedCount)
        ))
        .add(argument);
      System.assert(false, ''expected some exception '' + expectedFailingReasson);
    } catch (fflib_ApexMocks.ApexMocksException e) {
      String message = ''In Order: Expected : {0}, Actual: {1} -- Wanted but not invoked: {2}.add(String).'';

      String expectedMessage = String.format(
        message,
        new List<String>{
          '''' + expectedCount,
          '''' + actualCounts,
          fflib_MyList.getStubClassName()
        }
      );

      System.assertEquals(
        expectedMessage,
        e.getMessage(),
        ''the verify throw an Exception, but the message is not as expected''
      );
    }
  }
}','677165256.0','True','fflib_InOrderTest','59712','Active');
INSERT INTO "ApexClass" VALUES(80,'57.0','/*
 * Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */
@isTest
public class fflib_Inheritor implements IA, IB, IC {
  public interface IA {
    String doA();
  }
  public interface IB {
    String doB();
  }
  public interface IC {
    String doC();
  }

  public String doA() {
    return ''Did A'';
  }
  public String doB() {
    return ''Did B'';
  }
  public String doC() {
    return ''Did C'';
  }
}','2514596309.0','True','fflib_Inheritor','345','Active');
INSERT INTO "ApexClass" VALUES(81,'57.0','/*
 * FinancialForce.com, inc. claims copyright in this software, its screen
 * display designs and supporting documentation. FinancialForce and
 * FinancialForce.com are trademarks of FinancialForce.com, inc. Any
 * unauthorized use, copying or sale of the above may constitute an
 * infringement of copyright and may result in criminal or other legal
 * proceedings.
 *
 * Copyright (c) 2013 FinancialForce.com, inc. All rights reserved.
 */

public interface fflib_ISObjectSelector {
  /**
   * Provides the SObjectType for the object the given Selector is providing query logic for
   **/
  Schema.SObjectType sObjectType();

  /**
   * Selects by Id records using the fields defined by the Selector configuration
   **/
  List<SObject> selectSObjectsById(Set<Id> idSet);
}','172309857.0','True','fflib_ISObjectSelector','131','Active');
INSERT INTO "ApexClass" VALUES(82,'57.0','/*
 * Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */
@isTest
public class fflib_InheritorTest {
  @isTest
  public static void canInstantiateMultipleInterfaceInheritor() {
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    Object inheritor = mocks.mock(fflib_Inheritor.class);
    System.assert(inheritor instanceof fflib_Inheritor.IA);
    System.assert(inheritor instanceof fflib_Inheritor.IB);
    System.assert(inheritor instanceof fflib_Inheritor.IC);
  }

  @isTest
  public static void canStubMultipleInterfaceInheritor() {
    fflib_ApexMocks mocks = new fflib_ApexMocks();
    fflib_Inheritor inheritor = (fflib_Inheritor) mocks.mock(
      fflib_Inheritor.class
    );

    mocks.startStubbing();
    mocks.when(inheritor.doA()).thenReturn(''Did not do A'');
    mocks.when(inheritor.doB()).thenReturn(''Did not do B'');
    mocks.when(inheritor.doC()).thenReturn(''Did not do C'');
    mocks.stopStubbing();

    System.assertEquals(''Did not do A'', inheritor.doA());
    System.assertEquals(''Did not do B'', inheritor.doB());
    System.assertEquals(''Did not do C'', inheritor.doC());
  }
}','826926915.0','True','fflib_InheritorTest','1042','Active');
INSERT INTO "ApexClass" VALUES(83,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 *	An invocation on a mock.
 *	A place holder for mock, the method that was called and the arguments that were passed.
 *	@group Core
 */
public with sharing class fflib_InvocationOnMock {
  private fflib_QualifiedMethod qm;
  private fflib_MethodArgValues methodArg;
  private Object mockInstance;

  /**
   *	Constructor for the class.
   *  @param qm The fflib_QualifiedMethod instance to be stored.
   *  @param args The fflib_MethodArgValues instance to be stored.
   *  @param mockInstance The mock instance to be stored.
   */
  public fflib_InvocationOnMock(
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues args,
    Object mockInstance
  ) {
    this.qm = qm;
    this.methodArg = args;
    this.mockInstance = mockInstance;
  }

  /**
   *	Returns the argument at the given index.
   *  @param index The index of the wanted argument.
   *  @throws ApexMocksException in case the index is out of range.
   *  @return The argument at the given index.
   */
  public Object getArgument(Integer index) {
    validateIndex(index);
    return methodArg.argValues[index];
  }

  /**
   *	Returns the list of arguments passed to the method.
   *  @return The list of arguments.
   */
  public List<Object> getArguments() {
    return methodArg.argValues;
  }

  /**
   *	Returns fflib_MethodArgValues instance that represents the arguments passed to the method.
   *  @return The fflib_MethodArgValues instance that represents the arguments passed to the method.
   */
  public fflib_MethodArgValues getMethodArgValues() {
    return methodArg;
  }

  /**
   *	Returns the fflib_QualifiedMethod instance that represent the fully qualified method called within the invocation.
   *	@return The method stored in the invocation.
   */
  public fflib_QualifiedMethod getMethod() {
    return qm;
  }

  /**
   *	Returns the mock object on which the invocation occurs.
   *	@return The mock object on which the invocation occurs.
   */
  public Object getMock() {
    return mockInstance;
  }

  private void validateIndex(Integer index) {
    if (index < 0 || index >= methodArg.argValues.size()) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''Invalid index, must be greater or equal to zero and less of '' +
        methodArg.argValues.size() +
        ''.''
      );
    }
  }
}','3503689290.0','True','fflib_InvocationOnMock','1064','Active');
INSERT INTO "ApexClass" VALUES(84,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class fflib_Match {
  private static List<fflib_IMatcher> matchers = new List<fflib_IMatcher>();

  /**
   * Matching
   * True when comparing method arg values to matchers, false when comparing absolute arg values.
   */
  public static Boolean Matching = false;

  /**
   * Used internally by the mocking framework, you shouldn''t need to call this method directly.
   * Copies the registered matchers, and then switches matching mode off.
   * @param expectedSize The expected number of matchers to be returned. If this does not match the actual value an expection is thrown.
   * @return List<fflib_IMatcher> The registered matchers, collected while in matching mode.
   */
  public static List<fflib_IMatcher> getAndClearMatchers(Integer expectedSize) {
    Matching = false;

    List<fflib_IMatcher> retval = matchers.clone();
    matchers.clear();

    if (retval.size() != expectedSize) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''The number of matchers defined ('' +
        retval.size() +
        '').'' +
        '' does not match the number expected ('' +
        expectedSize +
        '')\n'' +
        ''If you are using matchers all arguments must be passed in as matchers.\n'' +
        ''For example myList.add(fflib_Match.anyInteger(), \''String\'') should be defined as myList.add(fflib_Match.anyInteger(), fflib_Match.eq(\''String\'')).''
      );
    }

    return retval;
  }

  /**
   * Used internally by the mocking framework, you shouldn''t need to call this method directly.
   * Compares all supplied method arg values to the supplied target matchers.
   * @param methodArg The arguments supplied when the method was called
   * @param targetMatchers The matchers the arguments need to be compared with
   * @throws fflib_ApexMocks.ApexMocksException Thrown when methodArgValues is null/empty, targetMatchers is null, or their sizes don''t match
   * @return Boolean True if all arg values satisfy all of the supplied matchers.
   */
  public static Boolean matchesAllArgs(
    fflib_MethodArgValues methodArg,
    List<fflib_IMatcher> targetMatchers
  ) {
    validateArgs(methodArg, targetMatchers);

    Integer matchersSize = targetMatchers.size();
    for (Integer i = 0; i < matchersSize; i++) {
      Object argValue = methodArg.argValues[i];
      fflib_IMatcher matcher = targetMatchers[i];

      if (!matcher.matches(argValue)) {
        return false;
      }
    }

    return true;
  }

  private static void validateArgs(
    fflib_MethodArgValues methodArg,
    List<fflib_IMatcher> targetMatchers
  ) {
    if (methodArg == null) {
      throw new fflib_ApexMocks.ApexMocksException(''MethodArgs cannot be null'');
    }

    if (methodArg.argValues == null) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''MethodArgs.argValues cannot be null''
      );
    }

    if (targetMatchers == null) {
      throw new fflib_ApexMocks.ApexMocksException(''Matchers cannot be null'');
    }

    if (targetMatchers.size() != methodArg.argValues.size()) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''MethodArgs and matchers must have the same count'' +
        '', MethodArgs: ('' +
        methodArg.argValues.size() +
        '') '' +
        methodArg.argValues +
        '', Matchers: ('' +
        targetMatchers.size() +
        '') '' +
        targetMatchers
      );
    }
  }

  /**
   * Registers a matcher which will be stubbed/verified against.
   * @param matcher The matcher that needs to be compared
   * @return Object Always returns null. This can then be cast into the correct arg type
   * so that the right method is called on the mock objects.
   */
  public static Object matches(fflib_IMatcher matcher) {
    Matching = true;
    matchers.add(matcher);

    return null;
  }

  /**
   * COMBINED MATCHER
   * The allOf, anyOf and noneOf methods are overloaded to provide fluent matcher calls for up to 4 matcher conditions.
   * To connect 5 or more, the List<Object> version directly.
   */

  /**
   * Registers a matcher which will check if the method is called with an arg that matches allOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)public static Object allOf(Object o1, Object o2)
   */
  public static Object allOf(Object o1, Object o2) {
    return allOf(new List<Object>{ o1, o2 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches allOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @param o3 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object allOf(Object o1, Object o2, Object o3) {
    return allOf(new List<Object>{ o1, o2, o3 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches allOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @param o3 A dummy object returned by registering another matcher
   * @param o4 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object allOf(Object o1, Object o2, Object o3, Object o4) {
    return allOf(new List<Object>{ o1, o2, o3, o4 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches allOf
   * @param o A list of dummy objects returned by registering other matchers
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object allOf(List<Object> o) {
    return combined(fflib_MatcherDefinitions.Connective.ALL, o);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object anyOf(Object o1, Object o2) {
    return anyOf(new List<Object>{ o1, o2 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @param o3 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object anyOf(Object o1, Object o2, Object o3) {
    return anyOf(new List<Object>{ o1, o2, o3 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @param o3 A dummy object returned by registering another matcher
   * @param o4 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object anyOf(Object o1, Object o2, Object o3, Object o4) {
    return anyOf(new List<Object>{ o1, o2, o3, o4 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyOf
   * @param o A list of dummy objects returned by registering other matchers
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object anyOf(List<Object> o) {
    return combined(fflib_MatcherDefinitions.Connective.AT_LEAST_ONE, o);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches isNot
   * @param o1 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object isNot(Object o1) {
    return noneOf(new List<Object>{ o1 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches noneOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object noneOf(Object o1, Object o2) {
    return noneOf(new List<Object>{ o1, o2 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches noneOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @param o3 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object noneOf(Object o1, Object o2, Object o3) {
    return noneOf(new List<Object>{ o1, o2, o3 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches noneOf
   * @param o1 A dummy object returned by registering another matcher
   * @param o2 A dummy object returned by registering another matcher
   * @param o3 A dummy object returned by registering another matcher
   * @param o4 A dummy object returned by registering another matcher
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object noneOf(Object o1, Object o2, Object o3, Object o4) {
    return noneOf(new List<Object>{ o1, o2, o3, o4 });
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches noneOf
   * @param o A list of dummy objects returned by registering other matchers
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object noneOf(List<Object> o) {
    return combined(fflib_MatcherDefinitions.Connective.NONE, o);
  }

  private static Object combined(
    fflib_MatcherDefinitions.Connective connectiveExpression,
    List<Object> o
  ) {
    return matches(
      new fflib_MatcherDefinitions.Combined(
        connectiveExpression,
        (gatherMatchers(o))
      )
    );
  }

  private static List<fflib_IMatcher> gatherMatchers(
    Object[] ignoredMatcherObjects
  ) {
    if (ignoredMatcherObjects == null || ignoredMatcherObjects.isEmpty()) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''Must register matchers to combine''
      );
    }

    //Each ignored matcher object represents a matcher that has been registered against fflib_Match.matchers,
    //but is actually for the connective matchers.
    List<fflib_IMatcher> innerMatchers = new List<fflib_IMatcher>();

    Integer innerMatcherCount = ignoredMatcherObjects.size();
    while (innerMatchers.size() < innerMatcherCount) {
      if (matchers.isEmpty()) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''Error reclaiming inner matchers for combined matcher. Wanted '' +
          innerMatcherCount +
          '' matchers but only got '' +
          innerMatchers
        );
      }

      fflib_IMatcher innerMatcher = matchers.remove(matchers.size() - 1);

      //Add to the start of the list to preserve the order in which matchers were declared.
      //Note. Apex throws list index out of bounds if inserting an element into an empty list at index 0S
      if (!innerMatchers.isEmpty()) {
        innerMatchers.add(0, innerMatcher);
      } else {
        innerMatchers.add(innerMatcher);
      }
    }

    return innerMatchers;
  }

  /**
   * ALL OTHER MATCHER METHODS
   */

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eq
   * @param toMatch The Object to be compared
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object eq(Object toMatch) {
    return matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqBoolean
   * @param toMatch The Boolean to be compared
   * @return Boolean A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Boolean eqBoolean(Boolean toMatch) {
    return (Boolean) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqDate
   * @param toMatch The Date to be compared
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date eqDate(Date toMatch) {
    return (Date) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqDatetime
   * @param toMatch The Datetime to be compared
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime eqDatetime(Datetime toMatch) {
    return (Datetime) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqDecimal
   * @param toMatch The Decimal to be compared
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal eqDecimal(Decimal toMatch) {
    return (Decimal) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqDouble
   * @param toMatch The Double to be compared
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double eqDouble(Double toMatch) {
    return (Double) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqId
   * @param toMatch The Id to be compared
   * @return Id A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Id eqId(Id toMatch) {
    return (Id) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqInteger
   * @param toMatch The Integer to be compared
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer eqInteger(Integer toMatch) {
    return (Integer) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqList
   * @param toMatch The List to be compared
   * @return List A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static List<Object> eqList(List<Object> toMatch) {
    return (List<Object>) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqLong
   * @param toMatch The Long to be compared
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long eqLong(Long toMatch) {
    return (Long) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqSObjectField
   * @param toMatch The SObjectField to be compared
   * @return SObjectField A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static SObjectField eqSObjectField(SObjectField toMatch) {
    return (SObjectField) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqSObjectType
   * @param toMatch The SObjectType to be compared
   * @return SObjectType A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static SObjectType eqSObjectType(SObjectType toMatch) {
    return (SObjectType) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches eqString
   * @param toMatch The String to be compared
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String eqString(String toMatch) {
    return (String) matches(new fflib_MatcherDefinitions.Eq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches refEq
   * @param toMatch The Object to be compared
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object refEq(Object toMatch) {
    return matches(new fflib_MatcherDefinitions.RefEq(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyBoolean
   * @return Boolean A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Boolean anyBoolean() {
    return (Boolean) matches(new fflib_MatcherDefinitions.AnyBoolean());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyDate
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date anyDate() {
    return (Date) matches(new fflib_MatcherDefinitions.AnyDate());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyDatetime
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime anyDatetime() {
    return (Datetime) matches(new fflib_MatcherDefinitions.AnyDatetime());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyDecimal
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal anyDecimal() {
    return (Decimal) matches(new fflib_MatcherDefinitions.AnyDecimal());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyDouble
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double anyDouble() {
    return (Double) matches(new fflib_MatcherDefinitions.AnyDouble());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyFieldSet
   * @return Schema.FieldSet A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Schema.FieldSet anyFieldSet() {
    return (Schema.FieldSet) matches(
      new fflib_MatcherDefinitions.AnyFieldSet()
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyId
   * @return Id A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Id anyId() {
    return (Id) matches(new fflib_MatcherDefinitions.AnyId());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyInteger
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer anyInteger() {
    return (Integer) matches(new fflib_MatcherDefinitions.AnyInteger());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyList
   * @return List A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static List<Object> anyList() {
    return (List<Object>) matches(new fflib_MatcherDefinitions.AnyList());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyLong
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long anyLong() {
    return (Long) matches(new fflib_MatcherDefinitions.AnyLong());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyObject
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object anyObject() {
    return matches(new fflib_MatcherDefinitions.AnyObject());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anyString
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String anyString() {
    return (String) matches(new fflib_MatcherDefinitions.AnyString());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anySObject
   * @return SObject A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static SObject anySObject() {
    return (SObject) matches(new fflib_MatcherDefinitions.AnySObject());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anySObjectField
   * @return SObjectField A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static SObjectField anySObjectField() {
    return (SObjectField) matches(
      new fflib_MatcherDefinitions.AnySObjectField()
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches anySObjectType
   * @return SObjectType A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static SObjectType anySObjectType() {
    return (SObjectType) matches(new fflib_MatcherDefinitions.AnySObjectType());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches dateAfter (not inclusive)
   * @param fromDate The Date to be compared
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date dateAfter(Date fromDate) {
    return dateAfter(fromDate, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches dateAfter
   * @param fromDate The Date to be compared
   * @param inclusive Whether or not a Date equal to fromDate should be considered a match
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date dateAfter(Date fromDate, Boolean inclusive) {
    return (Date) matches(
      new fflib_MatcherDefinitions.DatetimeAfter(fromDate, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches dateBefore (not inclusive)
   * @param toDate The Date to be compared
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date dateBefore(Date toDate) {
    return dateBefore(toDate, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches dateBefore
   * @param toDate The Date to be compared
   * @param inclusive Whether or not a Date equal to toDate should be considered a match
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date dateBefore(Date toDate, Boolean inclusive) {
    return (Date) matches(
      new fflib_MatcherDefinitions.DatetimeBefore(toDate, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches dateBetween (not inclusive)
   * @param fromDate The lower bound Date to be compared
   * @param toDate The upper bound Date to be compared
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date dateBetween(Date fromDate, Date toDate) {
    return dateBetween(fromDate, false, toDate, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches dateBetween
   * @param fromDate The lower bound Date to be compared
   * @param inclusiveFrom Whether or not a Date equal to fromDate should be considered a match
   * @param toDate The upper bound Date to be compared
   * @param inclusiveTo Whether or not a Date equal to toDate should be considered a match
   * @return Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Date dateBetween(
    Date fromDate,
    Boolean inclusiveFrom,
    Date toDate,
    Boolean inclusiveTo
  ) {
    return (Date) matches(
      new fflib_MatcherDefinitions.DatetimeBetween(
        fromDate,
        inclusiveFrom,
        toDate,
        inclusiveTo
      )
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches datetimeAfter (not inclusive)
   * @param fromDate The Datetime to be compared
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime datetimeAfter(Datetime fromDate) {
    return datetimeAfter(fromDate, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches datetimeAfter
   * @param fromDate The Datetime to be compared
   * @param inclusive Whether or not a Datetime equal to fromDate should be considered a match
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime datetimeAfter(Datetime fromDate, Boolean inclusive) {
    return (Datetime) matches(
      new fflib_MatcherDefinitions.DatetimeAfter(fromDate, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches datetimeBefore (not inclusive)
   * @param toDate The Datetime to be compared
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime datetimeBefore(Datetime toDate) {
    return datetimeBefore(toDate, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches datetimeBefore
   * @param toDate The Datetime to be compared
   * @param inclusive Whether or not a Datetime equal to toDate should be considered a match
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime datetimeBefore(Datetime toDate, Boolean inclusive) {
    return (Datetime) matches(
      new fflib_MatcherDefinitions.DatetimeBefore(toDate, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches datetimeBetween (not inclusive)
   * @param fromDate The lower bound Datetime to be compared
   * @param toDate The upper bound Datetime to be compared
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime datetimeBetween(Datetime fromDate, Datetime toDate) {
    return datetimeBetween(fromDate, false, toDate, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches datetimeBetween
   * @param fromDate The lower bound Datetime to be compared
   * @param inclusiveFrom Whether or not a Datetime equal to fromDate should be considered a match
   * @param toDate The upper bound Datetime to be compared
   * @param inclusiveTo Whether or not a Datetime equal to toDate should be considered a match
   * @return Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Datetime datetimeBetween(
    Datetime fromDate,
    Boolean inclusiveFrom,
    Datetime toDate,
    Boolean inclusiveTo
  ) {
    return (Datetime) matches(
      new fflib_MatcherDefinitions.DatetimeBetween(
        fromDate,
        inclusiveFrom,
        toDate,
        inclusiveTo
      )
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches decimalBetween (not inclusive)
   * @param lower The lower number to be compared
   * @param upper The upper number to be compared
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal decimalBetween(Decimal lower, Decimal upper) {
    return decimalBetween(lower, false, upper, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches decimalBetween
   * @param lower The lower number to be compared
   * @param inclusiveLower Whether or not a number equal to the lower bound should be considered a match
   * @param upper The upper number to be compared
   * @param inclusiveUpper Whether or not a number equal to the upper bound should be considered a match
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal decimalBetween(
    Decimal lower,
    Boolean inclusiveLower,
    Decimal upper,
    Boolean inclusiveUpper
  ) {
    return (Decimal) matches(
      new fflib_MatcherDefinitions.DecimalBetween(
        lower,
        inclusiveLower,
        upper,
        inclusiveUpper
      )
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches decimalLessThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal decimalLessThan(Decimal toMatch) {
    return decimalLessThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches decimalLessThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal decimalLessThan(Decimal toMatch, Boolean inclusive) {
    return (Decimal) matches(
      new fflib_MatcherDefinitions.DecimalLessThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches decimalMoreThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal decimalMoreThan(Decimal toMatch) {
    return decimalMoreThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches decimalMoreThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Decimal decimalMoreThan(Decimal toMatch, Boolean inclusive) {
    return (Decimal) matches(
      new fflib_MatcherDefinitions.DecimalMoreThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches doubleBetween (not inclusive)
   * @param lower The lower number to be compared
   * @param upper The upper number to be compared
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double doubleBetween(Double lower, Double upper) {
    return doubleBetween(lower, false, upper, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches doubleBetween
   * @param lower The lower number to be compared
   * @param inclusiveLower Whether or not a number equal to the lower bound should be considered a match
   * @param upper The upper number to be compared
   * @param inclusiveUpper Whether or not a number equal to the upper bound should be considered a match
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double doubleBetween(
    Double lower,
    Boolean inclusiveLower,
    Double upper,
    Boolean inclusiveUpper
  ) {
    return (Double) matches(
      new fflib_MatcherDefinitions.DecimalBetween(
        lower,
        inclusiveLower,
        upper,
        inclusiveUpper
      )
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches doubleLessThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double doubleLessThan(Double toMatch) {
    return doubleLessThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches doubleLessThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double doubleLessThan(Double toMatch, Boolean inclusive) {
    return (Double) matches(
      new fflib_MatcherDefinitions.DecimalLessThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches doubleMoreThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double doubleMoreThan(Double toMatch) {
    return doubleMoreThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches doubleMoreThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Double doubleMoreThan(Double toMatch, Boolean inclusive) {
    return (Double) matches(
      new fflib_MatcherDefinitions.DecimalMoreThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches FieldSetEquivalentTo
   * @param toMatch The fieldSet to be compared
   * @return Schema.FieldSet A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Schema.FieldSet fieldSetEquivalentTo(Schema.FieldSet toMatch) {
    return (Schema.FieldSet) matches(
      new fflib_MatcherDefinitions.FieldSetEquivalentTo(toMatch)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches integerBetween (not inclusive)
   * @param lower The lower number to be compared
   * @param upper The upper number to be compared
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer integerBetween(Integer lower, Integer upper) {
    return integerBetween(lower, false, upper, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches integerBetween
   * @param lower The lower number to be compared
   * @param inclusiveLower Whether or not a number equal to the lower bound should be considered a match
   * @param upper The upper number to be compared
   * @param inclusiveUpper Whether or not a number equal to the upper bound should be considered a match
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer integerBetween(
    Integer lower,
    Boolean inclusiveLower,
    Integer upper,
    Boolean inclusiveUpper
  ) {
    return (Integer) matches(
      new fflib_MatcherDefinitions.DecimalBetween(
        lower,
        inclusiveLower,
        upper,
        inclusiveUpper
      )
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches integerLessThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer integerLessThan(Integer toMatch) {
    return integerLessThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches integerLessThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer integerLessThan(Integer toMatch, Boolean inclusive) {
    return (Integer) matches(
      new fflib_MatcherDefinitions.DecimalLessThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches integerMoreThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer integerMoreThan(Integer toMatch) {
    return integerMoreThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches integerMoreThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Integer integerMoreThan(Integer toMatch, Boolean inclusive) {
    return (Integer) matches(
      new fflib_MatcherDefinitions.DecimalMoreThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches isNotNull
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object isNotNull() {
    return matches(new fflib_MatcherDefinitions.IsNotNull());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches isNull
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object isNull() {
    return matches(new fflib_MatcherDefinitions.IsNull());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches listContains
   * @param toMatch The list to be compared
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object listContains(Object toMatch) {
    return matches(new fflib_MatcherDefinitions.ListContains(toMatch));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches listIsEmpty
   * @return Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. (You may need to cast down to your specific object type)
   */
  public static Object listIsEmpty() {
    return matches(new fflib_MatcherDefinitions.ListIsEmpty());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches longBetween (not inclusive)
   * @param lower The lower number to be compared
   * @param upper The upper number to be compared
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long longBetween(Long lower, Long upper) {
    return longBetween(lower, false, upper, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches longBetween
   * @param lower The lower number to be compared
   * @param inclusiveLower Whether or not a number equal to the lower bound should be considered a match
   * @param upper The upper number to be compared
   * @param inclusiveUpper Whether or not a number equal to the upper bound should be considered a match
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long longBetween(
    Long lower,
    Boolean inclusiveLower,
    Long upper,
    Boolean inclusiveUpper
  ) {
    return (Long) matches(
      new fflib_MatcherDefinitions.DecimalBetween(
        lower,
        inclusiveLower,
        upper,
        inclusiveUpper
      )
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches longLessThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long longLessThan(Long toMatch) {
    return longLessThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches longLessThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long longLessThan(Long toMatch, Boolean inclusive) {
    return (Long) matches(
      new fflib_MatcherDefinitions.DecimalLessThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches longMoreThan (not inclusive)
   * @param toMatch The number to be compared
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long longMoreThan(Long toMatch) {
    return longMoreThan(toMatch, false);
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches longMoreThan
   * @param toMatch The number to be compared
   * @param inclusive Whether or not a number equal to toMatch should be considered a match
   * @return Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static Long longMoreThan(Long toMatch, Boolean inclusive) {
    return (Long) matches(
      new fflib_MatcherDefinitions.DecimalMoreThan(toMatch, inclusive)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an SObject of specified SObjectType
   * @param objectType The SObjectType to be compared
   * @return SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked
   */
  public static SObject sObjectOfType(Schema.SObjectType objectType) {
    return (SObject) matches(
      new fflib_MatcherDefinitions.SObjectOfType(objectType)
    );
  }
  /**
   * Registers a matcher which will check if the method is called with an SObject
   * @param toMatch A Map of SObjectFields to required values, to be compared to concrete SObject records
   * @return SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked
   */
  public static SObject sObjectWith(Map<Schema.SObjectField, Object> toMatch) {
    return (SObject) matches(new fflib_MatcherDefinitions.SObjectWith(toMatch));
  }
  /**
   * Registers a matcher which will check if the method is called with a list of SObject
   * @param toMatch A list of Map of SObjectFields to required values, to be compared to concrete SObject records
   * @return SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked
   */
  public static SObject[] sObjectsWith(
    list<Map<Schema.SObjectField, Object>> toMatch
  ) {
    return (SObject[]) matches(
      new fflib_MatcherDefinitions.SObjectsWith(toMatch, true)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with a list of SObject
   * @param toMatch A list of Map of SObjectFields to required values, to be compared to concrete SObject records. Comparison can be order dependent
   * @return SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked
   */
  public static SObject[] sObjectsWith(
    list<Map<Schema.SObjectField, Object>> toMatch,
    Boolean matchInOrder
  ) {
    return (SObject[]) matches(
      new fflib_MatcherDefinitions.SObjectsWith(toMatch, matchInOrder)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an SObject
   * @param toMatch The Id to be compared
   * @return SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked
   */
  public static SObject sObjectWithId(Id toMatch) {
    return (SObject) matches(
      new fflib_MatcherDefinitions.SObjectWithId(toMatch)
    );
  }
  /**
   * Registers a matcher which will check if the method is called with an SObject
   * @param toMatch The name to be compared
   * @return SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked
   */
  public static SObject sObjectWithName(String toMatch) {
    return (SObject) matches(
      new fflib_MatcherDefinitions.SObjectWithName(toMatch)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches stringContains
   * @param toMatch The substring to be compared
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String stringContains(String toMatch) {
    return (String) matches(
      new fflib_MatcherDefinitions.StringContains(toMatch)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches stringEndsWith
   * @param toMatch The substring to be compared
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String stringEndsWith(String toMatch) {
    return (String) matches(
      new fflib_MatcherDefinitions.StringEndsWith(toMatch)
    );
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches stringIsBlank
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String stringIsBlank() {
    return (String) matches(new fflib_MatcherDefinitions.StringIsBlank());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches stringIsNotBlank
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String stringIsNotBlank() {
    return (String) matches(new fflib_MatcherDefinitions.StringIsNotBlank());
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches stringMatches
   * @param regEx The regex String to be compared
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String stringMatches(String regEx) {
    return (String) matches(new fflib_MatcherDefinitions.StringMatches(regEx));
  }

  /**
   * Registers a matcher which will check if the method is called with an arg that matches stringStartsWith
   * @param toMatch The substring to be compared
   * @return String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.
   */
  public static String stringStartsWith(String toMatch) {
    return (String) matches(
      new fflib_MatcherDefinitions.StringStartsWith(toMatch)
    );
  }
}','3307881506.0','True','fflib_Match','17315','Active');
INSERT INTO "ApexClass" VALUES(85,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@isTest
public with sharing class fflib_MatchTest {
  @isTest
  private static void whenMatchesAllArgsWithOneMatchReturnsTrue() {
    //Given
    fflib_MethodArgValues argValues = new fflib_MethodArgValues(
      new List<Object>{ null }
    );
    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new AlwaysMatch()
    };

    //When
    Boolean match = fflib_Match.matchesAllArgs(argValues, targetMatchers);

    //Then
    System.assert(match);
  }

  @isTest
  private static void whenMatchesAllArgsWithManyMatchesReturnsTrue() {
    //Given
    fflib_MethodArgValues argValues = new fflib_MethodArgValues(
      new List<Object>{ null, null, null, null }
    );

    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new AlwaysMatch(),
      new AlwaysMatch(),
      new AlwaysMatch(),
      new AlwaysMatch()
    };

    //When
    Boolean match = fflib_Match.matchesAllArgs(argValues, targetMatchers);

    //Then
    System.assert(match);
  }

  @isTest
  private static void whenMatchesAllArgsWithOneMismatchReturnsFalse() {
    //Given
    fflib_MethodArgValues argValues = new fflib_MethodArgValues(
      new List<Object>{ null }
    );
    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new NeverMatch()
    };

    //When
    Boolean match = fflib_Match.matchesAllArgs(argValues, targetMatchers);

    //Then
    System.assert(!match);
  }

  @isTest
  private static void whenMatchesAllArgsWithManyMismatchesReturnsFalse() {
    //Given
    fflib_MethodArgValues argValues = new fflib_MethodArgValues(
      new List<Object>{ null, null, null, null }
    );

    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new NeverMatch(),
      new NeverMatch(),
      new NeverMatch(),
      new NeverMatch()
    };

    //When
    Boolean match = fflib_Match.matchesAllArgs(argValues, targetMatchers);

    //Then
    System.assert(!match);
  }

  @isTest
  private static void whenMatchesAllArgsWithMatchesAndMismatchesReturnsFalse() {
    //Given
    fflib_MethodArgValues argValues = new fflib_MethodArgValues(
      new List<Object>{ null, null, null, null }
    );

    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new AlwaysMatch(),
      new AlwaysMatch(),
      new NeverMatch(),
      new AlwaysMatch()
    };

    //When
    Boolean match = fflib_Match.matchesAllArgs(argValues, targetMatchers);

    //Then
    System.assert(!match);
  }

  @isTest
  private static void whenMatchesAllArgsWithNullMethodArgsThrowsException() {
    //Given
    fflib_MethodArgValues methodArg = null;
    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new AlwaysMatch()
    };

    //When
    try {
      fflib_Match.matchesAllArgs(methodArg, targetMatchers);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      System.assertEquals(''MethodArgs cannot be null'', e.getMessage());
    }
  }

  @isTest
  private static void whenMatchesAllArgsWithNullMethodArgsArgValuesThrowsException() {
    //Given
    fflib_MethodArgValues methodArg = new fflib_MethodArgValues(null);
    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new AlwaysMatch()
    };

    //When
    try {
      fflib_Match.matchesAllArgs(methodArg, targetMatchers);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      System.assertEquals(
        ''MethodArgs.argValues cannot be null'',
        e.getMessage()
      );
    }
  }

  @isTest
  private static void whenMatchesAllArgsWithNullMatchersThrowsException() {
    //Given
    fflib_MethodArgValues methodArg = new fflib_MethodArgValues(
      new List<Object>{ ''Test'' }
    );
    List<fflib_IMatcher> targetMatchers = null;

    //When
    try {
      fflib_Match.matchesAllArgs(methodArg, targetMatchers);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      System.assertEquals(''Matchers cannot be null'', e.getMessage());
    }
  }

  @isTest
  private static void whenMatchesAllArgsWithDifferentSizeArgValuesAndMatchersThrowsException() {
    //Given
    fflib_MethodArgValues methodArg = new fflib_MethodArgValues(
      new List<Object>{ ''Test'' }
    );
    List<fflib_IMatcher> targetMatchers = new List<fflib_IMatcher>{
      new AlwaysMatch(),
      new AlwaysMatch()
    };

    //When
    try {
      fflib_Match.matchesAllArgs(methodArg, targetMatchers);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      String expectedMessage =
        ''MethodArgs and matchers must have the same count'' +
        '', MethodArgs: ('' +
        methodArg.argValues.size() +
        '') '' +
        methodArg.argValues +
        '', Matchers: ('' +
        targetMatchers.size() +
        '') '' +
        targetMatchers;

      System.assertEquals(expectedMessage, e.getMessage());
    }
  }

  @isTest
  private static void whenMatchesWithOneMatcherSetsMatchingToTrue() {
    //Given
    fflib_IMatcher matcher = new AlwaysMatch();

    //When
    fflib_Match.matches(matcher);

    //Then
    System.assert(fflib_Match.Matching);
  }

  @isTest
  private static void whenMatchesWithOneMatcherRegistersMatcher() {
    //Given
    fflib_IMatcher matcher = new AlwaysMatch();

    //When
    fflib_Match.matches(matcher);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );

    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(matcher === registeredMatchers[0]);
  }

  @isTest
  private static void whenMatchesWithOneMatcherReturnsNull() {
    //Given
    fflib_IMatcher matcher = new AlwaysMatch();

    //When
    Object retval = fflib_Match.matches(matcher);

    //Then
    System.assertEquals(null, retval);
  }

  @isTest
  private static void allOfWithNoArgsThrowsException() {
    //Given/When
    try {
      Object x = fflib_Match.allOf((List<Object>) null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      System.assertEquals(''Must register matchers to combine'', e.getMessage());
    }
  }

  @isTest
  private static void allOfWithEmptyArgsThrowsException() {
    //Given/When
    try {
      Object x = fflib_Match.allOf(new List<Object>{});
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      System.assertEquals(''Must register matchers to combine'', e.getMessage());
    }
  }

  @isTest
  private static void allOfWithoutRegisteringInnerMatchersThrowsException() {
    //Given/When
    try {
      //Should be using fflib_Match.allOf(new List<Object>{ fflib_Match.myMatcher(''Hello'') })
      //to register the inner matcher.
      Object x = fflib_Match.allOf(new List<Object>{ ''Hello'' });
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      //Then
      String expectedMessage =
        ''Error reclaiming inner matchers for combined matcher. '' +
        ''Wanted 1 matchers but only got '' +
        new List<fflib_IMatcher>();
      System.assertEquals(expectedMessage, e.getMessage());
    }
  }

  @isTest
  private static void allOfWith2ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.allOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void allOfWith3ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.allOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2''),
      fflib_Match.eq(''hello3'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void allOfWith4ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.allOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2''),
      fflib_Match.eq(''hello3''),
      fflib_Match.eq(''hello4'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void allOfWithListArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.allOf(new List<Object>{ fflib_Match.eq(''hello'') });

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void anyOfWith2ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.anyOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void anyOfWith3ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.anyOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2''),
      fflib_Match.eq(''hello3'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void anyOfWith4ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.anyOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2''),
      fflib_Match.eq(''hello3''),
      fflib_Match.eq(''hello4'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void anyOfWithListArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.anyOf(new List<Object>{ fflib_Match.eq(''hello'') });

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void isNotRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.isNot(fflib_Match.eq(''hello1''));

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void noneOfWith2ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.noneOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void noneOfWith3ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.noneOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2''),
      fflib_Match.eq(''hello3'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void noneOfWith4ArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.noneOf(
      fflib_Match.eq(''hello1''),
      fflib_Match.eq(''hello2''),
      fflib_Match.eq(''hello3''),
      fflib_Match.eq(''hello4'')
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void noneOfWithListArgsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.noneOf(new List<Object>{ fflib_Match.eq(''hello'') });

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.Combined
    );
  }

  @isTest
  private static void eqRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eq(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqBooleanRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqBoolean(true);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqDateRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqDate(Date.today());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqDatetimeRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqDatetime(System.now());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqDecimalRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqDecimal(123);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqDoubleRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqDouble(123);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqIdRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqId(''001000000000001AAA'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqIntegerRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqInteger(123);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqListRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqList(new List<String>{ ''hello'' });

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqLongRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqLong(123);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqSObjectFieldRegistersCorrectMatcherType() {
    //Given/When
    Schema.SObjectField f = Schema.getGlobalDescribe()
      .get(''Account'')
      .getDescribe()
      .fields.getMap()
      .get(''Id'');
    Object x = fflib_Match.eqSObjectField(f);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqSObjectTypeRegistersCorrectMatcherType() {
    //Given/When
    Schema.SObjectType ot = Schema.getGlobalDescribe().get(''Account'');
    Object x = fflib_Match.eqSObjectType(ot);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  public static void eqStringRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.eqString(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(registeredMatchers[0] instanceof fflib_MatcherDefinitions.Eq);
  }

  @isTest
  private static void refEqRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.refEq(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.RefEq
    );
  }

  @isTest
  private static void anyBooleanRegistersCorrectMatcherType() {
    //Given/When
    Boolean x = fflib_Match.anyBoolean();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyBoolean
    );
  }

  @isTest
  private static void anyDateRegistersCorrectMatcherType() {
    //Given/When
    Date x = fflib_Match.anyDate();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyDate
    );
  }

  @isTest
  private static void anyDatetimeRegistersCorrectMatcherType() {
    //Given/When
    Datetime x = fflib_Match.anyDatetime();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyDatetime
    );
  }

  @isTest
  private static void anyDecimalRegistersCorrectMatcherType() {
    //Given/When
    Decimal x = fflib_Match.anyDecimal();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyDecimal
    );
  }

  @isTest
  private static void anyDoubleRegistersCorrectMatcherType() {
    //Given/When
    Double x = fflib_Match.anyDouble();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyDouble
    );
  }

  @isTest
  private static void anyFieldSetRegistersCorrectMatcherType() {
    //Given/When
    Schema.FieldSet x = fflib_Match.anyFieldSet();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyFieldSet
    );
  }

  @isTest
  private static void anyIdRegistersCorrectMatcherType() {
    //Given/When
    Id x = fflib_Match.anyId();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyId
    );
  }

  @isTest
  private static void anyIntegerRegistersCorrectMatcherType() {
    //Given/When
    Integer x = fflib_Match.anyInteger();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyInteger
    );
  }

  @isTest
  private static void anyListRegistersCorrectMatcherType() {
    //Given/When
    List<Object> x = fflib_Match.anyList();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyList
    );
  }

  @isTest
  private static void anyLongRegistersCorrectMatcherType() {
    //Given/When
    Long x = fflib_Match.anyLong();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyLong
    );
  }

  @isTest
  private static void anyObjectRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.anyObject();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyObject
    );
  }

  @isTest
  private static void anyStringRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.anyString();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnyString
    );
  }

  @isTest
  private static void anySObjectRegistersCorrectMatcherType() {
    //Given/When
    SObject x = fflib_Match.anySObject();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnySObject
    );
  }

  @isTest
  private static void anySObjectFieldRegistersCorrectMatcherType() {
    //Given/When
    SObjectField x = fflib_Match.anySObjectField();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnySObjectField
    );
  }

  @isTest
  private static void anySObjectTypeRegistersCorrectMatcherType() {
    //Given/When
    SObjectType x = fflib_Match.anySObjectType();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.AnySObjectType
    );
  }

  @isTest
  private static void dateAfterRegistersCorrectMatcherType() {
    //Given/When
    Date x = fflib_Match.dateAfter(Date.today());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DatetimeAfter
    );
  }

  @isTest
  private static void dateBeforeRegistersCorrectMatcherType() {
    //Given/When
    Date x = fflib_Match.dateBefore(Date.today());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DatetimeBefore
    );
  }

  @isTest
  private static void dateBetweenRegistersCorrectMatcherType() {
    //Given/When
    Date x = fflib_Match.dateBetween(Date.today(), Date.today());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DatetimeBetween
    );
  }

  @isTest
  private static void datetimeAfterRegistersCorrectMatcherType() {
    //Given/When
    Datetime x = fflib_Match.datetimeAfter(System.now());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DatetimeAfter
    );
  }

  @isTest
  private static void datetimeBeforeRegistersCorrectMatcherType() {
    //Given/When
    Datetime x = fflib_Match.datetimeBefore(System.now());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DatetimeBefore
    );
  }

  @isTest
  private static void datetimeBetweenRegistersCorrectMatcherType() {
    //Given/When
    Datetime x = fflib_Match.datetimeBetween(System.now(), System.now());

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DatetimeBetween
    );
  }

  @isTest
  private static void decimalBetweenRegistersCorrectMatcherType() {
    //Given/When
    Decimal x = fflib_Match.decimalBetween(0, 10);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalBetween
    );
  }

  @isTest
  private static void decimalLessThanRegistersCorrectMatcherType() {
    //Given/When
    Decimal x = fflib_Match.decimalLessThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalLessThan
    );
  }

  @isTest
  private static void decimalMoreThanRegistersCorrectMatcherType() {
    //Given/When
    Decimal x = fflib_Match.decimalMoreThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalMoreThan
    );
  }

  @isTest
  private static void doubleBetweenRegistersCorrectMatcherType() {
    //Given/When
    Double x = fflib_Match.doubleBetween(0, 10);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalBetween
    );
  }

  @isTest
  private static void doubleLessThanRegistersCorrectMatcherType() {
    //Given/When
    Double x = fflib_Match.doubleLessThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalLessThan
    );
  }

  @isTest
  private static void doubleMoreThanRegistersCorrectMatcherType() {
    //Given/When
    Double x = fflib_Match.doubleMoreThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalMoreThan
    );
  }

  @isTest
  private static void fieldSetEquivalentWithNullFieldSetThrowsException() {
    try {
      fflib_Match.fieldSetEquivalentTo(null);
      System.assert(false, ''ExpectedException'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void fieldSetEquivalentToRegistersCorrectMatcherType() {
    Schema.FieldSet anyFieldSet = fflib_ApexMocksUtilsTest.findAnyFieldSet();
    if (anyFieldSet == null) {
      return;
    }

    //Given/When
    Schema.FieldSet x = fflib_Match.fieldSetEquivalentTo(anyFieldSet);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.FieldSetEquivalentTo
    );
  }

  @isTest
  private static void integerBetweenRegistersCorrectMatcherType() {
    //Given/When
    Integer x = fflib_Match.integerBetween(0, 10);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalBetween
    );
  }

  @isTest
  private static void integerLessThanRegistersCorrectMatcherType() {
    //Given/When
    Integer x = fflib_Match.integerLessThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalLessThan
    );
  }

  @isTest
  private static void integerMoreThanRegistersCorrectMatcherType() {
    //Given/When
    Integer x = fflib_Match.integerMoreThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalMoreThan
    );
  }

  @isTest
  private static void isNotNullRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.isNotNull();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.IsNotNull
    );
  }

  @isTest
  private static void isNullRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.isNull();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.IsNull
    );
  }

  @isTest
  private static void listContainsRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.listContains(''fred'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.ListContains
    );
  }

  @isTest
  private static void listIsEmptyRegistersCorrectMatcherType() {
    //Given/When
    Object x = fflib_Match.listIsEmpty();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.ListIsEmpty
    );
  }

  @isTest
  private static void longBetweenRegistersCorrectMatcherType() {
    //Given/When
    Long x = fflib_Match.longBetween(0, 10);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalBetween
    );
  }

  @isTest
  private static void longLessThanRegistersCorrectMatcherType() {
    //Given/When
    Long x = fflib_Match.longLessThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalLessThan
    );
  }

  @isTest
  private static void longMoreThanRegistersCorrectMatcherType() {
    //Given/When
    Long x = fflib_Match.longMoreThan(0);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.DecimalMoreThan
    );
  }

  @isTest
  private static void sObjectOfTypeRegistersCorrectMatcherType() {
    //Given
    Schema.SObjectType ot = Schema.getGlobalDescribe().get(''Account'');
    if (ot == null) {
      return;
    }

    //When
    SObject x = fflib_Match.sObjectOfType(ot);

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.SObjectOfType
    );
  }

  @isTest
  private static void sObjectWithRegistersCorrectMatcherType() {
    //Given
    Schema.SObjectType ot = Schema.getGlobalDescribe().get(''Account'');
    if (ot == null) {
      return;
    }

    Schema.SObjectField f = ot.getDescribe().fields.getMap().get(''Id'');

    //When
    SObject x = fflib_Match.sObjectWith(
      new Map<Schema.SObjectField, Object>{ f => null }
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.SObjectWith
    );
  }

  @isTest
  private static void sObjectsWithRegistersCorrectMatcherType() {
    //Given
    Schema.SObjectType ot = Schema.getGlobalDescribe().get(''Account'');
    if (ot == null) {
      return;
    }

    Schema.SObjectField f = ot.getDescribe().fields.getMap().get(''Id'');

    //When
    SObject[] x = fflib_Match.sObjectsWith(
      new List<Map<Schema.SObjectField, Object>>{
        new Map<Schema.SObjectField, Object>{ f => null }
      }
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.SObjectsWith
    );
  }

  @isTest
  private static void sObjectsWithMatchInOrderRegistersCorrectMatcherType() {
    //Given
    Schema.SObjectType ot = Schema.getGlobalDescribe().get(''Account'');
    if (ot == null) {
      return;
    }

    Schema.SObjectField f = ot.getDescribe().fields.getMap().get(''Id'');

    //When
    SObject[] x = fflib_Match.sObjectsWith(
      new List<Map<Schema.SObjectField, Object>>{
        new Map<Schema.SObjectField, Object>{ f => null }
      },
      false
    );

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.SObjectsWith,
      registeredMatchers
    );
  }

  @isTest
  private static void sObjectWithIdRegistersCorrectMatcherType() {
    //Given/When
    SObject x = fflib_Match.sObjectWithId(''001000000000001AAA'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.SObjectWithId
    );
  }

  @isTest
  private static void sObjectWithNameRegistersCorrectMatcherType() {
    //Given/When
    SObject x = fflib_Match.sObjectWithName(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.SObjectWithName
    );
  }

  @isTest
  private static void stringContainsRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.stringContains(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.StringContains
    );
  }

  @isTest
  private static void stringEndsWithRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.stringEndsWith(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.StringEndsWith
    );
  }

  @isTest
  private static void stringIsBlankRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.stringIsBlank();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.StringIsBlank
    );
  }

  @isTest
  private static void stringIsNotBlankRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.stringIsNotBlank();

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.StringIsNotBlank
    );
  }

  @isTest
  private static void stringMatchesRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.stringMatches(''[a-z]*'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.StringMatches
    );
  }

  @isTest
  private static void stringStartsWithRegistersCorrectMatcherType() {
    //Given/When
    String x = fflib_Match.stringStartsWith(''hello'');

    //Then
    List<fflib_IMatcher> registeredMatchers = fflib_Match.getAndClearMatchers(
      1
    );
    System.assertNotEquals(null, registeredMatchers);
    System.assertEquals(1, registeredMatchers.size());
    System.assert(
      registeredMatchers[0] instanceof fflib_MatcherDefinitions.StringStartsWith
    );
  }

  private class AlwaysMatch implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return true;
    }
  }

  private class NeverMatch implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return false;
    }
  }
}','1373270579.0','True','fflib_MatchTest','42583','Active');
INSERT INTO "ApexClass" VALUES(86,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Class providing Apex Mocks standard matcher implementations.
 * You shouldn''t need to reference the classes directly outside of the ApexMocks framework, instead use the equivalent helper method in fflib_Match
 * to construct the matcher, register the matcher and return an object of the correct type to be called in your unit test.
 * E.g. Don''t construct Eq(Object toMatch), instead call fflib_Match.eq(Object toMatch).
 */
public with sharing class fflib_MatcherDefinitions {
  /**
   * Connective - Enum representing the possible operators for the Combined matcher. Possible values: ALL, AT_LEAST_ONE, NONE
   */
  public enum Connective {
    ALL,
    AT_LEAST_ONE,
    NONE
  }

  /*
   * COMBINED MATCHER
   */

  /**
   * Combined matcher: compares the supplied argument matches one, all or none of the internal matchers
   */
  public class Combined implements fflib_IMatcher {
    private Connective connectiveExpression;
    private List<fflib_IMatcher> internalMatchers;

    /**
     * Combined constructor
     * @param connectiveExpression Controls the combination mode, i.e. if we need to match all, any or none of the inner matchers
     * @param internalMatchers An ordered list of the internal matchers to be combined
     * @return fflib_MatcherDefinitions.Combined A new Combined instance
     */
    public Combined(
      Connective connectiveExpression,
      List<fflib_IMatcher> internalMatchers
    ) {
      this.connectiveExpression = validate(connectiveExpression);
      this.internalMatchers = validate(internalMatchers);
    }

    public Boolean matches(Object arg) {
      for (fflib_IMatcher internalMatcher : internalMatchers) {
        if (internalMatcher.matches(arg)) {
          if (connectiveExpression == Connective.AT_LEAST_ONE) {
            //At least one match => success!
            return true;
          } else if (connectiveExpression == Connective.NONE) {
            //At least one match => failure!
            return false;
          }
        } else if (connectiveExpression == Connective.ALL) {
          //At least one mismatch => failure!
          return false;
        }
      }

      //We didn''t return early.
      //If matching any, must have been no matches => failure!
      //If matching all, must have been all matches => success!
      //If matching none, must have been all mismatches => success!
      return connectiveExpression != Connective.AT_LEAST_ONE;
    }

    private Connective validate(Connective connectiveExpression) {
      if (connectiveExpression == null) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''Invalid connective expression: '' + connectiveExpression
        );
      }

      return connectiveExpression;
    }

    private List<fflib_IMatcher> validate(List<fflib_IMatcher> innerMatchers) {
      if (innerMatchers == null || innerMatchers.isEmpty()) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''Invalid inner matchers: '' + innerMatchers
        );
      }

      return innerMatchers;
    }
  }

  /*
   * OBJECT MATCHERS
   */

  /**
   * Eq matcher: checks if the supplied argument is equal (==) to a specified object
   */
  public class Eq implements fflib_IMatcher {
    private Object toMatch;

    /**
     * Eq constructor
     * @param toMatch The object to be compared
     * @return fflib_MatcherDefinitions.Eq A new Eq instance
     */
    public Eq(Object toMatch) {
      this.toMatch = validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      return toMatch == arg;
    }
  }

  /**
   * RefEq matcher: checks if the supplied argument is a reference to the same object (===) as a specified object
   */
  public class RefEq implements fflib_IMatcher {
    private Object toMatch;

    /**
     * RefEq constructor
     * @param toMatch The object to be compared
     * @return fflib_MatcherDefinitions.RefEq A new RefEq instance
     */
    public RefEq(Object toMatch) {
      this.toMatch = validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      return toMatch === arg;
    }
  }

  /*
   * ANY MATCHERS
   */

  /**
   * AnyBoolean matcher: checks if the supplied argument is an instance of a Boolean
   */
  public class AnyBoolean implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Boolean;
    }
  }

  /**
   * AnyDate matcher: checks if the supplied argument is an instance of a Date
   */
  public class AnyDate implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Date;
    }
  }

  /**
   * AnyDatetime matcher: checks if the supplied argument is an instance of a Datetime
   */
  public class AnyDatetime implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Datetime;
    }
  }

  /**
   * AnyDecimal matcher: checks if the supplied argument is an instance of a Decimal
   */
  public class AnyDecimal implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Decimal;
    }
  }

  /**
   * AnyDouble matcher: checks if the supplied argument is an instance of a Double
   */
  public class AnyDouble implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Double;
    }
  }

  /**
   * AnyFieldSet matcher: checks if the supplied argument is an instance of a FieldSet
   */
  public class AnyFieldSet implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Schema.FieldSet;
    }
  }

  /**
   * AnyId matcher: checks if the supplied argument is an instance of an Id
   */
  public class AnyId implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Id;
    }
  }

  /**
   * AnyInteger matcher: checks if the supplied argument is an instance of an Integer
   */
  public class AnyInteger implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Integer;
    }
  }

  /**
   * AnyList matcher: checks if the supplied argument is an instance of a List
   */
  public class AnyList implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof List<Object>;
    }
  }

  /**
   * AnyLong matcher: checks if the supplied argument is an instance of a Long
   */
  public class AnyLong implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof Long;
    }
  }

  /**
   * AnyObject matcher: checks if the supplied argument is an instance of an Object
   */
  public class AnyObject implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null;
    }
  }

  /**
   * AnyString matcher: checks if the supplied argument is an instance of a String
   */
  public class AnyString implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof String;
    }
  }

  /**
   * AnySObject matcher: checks if the supplied argument is an instance of an SObject
   */
  public class AnySObject implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof SObject;
    }
  }

  /**
   * AnySObjectField matcher: checks if the supplied argument is an instance of an SObjectField
   */
  public class AnySObjectField implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof SObjectField;
    }
  }

  /**
   * AnySObjectType matcher: checks if the supplied argument is an instance of an SObjectType
   */
  public class AnySObjectType implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null && arg instanceof SObjectType;
    }
  }

  /*
   * DATETIME MATCHERS
   */

  /**
   * DatetimeAfter matcher: checks if the supplied argument is after a specified datetime
   */
  public class DatetimeAfter implements fflib_IMatcher {
    private Datetime fromDatetime;
    private Boolean inclusive;

    /**
     * DatetimeAfter constructor
     * @param fromDatetime The datetime to be compared
     * @param inclusive Whether or not dates equal to the fromDatetime should be considered a match
     * @return fflib_MatcherDefinitions.DatetimeAfter A new DatetimeAfter instance
     */
    public DatetimeAfter(Datetime fromDatetime, Boolean inclusive) {
      this.fromDatetime = (Datetime) validateNotNull(fromDatetime);
      this.inclusive = (Boolean) validateNotNull(inclusive);
    }

    public Boolean matches(Object arg) {
      if (arg instanceof Datetime) {
        Datetime datetimeToCompare = (Datetime) arg;
        return inclusive
          ? fromDatetime <= datetimeToCompare
          : fromDatetime < datetimeToCompare;
      }

      return false;
    }
  }

  /**
   * DatetimeBefore matcher: checks if the supplied argument is before a specified datetime
   */
  public class DatetimeBefore implements fflib_IMatcher {
    private Datetime toDatetime;
    private Boolean inclusive;

    /**
     * DatetimeBefore constructor
     * @param toDatetime The datetime to be compared
     * @param inclusive Whether or not dates equal to the toDatetime should be considered a match
     * @return fflib_MatcherDefinitions.DatetimeBefore A new DatetimeBefore instance
     */
    public DatetimeBefore(Datetime toDatetime, Boolean inclusive) {
      this.toDatetime = (Datetime) validateNotNull(toDatetime);
      this.inclusive = (Boolean) validateNotNull(inclusive);
    }

    public Boolean matches(Object arg) {
      if (arg instanceof Datetime) {
        Datetime datetimeToCompare = (Datetime) arg;
        return inclusive
          ? datetimeToCompare <= toDatetime
          : datetimeToCompare < toDatetime;
      }

      return false;
    }
  }

  /**
   * DatetimeBetween matcher: checks if the supplied argument is between two specified datetimes
   */
  public class DatetimeBetween implements fflib_IMatcher {
    private Datetime fromDatetime;
    private Boolean inclusiveFrom;
    private Datetime toDatetime;
    private Boolean inclusiveTo;

    /**
     * DatetimeBetween constructor
     * @param fromDatetime The lower bound datetime to be compared
     * @param inclusiveFrom Whether or not dates equal to the fromDatetime should be considered a match
     * @param toDatetime The upper bound dateetime to be compared
     * @param inclusiveTo Whether or not dates equal to the toDatetime should be considered a match
     * @return fflib_MatcherDefinitions.DatetimeBetween A new DatetimeBetween instance
     */
    public DatetimeBetween(
      Datetime fromDatetime,
      Boolean inclusiveFrom,
      Datetime toDatetime,
      Boolean inclusiveTo
    ) {
      this.fromDatetime = (Datetime) validateNotNull(fromDatetime);
      this.inclusiveFrom = (Boolean) validateNotNull(inclusiveFrom);
      this.toDatetime = (Datetime) validateNotNull(toDatetime);
      this.inclusiveTo = (Boolean) validateNotNull(inclusiveTo);
    }

    public Boolean matches(Object arg) {
      if (arg instanceof Datetime) {
        Datetime datetimeToCompare = (Datetime) arg;
        if (
          (inclusiveFrom
            ? datetimeToCompare >= fromDatetime
            : datetimeToCompare > fromDatetime) &&
          (inclusiveTo
            ? datetimeToCompare <= toDatetime
            : datetimeToCompare < toDatetime)
        ) {
          return true;
        }
      }

      return false;
    }
  }

  /*
   * DECIMAL (AND OTHER NUMBER) MATCHERS
   */

  /**
   * DecimalBetween matcher: checks if the supplied argument is between two specified decimals
   */
  public class DecimalBetween implements fflib_IMatcher {
    private Decimal lower;
    private Boolean inclusiveLower;
    private Decimal upper;
    private Boolean inclusiveUpper;

    /**
     * DecimalBetween constructor
     * @param lower The lower bound number to be compared
     * @param inclusiveLower Whether or not numbers equal to lower should be considered a match
     * @param upper The upper bound number to be compared
     * @param inclusiveUpper Whether or not numbers equal to upper should be considered a match
     * @return fflib_MatcherDefinitions.DecimalBetween A new DecimalBetween instance
     */
    public DecimalBetween(
      Decimal lower,
      Boolean inclusiveLower,
      Decimal upper,
      Boolean inclusiveUpper
    ) {
      this.lower = (Decimal) validateNotNull(lower);
      this.inclusiveLower = (Boolean) validateNotNull(inclusiveLower);
      this.upper = (Decimal) validateNotNull(upper);
      this.inclusiveUpper = (Boolean) validateNotNull(inclusiveUpper);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof Decimal) {
        Decimal longArg = (Decimal) arg;

        if (
          (inclusiveLower ? longArg >= lower : longArg > lower) &&
          (inclusiveUpper ? longArg <= upper : longArg < upper)
        ) {
          return true;
        }
      }

      return false;
    }
  }

  /**
   * DecimalLessThan matcher: checks if the supplied argument is less than a specified decimal
   */
  public class DecimalLessThan implements fflib_IMatcher {
    private Decimal toMatch;
    private Boolean inclusive;

    /**
     * DecimalLessThan constructor
     * @param toMatch The number to be compared against
     * @param inclusive Whether or not numbers equal to toMatch should be considered a match
     * @return fflib_MatcherDefinitions.DecimalLessThan A new DecimalLessThan instance
     */
    public DecimalLessThan(Decimal toMatch, Boolean inclusive) {
      this.toMatch = (Decimal) validateNotNull(toMatch);
      this.inclusive = (Boolean) validateNotNull(inclusive);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof Decimal) {
        Decimal longArg = (Decimal) arg;
        return inclusive ? longArg <= toMatch : longArg < toMatch;
      }

      return false;
    }
  }

  /**
   * DecimalMoreThan matcher: checks if the supplied argument is greater than a specified decimal
   */
  public class DecimalMoreThan implements fflib_IMatcher {
    private Decimal toMatch;
    private Boolean inclusive;

    /**
     * DecimalMoreThan constructor
     * @param toMatch The number to be compared against
     * @param inclusive Whether or not numbers equal to toMatch should be considered a match
     * @return fflib_MatcherDefinitions.DecimalMoreThan A new DecimalMoreThan instance
     */
    public DecimalMoreThan(Decimal toMatch, Boolean inclusive) {
      this.toMatch = (Decimal) validateNotNull(toMatch);
      this.inclusive = (Boolean) validateNotNull(inclusive);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof Decimal) {
        Decimal longArg = (Decimal) arg;
        return inclusive ? longArg >= toMatch : longArg > toMatch;
      }

      return false;
    }
  }

  /**
   * FIELDSET MATCHERS
   */

  /**
   * FieldSetEquivalentTo matcher: checks the supplied argument is a field set with the same field set members as a specified field set
   * This matcher is needed because equivalent FieldSets do not pass == checks, and we can''t override equals/hashcode on FieldSets.
   */
  public class FieldSetEquivalentTo implements fflib_IMatcher {
    private final Set<Schema.FieldSetMember> toMatch;

    /*
     * Dirty test-only constructor, allowing us to test this class even if there are no field sets defined in the current org.
     */
    @TestVisible
    public FieldSetEquivalentTo() {
      this.toMatch = null;
    }

    public FieldSetEquivalentTo(Schema.FieldSet toMatch) {
      this.toMatch = new Set<Schema.FieldSetMember>(
        ((Schema.FieldSet) validateNotNull(toMatch)).getFields()
      );
    }

    public Boolean matches(Object arg) {
      return (toMatch != null &&
        arg != null &&
        arg instanceof Schema.FieldSet)
        ? toMatch ==
          new Set<Schema.FieldSetMember>(((FieldSet) arg).getFields())
        : false;
    }
  }

  /*
   * IS MATCHERS
   */

  /**
   * IsNotNull matcher: checks the supplied argument is not null
   */
  public class IsNotNull implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null;
    }
  }

  /**
   * IsNull matcher: checks the supplied argument is null
   */
  public class IsNull implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg == null;
    }
  }

  /*
   * LIST MATCHERS
   */

  /**
   * ListContains matcher: checks if the supplied argument is equal (==) to any of the elements in a specified list
   */
  public class ListContains implements fflib_IMatcher {
    private Object toMatch;

    /**
     * ListContains constructor
     * @param toMatch The list of objects to be compared
     * @return fflib_MatcherDefinitions.ListContains A new ListContains instance
     */
    public ListContains(Object toMatch) {
      this.toMatch = toMatch;
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof List<Object>) {
        for (Object o : (List<Object>) arg) {
          if (o == toMatch) {
            return true;
          }
        }
      }

      return false;
    }
  }

  /**
   * ListIsEmpty matcher: checks if the supplied argument is an empty list
   */
  public class ListIsEmpty implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg != null &&
        arg instanceof List<Object> &&
        ((List<Object>) arg).isEmpty();
    }
  }

  /*
   * SOBJECT MATCHERS
   */

  /**
   * SObjectOfType matcher: checks if the supplied argument has the specified SObjectType
   */
  public class SObjectOfType implements fflib_IMatcher {
    private Schema.SObjectType objectType;

    /**
     * SObjectOfType constructor
     * @param objectType The SObjectType to be compared
     * @return fflib_MatcherDefinitions.SObjectOfType A new SObjectOfType instance
     */
    public SObjectOfType(Schema.SObjectType objectType) {
      this.objectType = (Schema.SObjectType) validateNotNull(objectType);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof SObject) {
        SObject soArg = (SObject) arg;
        return soArg.getSObjectType() == objectType;
      }

      return false;
    }
  }

  /**
   * SObjectWith matcher: compares the supplied argument against a Map<Schema.SObjectField, Object>, representing fields and their expected values.
   * Note. this method silently catches exceptions getting values for the supplied fields from the arguments supplied in method calls.
   *
   * If your matcher is mysteriously failing for your SObject record, it may be getting silent ''SObject row was retrieved via SOQL without querying
   * the requested field'' exceptions, because you haven''t queried all of the fields used in this matcher.
   */
  public class SObjectWith implements fflib_IMatcher {
    private Map<Schema.SObjectField, Object> toMatch;

    /**
     * SObjectWith constructor
     * @param toMatch A map of fields to their values to be compared. We compare each of these fields against the supplied sobject''s field values.
     * @return fflib_MatcherDefinitions.SObjectWith A new SObjectWith instance
     */
    public SObjectWith(Map<Schema.SObjectField, Object> toMatch) {
      this.toMatch = validate(toMatch);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof SObject) {
        SObject soArg = (SObject) arg;
        if (!sobjectMatches(soArg, this.toMatch)) {
          return false;
        }
        return true;
      }

      return false;
    }

    private Map<Schema.SObjectField, Object> validate(
      Map<Schema.SObjectField, Object> arg
    ) {
      if (arg == null || arg.isEmpty()) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''Arg cannot be null/empty: '' + arg
        );
      }

      return arg;
    }
  }

  /**
   * SObjectsWith matcher: compares the supplied list<Sobject> argument against a list<Map<Schema.SObjectField, Object>>, representing fields and their expected values.
   * Each list element represents one Sobject in a list supplied to a mocked method that accepts list<SObject>.
   * Each list element that is a map<Schema.SobjectField,Object> is compared against the equivalent argument list element position
   *
   * Example:
   *   You use uow.registerNew(someListofAccounts). You mock uow in the testmethod.
   *   toMatch is new list<Schema.SObjectField,Object> {
   *      new map<Schema.SobjectField,Object> {Account.Name => ''foo''},
   *      new map<Schema.SobjectField,Object> {Account.Name => ''bar''}
   *    }
   *   By default, matchers compare against argument elements in order, viz:
   * 		The matcher will compare the first Account in the list passed to uow.registerNew to the first map of field values (i.e. Account[0].Name must be ''foo'')
   *   	The matcher then compares the second Account in the list passed to uow.registerNew to the second map of field values (i.e. Account[1].Name must be ''bar'')
   *
   *   Optional second argument matchInOrderr if false means that each argument element is compared against all matcher elements
   *   if everuy argument is matched exactly once and no matcher matches more than once, then the match is true
   *
   * If the arity of the list passed in the mocked method doesn''t agree with the arity of the map of expected field values, false is returned
   *
   * Note. this method silently catches exceptions getting values for the supplied fields from the arguments supplied in method calls.
   *
   * If your matcher is mysteriously failing for your SObject record, it may be getting silent ''SObject row was retrieved via SOQL without querying
   * the requested field'' exceptions, because you haven''t queried all of the fields used in this matcher.
   */
  public class SObjectsWith implements fflib_IMatcher {
    private list<Map<Schema.SObjectField, Object>> toMatch;
    private Boolean matchInOrder {
      get {
        return matchInOrder == null ? false : matchInOrder;
      }
      set;
    }

    /**
     * SObjectsWith constructor
     * @param toMatch A list of maps of fields to their values to be compared. We compare each of these fields against the supplied list of sobject''s field values.
     * @return fflib_MatcherDefinitions.SObjectWith A new SObjectWith instance
     */
    public SObjectsWith(
      list<Map<Schema.SObjectField, Object>> toMatch,
      Boolean matchInOrder
    ) {
      this.toMatch = validate(toMatch);
      this.matchInOrder = matchInOrder;
    }
    public SObjectsWith(list<Map<Schema.SObjectField, Object>> toMatch) {
      this.toMatch = validate(toMatch);
      this.matchInOrder = true;
    }
    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof list<SObject>) {
        SObject[] sobjsArg = (SObject[]) arg;
        list<map<Schema.SObjectField, Object>> toMatches = new List<map<Schema.SObjectField, Object>>();

        //	Counters for matchInOrder = false; not relevant for matchInOrder = true
        list<Integer> argMatchedCounts = new List<Integer>(); // # times matched by a matcher. anything other than 1 is match error
        list<Integer> matcherMatchedCounts = new List<Integer>(); // for each map<Schema.SObjectField,Object>
        // # args that match it. Anything other than 1 is match error

        for (map<Schema.SObjectField, Object> mtchElm : toMatch) {
          toMatches.add(mtchElm);
          matcherMatchedCounts.add(0);
        }

        if (
          sobjsArg.size() != toMatches.size() // arity of arguments to mocked method doesn''t agree with arity of expected matches
        ) {
          return false;
        }

        if (matchInOrder) {
          for (Integer i = 0; i < sobjsArg.size(); i++) {
            // match in order (toMatch[i] must match arg[i])
            if (!sobjectMatches(sobjsArg[i], toMatches[i])) {
              return false;
            }
            return true;
          }
        } else {
          // match in any order (but every arg must be matched only once)
          for (Integer i = 0; i < sobjsArg.size(); i++) {
            argMatchedCounts.add(0);
            // For each arg passed to mocked method, see if any match in the list of match field maps.
            // Loop within loop so not hugely efficient but there are no IDs to rely on.
            // Avoid unit test methods that build huge lists of expected results

            for (Integer m = 0; m < toMatches.size(); m++) {
              if (sobjectMatches(sobjsArg[i], toMatches[m])) {
                argMatchedCounts[i]++;
                matcherMatchedCounts[m]++;
              }
            }
          }
          // Check to see that every arg was matched only once
          // Check to see that every matcher matched only once
          // Anything else is a match fail

          for (Integer i = 0; i < argMatchedCounts.size(); i++) {
            if (argMatchedCounts[i] != 1 || matcherMatchedCounts[i] != 1) {
              return false;
            }
          }
          return true;
        }
      }
      return false;
    }

    private list<Map<Schema.SObjectField, Object>> validate(
      list<Map<Schema.SObjectField, Object>> arg
    ) {
      if (arg == null || arg.isEmpty()) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''Arg cannot be null/empty/other than list of map<Schema.SobjectField,Object>: '' +
          arg
        );
      }

      return arg;
    }
  }

  /**
   * helper for the sObjectWith, sObjectsWith matchers
   * Compares to see if the field values in toMatch exist in the sobj
   **/
  private static Boolean sObjectMatches(
    Sobject sobj,
    map<Schema.SobjectField, Object> toMatch
  ) {
    for (Schema.SObjectField f : toMatch.keySet()) {
      Object valueToMatch = toMatch.get(f);

      try {
        if (sobj.get(f) != valueToMatch) {
          return false;
        }
      } catch (Exception e) {
        //If we fail to get the value for a field it''s either:
        // - ''SObject row was retrieved via SOQL without querying the requested field'' as a mismatch
        // - System.SObjectException - Account.Id does not belong to SObject type Opportunity
        //Don''t care too much, just treat this as a mismatch.
        return false;
      }
    }
    return true; // map of expected fieldvals found in sobj arg
  }

  /**
   * SObjectWithId matcher: checks if the supplied argument has the specified Id
   */
  public class SObjectWithId implements fflib_IMatcher {
    private Id toMatch;

    /**
     * SObjectWithId constructor
     * @param toMatch The Id to be compared
     * @return fflib_MatcherDefinitions.SObjectWithId A new SObjectWithId instance
     */
    public SObjectWithId(Id toMatch) {
      this.toMatch = (Id) validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof SObject) {
        SObject soArg = (SObject) arg;
        return soArg.Id == toMatch;
      }

      return false;
    }
  }

  /**
   * SObjectWithName matcher: checks if the supplied argument has the specified Name
   */
  public class SObjectWithName implements fflib_IMatcher {
    private String toMatch;

    /**
     * SObjectWithName constructor
     * @param toMatch The name to be compared
     * @return fflib_MatcherDefinitions.SObjectWithName A new SObjectWithName instance
     */
    public SObjectWithName(String toMatch) {
      this.toMatch = (String) validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      if (arg != null && arg instanceof SObject) {
        SObject soArg = (SObject) arg;
        Schema.DescribeSObjectResult describe = soArg.getSObjectType()
          .getDescribe();
        for (Schema.SObjectField f : describe.fields.getMap().values()) {
          if (f.getDescribe().isNameField()) {
            return soArg.get(f) == toMatch;
          }
        }
      }

      return false;
    }
  }

  /*
   * STRING MATCHERS
   */

  /**
   * StringContains matcher: checks if the supplied argument contains the specified substring
   */
  public class StringContains implements fflib_IMatcher {
    private String toMatch;

    /**
     * StringContains constructor
     * @param toMatch The substring to be compared
     * @return fflib_MatcherDefinitions.StringContains A new StringContains instance
     */
    public StringContains(String toMatch) {
      this.toMatch = (String) validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      return arg != null && arg instanceof String
        ? ((String) arg).contains(toMatch)
        : false;
    }
  }

  /**
   * StringEndsWith matcher: checks if the supplied argument ends with the specified substring
   */
  public class StringEndsWith implements fflib_IMatcher {
    private String toMatch;

    /**
     * StringEndsWith constructor
     * @param toMatch The substring to be compared
     * @return fflib_MatcherDefinitions.StringEndsWith A new StringEndsWith instance
     */
    public StringEndsWith(String toMatch) {
      this.toMatch = (String) validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      return arg != null && arg instanceof String
        ? ((String) arg).endsWith(toMatch)
        : false;
    }
  }

  /**
   * StringIsBlank matcher: checks if the supplied argument is a blank String
   */
  public class StringIsBlank implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return arg == null ||
        (arg instanceof String ? String.isBlank((String) arg) : false);
    }
  }

  /**
   * StringIsNotBlank matcher: checks if the supplied argument is a non-blank string
   */
  public class StringIsNotBlank implements fflib_IMatcher {
    public Boolean matches(Object arg) {
      return (arg != null && arg instanceof String)
        ? String.isNotBlank((String) arg)
        : false;
    }
  }

  /**
   * StringMatches matcher: checks if the supplied argument matches the specified regex expression
   */
  public class StringMatches implements fflib_IMatcher {
    private Pattern pat;

    /**
     * StringMatches constructor
     * @param toMatch The substring to be compared
     * @return fflib_MatcherDefinitions.StringMatches A new StringMatches instance
     */
    public StringMatches(String regEx) {
      this.pat = Pattern.compile((String) validateNotNull(regEx));
    }

    public Boolean matches(Object arg) {
      return arg != null && arg instanceof String
        ? pat.matcher((String) arg).matches()
        : false;
    }
  }

  /**
   * StringStartsWith matcher: checks if the supplied argument starts with the specified substring
   */
  public class StringStartsWith implements fflib_IMatcher {
    private String toMatch;

    /**
     * StringStartsWith constructor
     * @param toMatch The substring to be compared
     * @return fflib_MatcherDefinitions.StringStartsWith A new StringStartsWith instance
     */
    public StringStartsWith(String toMatch) {
      this.toMatch = (String) validateNotNull(toMatch);
    }

    public Boolean matches(Object arg) {
      return arg != null && arg instanceof String
        ? ((String) arg).startsWith(toMatch)
        : false;
    }
  }

  /*
   * Helpers
   */

  private static Object validateNotNull(Object arg) {
    if (arg == null) {
      throw new fflib_ApexMocks.ApexMocksException(
        ''Arg cannot be null: '' + arg
      );
    }

    return arg;
  }
}','1192979241.0','True','fflib_MatcherDefinitions','17472','Active');
INSERT INTO "ApexClass" VALUES(87,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@isTest
public class fflib_MatcherDefinitionsTest {
  private static final List<fflib_IMatcher> INTERNAL_MATCHERS = new List<fflib_IMatcher>{
    new fflib_MatcherDefinitions.StringContains(''bob''),
    new fflib_MatcherDefinitions.StringContains(''tom''),
    new fflib_MatcherDefinitions.StringContains(''fred'')
  };

  private static final Date TODAY = System.today();
  private static final Datetime NOW = System.now();

  private static final SObject ACCOUNT_RECORD;
  private static final Schema.SObjectType ACCOUNT_OBJECT_TYPE;
  private static final Schema.SObjectType OPPORTUNITY_OBJECT_TYPE;
  private static final Schema.SobjectType GROUP_OBJECT_TYPE;
  private static final Sobject[] GROUP_RECORDS;

  static {
    Map<String, Schema.SObjectType> globalDescribe = Schema.getGlobalDescribe();

    ACCOUNT_OBJECT_TYPE = globalDescribe.get(''Account'');
    OPPORTUNITY_OBJECT_TYPE = globalDescribe.get(''Opportunity'');
    GROUP_OBJECT_TYPE = globalDescribe.get(''Group'');

    SObject accountRecord = ACCOUNT_OBJECT_TYPE.newSObject();
    accountRecord.put(''Name'', ''MatcherDefinitionTestAccount'' + System.now());

    insert accountRecord;
    Id accountId = accountRecord.Id;

    ACCOUNT_RECORD = Database.query(
      ''SELECT Id, Name FROM Account WHERE Id = :accountId LIMIT 1''
    );

    GROUP_RECORDS = new List<Group>{
      new Group(
        Name = ''MatcherDefnTestGroup0'' + System.now(),
        DeveloperName = ''MatcherDefnTestGroup0'' + System.now().getTime(),
        Type = ''Queue''
      ),
      new Group(
        Name = ''MatcherDefnTestGroup1'' + System.now(),
        DeveloperName = ''MatcherDefnTestGroup1'' + System.now().getTime(),
        Type = ''Queue''
      )
    };
    insert GROUP_RECORDS;
  }

  @isTest
  private static void whenConstructingCombinedWithNullConnectiveExpressionShouldThrowException() {
    try {
      fflib_IMatcher matcher = new fflib_MatcherDefinitions.Combined(
        null,
        INTERNAL_MATCHERS
      );
      System.assert(false, ''Expecting exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(
        ''Invalid connective expression: null'',
        e.getMessage()
      );
    }
  }

  @isTest
  private static void whenConstructingCombinedWithNullInternalMatchersShouldThrowException() {
    try {
      fflib_IMatcher matcher = new fflib_MatcherDefinitions.Combined(
        fflib_MatcherDefinitions.Connective.ALL,
        null
      );
      System.assert(false, ''Expecting exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Invalid inner matchers: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenConstructingCombinedWithEmptyInternalMatchersShouldThrowException() {
    try {
      fflib_IMatcher matcher = new fflib_MatcherDefinitions.Combined(
        fflib_MatcherDefinitions.Connective.ALL,
        new List<fflib_IMatcher>()
      );
      System.assert(false, ''Expecting exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Invalid inner matchers: ()'', e.getMessage());
    }
  }

  @isTest
  private static void whenCombinedMatchesWithAllExpressionShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.Combined(
      fflib_MatcherDefinitions.Connective.ALL,
      INTERNAL_MATCHERS
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''ted''));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(''tomfred''));
    System.assert(matcher.matches(''bobtomfred''));
  }

  @isTest
  private static void whenCombinedMatchesWithAtLeastOneExpressionShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.Combined(
      fflib_MatcherDefinitions.Connective.AT_LEAST_ONE,
      INTERNAL_MATCHERS
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''ted''));
    System.assert(matcher.matches(''bob''));
    System.assert(matcher.matches(''tomfred''));
    System.assert(matcher.matches(''bobtomfred''));
  }

  @isTest
  private static void whenCombinedMatchesWithNoneExpressionShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.Combined(
      fflib_MatcherDefinitions.Connective.NONE,
      INTERNAL_MATCHERS
    );
    System.assert(matcher.matches(null));
    System.assert(matcher.matches(''ted''));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(''tomfred''));
    System.assert(!matcher.matches(''bobtomfred''));
  }

  @isTest
  private static void constructEq_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.Eq(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenEqMatchesShouldReturnCorrectResults() {
    List<String> s1 = new List<String>{ ''bob'', ''tom'' };
    List<String> s2 = new List<String>{ ''bob'', ''tom'' };
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.Eq(s1);
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(new List<String>{ ''bob'' }));
    System.assert(matcher.matches(s2));
    System.assert(matcher.matches(s1));
  }

  @isTest
  private static void constructRefEq_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.RefEq(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenRefEqMatchesShouldReturnCorrectResults() {
    List<String> s1 = new List<String>{ ''bob'', ''tom'' };
    List<String> s2 = new List<String>{ ''bob'', ''tom'' };
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.RefEq(s1);
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(s2));
    System.assert(matcher.matches(s1));
  }

  @isTest
  private static void whenAnyBooleanMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyBoolean();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(9));
    System.assert(matcher.matches(true));
    System.assert(matcher.matches(false));
  }

  @isTest
  private static void whenAnyDateMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyDate();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(NOW));
    System.assert(matcher.matches(TODAY));
  }

  @isTest
  private static void whenAnyDatetimeMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyDatetime();
    System.assert(!matcher.matches(null));
    System.assert(matcher.matches(NOW));
    System.assert(matcher.matches(TODAY));
  }

  @isTest
  private static void whenAnyDecimalMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyDecimal();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(9));
    System.assert(matcher.matches(9L));
    System.assert(matcher.matches(9.99));
  }

  @isTest
  private static void whenAnyDoubleMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyDouble();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(9));
    System.assert(matcher.matches(9L));
    System.assert(matcher.matches(9.99));
  }

  @isTest
  private static void whenAnyFieldSetMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyFieldSet();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));

    Schema.FieldSet anyFieldSet = fflib_ApexMocksUtilsTest.findAnyFieldSet();
    if (anyFieldSet != null) {
      System.assert(matcher.matches(anyFieldSet));
    }
  }

  @isTest
  private static void whenAnyIdMatchesShouldReturnCorrectResults() {
    String idString = fflib_IDGenerator.generate(Account.SObjectType);
    Id accountId = fflib_IDGenerator.generate(Account.SObjectType);
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyId();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(idString));
    System.assert(matcher.matches(accountId));
  }

  @isTest
  private static void whenAnyIntegerMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyInteger();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(9L));
    System.assert(!matcher.matches(9.99));
    System.assert(matcher.matches(9));
  }

  @isTest
  private static void whenAnyListMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyList();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(new List<String>()));
    System.assert(matcher.matches(new List<Integer>()));
    System.assert(matcher.matches(new List<Object>()));
  }

  @isTest
  private static void whenAnyLongMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyLong();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(9.99));
    System.assert(matcher.matches(9));
    System.assert(matcher.matches(9L));
  }

  @isTest
  private static void whenAnyObjectMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyObject();
    System.assert(!matcher.matches(null));
    System.assert(matcher.matches(''bob''));
    System.assert(matcher.matches(9));
    System.assert(matcher.matches(new List<String>()));
  }

  @isTest
  private static void whenAnyStringMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnyString();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(9));
    System.assert(matcher.matches(''bob''));
  }

  @isTest
  private static void whenAnySObjectMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnySObject();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(new Account()));
  }

  @isTest
  private static void whenAnySObjectFieldMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnySObjectField();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(new Account()));
    System.assert(matcher.matches(Account.Id));
  }

  @isTest
  private static void whenAnySObjectTypeMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.AnySObjectType();
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(new Account()));
    System.assert(matcher.matches(Account.SObjectType));
  }

  @isTest
  private static void constructDatetimeAfter_WithNullFromDatetime_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeAfter(null, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDatetimeAfter_WithNullInclusive_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeAfter(System.now(), null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenDatetimeAfterMatchesWithoutInclusiveShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.DatetimeAfter(
      NOW,
      false
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(NOW.addSeconds(-1)));
    System.assert(!matcher.matches(NOW));
    System.assert(matcher.matches(NOW.addSeconds(1)));
  }

  @isTest
  private static void whenDatetimeAfterMatchesWithInclusiveShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.DatetimeAfter(
      NOW,
      true
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(NOW.addSeconds(-1)));
    System.assert(matcher.matches(NOW));
    System.assert(matcher.matches(NOW.addSeconds(1)));
  }

  @isTest
  private static void constructDatetimeBefore_WithNullToDatetime_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeBefore(null, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDatetimeBefore_WithNullInclusive_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeBefore(System.now(), null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenDatetimeBeforeMatchesWithoutInclusiveShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.DatetimeBefore(
      NOW,
      false
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(NOW.addSeconds(1)));
    System.assert(!matcher.matches(NOW));
    System.assert(matcher.matches(NOW.addSeconds(-1)));
  }

  @isTest
  private static void whenDatetimeBeforeMatchesWithInclusiveShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.DatetimeBefore(
      NOW,
      true
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(NOW.addSeconds(1)));
    System.assert(matcher.matches(NOW));
    System.assert(matcher.matches(NOW.addSeconds(-1)));
  }

  @isTest
  private static void constructDatetimeBetween_WithNullFromDatetime_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeBetween(
        null,
        true,
        System.now(),
        true
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDatetimeBetween_WithNullToDatetime_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeBetween(
        System.now(),
        true,
        null,
        true
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDatetimeBetween_WithNullInclusiveFrom_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeBetween(
        System.now(),
        null,
        System.now(),
        true
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDatetimeBetween_WithNullInclusiveTo_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DatetimeBetween(
        System.now(),
        true,
        System.now(),
        null
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenDatetimeBetweenMatchesWithInclusiveFromWithoutInclusiveToShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.DatetimeBetween(
      NOW.addSeconds(-1),
      true,
      NOW.addSeconds(1),
      false
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(NOW.addSeconds(-2)));
    System.assert(!matcher.matches(NOW.addSeconds(1)));
    System.assert(matcher.matches(NOW.addSeconds(-1)));
    System.assert(matcher.matches(NOW));
  }

  @isTest
  private static void whenDatetimeBetweenMatchesWithInclusiveToWithoutInclusiveFromShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.DatetimeBetween(
      NOW.addSeconds(-1),
      false,
      NOW.addSeconds(1),
      true
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bob''));
    System.assert(!matcher.matches(NOW.addSeconds(2)));
    System.assert(!matcher.matches(NOW.addSeconds(-1)));
    System.assert(matcher.matches(NOW));
    System.assert(matcher.matches(NOW.addSeconds(1)));
  }

  @isTest
  private static void constructDecimalBetween_WithNullLower_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalBetween(null, true, 123, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDecimalBetween_WithNullInclusiveLower_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalBetween(123, null, 123, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDecimalBetween_WithNullUpper_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalBetween(123, true, null, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDecimalBetween_WithNullInclusiveUpper_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalBetween(123, true, 123, null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenDecimalBetweenMatchesShouldReturnCorrectResults() {
    Integer lower = 5;
    Integer upper = 10;

    fflib_IMatcher exLowerExUpper = new fflib_MatcherDefinitions.DecimalBetween(
      lower,
      false,
      upper,
      false
    );
    fflib_IMatcher exLowerInUpper = new fflib_MatcherDefinitions.DecimalBetween(
      lower,
      false,
      upper,
      true
    );
    fflib_IMatcher inLowerExUpper = new fflib_MatcherDefinitions.DecimalBetween(
      lower,
      true,
      upper,
      false
    );
    fflib_IMatcher inLowerInUpper = new fflib_MatcherDefinitions.DecimalBetween(
      lower,
      true,
      upper,
      true
    );

    //Exclusive lower, exclusive upper
    System.assert(!exLowerExUpper.matches(lower - 1));
    System.assert(!exLowerExUpper.matches(lower));
    System.assert(exLowerExUpper.matches(lower + 1));
    System.assert(exLowerExUpper.matches(upper - 1));
    System.assert(!exLowerExUpper.matches(upper));
    System.assert(!exLowerExUpper.matches(upper + 1));
    System.assert(!exLowerExUpper.matches(null));
    System.assert(!exLowerExUpper.matches(''NotADecimal''));

    //Exclusive lower, inclusive upper
    System.assert(!exLowerInUpper.matches(lower - 1));
    System.assert(!exLowerInUpper.matches(lower));
    System.assert(exLowerInUpper.matches(lower + 1));
    System.assert(exLowerInUpper.matches(upper - 1));
    System.assert(exLowerInUpper.matches(upper));
    System.assert(!exLowerInUpper.matches(upper + 1));
    System.assert(!exLowerInUpper.matches(null));
    System.assert(!exLowerInUpper.matches(''NotADecimal''));

    //Inclusive lower, exclusive upper
    System.assert(!inLowerExUpper.matches(lower - 1));
    System.assert(inLowerExUpper.matches(lower));
    System.assert(inLowerExUpper.matches(lower + 1));
    System.assert(inLowerExUpper.matches(upper - 1));
    System.assert(!inLowerExUpper.matches(upper));
    System.assert(!inLowerExUpper.matches(upper + 1));
    System.assert(!inLowerExUpper.matches(null));
    System.assert(!inLowerExUpper.matches(''NotADecimal''));

    //Inclusive lower, inclusive upper
    System.assert(!inLowerInUpper.matches(lower - 1));
    System.assert(inLowerInUpper.matches(lower));
    System.assert(inLowerInUpper.matches(lower + 1));
    System.assert(inLowerInUpper.matches(upper - 1));
    System.assert(inLowerInUpper.matches(upper));
    System.assert(!inLowerInUpper.matches(upper + 1));
    System.assert(!inLowerInUpper.matches(null));
    System.assert(!inLowerInUpper.matches(''NotADecimal''));
  }

  @isTest
  private static void constructDecimalLessThan_WithNullToMatch_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalLessThan(null, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDecimalLessThan_WithNullInclusive_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalLessThan(123, null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenDecimalLessThanMatchesShouldReturnCorrectResults() {
    Integer toMatch = 5;

    fflib_IMatcher exclusive = new fflib_MatcherDefinitions.DecimalLessThan(
      toMatch,
      false
    );
    fflib_IMatcher inclusive = new fflib_MatcherDefinitions.DecimalLessThan(
      toMatch,
      true
    );

    //Exclusive
    System.assert(exclusive.matches(toMatch - 1));
    System.assert(!exclusive.matches(toMatch));
    System.assert(!exclusive.matches(toMatch + 1));
    System.assert(!exclusive.matches(null));
    System.assert(!exclusive.matches(''NotADecimal''));

    //Inclusive
    System.assert(inclusive.matches(toMatch - 1));
    System.assert(inclusive.matches(toMatch));
    System.assert(!inclusive.matches(toMatch + 1));
    System.assert(!inclusive.matches(null));
    System.assert(!inclusive.matches(''NotADecimal''));
  }

  @isTest
  private static void constructDecimalMoreThan_WithNullToMatch_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalMoreThan(null, true);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructDecimalMoreThan_WithNullInclusive_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.DecimalMoreThan(123, null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenDecimalMoreThanMatchesShouldReturnCorrectResults() {
    Integer toMatch = 5;

    fflib_IMatcher exclusive = new fflib_MatcherDefinitions.DecimalMoreThan(
      toMatch,
      false
    );
    fflib_IMatcher inclusive = new fflib_MatcherDefinitions.DecimalMoreThan(
      toMatch,
      true
    );

    //Exclusive
    System.assert(!exclusive.matches(toMatch - 1));
    System.assert(!exclusive.matches(toMatch));
    System.assert(exclusive.matches(toMatch + 1));
    System.assert(!exclusive.matches(null));
    System.assert(!exclusive.matches(''NotADecimal''));

    //Inclusive
    System.assert(!inclusive.matches(toMatch - 1));
    System.assert(inclusive.matches(toMatch));
    System.assert(inclusive.matches(toMatch + 1));
    System.assert(!inclusive.matches(null));
    System.assert(!inclusive.matches(''NotADecimal''));
  }

  @isTest
  private static void constructFieldSetEquivalentTo_WithNullFieldSet_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.FieldSetEquivalentTo(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenFieldSetEquivalentToWithoutFieldSetShouldNeverMatch() {
    //Cheap test to maintain 100% code coverage, even in orgs without field sets defined.
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.FieldSetEquivalentTo();
    System.assert(!matcher.matches(null));
  }

  @isTest
  private static void whenFieldSetEquivalentToMatchesShouldReturnCorrectResults() {
    Schema.FieldSet anyFieldSet = fflib_ApexMocksUtilsTest.findAnyFieldSet();
    if (anyFieldSet == null) {
      return;
    }

    fflib_IMatcher matcher = new fflib_MatcherDefinitions.FieldSetEquivalentTo(
      anyFieldSet
    );
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''hello''));
    System.assert(matcher.matches(anyFieldSet));
  }

  @isTest
  private static void whenIsNullMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.IsNull();
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(null));
  }

  @isTest
  private static void whenIsNotNullMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.IsNotNull();
    System.assert(!matcher.matches(null));
    System.assert(matcher.matches(''bob''));
  }

  @isTest
  private static void whenListContainsMatchesShouldReturnCorrectResults() {
    List<String> names = new List<String>{ ''bob'', ''tom'', ''fred'' };
    List<String> empty = new List<String>();

    System.assert(
      !new fflib_MatcherDefinitions.ListContains(''fred'').matches(null)
    );
    System.assert(
      !new fflib_MatcherDefinitions.ListContains(''fred'').matches(empty)
    );
    System.assert(
      !new fflib_MatcherDefinitions.ListContains(''jack'').matches(names)
    );
    System.assert(
      new fflib_MatcherDefinitions.ListContains(''fred'').matches(names)
    );
    System.assert(
      !new fflib_MatcherDefinitions.ListContains(''fred'').matches(''NotAList'')
    );
  }

  @isTest
  private static void whenListIsEmptyMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.ListIsEmpty();

    List<String> names = new List<String>{ ''bob'', ''tom'', ''fred'' };
    List<String> empty = new List<String>();

    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(names));
    System.assert(matcher.matches(empty));
    System.assert(!matcher.matches(''NotAList''));
  }

  @isTest
  private static void constructSObjectOfType_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.SObjectOfType(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenSObjectOfTypeMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.SObjectOfType(
      ACCOUNT_OBJECT_TYPE
    );

    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(OPPORTUNITY_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(''NotASObject''));

    System.assert(matcher.matches(ACCOUNT_OBJECT_TYPE.newSObject()));
    System.assert(matcher.matches(ACCOUNT_RECORD));
  }

  @isTest
  private static void constructSObjectWith_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.SObjectWith(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null/empty: null'', e.getMessage());
    }
  }

  @isTest
  private static void constructSObjectWith_WithEmptyArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.SObjectWith(
        new Map<Schema.SObjectField, Object>()
      );
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null/empty: {}'', e.getMessage());
    }
  }

  @isTest
  private static void whenSObjectWithMatchesShouldReturnCorrectResults() {
    Map<String, Schema.SObjectField> fields = ACCOUNT_OBJECT_TYPE.getDescribe()
      .fields.getMap();
    Schema.SObjectField idField = fields.get(''Id'');
    Schema.SObjectField nameField = fields.get(''Name'');
    Schema.SObjectField createdDateField = fields.get(''CreatedDate'');

    Map<Schema.SObjectField, Object> queriedFieldValues = new Map<Schema.SObjectField, Object>{
      idField => ACCOUNT_RECORD.Id,
      nameField => ACCOUNT_RECORD.get(''Name'')
    };

    Map<Schema.SObjectField, Object> notQueriedFieldValues = new Map<Schema.SObjectField, Object>{
      createdDateField => System.now()
    };

    fflib_IMatcher matcher = new fflib_MatcherDefinitions.SObjectWith(
      queriedFieldValues
    );

    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(OPPORTUNITY_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(ACCOUNT_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(''NotASObject''));

    System.assert(matcher.matches(ACCOUNT_RECORD));

    System.assert(
      !new fflib_MatcherDefinitions.SObjectWith(notQueriedFieldValues)
        .matches(ACCOUNT_RECORD)
    );
  }

  @isTest
  private static void whenSObjectsWithInOrderMatchesShouldReturnCorrectResults() {
    Map<String, Schema.SObjectField> fields = GROUP_OBJECT_TYPE.getDescribe()
      .fields.getMap();
    Schema.SObjectField idField = fields.get(''Id'');
    Schema.SObjectField nameField = fields.get(''Name'');
    Schema.SObjectField createdDateField = fields.get(''CreatedDate'');

    list<Map<Schema.SObjectField, Object>> queriedFieldValues = new List<Map<Schema.SObjectField, Object>>{
      new Map<Schema.SObjectField, Object>{
        idField => GROUP_RECORDS[0].Id,
        nameField => GROUP_RECORDS[0].get(''Name'')
      },
      new Map<Schema.SObjectField, Object>{
        idField => GROUP_RECORDS[1].Id,
        nameField => GROUP_RECORDS[1].get(''Name'')
      }
    };

    list<Map<Schema.SObjectField, Object>> notQueriedFieldValues = new List<Map<Schema.SObjectField, Object>>{
      new Map<Schema.SObjectField, Object>{ createdDateField => System.now() },
      new Map<Schema.SObjectField, Object>{ createdDateField => System.now() }
    };

    fflib_IMatcher matcher = new fflib_MatcherDefinitions.SObjectsWith(
      queriedFieldValues
    );

    System.assert(!matcher.matches(null));
    System.assert(
      !matcher.matches(
        new List<SObject>{
          OPPORTUNITY_OBJECT_TYPE.newSObject(),
          OPPORTUNITY_OBJECT_TYPE.newSObject()
        }
      )
    );
    System.assert(
      !matcher.matches(
        new List<SObject>{
          GROUP_OBJECT_TYPE.newSObject(),
          GROUP_OBJECT_TYPE.newSObject()
        }
      ),
      ''sObjectsWith arity agrees but arg doesn\''t''
    );
    System.assert(!matcher.matches(''NotAListofSObject''));

    System.assert(
      matcher.matches(GROUP_RECORDS),
      ''toMatch and args have same arity and in same order''
    );
    System.assert(
      !matcher.matches(new List<SObject>{ GROUP_RECORDS[1], GROUP_RECORDS[0] }),
      ''sObjectsWith toMatch and args have same arity but args are in different order than toMatch''
    );

    System.assert(
      !new fflib_MatcherDefinitions.SObjectsWith(notQueriedFieldValues)
        .matches(GROUP_RECORDS)
    );
  }

  @isTest
  private static void whenSObjectsInAnyOrderWithMatchesShouldReturnCorrectResults() {
    Map<String, Schema.SObjectField> fields = GROUP_OBJECT_TYPE.getDescribe()
      .fields.getMap();
    Schema.SObjectField idField = fields.get(''Id'');
    Schema.SObjectField nameField = fields.get(''Name'');
    Schema.SObjectField createdDateField = fields.get(''CreatedDate'');

    list<Map<Schema.SObjectField, Object>> queriedFieldValues = new List<Map<Schema.SObjectField, Object>>{
      new Map<Schema.SObjectField, Object>{
        idField => GROUP_RECORDS[0].Id,
        nameField => GROUP_RECORDS[0].get(''Name'')
      },
      new Map<Schema.SObjectField, Object>{
        idField => GROUP_RECORDS[1].Id,
        nameField => GROUP_RECORDS[1].get(''Name'')
      }
    };

    list<Map<Schema.SObjectField, Object>> notQueriedFieldValues = new List<Map<Schema.SObjectField, Object>>{
      new Map<Schema.SObjectField, Object>{ createdDateField => System.now() },
      new Map<Schema.SObjectField, Object>{ createdDateField => System.now() }
    };

    fflib_IMatcher matcher = new fflib_MatcherDefinitions.SObjectsWith(
      queriedFieldValues,
      false
    ); // any order

    System.assert(!matcher.matches(null));
    System.assert(
      !matcher.matches(
        new List<SObject>{
          OPPORTUNITY_OBJECT_TYPE.newSObject(),
          OPPORTUNITY_OBJECT_TYPE.newSObject()
        }
      )
    );
    System.assert(
      !matcher.matches(
        new List<SObject>{
          GROUP_OBJECT_TYPE.newSObject(),
          GROUP_OBJECT_TYPE.newSObject()
        }
      ),
      ''sObjectsWith arity agrees but arg doesn\''t match matcher''
    );
    System.assert(!matcher.matches(''NotAListofSObject''));

    System.assert(
      matcher.matches(GROUP_RECORDS),
      ''toMatch and args have same arity and in same order. Match should be OK''
    );
    System.assert(
      matcher.matches(new List<SObject>{ GROUP_RECORDS[1], GROUP_RECORDS[0] }),
      ''sObjectsWith toMatch and args have same arity but args are in diff order than matcher. Should be OK''
    );

    System.assert(
      !new fflib_MatcherDefinitions.SObjectsWith(notQueriedFieldValues, false)
        .matches(GROUP_RECORDS)
    );
  }

  @isTest
  private static void constructSObjectWithId_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.SObjectWithId(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenSObjectWithIdMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.SObjectWithId(
      ACCOUNT_RECORD.Id
    );

    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(OPPORTUNITY_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(ACCOUNT_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(''NotASObject''));

    System.assert(matcher.matches(ACCOUNT_RECORD));
  }

  @isTest
  private static void constructSObjectWithName_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.SObjectWithName(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenSObjectWithNameMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.SObjectWithName(
      (String) ACCOUNT_RECORD.get(''Name'')
    );

    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(OPPORTUNITY_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(ACCOUNT_OBJECT_TYPE.newSObject()));
    System.assert(!matcher.matches(''NotASObject''));

    System.assert(matcher.matches(ACCOUNT_RECORD));
  }

  @isTest
  private static void whenStringContainsMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.StringContains(''bob'');
    System.assert(!matcher.matches(7));
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''''));
    System.assert(!matcher.matches(''blob''));
    System.assert(matcher.matches(''bob''));
    System.assert(matcher.matches(''bobby''));
  }

  @isTest
  private static void constructStringContains_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.StringContains(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenStringEndsWithMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.StringEndsWith(''bob'');
    System.assert(!matcher.matches(7));
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''''));
    System.assert(!matcher.matches(''bobby''));
    System.assert(matcher.matches(''bob''));
    System.assert(matcher.matches(''jimbob''));
  }

  @isTest
  private static void constructStringEndsWith_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.StringEndsWith(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenIsBlankWithMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.StringIsBlank();
    System.assert(!matcher.matches(7));
    System.assert(!matcher.matches(''bob''));
    System.assert(matcher.matches(null));
    System.assert(matcher.matches(''''));
  }

  @isTest
  private static void whenIsNotBlankWithMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.StringIsNotBlank();
    System.assert(!matcher.matches(7));
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''''));
    System.assert(matcher.matches(''bob''));
  }

  @isTest
  private static void whenStringMatchesMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.StringMatches(
      ''(b|m)o[a-z]*''
    );
    System.assert(!matcher.matches(7));
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''bib''));
    System.assert(!matcher.matches(''jimbob''));
    System.assert(!matcher.matches(''tom''));
    System.assert(!matcher.matches(''bob1''));
    System.assert(matcher.matches(''bobby''));
    System.assert(matcher.matches(''mo''));
  }

  @isTest
  private static void constructStringMatches_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.StringMatches(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }

  @isTest
  private static void whenStringStartsWithMatchesShouldReturnCorrectResults() {
    fflib_IMatcher matcher = new fflib_MatcherDefinitions.StringStartsWith(
      ''bob''
    );
    System.assert(!matcher.matches(7));
    System.assert(!matcher.matches(null));
    System.assert(!matcher.matches(''''));
    System.assert(!matcher.matches(''jimbob''));
    System.assert(matcher.matches(''bob''));
    System.assert(matcher.matches(''bobby''));
  }

  @isTest
  private static void constructStringStartsWith_WithNullArg_ThrowsException() {
    try {
      new fflib_MatcherDefinitions.StringStartsWith(null);
      System.assert(false, ''Expected exception'');
    } catch (fflib_ApexMocks.ApexMocksException e) {
      System.assertEquals(''Arg cannot be null: null'', e.getMessage());
    }
  }
}','4078213967.0','True','fflib_MatcherDefinitionsTest','39562','Active');
INSERT INTO "ApexClass" VALUES(88,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public with sharing class fflib_MatchersReturnValue {
  public List<fflib_IMatcher> matchers;
  public fflib_MethodReturnValue returnValue;

  public fflib_MatchersReturnValue(
    List<fflib_IMatcher> matchers,
    fflib_MethodReturnValue returnValue
  ) {
    this.matchers = matchers;
    this.returnValue = returnValue;
  }
}','1654194136.0','True','fflib_MatchersReturnValue','329','Active');
INSERT INTO "ApexClass" VALUES(89,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public with sharing class fflib_MethodArgValues {
  public List<Object> argValues;

  /**
   * Wrapper object which encapsulates the argument values
   * supplied during a given method call.
   * @param argValues The
   * @return fflib_MethodArgValues The method argument wrapper object
   */
  public fflib_MethodArgValues(List<Object> argValues) {
    this.argValues = argValues;
  }

  /**
   * Standard equals override.
   * @param other The object whose equality we are verifying
   * @return Boolean True if meaningfully equivalent, false otherwise.
   */
  public Boolean equals(Object other) {
    if (this === other) {
      return true;
    }

    fflib_MethodArgValues that = other instanceof fflib_MethodArgValues
      ? (fflib_MethodArgValues) other
      : null;
    return that != null && this.argValues == that.argValues;
  }

  /**
   * Standard hashCode override.
   * @return Integer The generated hashCode
   */
  public Integer hashCode() {
    Integer prime = 31;
    Integer result = 1;

    result = prime * result + ((argValues == null) ? 0 : argValues.hashCode());

    return result;
  }
}','3257569241.0','True','fflib_MethodArgValues','639','Active');
INSERT INTO "ApexClass" VALUES(90,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@isTest
public with sharing class fflib_MethodArgValuesTest {
  @isTest
  private static void equalsReturnsExpectedResults() {
    //Given
    fflib_MethodArgValues qm1 = new fflib_MethodArgValues(
      new List<Object>{ ''hello'' }
    );
    fflib_MethodArgValues qm2 = new fflib_MethodArgValues(
      new List<Object>{ ''hello'' }
    );
    fflib_MethodArgValues qm3 = new fflib_MethodArgValues(
      new List<Object>{ ''hi'' }
    );
    fflib_MethodArgValues qm4 = new fflib_MethodArgValues(
      new List<Object>{ ''hello'', ''hello'', ''hello'' }
    );
    fflib_MethodArgValues qm5 = new fflib_MethodArgValues(new List<Object>());
    fflib_MethodArgValues qm6 = new fflib_MethodArgValues(null);

    //When/thens
    System.assertEquals(qm1, qm1);
    System.assertEquals(qm1, qm2);
    System.assertNotEquals(qm1, qm3);
    System.assertNotEquals(qm1, qm4);
    System.assertNotEquals(qm1, qm5);
    System.assertNotEquals(qm1, qm6);

    System.assertEquals(qm2, qm2);
    System.assertNotEquals(qm2, qm3);
    System.assertNotEquals(qm2, qm4);
    System.assertNotEquals(qm2, qm5);
    System.assertNotEquals(qm2, qm6);

    System.assertEquals(qm3, qm3);
    System.assertNotEquals(qm3, qm4);
    System.assertNotEquals(qm3, qm5);
    System.assertNotEquals(qm3, qm6);

    System.assertEquals(qm4, qm4);
    System.assertNotEquals(qm4, qm5);
    System.assertNotEquals(qm4, qm6);

    System.assertEquals(qm5, qm5);
    System.assertNotEquals(qm5, qm6);

    System.assertEquals(qm6, qm6);
  }

  @isTest
  private static void hashCodeReturnsExpectedResults() {
    //Given
    fflib_MethodArgValues qm1 = new fflib_MethodArgValues(
      new List<Object>{ ''hello'' }
    );
    fflib_MethodArgValues qm2 = new fflib_MethodArgValues(
      new List<Object>{ ''hello'' }
    );
    fflib_MethodArgValues qm3 = new fflib_MethodArgValues(
      new List<Object>{ ''hi'' }
    );
    fflib_MethodArgValues qm4 = new fflib_MethodArgValues(
      new List<Object>{ ''hello'', ''hello'', ''hello'' }
    );
    fflib_MethodArgValues qm5 = new fflib_MethodArgValues(new List<Object>());
    fflib_MethodArgValues qm6 = new fflib_MethodArgValues(null);

    //When/thens
    System.assertEquals(qm1.hashCode(), qm1.hashCode());
    System.assertEquals(qm1.hashCode(), qm2.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm6.hashCode());

    System.assertEquals(qm2.hashCode(), qm2.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm6.hashCode());

    System.assertEquals(qm3.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm3.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm3.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm3.hashCode(), qm6.hashCode());

    System.assertEquals(qm4.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm4.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm4.hashCode(), qm6.hashCode());

    System.assertEquals(qm5.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm5.hashCode(), qm6.hashCode());

    System.assertEquals(qm6.hashCode(), qm6.hashCode());
  }
}','684196820.0','True','fflib_MethodArgValuesTest','3338','Active');
INSERT INTO "ApexClass" VALUES(91,'57.0','/*
 Copyright (c) 2014-2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @group Core
 */
public with sharing class fflib_MethodCountRecorder {
  /*
   * Map of method arguments by type name.
   *
   * Key: qualifiedMethod
   * Object: list of method arguments.
   *
   * Object: map of count by method call argument.
   */
  private static Map<fflib_QualifiedMethod, List<fflib_MethodArgValues>> methodArgumentsByTypeName = new Map<fflib_QualifiedMethod, List<fflib_MethodArgValues>>();

  private static List<fflib_InvocationOnMock> orderedMethodCalls = new List<fflib_InvocationOnMock>();

  /**
   * Getter for the list of the methods ordered calls.
   * @return The list of methods called in order.
   */
  public static List<fflib_InvocationOnMock> getOrderedMethodCalls() {
    return orderedMethodCalls;
  }

  /**
   * Getter for the map of the method''s calls with the related arguments.
   * @return The map of methods called with the arguments.
   */
  public static Map<fflib_QualifiedMethod, List<fflib_MethodArgValues>> getMethodArgumentsByTypeName() {
    return methodArgumentsByTypeName;
  }

  /**
   * Record a method was called on a mock object.
   * @param invocation The object holding all the data of the invocation, like the method and arguments and the mock instance.
   */
  public void recordMethod(fflib_InvocationOnMock invocation) {
    List<fflib_MethodArgValues> methodArgs = methodArgumentsByTypeName.get(
      invocation.getMethod()
    );

    if (methodArgs == null) {
      methodArgs = new List<fflib_MethodArgValues>();
      methodArgumentsByTypeName.put(invocation.getMethod(), methodArgs);
    }

    methodArgs.add(invocation.getMethodArgValues());

    orderedMethodCalls.add(invocation);
  }
}','383102201.0','True','fflib_MethodCountRecorder','1012','Active');
INSERT INTO "ApexClass" VALUES(92,'57.0','/*
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @group Core
 * Class defining a method return value.
 */
@isTest
public with sharing class fflib_MethodReturnValue {
  private StandardAnswer basicAnswer = new StandardAnswer();

  /**
   * Instance of the implementation of the Answer interface that implements the answer,
   * if an answer isn''t explicitly set the standard answer will be used, which just returns the stubbed return value.
   */
  public fflib_Answer Answer { get; set; }

  /**
   * Setup a stubbed return value.
   * @param value The value to return from the stubbed method call.
   * @return The fflib_MethodReturnValue instance to allow you to chain the methods.
   */
  public fflib_MethodReturnValue thenReturn(Object value) {
    thenAnswer(this.basicAnswer.setValue(value));
    return this;
  }

  /**
   * Setup a stubbed exception.
   * @param e The exception to throw from the stubbed method call.
   * @return The fflib_MethodReturnValue instance to allow you to chain the methods.
   */
  public fflib_MethodReturnValue thenThrow(Exception e) {
    thenAnswer(this.basicAnswer.setValue(e));
    return this;
  }

  /**
   * Setup a stubbed answer.
   * @param answer The answer to run from the stubbed method call.
   */
  public void thenAnswer(fflib_Answer answer) {
    this.Answer = answer;
  }

  /**
   * Setup a list of stubbed return values.
   * @param values The values to return from the stubbed method call in consecutive calls.
   * @return The fflib_MethodReturnValue instance to allow you to chain the methods.
   */
  public fflib_MethodReturnValue thenReturnMulti(List<Object> values) {
    thenAnswer(this.basicAnswer.setValues(values));
    return this;
  }

  /**
   * Setup a list stubbed exceptions.
   * @param es The exceptions to throw from the stubbed method call in consecutive calls.
   * @return The fflib_MethodReturnValue instance to allow you to chain the methods.
   */
  public fflib_MethodReturnValue thenThrowMulti(List<Exception> es) {
    thenAnswer(this.basicAnswer.setValues(es));
    return this;
  }

  /**
   * @group Core
   * Inner class to handle all the stubs that do not use the thenAnswer method directly.
   * For internal use only.
   */
  public class StandardAnswer implements fflib_Answer {
    private Integer whichStubReturnIndex = 0;
    /*
     * It stores the return values for the method stubbed.
     * The values would be stored and then returned as part of the standard answer invocation.
     */
    private List<Object> ReturnValues = new List<Object>();

    /**
     * Setter of a single return value.
     * @param value The value to be set as return value for the StandardAnswer object.
     * @return The StandardAnswer instance.
     */
    public StandardAnswer setValue(Object value) {
      ReturnValues.add(value);
      return this;
    }

    /**
     * Setter of the list of return values.
     * @param value The value to be set as return value for the StandardAnswer object.
     * @return the StandardAnswer instance.
     */
    public StandardAnswer setValues(List<Object> values) {
      if (values == null || values.size() == 0) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''The stubbing is not correct, no return values have been set.''
        );
      }

      ReturnValues.addAll(values);
      return this;
    }

    /**
     * Standard basic implementation for the fflib_Answer answer method, to be used as default answering.
     * @param invocation The invocation to answer for.
     * @return The ReturnValue for the method stubbed.
     */
    public Object answer(fflib_InvocationOnMock invocation) {
      if (ReturnValues == null || ReturnValues.size() == 0) {
        throw new fflib_ApexMocks.ApexMocksException(
          ''The stubbing is not correct, no return values have been set.''
        );
      }

      Integer returnValuesSize = ReturnValues.size() - 1;

      if (whichStubReturnIndex < returnValuesSize) {
        return ReturnValues[whichStubReturnIndex++];
      } else {
        return ReturnValues[returnValuesSize];
      }
    }
  }
}','675685590.0','True','fflib_MethodReturnValue','1882','Active');
INSERT INTO "ApexClass" VALUES(93,'57.0','/*
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @group Core
 */
public with sharing class fflib_MethodReturnValueRecorder {
  public Boolean Stubbing { get; set; }

  public List<Exception> DoThrowWhenExceptions { get; set; }

  /**
   * Map of matchers by method.
   *
   * Key: qualifiedMethod
   * Object: map of method return values by method.
   */

  private Map<fflib_QualifiedMethod, List<fflib_MatchersReturnValue>> matcherReturnValuesByMethod;

  public fflib_MethodReturnValue MethodReturnValue { get; private set; }

  public fflib_MethodReturnValueRecorder() {
    matcherReturnValuesByMethod = new Map<fflib_QualifiedMethod, List<fflib_MatchersReturnValue>>();

    MethodReturnValue = null;
  }

  /**
   * Prepare a stubbed method return value.
   * @param invocation The object holding all the data of the invocation, like the method and arguments and the mock instance.
   * @return The MethodReturnValue instance.
   */
  public fflib_MethodReturnValue prepareMethodReturnValue(
    fflib_InvocationOnMock invocation
  ) {
    MethodReturnValue = new fflib_MethodReturnValue();

    List<fflib_MatchersReturnValue> matcherReturnValues = matcherReturnValuesByMethod.get(
      invocation.getMethod()
    );
    if (matcherReturnValues == null) {
      matcherReturnValues = new List<fflib_MatchersReturnValue>();
      matcherReturnValuesByMethod.put(
        invocation.getMethod(),
        matcherReturnValues
      );
    }

    List<Object> argValues = invocation.getMethodArgValues().argValues;

    //Register explicit arg values as ''equals'' matchers, to preserve old behaviour
    if (!fflib_Match.Matching) {
      for (Object arg : argValues) {
        if (arg == null)
          fflib_Match.isNull();
        else
          fflib_Match.eq(arg);
      }
    }

    List<fflib_IMatcher> matchers = fflib_Match.getAndClearMatchers(
      argValues.size()
    );
    matcherReturnValues.add(
      new fflib_MatchersReturnValue(matchers, MethodReturnValue)
    );

    return MethodReturnValue;
  }

  /**
   * Get the method return value for the given method call.
   * @param invocation The object holding all the data of the invocation, like the method and arguments and the mock instance.
   * @return The MethodReturnValue instance.
   */
  public fflib_MethodReturnValue getMethodReturnValue(
    fflib_InvocationOnMock invocation
  ) {
    List<fflib_MatchersReturnValue> matchersForMethods = matcherReturnValuesByMethod.get(
      invocation.getMethod()
    );
    if (matchersForMethods != null) {
      for (Integer i = matchersForMethods.size() - 1; i >= 0; i--) {
        fflib_MatchersReturnValue matchersReturnValue = (fflib_MatchersReturnValue) matchersForMethods.get(
          i
        );
        if (
          fflib_Match.matchesAllArgs(
            invocation.getMethodArgValues(),
            matchersReturnValue.matchers
          )
        ) {
          return matchersReturnValue.ReturnValue;
        }
      }
    }

    return null;
  }

  /**
   * Prepare a stubbed exceptions for a void method.
   * @param exps The list of exception to throw.
   */
  public void prepareDoThrowWhenExceptions(List<Exception> exps) {
    DoThrowWhenExceptions = exps;
  }
}','1369175684.0','True','fflib_MethodReturnValueRecorder','2335','Active');
INSERT INTO "ApexClass" VALUES(94,'57.0','/*
 Copyright (c) 2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 *	This class implements the actual verification.
 *	@group Core
 */
public abstract class fflib_MethodVerifier {
  /**
   * Verify a method was called on a mock object.
   * @param mockInvocation The object holding all the data of the invocation, like the method and arguments and the mock instance.
   * @param verificationMode The verification mode that holds the setting about how the verification should be performed.
   */
  public void verifyMethodCall(
    fflib_InvocationOnMock mockInvocation,
    fflib_VerificationMode verificationMode
  ) {
    validateMode(verificationMode);

    verify(
      mockinvocation.getMethod(),
      mockinvocation.getMethodArgValues(),
      verificationMode
    );
  }

  /*
   * Method that actually performs the verify
   * @param qm The method to be verified.
   * @param methodArg The arguments of the method that needs to be verified.
   * @param verificationMode The verification mode that holds the setting about how the verification should be performed.
   */
  protected abstract void verify(
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues methodArg,
    fflib_VerificationMode verificationMode
  );

  /*
   * Method that validates the verification mode used in the verify.
   * Not all the methods from the fflib_VerificationMode are implemented for the different classes that extends the fflib_MethodVerifier.
   * The error is thrown at run time, so this method is called in the method that actually performs the verify.
   * @param verificationMode The verification mode that has to have been verified.
   * @throws Exception with message for the fflib_VerificationMode not implemented.
   */
  protected abstract void validateMode(fflib_VerificationMode verificationMode);

  /*
   * Method that performs the argument capturing.
   * Captures argument values during verification.
   * @param matchers The list of matcher with which a method is verified.
   */
  protected void capture(List<fflib_IMatcher> matchers) {
    for (fflib_IMatcher matcher : matchers) {
      if (matcher instanceof fflib_ArgumentCaptor.AnyObject) {
        ((fflib_ArgumentCaptor.AnyObject) matcher).storeArgument();
      }
    }
  }

  protected void throwException(
    fflib_QualifiedMethod qm,
    String inOrder,
    Integer expectedCount,
    String qualifier,
    Integer methodCount,
    String customAssertMessage
  ) {
    String assertMessage = ''Wanted but not invoked: '' + qm + ''.'';

    if (customAssertMessage != null) {
      assertMessage = assertMessage + '' '' + customAssertMessage + ''.'';
    }

    String message = ''{0}Expected : {1}{2}, Actual: {3} -- {4}'';

    List<String> errorParameters = new List<String>{
      inOrder,
      expectedCount + '''',
      qualifier,
      methodCount + '''',
      assertMessage
    };

    throw new fflib_ApexMocks.ApexMocksException(
      String.format(message, errorParameters)
    );
  }
}','2502200699.0','True','fflib_MethodVerifier','1525','Active');
INSERT INTO "ApexClass" VALUES(95,'57.0','/* Generated by apex-mocks-generator version 4.0.1 */
@isTest
public class fflib_Mocks {
  public class Mockfflib_MyList implements fflib_MyList.IList {
    private fflib_ApexMocks mocks;

    public Mockfflib_MyList(fflib_ApexMocks mocks) {
      this.mocks = mocks;
    }

    public void add(String value) {
      mocks.mockVoidMethod(
        this,
        ''add'',
        new List<Type>{ System.Type.forName(''String'') },
        new List<Object>{ value }
      );
    }

    public void add(
      String value1,
      String value2,
      String value3,
      String value4
    ) {
      mocks.mockVoidMethod(
        this,
        ''add'',
        new List<Type>{
          System.Type.forName(''String''),
          System.Type.forName(''String''),
          System.Type.forName(''String''),
          System.Type.forName(''String'')
        },
        new List<Object>{ value1, value2, value3, value4 }
      );
    }

    public void addMore(String value) {
      mocks.mockVoidMethod(
        this,
        ''addMore'',
        new List<Type>{ System.Type.forName(''String'') },
        new List<Object>{ value }
      );
    }

    public void add(String[] value) {
      mocks.mockVoidMethod(
        this,
        ''add'',
        new List<Type>{ System.Type.forName(''String[]'') },
        new List<Object>{ value }
      );
    }

    public String get(Integer index) {
      return (String) mocks.mockNonVoidMethod(
        this,
        ''get'',
        new List<Type>{ System.Type.forName(''Integer'') },
        new List<Object>{ index }
      );
    }

    public String get2(Integer index, String value) {
      return (String) mocks.mockNonVoidMethod(
        this,
        ''get2'',
        new List<Type>{
          System.Type.forName(''Integer''),
          System.Type.forName(''String'')
        },
        new List<Object>{ index, value }
      );
    }

    public void clear() {
      mocks.mockVoidMethod(this, ''clear'', new List<Type>{}, new List<Object>{});
    }

    public Boolean isEmpty() {
      return (Boolean) mocks.mockNonVoidMethod(
        this,
        ''isEmpty'',
        new List<Type>{},
        new List<Object>{}
      );
    }

    public void set(Integer index, Object value) {
      mocks.mockVoidMethod(
        this,
        ''set'',
        new List<Type>{
          System.Type.forName(''Integer''),
          System.Type.forName(''Object'')
        },
        new List<Object>{ index, value }
      );
    }
  }
}','3252474004.0','True','fflib_Mocks','2375','Active');
INSERT INTO "ApexClass" VALUES(96,'57.0','/*
 Copyright (c) 2014-2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @nodoc
 */
@isTest
public with sharing class fflib_MyList implements IList {
  public interface IList {
    void add(String value);
    void add(String value1, String value2, String value3, String value4);
    void addMore(String value);
    void add(String[] value); // Test methods with the same name and number of params
    String get(Integer index);
    String get2(Integer index, String value); // This is just a method signature to allow me to test stubbing a method with multiple arguments
    void clear();
    Boolean isEmpty();
    void set(Integer index, Object value);
  }

  public void add(String[] value) {
  }

  public void add(String value) {
  }

  public void add(String value1, String value2, String value3, String value4) {
  }

  public void addMore(String value) {
  }

  public String get(Integer index) {
    return ''fred'';
  }

  public void clear() {
  }

  public Boolean isEmpty() {
    return true;
  }

  public void set(Integer index, Object value) {
  }

  public String get2(Integer index, String value) {
    return ''mary'';
  }

  public static String getStubClassName() {
    return fflib_ApexMocks.extractTypeName(
      new fflib_ApexMocks().mock(fflib_MyList.class)
    );
  }
}','428562415.0','True','fflib_MyList','1048','Active');
INSERT INTO "ApexClass" VALUES(97,'57.0','/*
 * Copyright (c) 2016-2017 FinancialForce.com, inc.  All rights reserved.
 */
public with sharing class fflib_QualifiedMethod {
  private Object mockInstance;
  private String typeName;
  private String methodName;
  private List<Type> methodArgTypes;

  public fflib_QualifiedMethod(
    String typeName,
    String methodName,
    List<Type> methodArgTypes
  ) {
    this(typeName, methodName, methodArgTypes, null);
  }

  public fflib_QualifiedMethod(
    String typeName,
    String methodName,
    List<Type> methodArgTypes,
    Object mockInstance
  ) {
    this.mockInstance = mockInstance;
    this.typeName = typeName;
    this.methodName = methodName;
    this.methodArgTypes = methodArgTypes;
  }

  /**
   * Standard equals override.
   * @param other The object whose equality we are verifying
   * @return Boolean True if meaningfully equivalent, false otherwise.
   */
  public Boolean equals(Object other) {
    if (this === other) {
      return true;
    }

    fflib_QualifiedMethod that = other instanceof fflib_QualifiedMethod
      ? (fflib_QualifiedMethod) other
      : null;

    return that != null &&
      (this.mockInstance === that.mockInstance ||
      !fflib_ApexMocksConfig.HasIndependentMocks) &&
      this.typeName == that.typeName &&
      this.methodName == that.methodName &&
      this.methodArgTypes == that.methodArgTypes;
  }

  /**
   * Standard hashCode override.
   * @return Integer The generated hashCode
   */
  public Integer hashCode() {
    Integer prime = 31;
    Integer result = 1;

    if (fflib_ApexMocksConfig.HasIndependentMocks) {
      result =
        prime * result + ((mockInstance == null) ? 0 : mockInstance.hashCode());
    }
    result =
      prime * result +
      ((methodArgTypes == null) ? 0 : methodArgTypes.hashCode());
    result =
      prime * result + ((methodName == null) ? 0 : methodName.hashCode());
    result = prime * result + ((typeName == null) ? 0 : typeName.hashCode());

    return result;
  }

  /**
   * Standard toString override.
   * @return String The human friendly description of the method.
   */
  public override String toString() {
    return typeName + ''.'' + methodName + methodArgTypes;
  }
}','4076709429.0','True','fflib_QualifiedMethod','1737','Active');
INSERT INTO "ApexClass" VALUES(98,'57.0','/*
 Copyright (c) 2016-2017 FinancialForce.com, inc.  All rights reserved.
 */

/**
 * @group Core
 */
public with sharing class fflib_QualifiedMethodAndArgValues {
  private final fflib_QualifiedMethod qm;
  private final fflib_MethodArgValues args;
  private final Object mockInstance;

  public fflib_QualifiedMethodAndArgValues(
    fflib_QualifiedMethod qm,
    fflib_MethodArgValues args,
    Object mockInstance
  ) {
    this.qm = qm;
    this.args = args;
    this.mockInstance = mockInstance;
  }

  public fflib_QualifiedMethod getQualifiedMethod() {
    return qm;
  }

  public fflib_MethodArgValues getMethodArgValues() {
    return args;
  }

  public Object getMockInstance() {
    return mockInstance;
  }

  public override String toString() {
    return qm + '' with args: ['' + String.join(args.argValues, ''],['') + '']'';
  }
}','1116167977.0','True','fflib_QualifiedMethodAndArgValues','736','Active');
INSERT INTO "ApexClass" VALUES(99,'57.0','/*
 * Copyright (c) 2016-2017 FinancialForce.com, inc.  All rights reserved.
 */
@isTest
public with sharing class fflib_QualifiedMethodTest {
  @isTest
  private static void equalsReturnsExpectedResults() {
    //Given
    fflib_QualifiedMethod qm1 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class }
    );
    fflib_QualifiedMethod qm2 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class }
    );
    fflib_QualifiedMethod qm3 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ String.class }
    );
    fflib_QualifiedMethod qm4 = new fflib_QualifiedMethod(
      ''Type2'',
      ''Method2'',
      new List<Type>{
        Integer.class,
        String.class,
        fflib_QualifiedMethodTest.class
      }
    );
    fflib_QualifiedMethod qm5 = new fflib_QualifiedMethod(
      '''',
      '''',
      new List<Type>{}
    );
    fflib_QualifiedMethod qm6 = new fflib_QualifiedMethod(null, null, null);

    //When/thens
    System.assertEquals(qm1, qm1);
    System.assertEquals(qm1, qm2);
    System.assertNotEquals(qm1, qm3);
    System.assertNotEquals(qm1, qm4);
    System.assertNotEquals(qm1, qm5);
    System.assertNotEquals(qm1, qm6);

    System.assertEquals(qm2, qm2);
    System.assertNotEquals(qm2, qm3);
    System.assertNotEquals(qm2, qm4);
    System.assertNotEquals(qm2, qm5);
    System.assertNotEquals(qm2, qm6);

    System.assertEquals(qm3, qm3);
    System.assertNotEquals(qm3, qm4);
    System.assertNotEquals(qm3, qm5);
    System.assertNotEquals(qm3, qm6);

    System.assertEquals(qm4, qm4);
    System.assertNotEquals(qm4, qm5);
    System.assertNotEquals(qm4, qm6);

    System.assertEquals(qm5, qm5);
    System.assertNotEquals(qm5, qm6);

    System.assertEquals(qm6, qm6);
  }

  @isTest
  private static void hashCodeReturnsExpectedResults() {
    //Given
    fflib_QualifiedMethod qm1 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class }
    );
    fflib_QualifiedMethod qm2 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class }
    );
    fflib_QualifiedMethod qm3 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ String.class }
    );
    fflib_QualifiedMethod qm4 = new fflib_QualifiedMethod(
      ''Type2'',
      ''Method2'',
      new List<Type>{
        Integer.class,
        String.class,
        fflib_QualifiedMethodTest.class
      }
    );
    fflib_QualifiedMethod qm5 = new fflib_QualifiedMethod(
      '''',
      '''',
      new List<Type>{}
    );
    fflib_QualifiedMethod qm6 = new fflib_QualifiedMethod(null, null, null);

    //When/thens
    System.assertEquals(qm1.hashCode(), qm1.hashCode());
    System.assertEquals(qm1.hashCode(), qm2.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm6.hashCode());

    System.assertEquals(qm2.hashCode(), qm2.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm6.hashCode());

    System.assertEquals(qm3.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm3.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm3.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm3.hashCode(), qm6.hashCode());

    System.assertEquals(qm4.hashCode(), qm4.hashCode());
    System.assertNotEquals(qm4.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm4.hashCode(), qm6.hashCode());

    System.assertEquals(qm5.hashCode(), qm5.hashCode());
    System.assertNotEquals(qm5.hashCode(), qm6.hashCode());

    System.assertEquals(qm6.hashCode(), qm6.hashCode());
  }

  @isTest
  public static void toStringReturnsExpectedResult() {
    System.assertEquals(
      ''MyClass.MyMethod(Integer)'',
      new fflib_QualifiedMethod(
          ''MyClass'',
          ''MyMethod'',
          new List<Type>{ Integer.class }
        )
        .toString()
    );
  }

  @isTest
  private static void equalsReturnsExpectedResultsForHasDependentMocks() {
    //Given
    String instance = ''My object instance'';
    String instance2 = ''My other object instance'';
    fflib_QualifiedMethod qm1 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class }
    );
    fflib_QualifiedMethod qm2 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class },
      instance
    );
    fflib_QualifiedMethod qm3 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class },
      instance
    );
    fflib_QualifiedMethod qm4 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class },
      instance2
    );

    //When/thens
    fflib_ApexMocksConfig.HasIndependentMocks = false;

    System.assertEquals(qm1, qm2);
    System.assertEquals(qm1, qm3);
    System.assertEquals(qm1, qm4);

    fflib_ApexMocksConfig.HasIndependentMocks = true;

    System.assertNotEquals(qm1, qm2);
    System.assertNotEquals(qm1, qm3);
    System.assertNotEquals(qm1, qm4);

    System.assertEquals(qm2, qm3);
    System.assertNotEquals(qm2, qm4);

    System.assertNotEquals(qm3, qm4);
  }

  @isTest
  private static void hashCodeReturnsExpectedResultsForHasDependentMocks() {
    //Given
    String instance = ''My object instance'';
    String instance2 = ''My other object instance'';
    fflib_QualifiedMethod qm1 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class }
    );
    fflib_QualifiedMethod qm2 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class },
      instance
    );
    fflib_QualifiedMethod qm3 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class },
      instance
    );
    fflib_QualifiedMethod qm4 = new fflib_QualifiedMethod(
      ''Type1'',
      ''Method1'',
      new List<Type>{ Integer.class },
      instance2
    );

    //When/thens
    fflib_ApexMocksConfig.HasIndependentMocks = false;

    System.assertEquals(qm1.hashCode(), qm2.hashCode());
    System.assertEquals(qm1.hashCode(), qm3.hashCode());
    System.assertEquals(qm1.hashCode(), qm4.hashCode());

    fflib_ApexMocksConfig.HasIndependentMocks = true;

    System.assertNotEquals(qm1.hashCode(), qm2.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm1.hashCode(), qm4.hashCode());

    System.assertEquals(qm2.hashCode(), qm3.hashCode());
    System.assertNotEquals(qm2.hashCode(), qm4.hashCode());

    System.assertNotEquals(qm3.hashCode(), qm4.hashCode());
  }
}','456336935.0','True','fflib_QualifiedMethodTest','6748','Active');
INSERT INTO "ApexClass" VALUES(100,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * QueryFactory provides an object-oriented way of building SOQL queries without resorting to string manipulation.
 * This class is not meant to be used as a replacement for all SOQL queries, and due to the relativley high overhead in both CPU and describe calls
 * should be used in places where highly dynamic queries, such as those that include field sets or are mutated heavilly
 * in multiple locations are a good fit for use with fflib_QueryFactory.
 *
 * To use call construct a new instance for each query you intend to make.
 * To add additional fields to the query make use of the selectField(s) methods.
 *
 * Currently the WHERE clause of the query is manipulated as a single string, and is decidedly less OO-styled than other methods.
 * This is expected to be expanded upon in the future.
 *
 * To include one or more ORDER BY clause(s), use one of the addOrdering methods.  If not specified, the "NULLS FIRST" keywords
 * will be included by default. Constructing Ordering instances manually is discouraged.
 *
 * Subselect Queries are supported with the subselectQuery methods.
 * More than one sub-query can be added to a single query, but sub-queries can only be 1 level deep.
 * An exception will thrown from the subselectQuery method when there is an attempt to add a subquery to a sub-query
 * or to add a subquery to a query with an invalid relationship.
 *
 * Current limitations:
 * - Aggregate functions are not currently supported.
 * - Cross-object references currently require using String argument(s) to selectField(s).
 * - The behavior of serializing and deserializing an fflib_QueryFactory instance is currently untested and undefined.
 *
 * There is a google doc providing additional guideance on the use of this class with field sets at
 * https://docs.google.com/a/financialforce.com/document/d/1I4cxN4xHT4UJj_3Oi0YBL_MJ5chm-KG8kMN1D1un8-g/edit?usp=sharing
 **/
public class fflib_QueryFactory { //No explicit sharing declaration - inherit from caller
  public enum SortOrder {
    ASCENDING,
    DESCENDING
  }

  /**
   * This property is read-only and may not be set after instantiation.
   * The {@link Schema.SObjectType} token of the SObject that will be used in the FROM clause of the resultant query.
   **/
  public Schema.SObjectType table { get; private set; }
  @testVisible
  private Set<String> fields;
  private String conditionExpression;
  private Integer limitCount;
  private Integer offsetCount;
  private List<Ordering> order;
  /**
   * Integrate checking for READ Field Level Security within the selectField(s) methods
   * This can optionally be enforced (or not) by calling the setEnforceFLS method prior to calling
   * one of the selectField or selectFieldset methods.
   **/
  private Boolean enforceFLS;

  private Boolean sortSelectFields = true;

  /**
   * The relationship and  subselectQueryMap variables are used to support subselect queries.  Subselects can be added to
   * a query, as long as it isn''t a subselect query itself.  You may have many subselects inside
   * a query, but they may only be 1 level deep (no subselect inside a subselect)
   * to add a subselect, call the subselectQuery method, passing in the ChildRelationship.
   **/
  private Schema.ChildRelationship relationship;
  private Map<Schema.ChildRelationship, fflib_QueryFactory> subselectQueryMap;

  private String getFieldPath(String fieldName) {
    if (!fieldName.contains(''.'')) {
      //single field
      Schema.SObjectField token = fflib_SObjectDescribe.getDescribe(table)
        .getField(fieldName.toLowerCase());
      if (token == null)
        throw new InvalidFieldException(fieldName, this.table);
      if (enforceFLS)
        fflib_SecurityUtils.checkFieldIsReadable(this.table, token);
      return token.getDescribe().getName();
    }

    //traversing FK relationship(s)
    List<String> fieldPath = new List<String>();
    Schema.sObjectType lastSObjectType = table;
    Iterator<String> i = fieldName.split(''\\.'').iterator();
    while (i.hasNext()) {
      String field = i.next();
      Schema.SObjectField token = fflib_SObjectDescribe.getDescribe(
          lastSObjectType
        )
        .getField(field.toLowerCase());
      DescribeFieldResult tokenDescribe = token != null
        ? token.getDescribe()
        : null;

      if (token != null && enforceFLS) {
        fflib_SecurityUtils.checkFieldIsReadable(lastSObjectType, token);
      }

      if (
        token != null &&
        i.hasNext() &&
        tokenDescribe.getSOAPType() == Schema.SOAPType.ID
      ) {
        lastSObjectType = tokenDescribe.getReferenceTo()[0]; //if it''s polymorphic doesn''t matter which one we get
        fieldPath.add(tokenDescribe.getRelationshipName());
      } else if (token != null && !i.hasNext()) {
        fieldPath.add(tokenDescribe.getName());
      } else {
        if (token == null)
          throw new InvalidFieldException(field, lastSObjectType);
        else
          throw new NonReferenceFieldException(
            lastSObjectType +
            ''.'' +
            field +
            '' is not a lookup or master-detail field but is used in a cross-object query field.''
          );
      }
    }

    return String.join(fieldPath, ''.'');
  }

  @TestVisible
  private static String getFieldTokenPath(Schema.SObjectField field) {
    if (field == null) {
      throw new InvalidFieldException(''Invalid field: null'');
    }
    return field.getDescribe().getName();
  }

  /**
   * fflib_QueryFactory instances will be considered equal if they produce the same SOQL query.
   * A faster comparison will first be attempted to check if they apply to the same table, and contain the same number of fields selected.
   * This method will never return true if the provided object is not an instance of fflib_QueryFactory.
   * @param obj the object to check equality of.
   **/
  public boolean equals(Object obj) {
    if (
      !(obj instanceof fflib_QueryFactory) ||
      ((fflib_QueryFactory) obj).table != this.table ||
      ((fflib_QueryFactory) obj).fields.size() != this.fields.size()
    )
      return false;
    return ((fflib_QueryFactory) obj).toSOQL() == this.toSOQL();
  }

  /**
   * Construct a new fflib_QueryFactory instance with no options other than the FROM caluse.
   * You *must* call selectField(s) before {@link #toSOQL} will return a valid, runnable query.
   * @param table	the SObject to be used in the FROM clause of the resultant query. This sets the value of {@link #table}.
   **/
  public fflib_QueryFactory(Schema.SObjectType table) {
    this.table = table;
    fields = new Set<String>();
    order = new List<Ordering>();
    enforceFLS = false;
  }

  /**
   * Construct a new fflib_QueryFactory instance with no options other than the FROM clause and the relationship.
   * This should be used when constructing a subquery query for addition to a parent query.
   * Objects created with this constructor cannot be added to another object using the subselectQuery method.
   * You *must* call selectField(s) before {@link #toSOQL} will return a valid, runnable query.
   * @param relationship the ChildRelationship to be used in the FROM Clause of the resultant Query (when set overrides value of table). This sets the value of {@link #relationship} and {@link #table}.
   **/
  private fflib_QueryFactory(Schema.ChildRelationship relationship) {
    this(relationship.getChildSObject());
    this.relationship = relationship;
  }

  /**
   * This method checks to see if the User has Read Access on {@link #table}.
   * Asserts true if User has access.
   **/
  public fflib_QueryFactory assertIsAccessible() {
    fflib_SecurityUtils.checkObjectIsReadable(table);
    return this;
  }

  /**
   * This method sets a flag to indicate that this query should have FLS Read
   * permission enforced.  If this method is not called, the default behavior
   * is that FLS read permission will not be checked.
   * @param enforce whether to enforce field level security (read)
   **/
  public fflib_QueryFactory setEnforceFLS(Boolean enforce) {
    this.enforceFLS = enforce;
    return this;
  }

  /**
   * Sets a flag to indicate that this query should have ordered
   * query fields in the select statement (this at a small cost to performance).
   * If you are processing large query sets, you should switch this off.
   * @param whether or not select fields should be sorted in the soql statement.
   **/
  public fflib_QueryFactory setSortSelectFields(Boolean doSort) {
    this.sortSelectFields = doSort;
    return this;
  }

  /**
   * Selects a single field from the SObject specified in {@link #table}.
   * Selecting fields is idempotent, if this field is already selected calling this method will have no additional impact.
   * @param fieldName the API name of the field to add to the query''s SELECT clause.
   **/
  public fflib_QueryFactory selectField(String fieldName) {
    fields.add(getFieldPath(fieldName));
    return this;
  }
  /**
   * Selects a field, avoiding the possible ambiguitiy of String API names.
   * @see #selectField(String)
   * @param field the {@link Schema.SObjectField} to select with this query.
   * @exception InvalidFieldException If the field is null {@code field}.
   **/
  public fflib_QueryFactory selectField(Schema.SObjectField field) {
    if (field == null)
      throw new InvalidFieldException(null, this.table);
    if (enforceFLS)
      fflib_SecurityUtils.checkFieldIsReadable(table, field);
    fields.add(getFieldTokenPath(field));
    return this;
  }
  /**
   * Selects multiple fields. This acts the same as calling {@link #selectField(String)} multiple times.
   * @param fieldNames the Set of field API names to select.
   **/
  public fflib_QueryFactory selectFields(Set<String> fieldNames) {
    for (String fieldName : fieldNames) {
      fields.add(getFieldPath(fieldName));
    }
    return this;
  }
  /**
   * Selects multiple fields. This acts the same as calling {@link #selectField(String)} multiple times.
   * @param fieldNames the List of field API names to select.
   **/
  public fflib_QueryFactory selectFields(List<String> fieldNames) {
    for (String fieldName : fieldNames)
      fields.add(getFieldPath(fieldName));
    return this;
  }
  /**
   * Selects multiple fields. This acts the same as calling {@link #selectField(Schema.SObjectField)} multiple times.
   * @param fieldNames the set of {@link Schema.SObjectField}s to select.
   * @exception InvalidFieldException if the fields are null {@code fields}.
   **/
  public fflib_QueryFactory selectFields(Set<Schema.SObjectField> fields) {
    for (Schema.SObjectField token : fields) {
      if (token == null)
        throw new InvalidFieldException();
      if (enforceFLS)
        fflib_SecurityUtils.checkFieldIsReadable(table, token);
      this.fields.add(getFieldTokenPath(token));
    }
    return this;
  }
  /**
   * Selects multiple fields. This acts the same as calling {@link #selectField(Schema.SObjectField)} multiple times.
   * @param fieldNames the set of {@link Schema.SObjectField}s to select.
   * @exception InvalidFieldException if the fields are null {@code fields}.
   **/
  public fflib_QueryFactory selectFields(List<Schema.SObjectField> fields) {
    for (Schema.SObjectField token : fields) {
      if (token == null)
        throw new InvalidFieldException();
      if (enforceFLS)
        fflib_SecurityUtils.checkFieldIsReadable(table, token);
      this.fields.add(getFieldTokenPath(token));
    }
    return this;
  }
  /**
   * @see #selectFieldSet(Schema.FieldSet,Boolean)
   **/
  public fflib_QueryFactory selectFieldSet(Schema.FieldSet fieldSet) {
    return selectFieldSet(fieldSet, true);
  }
  /**
   * This is equivielent to iterating the fields in the field set and calling {@link #selectField(String)} on each.
   * @param fieldSet Select all fields included in the field set.
   * @param allowCrossObject if false this method will throw an exception if any fields in the field set reference fields on a related record.
   * @exception InvalidFieldSetException if the fieldset is invalid for table {@code fields}.
   **/
  public fflib_QueryFactory selectFieldSet(
    Schema.FieldSet fieldSet,
    Boolean allowCrossObject
  ) {
    if (fieldSet.getSObjectType() != table)
      throw new InvalidFieldSetException(
        ''Field set "'' +
        fieldSet.getName() +
        ''" is not for SObject type "'' +
        table +
        ''"''
      );
    for (Schema.FieldSetMember field : fieldSet.getFields()) {
      if (!allowCrossObject && field.getFieldPath().contains(''.''))
        throw new InvalidFieldSetException(
          ''Cross-object fields not allowed and field "'' +
          field.getFieldPath() +
          ''"" is a cross-object field.''
        );
      fields.add(getFieldPath(field.getFieldPath()));
    }
    return this;
  }
  /**
   * @param conditionExpression Sets the WHERE clause to the string provided. Do not include the "WHERE".
   **/
  public fflib_QueryFactory setCondition(String conditionExpression) {
    this.conditionExpression = conditionExpression;
    return this;
  }
  /**
   * @returns the current value of the WHERE clause, if any, as set by {@link #setCondition}
   **/
  public String getCondition() {
    return this.conditionExpression;
  }
  /**
   * @param limitCount if not null causes a LIMIT caluse to be added to the resulting query.
   **/
  public fflib_QueryFactory setLimit(Integer limitCount) {
    this.limitCount = limitCount;
    return this;
  }
  /**
   * @returns the current value of the LIMIT clause, if any.
   **/
  public Integer getLimit() {
    return this.limitCount;
  }
  /**
   * @param offsetCount if not null causes a OFFSET caluse to be added to the resulting query.
   **/
  public fflib_QueryFactory setOffset(Integer offsetCount) {
    this.offsetCount = offsetCount;
    return this;
  }
  /**
   * @returns the current value of the OFFSET clause, if any.
   **/
  public Integer getOffset() {
    return this.offsetCount;
  }
  /**
   * @param o an instance of {@link fflib_QueryFactory.Ordering} to be added to the query''s ORDER BY clause.
   **/
  public fflib_QueryFactory addOrdering(Ordering o) {
    this.order.add(o);
    return this;
  }
  /**
   * @returns the list of orderings that will be used as the query''s ORDER BY clause. You may remove elements from the returned list, or otherwise mutate it, to remove previously added orderings.
   **/
  public List<Ordering> getOrderings() {
    return this.order;
  }

  /**
   * @returns the selected fields
   **/
  public Set<String> getSelectedFields() {
    return this.fields;
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @deprecated  Replaced by {@link #subselectQuery(String relationshipName)} and {@link #subselectQuery(ChildRelationship relationship)}
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param related The related object type
   **/
  public fflib_QueryFactory subselectQuery(SObjectType related) {
    System.debug(
      LoggingLevel.WARN,
      ''fflib_QueryFactory.subselectQuery(Schema.SObjectType) is deprecated and will be removed in a future release. Use fflib_QueryFactory.subselectQuery(String) or fflib_QueryFactory.subselectQuery(ChildRelationship) instead.''
    );
    return setSubselectQuery(getChildRelationship(related), false);
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @deprecated  Replaced by {@link #subselectQuery(String relationshipName, Boolean assertIsAccessible)} and {@link #subselectQuery(ChildRelationship relationship, Boolean assertIsAccessible)}
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param related The related object type
   * @param assertIsAccessible indicates whether to check if the user has access to the subquery object
   **/
  public fflib_QueryFactory subselectQuery(
    SObjectType related,
    Boolean assertIsAccessible
  ) {
    System.debug(
      LoggingLevel.WARN,
      ''fflib_QueryFactory.subselectQuery(Schema.SObjectType, Boolean) is deprecated and will be removed in a future release. Use fflib_QueryFactory.subselectQuery(String, Boolean) or fflib_QueryFactory.subselectQuery(ChildRelationship, Boolean) instead.''
    );
    return setSubselectQuery(getChildRelationship(related), assertIsAccessible);
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationshipName already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param relationshipName The relationshipName to be added as a subquery
   **/
  public fflib_QueryFactory subselectQuery(String relationshipName) {
    return subselectQuery(relationshipName, false);
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param relationshipName The relationshipName to be added as a subquery
   * @param assertIsAccessible indicates whether to check if the user has access to the subquery object
   **/
  public fflib_QueryFactory subselectQuery(
    String relationshipName,
    Boolean assertIsAccessible
  ) {
    ChildRelationship relationship = getChildRelationship(relationshipName);
    if (relationship != null) {
      return setSubselectQuery(relationship, assertIsAccessible);
    }
    throw new InvalidSubqueryRelationshipException(
      ''Invalid call to subselectQuery with relationshipName = '' +
      relationshipName +
      ''.  Relationship does not exist for '' +
      table.getDescribe().getName()
    );
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationshipName already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param relationship The ChildRelationship to be added as a subquery
   **/
  public fflib_QueryFactory subselectQuery(ChildRelationship relationship) {
    return subselectQuery(relationship, false);
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param relationship The ChildRelationship to be added as a subquery
   * @param assertIsAccessible indicates whether to check if the user has access to the subquery object
   **/
  public fflib_QueryFactory subselectQuery(
    ChildRelationship relationship,
    Boolean assertIsAccessible
  ) {
    return setSubselectQuery(relationship, assertIsAccessible);
  }

  /**
   * Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned.
   * If not, a new one will be created and returned.
   * @exception InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship
   * @param relationship The ChildRelationship to be added as a subquery
   **/
  private fflib_QueryFactory setSubselectQuery(
    ChildRelationship relationship,
    Boolean assertIsAccessible
  ) {
    if (this.relationship != null) {
      throw new InvalidSubqueryRelationshipException(
        ''Invalid call to subselectQuery.  You may not add a subselect query to a subselect query.''
      );
    }
    if (this.subselectQueryMap == null) {
      this.subselectQueryMap = new Map<ChildRelationship, fflib_QueryFactory>();
    }
    if (this.subselectQueryMap.containsKey(relationship)) {
      return subselectQueryMap.get(relationship);
    }

    fflib_QueryFactory subselectQuery = new fflib_QueryFactory(relationship);

    //The child queryFactory should be configured in the same way as the parent by default - can override after if required
    subSelectQuery.setSortSelectFields(sortSelectFields);

    if (assertIsAccessible) {
      subSelectQuery.assertIsAccessible();
    }
    subselectQueryMap.put(relationship, subSelectQuery);
    return subSelectQuery;
  }

  /**
   * @returns the list of subquery instances of fflib_QueryFactory which will be added to the SOQL as relationship/child/sub-queries.
   **/
  public List<fflib_QueryFactory> getSubselectQueries() {
    if (subselectQueryMap != null) {
      return subselectQueryMap.values();
    }
    return null;
  }

  /**
   * Get the ChildRelationship from the Table for the object type passed in.
   * @param objType The object type of the child relationship to get
   **/
  private Schema.ChildRelationship getChildRelationship(sObjectType objType) {
    for (
      Schema.ChildRelationship childRow : table.getDescribe()
        .getChildRelationships()
    ) {
      //occasionally on some standard objects (Like Contact child of Contact) do not have a relationship name.
      //if there is no relationship name, we cannot query on it, so throw an exception.
      if (
        childRow.getChildSObject() == objType &&
        childRow.getRelationshipName() != null
      ) {
        return childRow;
      }
    }
    throw new InvalidSubqueryRelationshipException(
      ''Invalid call to subselectQuery.  Invalid relationship for table '' +
      table +
      '' and objtype='' +
      objType
    );
  }

  /**
   * Get the ChildRelationship from the Table for the relationship name passed in.
   * @param relationshipName The name of the object''s ChildRelationship on get
   **/
  private Schema.ChildRelationship getChildRelationship(
    String relationshipName
  ) {
    for (
      Schema.ChildRelationship childRow : table.getDescribe()
        .getChildRelationships()
    ) {
      if (childRow.getRelationshipName() == relationshipName) {
        return childRow;
      }
    }
    return null;
  }

  /**
   * Add a field to be sorted on.  This may be a direct field or a field
   * related through an object lookup or master-detail relationship.
   * Use the set to store unique field names, since we only want to sort
   * by the same field one time.  The sort expressions are stored in a list
   * so that they are applied to the SOQL in the same order that they
   * were added in.
   * @param fieldName The string value of the field to be sorted on
   * @param SortOrder the direction to be sorted on (ASCENDING or DESCENDING)
   * @param nullsLast whether to sort null values last (NULLS LAST keyword included).
   **/
  public fflib_QueryFactory addOrdering(
    String fieldName,
    SortOrder direction,
    Boolean nullsLast
  ) {
    order.add(new Ordering(getFieldPath(fieldName), direction, nullsLast));
    return this;
  }

  /**
   * Add a field to be sorted on.  This may be a direct field or a field
   * related through an object lookup or master-detail relationship.
   * Use the set to store unique field names, since we only want to sort
   * by the same field one time.  The sort expressions are stored in a list
   * so that they are applied to the SOQL in the same order that they
   * were added in.
   * @param field The SObjectfield to sort.  This can only be a direct reference.
   * @param SortOrder the direction to be sorted on (ASCENDING or DESCENDING)
   * @param nullsLast whether to sort null values last (NULLS LAST keyword included).
   **/
  public fflib_QueryFactory addOrdering(
    SObjectField field,
    SortOrder direction,
    Boolean nullsLast
  ) {
    order.add(new Ordering(getFieldTokenPath(field), direction, nullsLast));
    return this;
  }

  /**
   * Add a field to be sorted on.  This may be a direct field or a field
   * related through an object lookup or master-detail relationship.
   * Use the set to store unique field names, since we only want to sort
   * by the same field one time.  The sort expressions are stored in a list
   * so that they are applied to the SOQL in the same order that they
   * were added in.
   * The "NULLS FIRST" keywords will be included by default.  If "NULLS LAST"
   * is required, use one of the overloaded addOrdering methods which include this parameter.
   * @param fieldName The string value of the field to be sorted on
   * @param SortOrder the direction to be sorted on (ASCENDING or DESCENDING)
   **/
  public fflib_QueryFactory addOrdering(String fieldName, SortOrder direction) {
    order.add(new Ordering(getFieldPath(fieldName), direction));
    return this;
  }

  /**
   * Add a field to be sorted on.  This may be a direct field or a field
   * related through an object lookup or master-detail relationship.
   * Use the set to store unique field names, since we only want to sort
   * by the same field one time.  The sort expressions are stored in a list
   * so that they are applied to the SOQL in the same order that they
   * were added in.
   * The "NULLS FIRST" keywords will be included by default.  If "NULLS LAST"
   * is required, use one of the overloaded addOrdering methods which include this parameter.
   * @param field The SObjectfield to sort.  This can only be a direct reference.
   * @param SortOrder the direction to be sorted on (ASCENDING or DESCENDING)
   **/
  public fflib_QueryFactory addOrdering(
    SObjectField field,
    SortOrder direction
  ) {
    order.add(new Ordering(getFieldTokenPath(field), direction));
    return this;
  }

  /**
   * Convert the values provided to this instance into a full SOQL string for use with Database.query
   * Check to see if subqueries queries need to be added after the field list.
   **/
  public String toSOQL() {
    String result = ''SELECT '';
    //if no fields have been added, just add the Id field so that the query or subquery will not just fail
    if (fields.size() == 0) {
      if (enforceFLS)
        fflib_SecurityUtils.checkFieldIsReadable(table, ''Id'');
      result += ''Id'';
    } else {
      List<String> fieldsToQuery = new List<String>(fields);

      if (sortSelectFields) {
        fieldsToQuery.sort();
      }

      result += String.join(fieldsToQuery, '', '');
    }

    if (subselectQueryMap != null && !subselectQueryMap.isEmpty()) {
      for (fflib_QueryFactory childRow : subselectQueryMap.values()) {
        result += '', ('' + childRow.toSOQL() + '') '';
      }
    }
    result +=
      '' FROM '' +
      (relationship != null
        ? relationship.getRelationshipName()
        : table.getDescribe().getName());
    if (conditionExpression != null)
      result += '' WHERE '' + conditionExpression;

    if (order.size() > 0) {
      result += '' ORDER BY '';
      for (Ordering o : order)
        result += o.toSOQL() + '', '';
      result = result.substring(0, result.length() - 2);
    }

    if (limitCount != null)
      result += '' LIMIT '' + limitCount;

    if (offsetCount != null)
      result += '' OFFSET '' + offsetCount;

    return result;
  }

  /**
   * Create a "deep" clone of this object that can be safely mutated without affecting the cloned instance
   * @return a deep clone of this fflib_QueryFactory
   **/
  public fflib_QueryFactory deepClone() {
    fflib_QueryFactory clone = new fflib_QueryFactory(this.table)
      .setLimit(this.limitCount)
      .setOffset(this.offsetCount)
      .setCondition(this.conditionExpression)
      .setEnforceFLS(this.enforceFLS);

    Map<Schema.ChildRelationship, fflib_QueryFactory> subqueries = this.subselectQueryMap;
    if (subqueries != null) {
      Map<Schema.ChildRelationship, fflib_QueryFactory> clonedSubqueries = new Map<Schema.ChildRelationship, fflib_QueryFactory>();
      for (Schema.ChildRelationship key : subqueries.keySet()) {
        clonedSubqueries.put(key, subqueries.get(key).deepClone());
      }
      clone.subselectQueryMap = clonedSubqueries;
    }

    clone.relationship = this.relationship;
    clone.order = this.order.clone();
    clone.fields = this.fields.clone();

    return clone;
  }

  public class Ordering {
    private SortOrder direction;
    private boolean nullsLast;
    private String field;

    public Ordering(String sobjType, String fieldName, SortOrder direction) {
      this(
        fflib_SObjectDescribe.getDescribe(sobjType).getField(fieldName),
        direction
      );
    }
    /**
     * Construct a new ordering instance for use with {@link fflib_QueryFactory#addOrdering}
     * Once constructed it''s properties may not be modified.
     **/
    public Ordering(Schema.SObjectField field, SortOrder direction) {
      this(fflib_QueryFactory.getFieldTokenPath(field), direction, false); //SOQL docs state NULLS FIRST is default behavior
    }
    public Ordering(
      Schema.SObjectField field,
      SortOrder direction,
      Boolean nullsLast
    ) {
      this(fflib_QueryFactory.getFieldTokenPath(field), direction, nullsLast);
    }
    @testVisible
    private Ordering(String field, SortOrder direction) {
      this(field, direction, false);
    }
    @testVisible
    private Ordering(String field, SortOrder direction, Boolean nullsLast) {
      this.direction = direction;
      this.field = field;
      this.nullsLast = nullsLast;
    }
    public String getField() {
      return this.field;
    }
    public SortOrder getDirection() {
      return direction;
    }
    public String toSOQL() {
      return field +
        '' '' +
        (direction == SortOrder.ASCENDING ? ''ASC'' : ''DESC'') +
        (nullsLast ? '' NULLS LAST '' : '' NULLS FIRST '');
    }
  }

  public class InvalidFieldException extends Exception {
    private String fieldName;
    private Schema.SObjectType objectType;
    public InvalidFieldException(
      String fieldname,
      Schema.SObjectType objectType
    ) {
      this.objectType = objectType;
      this.fieldName = fieldName;
      this.setMessage(
        ''Invalid field \'''' +
        fieldName +
        ''\'' for object \'''' +
        objectType +
        ''\''''
      );
    }
  }
  public class InvalidFieldSetException extends Exception {
  }
  public class NonReferenceFieldException extends Exception {
  }
  public class InvalidSubqueryRelationshipException extends Exception {
  }
}','1491373286.0','True','fflib_QueryFactory','15212','Active');
INSERT INTO "ApexClass" VALUES(101,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@isTest
private class fflib_QueryFactoryTest {
  @isTest
  static void fieldSelections() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''firstName'');
    qf.selectField(Schema.Contact.SObjectType.fields.lastName);
    qf.selectFields(new Set<String>{ ''acCounTId'', ''account.name'' });
    qf.selectFields(new List<String>{ ''homePhonE'', ''fAX'' });
    qf.selectFields(
      new List<Schema.SObjectField>{ Contact.Email, Contact.Title }
    );
    System.assertEquals(
      new Set<String>{
        ''FirstName'',
        ''LastName'',
        ''AccountId'',
        ''Account.Name'',
        ''HomePhone'',
        ''Fax'',
        ''Email'',
        ''Title''
      },
      qf.getSelectedFields()
    );
  }

  @isTest
  static void simpleFieldSelection() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''NAMe'').selectFields(new Set<String>{ ''naMe'', ''email'' });
    String query = qf.toSOQL();
    System.assert(
      Pattern.matches(''SELECT.*Name.*FROM.*'', query),
      ''Expected Name field in query, got '' + query
    );
    System.assert(
      Pattern.matches(''SELECT.*Email.*FROM.*'', query),
      ''Expected Name field in query, got '' + query
    );
    qf.setLimit(100);
    System.assertEquals(100, qf.getLimit());
    System.assert(
      qf.toSOQL().endsWithIgnoreCase(''LIMIT '' + qf.getLimit()),
      ''Failed to respect limit clause:'' + qf.toSOQL()
    );
  }

  @isTest
  static void simpleFieldCondition() {
    String whereClause = ''name = \''test\'''';
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    qf.selectField(''email'');
    qf.setCondition(whereClause);
    System.assertEquals(whereClause, qf.getCondition());
    String query = qf.toSOQL();
    System.assert(
      query.endsWith(''WHERE name = \''test\''''),
      ''Query should have ended with a filter on name, got: '' + query
    );
  }

  @isTest
  static void duplicateFieldSelection() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''NAMe'').selectFields(new Set<String>{ ''naMe'', ''email'' });
    String query = qf.toSOQL();
    System.assertEquals(
      1,
      query.countMatches(''Name''),
      ''Expected one name field in query: '' + query
    );
  }

  @isTest
  static void equalityCheck() {
    fflib_QueryFactory qf1 = new fflib_QueryFactory(Contact.SObjectType);
    fflib_QueryFactory qf2 = new fflib_QueryFactory(Contact.SObjectType);
    System.assertEquals(qf1, qf2);
    qf1.selectField(''name'');
    System.assertNotEquals(qf1, qf2);
    qf2.selectField(''NAmE'');
    System.assertEquals(qf1, qf2);
    qf1.selectField(''name'')
      .selectFields(new Set<String>{ ''NAME'', ''name'' })
      .selectFields(new Set<Schema.SObjectField>{ Contact.Name, Contact.Name });
    System.assertEquals(qf1, qf2);
  }

  @isTest
  static void nonReferenceField() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    fflib_QueryFactory.NonReferenceFieldException e;
    try {
      qf.selectField(''name.title'');
    } catch (fflib_QueryFactory.NonReferenceFieldException ex) {
      e = ex;
    }
    System.assertNotEquals(
      null,
      e,
      ''Cross-object notation on a non-reference field should throw NonReferenceFieldException.''
    );
  }

  @isTest
  static void invalidCrossObjectField() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    fflib_QueryFactory.InvalidFieldException e;
    try {
      qf.selectField(''account.NOT_A_REAL_FIELD'');
    } catch (fflib_QueryFactory.InvalidFieldException ex) {
      e = ex;
    }
    System.assertNotEquals(
      null,
      e,
      ''Cross-object notation on a non-reference field should throw NonReferenceFieldException.''
    );
  }

  @isTest
  static void invalidFieldTests() {
    List<fflib_QueryFactory.InvalidFieldException> exceptions = new List<fflib_QueryFactory.InvalidFieldException>();
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    try {
      qf.selectField(''Not_a_field'');
    } catch (fflib_QueryFactory.InvalidFieldException e) {
      exceptions.add(e);
    }
    try {
      qf.selectFields(new Set<String>{ ''Not_a_field'', ''alsoNotreal'' });
    } catch (fflib_QueryFactory.InvalidFieldException e) {
      exceptions.add(e);
    }
    try {
      qf.selectFields(new Set<Schema.SObjectField>{ null });
    } catch (fflib_QueryFactory.InvalidFieldException e) {
      exceptions.add(e);
    }
    try {
      qf.selectFields(new List<Schema.SObjectField>{ null, Contact.title });
    } catch (fflib_QueryFactory.InvalidFieldException e) {
      exceptions.add(e);
    }
    System.assertEquals(4, exceptions.size());
  }

  @isTest
  static void ordering() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    qf.selectField(''email'');
    qf.setCondition(''name = \''test\'''');
    qf.addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''CreatedDATE'',
          fflib_QueryFactory.SortOrder.DESCENDING
        )
      );
    String query = qf.toSOQL();

    System.assertEquals(2, qf.getOrderings().size());
    System.assertEquals(''Name'', qf.getOrderings()[0].getField());
    System.assertEquals(
      fflib_QueryFactory.SortOrder.DESCENDING,
      qf.getOrderings()[1].getDirection()
    );

    System.assert(
      Pattern.matches(''SELECT.*Name.*FROM.*'', query),
      ''Expected Name field in query, got '' + query
    );
    System.assert(
      Pattern.matches(''SELECT.*Email.*FROM.*'', query),
      ''Expected Name field in query, got '' + query
    );
  }

  @isTest
  static void invalidField_string() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    Exception e;
    try {
      qf.selectField(''not_a__field'');
    } catch (fflib_QueryFactory.InvalidFieldException ex) {
      e = ex;
    }
    System.assertNotEquals(null, e);
  }

  @isTest
  static void invalidFields_string() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    Exception e;
    try {
      qf.selectFields(new List<String>{ ''not_a__field'' });
    } catch (fflib_QueryFactory.InvalidFieldException ex) {
      e = ex;
    }
    System.assertNotEquals(null, e);
  }

  @isTest
  static void invalidField_nullToken() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    Exception e;
    Schema.SObjectField token = null;
    try {
      qf.selectField(token);
    } catch (fflib_QueryFactory.InvalidFieldException ex) {
      e = ex;
    }
    System.assertNotEquals(null, e);
  }

  @isTest
  static void invalidFields_nullToken() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    Exception e;
    List<Schema.SObjectField> token = new List<Schema.SObjectField>{ null };
    try {
      qf.selectFields(token);
    } catch (fflib_QueryFactory.InvalidFieldException ex) {
      e = ex;
    }
    System.assertNotEquals(null, e);
  }

  @isTest
  static void invalidFields_noQueryField() {
    try {
      String path = fflib_QueryFactory.getFieldTokenPath(null);
      System.assert(false, ''Expected InvalidFieldException; none was thrown'');
    } catch (fflib_QueryFactory.InvalidFieldException ife) {
      //Expected
    } catch (Exception e) {
      System.assert(
        false,
        ''Expected InvalidFieldException; '' +
        e.getTypeName() +
        '' was thrown instead: '' +
        e
      );
    }
  }

  @isTest
  static void queryFieldsNotEquals() {
    String qfld = fflib_QueryFactory.getFieldTokenPath(Contact.Name);
    String qfld2 = fflib_QueryFactory.getFieldTokenPath(Contact.LastName);
    System.assert(!qfld.equals(qfld2));
  }

  @isTest
  static void addChildQueriesWithChildRelationship_success() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;

    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'')
      .selectField(''Id'')
      .setCondition(''name like \''%test%\'''')
      .addOrdering(
        ''CreatedDate'',
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();
    //explicitly assert object accessibility when creating the subselect
    qf.subselectQuery(''Tasks'', true)
      .selectField(''Id'')
      .selectField(''Subject'')
      .setCondition('' IsDeleted = false '');
    List<fflib_QueryFactory> queries = qf.getSubselectQueries();
    System.assert(queries != null);
    List<Contact> contacts = Database.query(qf.toSOQL());
    System.assert(contacts != null && contacts.size() == 1);
    System.assert(contacts[0].Tasks.size() == 1);
    System.assert(contacts[0].Tasks[0].Subject == ''test'');
  }

  @isTest
  static void addChildQueriesWithChildRelationshipNoAccessibleCheck_success() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;

    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'')
      .selectField(''Id'')
      .setCondition(''name like \''%test%\'''')
      .addOrdering(
        ''CreatedDate'',
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    //explicitly assert object accessibility when creating the subselect
    qf.subselectQuery(''Tasks'')
      .selectField(''Id'')
      .selectField(''Subject'')
      .setCondition('' IsDeleted = false '');
    List<fflib_QueryFactory> queries = qf.getSubselectQueries();
    System.assert(queries != null);
    String soql = qf.toSOQL();
    System.debug(soql);
    List<Contact> contacts = Database.query(soql);
    System.assert(contacts != null && contacts.size() == 1);
    System.assert(contacts[0].Tasks.size() == 1);
    System.assert(contacts[0].Tasks[0].Subject == ''test'');
  }

  @isTest
  static void addChildQueriesWithChildRelationshipObjCheckIsAccessible_success() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;

    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'')
      .selectField(''Id'')
      .setCondition(''name like \''%test%\'''')
      .addOrdering(
        ''CreatedDate'',
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();
    Schema.ChildRelationship relationship;
    for (
      Schema.ChildRelationship childRow : descResult.getChildRelationships()
    ) {
      //occasionally on some standard objects (Like Contact child of Contact) do not have a relationship name.
      //if there is no relationship name, we cannot query on it, so throw an exception.
      if (childRow.getRelationshipName() == ''Tasks'') {
        relationship = childRow;
      }
    }
    //explicitly assert object accessibility when creating the subselect
    qf.subselectQuery(relationship, true)
      .selectField(''Id'')
      .selectField(''Subject'')
      .setCondition('' IsDeleted = false '');
    List<fflib_QueryFactory> queries = qf.getSubselectQueries();
    System.assert(queries != null);
    List<Contact> contacts = Database.query(qf.toSOQL());
    System.assert(contacts != null && contacts.size() == 1);
    System.assert(contacts[0].Tasks.size() == 1);
    System.assert(contacts[0].Tasks[0].Subject == ''test'');
  }

  @isTest
  static void addChildQueriesWithChildRelationshipObj_success() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;

    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'')
      .selectField(''Id'')
      .setCondition(''name like \''%test%\'''')
      .addOrdering(
        ''CreatedDate'',
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();
    Schema.ChildRelationship relationship;
    for (
      Schema.ChildRelationship childRow : descResult.getChildRelationships()
    ) {
      //occasionally on some standard objects (Like Contact child of Contact) do not have a relationship name.
      //if there is no relationship name, we cannot query on it, so throw an exception.
      if (childRow.getRelationshipName() == ''Tasks'') {
        relationship = childRow;
      }
    }
    //explicitly assert object accessibility when creating the subselect
    qf.subselectQuery(relationship)
      .selectField(''Id'')
      .selectField(''Subject'')
      .setCondition('' IsDeleted = false '');
    List<fflib_QueryFactory> queries = qf.getSubselectQueries();
    System.assert(queries != null);
    List<Contact> contacts = Database.query(qf.toSOQL());
    System.assert(contacts != null && contacts.size() == 1);
    System.assert(contacts[0].Tasks.size() == 1);
    System.assert(contacts[0].Tasks[0].Subject == ''test'');
  }

  @isTest
  static void addChildQueriesWithChildRelationshipNoAccessibleCheck_fail() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;

    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'')
      .selectField(''Id'')
      .setCondition(''name like \''%test%\'''')
      .addOrdering(
        ''CreatedDate'',
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();
    //explicitly assert object accessibility when creating the subselect
    //
    Exception e;
    try {
      qf.subselectQuery(''Tas'')
        .selectField(''Id'')
        .selectField(''Subject'')
        .setCondition('' IsDeleted = false '');
    } catch (fflib_QueryFactory.InvalidSubqueryRelationshipException ex) {
      e = ex;
    }
    System.assertNotEquals(e, null);
  }

  @isTest
  static void addChildQueries_success() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;

    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'')
      .selectField(''Id'')
      .setCondition(''name like \''%test%\'''')
      .addOrdering(
        ''CreatedDate'',
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();
    //explicitly assert object accessibility when creating the subselect
    qf.subselectQuery(Task.SObjectType, true)
      .selectField(''Id'')
      .selectField(''Subject'')
      .setCondition('' IsDeleted = false '');
    List<fflib_QueryFactory> queries = qf.getSubselectQueries();
    System.assert(queries != null);
    List<Contact> contacts = Database.query(qf.toSOQL());
    System.assert(contacts != null && contacts.size() == 1);
    System.assert(contacts[0].Tasks.size() == 1);
    System.assert(contacts[0].Tasks[0].Subject == ''test'');
  }

  @isTest
  static void addChildQuerySameRelationshipAgain_success() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    Task tsk = new Task();
    tsk.WhoId = cont.Id;
    tsk.Subject = ''test'';
    tsk.ActivityDate = System.today();
    insert tsk;
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    qf.selectField(''Id'');
    qf.setCondition(''name like \''%test%\'''');
    qf.addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(''CreatedBy.Name'', fflib_QueryFactory.SortOrder.DESCENDING);
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();
    ChildRelationship relationship;
    for (
      Schema.ChildRelationship childRow : descResult.getChildRelationships()
    ) {
      if (childRow.getRelationshipName() == ''Tasks'') {
        relationship = childRow;
      }
    }
    System.assert(qf.getSubselectQueries() == null);
    fflib_QueryFactory childQf = qf.subselectQuery(Task.SObjectType);
    childQf.assertIsAccessible();
    childQf.setEnforceFLS(true);
    childQf.selectField(''Id'');
    fflib_QueryFactory childQf2 = qf.subselectQuery(Task.SObjectType);
    List<fflib_QueryFactory> queries = qf.getSubselectQueries();
    System.assert(queries != null);
    System.assert(queries.size() == 1);
  }

  @isTest
  static void addChildQueries_invalidChildRelationship() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    qf.selectField(''email'');
    qf.setCondition(''name like \''%test%\'''');
    qf.addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(''CreatedDATE'', fflib_QueryFactory.SortOrder.DESCENDING);
    Schema.DescribeSObjectResult descResult = Account.SObjectType.getDescribe();
    Exception e;
    try {
      SObjectType invalidType = null;
      fflib_QueryFactory childQf = qf.subselectQuery(invalidType);
      childQf.selectField(''Id'');
    } catch (fflib_QueryFactory.InvalidSubqueryRelationshipException ex) {
      e = ex;
    }
    System.assertNotEquals(e, null);
  }

  @isTest
  static void addChildQueries_invalidChildRelationshipTooDeep() {
    Account acct = new Account();
    acct.Name = ''testchildqueriesacct'';
    insert acct;
    Contact cont = new Contact();
    cont.FirstName = ''test'';
    cont.LastName = ''test'';
    cont.AccountId = acct.Id;
    insert cont;
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.selectField(''name'');
    qf.selectField(''email'');
    qf.setCondition(''name like \''%test%\'''');
    qf.addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(''CreatedDATE'', fflib_QueryFactory.SortOrder.DESCENDING);
    Schema.DescribeSObjectResult descResult = Contact.SObjectType.getDescribe();

    fflib_QueryFactory childQf = qf.subselectQuery(Task.SObjectType);
    childQf.selectField(''Id'');
    childQf.selectField(''Subject'');
    Exception e;
    try {
      fflib_QueryFactory subChildQf = childQf.subselectQuery(Task.SObjectType);
    } catch (fflib_QueryFactory.InvalidSubqueryRelationshipException ex) {
      e = ex;
    }
    System.assertNotEquals(e, null);
  }

  @isTest
  static void checkFieldObjectReadSort_success() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.assertIsAccessible()
      .setEnforceFLS(true)
      .selectField(''createdby.name'')
      .selectField(Contact.LastModifiedById)
      .selectFields(new List<SObjectField>{ Contact.LastModifiedDate })
      .setEnforceFLS(false)
      .selectField(Contact.LastName)
      .selectFields(new List<SObjectField>{ Contact.Id })
      .setCondition(''name like \''%test%\'''')
      .setEnforceFLS(true)
      .selectFields(new Set<SObjectField>{ Contact.FirstName })
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(
        Contact.LastModifiedDate,
        fflib_QueryFactory.SortOrder.DESCENDING
      )
      .addOrdering(
        Contact.CreatedDate,
        fflib_QueryFactory.SortOrder.DESCENDING,
        true
      );
    Set<String> fields = qf.getSelectedFields();
    fflib_QueryFactory.Ordering ordering = new fflib_QueryFactory.Ordering(
      ''Contact'',
      ''name'',
      fflib_QueryFactory.SortOrder.ASCENDING
    );
    System.assertEquals(''Name'', ordering.getField());

    System.assertEquals(
      new Set<String>{
        ''CreatedBy.Name'',
        ''LastModifiedById'',
        ''LastModifiedDate'',
        ''LastName'',
        ''Id'',
        ''FirstName''
      },
      fields
    );

    System.assert(qf.toSOQL().containsIgnoreCase(''NULLS LAST''));
  }

  @isTest
  static void checkObjectRead_fail() {
    User usr = createTestUser_noAccess();
    if (usr != null) {
      System.runAs(usr) {
        //create a query factory object for Account.
        fflib_QueryFactory qf = new fflib_QueryFactory(Account.SObjectType);
        Boolean excThrown = false;
        try {
          //check to see if this record is accessible, it isn''t.
          qf.assertIsAccessible();
        } catch (fflib_SecurityUtils.CrudException e) {
          excThrown = true;
        }
        System.assert(excThrown);
      }
    }
  }

  @isTest
  static void checkFieldRead_fail() {
    User usr = createTestUser_noAccess();
    if (usr != null) {
      System.runAs(usr) {
        //create a query factory object for Account.
        fflib_QueryFactory qf = new fflib_QueryFactory(Account.SObjectType);
        Boolean excThrown = false;
        try {
          //set field to enforce FLS, then try to add a field.
          qf.setEnforceFLS(true);
          qf.selectField(''Name'');
        } catch (fflib_SecurityUtils.FlsException e) {
          excThrown = true;
        }
        System.assert(excThrown);
      }
    }
  }

  @isTest
  static void queryWith_noFields() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType);
    qf.assertIsAccessible()
      .setEnforceFLS(true)
      .setCondition(''name like \''%test%\'''')
      .addOrdering(''CreatedDate'', fflib_QueryFactory.SortOrder.DESCENDING);
    String query = qf.toSOQL();
    System.assert(
      query.containsIgnoreCase(''SELECT Id FROM Contact''),
      ''Expected \''SELECT Id FROM Contact\'' in the SOQL, found: '' + query
    );
  }

  @isTest
  static void deterministic_toSOQL() {
    fflib_QueryFactory qf1 = new fflib_QueryFactory(User.SObjectType);
    fflib_QueryFactory qf2 = new fflib_QueryFactory(User.SObjectType);
    for (fflib_QueryFactory qf : new Set<fflib_QueryFactory>{ qf1, qf2 }) {
      qf.selectFields(
        new List<String>{
          ''Id'',
          ''FirstName'',
          ''LastName'',
          ''CreatedBy.Name'',
          ''CreatedBy.Manager'',
          ''LastModifiedBy.Email''
        }
      );
    }
    String expectedQuery =
      ''SELECT CreatedBy.ManagerId, CreatedBy.Name, '' +
      ''FirstName, Id, LastModifiedBy.Email, LastName '' +
      ''FROM User'';
    System.assertEquals(qf1.toSOQL(), qf2.toSOQL());
    System.assertEquals(expectedQuery, qf1.toSOQL());
    System.assertEquals(expectedQuery, qf2.toSOQL());
  }

  @isTest
  static void deepCloneBasicNoChanges() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType)
      .setLimit(10)
      .setCondition(''id=12345'')
      .selectField(''Description'')
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''CreatedDATE'',
          fflib_QueryFactory.SortOrder.DESCENDING
        )
      )
      .setEnforceFLS(true);

    fflib_QueryFactory qf2 = qf.deepClone();

    System.assertEquals(qf2, qf);

    System.assertEquals(qf.getLimit(), qf2.getLimit());
    System.assertEquals(qf.getCondition(), qf2.getCondition());
    System.assertEquals(qf.toSOQL(), qf2.toSOQL());
    System.assertEquals(qf.getOrderings(), qf2.getOrderings());
  }

  @isTest
  static void deepCloneSubqueryNoChanges() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Account.SObjectType)
      .setLimit(10)
      .setCondition(''id=12345'')
      .selectField(''Description'')
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Account'',
          ''Name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Account'',
          ''Description'',
          fflib_QueryFactory.SortOrder.DESCENDING
        )
      )
      .setEnforceFLS(true);

    qf.subselectQuery(''Contacts'', true);

    fflib_QueryFactory qf2 = qf.deepClone();

    System.assertEquals(qf, qf2);

    System.assertEquals(qf.getLimit(), qf2.getLimit());
    System.assertEquals(qf.getCondition(), qf2.getCondition());
    System.assertEquals(qf.toSOQL(), qf2.toSOQL());
    System.assertEquals(qf.getOrderings(), qf2.getOrderings());
    System.assertEquals(qf.getSubselectQueries(), qf2.getSubselectQueries());
  }

  @isTest
  static void deepCloneBasic() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Contact.SObjectType)
      .setLimit(10)
      .setCondition(''id=12345'')
      .selectField(''Description'')
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''name'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''CreatedDATE'',
          fflib_QueryFactory.SortOrder.DESCENDING
        )
      )
      .setEnforceFLS(true);

    fflib_QueryFactory qf2 = qf.deepClone()
      .setLimit(200)
      .setCondition(''id=54321'')
      .selectField(''Fax'')
      .addOrdering(
        new fflib_QueryFactory.Ordering(
          ''Contact'',
          ''Fax'',
          fflib_QueryFactory.SortOrder.ASCENDING
        )
      )
      .setEnforceFLS(false);

    qf2.getOrderings().remove(0);

    System.assertEquals(10, qf.getLimit());
    System.assertEquals(200, qf2.getLimit());

    System.assertEquals(''id=12345'', qf.getCondition());
    System.assertEquals(''id=54321'', qf2.getCondition());

    String query = qf.toSOQL();
    String query2 = qf2.toSOQL();

    System.assert(query.containsIgnoreCase(''Fax'') == false);
    System.assert(query.containsIgnoreCase(''Description''));
    System.assert(query2.containsIgnoreCase(''Description''));
    System.assert(query2.containsIgnoreCase(''Fax''));

    System.assertEquals(2, qf.getOrderings().size());
    System.assertEquals(''Name'', qf.getOrderings()[0].getField());
    System.assertEquals(
      fflib_QueryFactory.SortOrder.DESCENDING,
      qf.getOrderings()[1].getDirection()
    );

    System.assertEquals(2, qf2.getOrderings().size());
    System.assertEquals(''Fax'', qf2.getOrderings()[1].getField());
    System.assertEquals(
      fflib_QueryFactory.SortOrder.ASCENDING,
      qf2.getOrderings()[1].getDirection()
    );
  }

  @isTest
  static void deepCloneSubquery() {
    fflib_QueryFactory qf = new fflib_QueryFactory(Account.SObjectType);
    qf.subselectQuery(''Contacts'', true);

    fflib_QueryFactory qf2 = qf.deepClone();
    qf2.subselectQuery(''Opportunities'', true);

    List<fflib_QueryFactory> subqueries = qf.getSubselectQueries();
    List<fflib_QueryFactory> subqueries2 = qf2.getSubselectQueries();

    fflib_QueryFactory subquery2_0 = subqueries2.get(0);

    subquery2_0.addOrdering(
      new fflib_QueryFactory.Ordering(
        ''Contact'',
        ''Name'',
        fflib_QueryFactory.SortOrder.ASCENDING
      )
    );

    System.assert(subqueries.size() == 1);
    System.assert(subqueries2.size() == 2);

    System.assert(qf.getSubselectQueries().get(0).getOrderings().size() == 0);
    System.assert(qf2.getSubselectQueries().get(0).getOrderings().size() == 1);
  }

  @isTest
  static void testSoql_unsortedSelectFields() {
    //Given
    fflib_QueryFactory qf = new fflib_QueryFactory(User.SObjectType);
    qf.selectFields(
      new List<String>{
        ''Id'',
        ''FirstName'',
        ''LastName'',
        ''CreatedBy.Name'',
        ''CreatedBy.Manager'',
        ''LastModifiedBy.Email''
      }
    );

    qf.setSortSelectFields(false);

    String orderedQuery =
      ''SELECT '' +
      ''FirstName, Id, LastName, '' + //less joins come first, alphabetically
      ''CreatedBy.ManagerId, CreatedBy.Name, LastModifiedBy.Email '' + //alphabetical on the same number of joins''
      ''FROM User'';

    //When
    String actualSoql = qf.toSOQL();

    //Then
    System.assertNotEquals(orderedQuery, actualSoql);
  }

  public static User createTestUser_noAccess() {
    User usr;
    try {
      //look for a profile that does not have access to the Account object
      PermissionSet ps = [
        SELECT Profile.Id, profile.name
        FROM PermissionSet
        WHERE
          IsOwnedByProfile = TRUE
          AND Profile.UserType = ''Standard''
          AND Id NOT IN (
            SELECT ParentId
            FROM ObjectPermissions
            WHERE SObjectType = ''Account'' AND PermissionsRead = TRUE
          )
        LIMIT 1
      ];

      if (ps != null) {
        //create a user with the profile found that doesn''t have access to the Account object
        usr = new User(
          firstName = ''testUsrF'',
          LastName = ''testUsrL'',
          Alias = ''tstUsr'',
          Email = ''testy.test@test.com'',
          UserName = ''test'' + Math.random().format() + ''user99@test.com'',
          EmailEncodingKey = ''ISO-8859-1'',
          LanguageLocaleKey = ''en_US'',
          TimeZoneSidKey = ''America/Los_Angeles'',
          LocaleSidKey = ''en_US'',
          ProfileId = ps.Profile.Id,
          IsActive = true
        );
        insert usr;
      }
    } catch (Exception e) {
      //do nothing, just return null User because this test case won''t work in this org.
      return null;
    }
    return usr;
  }
}','1599948949.0','True','fflib_QueryFactoryTest','29949','Active');
INSERT INTO "ApexClass" VALUES(102,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * fflib_SObjectDescribe is a semi-intelligent wrapper for standard apex Schema methods.
 * It provides an internal caching layer, to avoid hitting describe limits from repeated use,
 * as well as wrapper classes and methods to make common tasks like working with relationship field name oddities
 * as well namespace handling.
 *
 * Of particular note for use in contexts that may be released as managed packages are the #getFields and get #getGlobalDescribe methods
 * These return special immutable wrapper objects that automatically imply the current namespace (detected as the one this class is contained in)
 * and allow an older API style of omitting the namespace when working with fields or global describe maps.
 * This allows both upgrading old code to APIv29 by making use of these as a nearly drop in replacement, as well as keeping
 * namespace detection logic encapsulated.
 **/
public class fflib_SObjectDescribe {
  //internal implementation details
  private Schema.SObjectType token;
  private Schema.SObjectField nameField;
  private Schema.DescribeSObjectResult describe { //lazy load - keep this leightweight until we need more data
    get {
      if (describe == null)
        describe = token.getDescribe();
      return describe;
    }
    set;
  }
  private Map<String, Schema.SObjectField> fields {
    get {
      if (fields == null)
        fields = describe.fields.getMap();
      return fields;
    }
    set;
  }
  private Map<String, Schema.FieldSet> fieldSets {
    get {
      if (fieldSets == null)
        fieldSets = describe.fieldSets.getMap();
      return fieldSets;
    }
    set;
  }
  private FieldsMap wrappedFields {
    get {
      if (wrappedFields == null) {
        wrappedFields = new FieldsMap(this.fields);
      }
      return wrappedFields;
    }
    set;
  }

  private fflib_SObjectDescribe(Schema.SObjectType token) {
    if (token == null)
      throw new InvalidDescribeException(''Invalid SObject type: null'');
    if (instanceCache.containsKey(String.valueOf(token)))
      throw new DuplicateDescribeException(
        token + '' is already in the describe cache''
      );
    this.token = token;
    instanceCache.put(String.valueOf(token).toLowerCase(), this);
  }

  //public instace methods
  /**
   * Returns the Schema.SObjectType this fflib_SObjectDescribe instance is based on.
   **/
  public Schema.SObjectType getSObjectType() {
    return token;
  }
  /**
   * This method is a convenient shorthand for calling getField(name, true)
   **/
  public Schema.SObjectField getField(String name) {
    return this.getField(name, true);
  }
  /**
   * This method provides a simplified shorthand for calling #getFields and getting the provided field.
   * Additionally it handles finding the correct SObjectField for relationship notation,
   * e.g. getting the Account field on Contact would fail without being referenced as AccountId - both work here.
   **/
  public Schema.SObjectField getField(
    String fieldName,
    boolean implyNamespace
  ) {
    Schema.SObjectField result = wrappedFields.get(
      (fieldName.endsWithIgnoreCase(''__r'') //resolve custom field cross-object (__r) syntax
        ? (fieldName.removeEndIgnoreCase(''__r'') + ''__c'')
        : fieldName),
      implyNamespace
    );
    if (result == null) {
      result = wrappedFields.get(fieldName + ''Id'', implyNamespace); //in case it''s a standard lookup in cross-object format
    }
    return result;
  }

  /**
   * Returns the field where isNameField() is true (if any); otherwise returns null
   **/
  public Schema.SObjectField getNameField() {
    if (nameField == null) {
      for (Schema.SObjectField field : wrappedFields.values()) {
        if (field.getDescribe().isNameField()) {
          nameField = field;
          break;
        }
      }
    }
    return nameField;
  }

  /**
   * Returns the raw Schema.DescribeSObjectResult an fflib_SObjectDescribe instance wraps.
   **/
  public Schema.DescribeSObjectResult getDescribe() {
    return describe;
  }
  /**
   * This method returns the raw data and provides no namespace handling.
   * Due to this, __use of this method is discouraged__ in favor of getFields().
   **/
  public Map<String, Schema.SObjectField> getFieldsMap() {
    return fields;
  }
  public FieldsMap getFields() {
    return wrappedFields;
  }
  public Map<String, Schema.FieldSet> getFieldSetsMap() {
    return fieldSets;
  }

  private static Map<String, Schema.SObjectType> rawGlobalDescribe {
    get {
      if (rawGlobalDescribe == null)
        rawGlobalDescribe = Schema.getGlobalDescribe();
      return rawGlobalDescribe;
    }
    set;
  }
  private static GlobalDescribeMap wrappedGlobalDescribe {
    get {
      if (wrappedGlobalDescribe == null) {
        wrappedGlobalDescribe = new GlobalDescribeMap(rawGlobalDescribe);
      }
      return wrappedGlobalDescribe;
    }
    set;
  }
  /**
   * This is used to cache fflib_SObjectDescribe instances as they''re consutrcted
   * to prevent repeatedly re-constructing the same type.
   * These instances are not guaranteed to be, but typically will be, unique per sObject type due to the presence of flushCache.
   **/
  private static Map<String, fflib_SObjectDescribe> instanceCache {
    get {
      if (instanceCache == null)
        instanceCache = new Map<String, fflib_SObjectDescribe>();
      return instanceCache;
    }
    set;
  }
  public static fflib_SObjectDescribe getDescribe(String sObjectName) {
    if (String.isBlank(sObjectName))
      return null;
    fflib_SObjectDescribe result = instanceCache.get(sObjectName.toLowerCase());
    if (result == null) {
      Schema.SObjectType token = wrappedGlobalDescribe.get(
        sObjectName.toLowerCase()
      );
      if (token == null)
        result = null;
      else
        result = new fflib_SObjectDescribe(token);
    }
    return result;
  }
  public static fflib_SObjectDescribe getDescribe(Schema.SObjectType token) {
    if (token == null)
      return null;
    fflib_SObjectDescribe result = instanceCache.get(
      String.valueOf(token).toLowerCase()
    );
    if (result == null)
      result = new fflib_SObjectDescribe(token);
    return result;
  }
  public static fflib_SObjectDescribe getDescribe(
    Schema.DescribeSObjectResult nativeDescribe
  ) {
    if (nativeDescribe == null)
      return null;
    fflib_SObjectDescribe result = instanceCache.get(
      nativeDescribe.getName().toLowerCase()
    );
    if (result == null)
      result = new fflib_SObjectDescribe(nativeDescribe.getSobjectType());
    return result;
  }
  public static fflib_SObjectDescribe getDescribe(SObject instance) {
    if (instance == null)
      return null;
    return getDescribe(instance.getSobjectType());
  }

  //returns the same results as the native method, just with caching built in to avoid limits
  public static Map<String, SObjectType> getRawGlobalDescribe() {
    return rawGlobalDescribe;
  }
  public static GlobalDescribeMap getGlobalDescribe() {
    return wrappedGlobalDescribe;
  }
  //Useful when working in heap space constrained environments.
  //Existing references to SObjectDescribe instances will continue to work.
  public static void flushCache() {
    rawGlobalDescribe = null;
    instanceCache = null;
  }

  /**
   * This class handles emulating a Map<String,Object>''s non-mutating instance methods and helps navigate the complex topic of
   * handling implicit namespace behavior like pre-APIv29 did, while also allowing fully qualified references.
   * Note that this requires the API version of fflib_SObjectDescribe to be 29 or higher to function properly.
   *
   * Due to the lack of language support for covariant return types sublasses are responsible for implementing the get methods.
   * A minimal implementation of these would be a cast and returning getObject''s result.
   **/
  private abstract class NamespacedAttributeMap {
    @testVisible
    protected String currentNamespace;
    protected Map<String, Object> values;

    protected NamespacedAttributeMap(Map<String, Object> values) {
      //namespace detection courtesey http://salesforce.stackexchange.com/a/28977/60
      currentNamespace = fflib_SObjectDescribe.class
        .getName()
        .substringBefore(''fflib_SObjectDescribe'')
        .removeEnd(''.'')
        .toLowerCase();
      this.values = values;
    }
    //A no-args constructor to allow subclasses with different contructor signatures
    protected NamespacedAttributeMap() {
      this(new Map<String, Object>());
    }
    /**
     * A convenient shortcut for invoking #getObject(name, true)
     **/
    protected virtual Object getObject(String name) {
      return this.getObject(name, true);
    }
    /**
     *
     **/
    protected virtual Object getObject(String name, Boolean implyNamespace) {
      if (
        name == null //short-circuit lookup logic since null can''t possibly be a valid field name, and it saves us null checking
      )
        return null;
      String preferredValue = ((implyNamespace ? currentNamespace + ''__'' : '''') +
        name)
        .toLowerCase();
      if (values.containsKey(preferredValue)) {
        return values.get(preferredValue);
      } else if (implyNamespace) {
        return values.get(name.toLowerCase());
      } else {
        return null;
      }
    }
    public virtual Boolean containsKey(String name) {
      return this.containsKey(name, true);
    }
    public virtual Boolean containsKey(String name, Boolean implyNamespace) {
      if (
        name == null //short-circuit lookup logic since null can''t possibly be a valid field name, and it saves us null checking
      )
        return null;
      String preferredValue = ((implyNamespace ? currentNamespace + ''__'' : '''') +
        name)
        .toLowerCase();
      return (values.containsKey(preferredValue) ||
      implyNamespace && values.containsKey(name.toLowerCase()));
    }
    public virtual Integer size() {
      return values.size();
    }
    /**
     * Returns the key set of the map.
     * Note: unlike other NamespacedAttributeMap methods keySet defaults implyNamespace to false if not specified.
     **/
    public virtual Set<String> keySet() {
      return this.keySet(false);
    }
    public virtual Set<String> keySet(Boolean implyNamespace) {
      if (implyNamespace) {
        Set<String> result = new Set<String>();
        for (String key : values.keySet()) {
          result.add(key.removeStartIgnoreCase(currentNamespace + ''__''));
        }
        return result;
      } else {
        return values.keySet();
      }
    }
  }

  /**
   * A subclass of NamespacedAttributeMap for handling the data returned by #Schema.DescribeSObjectResult.fields.getMap
   **/
  public class FieldsMap extends NamespacedAttributeMap {
    @testVisible
    private FieldsMap(Map<String, Schema.SObjectField> values) {
      super(values);
    }

    public Schema.SObjectField get(String name) {
      return this.get(name, true);
    }
    public Schema.SObjectField get(String name, Boolean implyNamespace) {
      return (Schema.SObjectField) this.getObject(name, implyNamespace);
    }
    public List<Schema.SObjectField> values() {
      return (List<Schema.SObjectField>) values.values();
    }
  }
  /**
   * A subclass of NamespacedAttributeMap for handling the data returned by #Schema.getGlobalDescribe
   **/
  public class GlobalDescribeMap extends NamespacedAttributeMap {
    @testVisible
    private GlobalDescribeMap(Map<String, Schema.SObjectType> values) {
      super(values);
    }

    public Schema.SObjectType get(String name) {
      return this.get(name, true);
    }
    public Schema.SObjectType get(String name, Boolean implyNamespace) {
      return (Schema.SObjectType) this.getObject(name, implyNamespace);
    }
    public List<Schema.SObjectType> values() {
      return (List<Schema.SObjectType>) values.values();
    }
  }

  public abstract class DescribeException extends Exception {
  }
  public class DuplicateDescribeException extends DescribeException {
  } //Test coverage for this requires APIv28''s @testVisbile annotation to force exception cases.
  public class InvalidDescribeException extends DescribeException {
  }
}','2983979485.0','True','fflib_SObjectDescribe','8112','Active');
INSERT INTO "ApexClass" VALUES(103,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
	This class adapted from https://github.com/capeterson/Apex-Util
	Used under a BSD license: https://github.com/capeterson/Apex-Util/blob/master/LICENSE
**/
@isTest
private class fflib_SObjectDescribeTest {
  /**
   * Verify that the different ways of getting your hands on an fflib_SObjectDescribe instance all handle null inputs
   * (and blank/empty strings, why not?) by returning null - since there''s no possible way to resolve it.
   **/
  @isTest
  static void getDescribe_badInput() {
    String nullStr = null; //having it as a string var makes for unambiguous selection of overloads
    Schema.SObjectType nullType = null;
    Schema.DescribeSObjectResult nullDescribe = null;
    SObject nullSObject = null;
    System.assertEquals(null, fflib_SObjectDescribe.getDescribe(nullStr));
    System.assertEquals(null, fflib_SObjectDescribe.getDescribe(''''));
    System.assertEquals(null, fflib_SObjectDescribe.getDescribe('' ''));
    System.assertEquals(null, fflib_SObjectDescribe.getDescribe(nullType));
    System.assertEquals(null, fflib_SObjectDescribe.getDescribe(nullDescribe));
    System.assertEquals(null, fflib_SObjectDescribe.getDescribe(nullSObject));
  }

  @isTest
  static void NamespacedAttributeMap_implementations() {
    fflib_SObjectDescribe.GlobalDescribeMap gdm = fflib_SObjectDescribe.getGlobalDescribe();
    Schema.SObjectType accountObjType = gdm.get(''AccOunT'');
    System.assertEquals(accountObjType, Account.SobjectType);
    System.assertEquals(Schema.getGlobalDescribe().size(), gdm.size());

    fflib_SObjectDescribe acccountDescribe = fflib_SObjectDescribe.getDescribe(
      accountObjType
    );
    fflib_SObjectDescribe.FieldsMap fields = acccountDescribe.getFields();
    System.assert(
      fields.keySet().containsAll(acccountDescribe.getFieldsMap().keySet())
    );

    System.assertEquals(fields.get(''name''), Account.SObjectType.fields.name); //behavior of FieldsMap is tested in another method
    System.assertEquals(
      Schema.SObjectType.Account.fields.getMap().size(),
      fields.size()
    );

    System.assertEquals(
      null,
      fields.get(null),
      ''Null input should result in null ouput.''
    );
    System.assertEquals(
      null,
      fields.get(''''),
      ''Invalid fieldname input should result in null ouput.''
    );
  }

  @isTest
  static void FieldsMap() {
    String fakeNamespace = ''fflib_test'';
    Map<String, Schema.SObjectField> fakeFieldData = new Map<String, Schema.SObjectField>{
      ''name__c'' => Contact.SObjectType.fields.name, //re-use standard field types since we can''t mock them
      fakeNamespace + ''__name__c'' => Account.SObjectType.fields.name,
      fakeNamespace + ''__otherField__c'' => Account.SObjectType.fields.name,
      ''createddate'' => Contact.SObjectType.fields.CreatedDate
    };
    fflib_SObjectDescribe.FieldsMap fields = new fflib_SObjectDescribe.FieldsMap(
      fakeFieldData
    );
    fields.currentNamespace = fakeNamespace;
    System.assertEquals(true, fields.containsKey(''name__c''));
    System.assertEquals(
      true,
      fields.containsKey(fakeNamespace.toUpperCase() + ''__nAMe__c'')
    );
    System.assert(
      fields.get(''NAme__c'') === fields.get(fakeNamespace + ''__namE__c'')
    );

    System.assert(!fields.keySet(false).contains(''otherField__c''));
    System.assert(
      fields.keySet(false).contains(fakeNamespace + ''__otherField__c'')
    );

    System.assert(fields.keySet(true).contains(''otherField__c''));
    System.assert(
      !fields.keySet(true).contains(fakeNamespace + ''__otherField__c'')
    );

    fields.currentNamespace = ''someOtherNamespace'';
    System.assertNotEquals(
      fields.get(''name__C''),
      fields.get(fakeNamespace.capitalize() + ''__nAme__c'')
    );
  }

  @isTest
  static void GlobalDescribeMap() {
    String fakeNamespace = ''fflib_test'';
    Map<String, Schema.SObjectType> fakeFieldData = new Map<String, Schema.SObjectType>{
      ''name__c'' => Contact.SObjectType, //re-use stndard object types since we can''t mock them
      fakeNamespace + ''__name__c'' => Account.SObjectType,
      ''createddate'' => Lead.SObjectType
    };
    fflib_SObjectDescribe.GlobalDescribeMap gdm = new fflib_SObjectDescribe.GlobalDescribeMap(
      fakeFieldData
    );
    gdm.currentNamespace = fakeNamespace;
    System.assertEquals(true, gdm.containsKey(''name__c''));
    System.assertEquals(true, gdm.containsKey(fakeNamespace + ''__name__c''));
    System.assert(gdm.get(''name__c'') === gdm.get(fakeNamespace + ''__name__c''));

    gdm.currentNamespace = ''someOtherNamespace'';
    System.assertNotEquals(
      gdm.get(''name__c''),
      gdm.get(fakeNamespace + ''__name__c'')
    );
  }

  @isTest //Tests all forms of the getDescribe static
  static void getAccountDescribes() {
    fflib_SObjectDescribe d = fflib_SObjectDescribe.getDescribe(''Account'');
    fflib_SObjectDescribe d2 = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    fflib_SObjectDescribe d3 = fflib_SObjectDescribe.getDescribe(
      Schema.SObjectType.Account
    );
    System.assertEquals(''Account'', d.getDescribe().getName());
    System.assert(
      (d === d2 &&
      d2 === d3),
      ''All three getDescribe calls should return the same cached instance.''
    );
  }

  @isTest
  static void simpleAccountFieldDescribe() {
    fflib_SObjectDescribe d = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    Map<String, Schema.SObjectField> fields;
    for (integer i = 0; i < 10; i++) {
      fields = d.getFieldsMap();
    }

    // Describe Limits removed since Summer ’14.
    // https://developer.salesforce.com/releases/release/Summer14/New+Apex+Enhancements

    // Because describe limits are no longer enforced in any API version, this method is no longer available.
    // In API version 30.0 and earlier, this method is available but is deprecated.

    // System.assertEquals(1, Limits.getFieldsDescribes() );

    System.assertEquals(false, fields.isEmpty());
    System.assertEquals(Account.SObjectType, d.getSObjectType());
  }

  @isTest
  static void simpleAccountFieldSetDescribe() {
    fflib_SObjectDescribe d = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    Map<String, Schema.FieldSet> fields;
    for (integer i = 0; i < 10; i++) {
      fields = d.getFieldSetsMap();
    }

    // Describe Limits removed since Summer ’14.
    // https://developer.salesforce.com/releases/release/Summer14/New+Apex+Enhancements

    // Because describe limits are no longer enforced in any API version, this method is no longer available.
    // In API version 30.0 and earlier, this method is available but is deprecated.

    // System.assertEquals(1, Limits.getFieldSetsDescribes() );

    // no asserts on result size to avoid a requirement on field sets existing
  }

  @isTest
  static void simpleAccountGetNameField() {
    fflib_SObjectDescribe d = fflib_SObjectDescribe.getDescribe(
      Account.SObjectType
    );
    Schema.SObjectField nameField = d.getNameField();
    System.assertEquals(''Name'', nameField.getDescribe().getName());
  }

  @isTest
  static void flushCache() {
    fflib_SObjectDescribe d = fflib_SObjectDescribe.getDescribe(''Account'');
    fflib_SObjectDescribe.flushCache();
    fflib_SObjectDescribe d2 = fflib_SObjectDescribe.getDescribe(''Account'');
    System.assert(
      d !== d2,
      ''Second object should be a fresh instance after a cache flush.''
    );
  }

  @isTest
  static void rawGlobalDescribeCheck() {
    Map<String, Schema.SObjectType> systemGd = Schema.getGlobalDescribe();
    Map<String, Schema.SObjectType> cachedGd = fflib_SObjectDescribe.getRawGlobalDescribe();
    System.assertEquals(systemGd.size(), cachedGd.size());
  }
}','855353690.0','True','fflib_SObjectDescribeTest','6136','Active');
INSERT INTO "ApexClass" VALUES(104,'57.0','/**
 * Copyright (c) 2012, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Base class aiding in the implemetnation of a Domain Model around SObject collections
 *
 * Domain (software engineering). “a set of common requirements, terminology, and functionality
 * for any software program constructed to solve a problem in that field”,
 * http://en.wikipedia.org/wiki/Domain_(software_engineering)
 *
 * Domain Model, “An object model of the domain that incorporates both behavior and data.”,
 * “At its worst business logic can be very complex. Rules and logic describe many different "
 * "cases and slants of behavior, and it''s this complexity that objects were designed to work with...”
 * Martin Fowler, EAA Patterns
 * http://martinfowler.com/eaaCatalog/domainModel.html
 *
 **/
public virtual with sharing class fflib_SObjectDomain implements fflib_ISObjectDomain {
  /**
   * Provides access to the data represented by this domain class
   **/
  public List<SObject> Records { get; private set; }

  /**
   * Derived from the records provided during construction, provides the native describe for the standard or custom object
   **/
  public Schema.DescribeSObjectResult SObjectDescribe { get; private set; }

  /**
   * Exposes the configuration for this domain class instance
   **/
  public Configuration Configuration { get; private set; }

  /**
   * Useful during unit testign to assert at a more granular and robust level for errors raised during the various trigger events
   **/
  public static ErrorFactory Errors { get; private set; }

  /**
   * Useful during unit testing to access mock support for database inserts and udpates (testing without DML)
   **/
  public static TestFactory Test { get; private set; }

  /**
   * Retains instances of domain classes implementing trigger stateful
   **/
  private static Map<Type, List<fflib_SObjectDomain>> TriggerStateByClass;

  /**
   * Retains the trigger tracking configuraiton used for each domain
   **/
  private static Map<Type, TriggerEvent> TriggerEventByClass;

  static {
    Errors = new ErrorFactory();

    Test = new TestFactory();

    TriggerStateByClass = new Map<Type, List<fflib_SObjectDomain>>();

    TriggerEventByClass = new Map<Type, TriggerEvent>();
  }

  /**
	 * Constructs the domain class with the data on which to apply the behaviour implemented within
	 *
	 * @param sObjectList A concreate list (e.g. List<Account> vs List<SObject>) of records

	 **/
  public fflib_SObjectDomain(List<SObject> sObjectList) {
    this(sObjectList, sObjectList.getSObjectType());
  }

  /**
   * Constructs the domain class with the data and type on which to apply the behaviour implemented within
   *
   * @param sObjectList A list (e.g. List<Opportunity>, List<Account>, etc.) of records
   * @param sObjectType The Schema.SObjectType of the records contained in the list
   *
   * @remark Will support List<SObject> but all records in the list will be assumed to be of
   *         the type specified in sObjectType
   **/
  public fflib_SObjectDomain(
    List<SObject> sObjectList,
    SObjectType sObjectType
  ) {
    // Ensure the domain class has its own copy of the data
    Records = sObjectList.clone();
    // Capture SObjectType describe for this domain class
    SObjectDescribe = sObjectType.getDescribe();
    // Configure the Domain object instance
    Configuration = new Configuration();
  }

  /**
   * Override this to apply defaults to the records, this is called by the handleBeforeInsert method
   **/
  public virtual void onApplyDefaults() {
  }

  /**
   * Override this to apply general validation to be performed during insert or update, called by the handleAfterInsert and handleAfterUpdate methods
   **/
  public virtual void onValidate() {
  }

  /**
   * Override this to apply validation to be performed during insert, called by the handleAfterUpdate method
   **/
  public virtual void onValidate(Map<Id, SObject> existingRecords) {
  }

  /**
   * Override this to perform processing during the before insert phase, this is called by the handleBeforeInsert method
   **/
  public virtual void onBeforeInsert() {
  }

  /**
   * Override this to perform processing during the before update phase, this is called by the handleBeforeUpdate method
   **/
  public virtual void onBeforeUpdate(Map<Id, SObject> existingRecords) {
  }

  /**
   * Override this to perform processing during the before delete phase, this is called by the handleBeforeDelete method
   **/
  public virtual void onBeforeDelete() {
  }

  /**
   * Override this to perform processing during the after insert phase, this is called by the handleAfterInsert method
   **/
  public virtual void onAfterInsert() {
  }

  /**
   * Override this to perform processing during the after update phase, this is called by the handleAfterUpdate method
   **/
  public virtual void onAfterUpdate(Map<Id, SObject> existingRecords) {
  }

  /**
   * Override this to perform processing during the after delete phase, this is called by the handleAfterDelete method
   **/
  public virtual void onAfterDelete() {
  }

  /**
   * Override this to perform processing during the after undelete phase, this is called by the handleAfterDelete method
   **/
  public virtual void onAfterUndelete() {
  }

  /**
   * Base handler for the Apex Trigger event Before Insert, calls the onApplyDefaults method, followed by onBeforeInsert
   **/
  public virtual void handleBeforeInsert() {
    onApplyDefaults();
    onBeforeInsert();
  }

  /**
   * Base handler for the Apex Trigger event Before Update, calls the onBeforeUpdate method
   **/
  public virtual void handleBeforeUpdate(Map<Id, SObject> existingRecords) {
    onBeforeUpdate(existingRecords);
  }

  /**
   * Base handler for the Apex Trigger event Before Delete, calls the onBeforeDelete method
   **/
  public virtual void handleBeforeDelete() {
    onBeforeDelete();
  }

  /**
   * Base handler for the Apex Trigger event After Insert, checks object security and calls the onValidate and onAfterInsert methods
   *
   * @throws DomainException if the current user context is not able to create records
   **/
  public virtual void handleAfterInsert() {
    if (
      Configuration.EnforcingTriggerCRUDSecurity &&
      !SObjectDescribe.isCreateable()
    )
      throw new DomainException(
        ''Permission to create an '' +
        SObjectDescribe.getName() +
        '' denied.''
      );

    onValidate();
    onAfterInsert();
  }

  /**
   * Base handler for the Apex Trigger event After Update, checks object security and calls the onValidate, onValidate(Map<Id,SObject>) and onAfterUpdate methods
   *
   * @throws DomainException if the current user context is not able to update records
   **/
  public virtual void handleAfterUpdate(Map<Id, SObject> existingRecords) {
    if (
      Configuration.EnforcingTriggerCRUDSecurity &&
      !SObjectDescribe.isUpdateable()
    )
      throw new DomainException(
        ''Permission to udpate an '' +
        SObjectDescribe.getName() +
        '' denied.''
      );

    if (Configuration.OldOnUpdateValidateBehaviour)
      onValidate();
    onValidate(existingRecords);
    onAfterUpdate(existingRecords);
  }

  /**
   * Base handler for the Apex Trigger event After Delete, checks object security and calls the onAfterDelete method
   *
   * @throws DomainException if the current user context is not able to delete records
   **/
  public virtual void handleAfterDelete() {
    if (
      Configuration.EnforcingTriggerCRUDSecurity &&
      !SObjectDescribe.isDeletable()
    )
      throw new DomainException(
        ''Permission to delete an '' +
        SObjectDescribe.getName() +
        '' denied.''
      );

    onAfterDelete();
  }

  /**
   * Base handler for the Apex Trigger event After Undelete, checks object security and calls the onAfterUndelete method
   *
   * @throws DomainException if the current user context is not able to delete records
   **/
  public virtual void handleAfterUndelete() {
    if (
      Configuration.EnforcingTriggerCRUDSecurity &&
      !SObjectDescribe.isCreateable()
    )
      throw new DomainException(
        ''Permission to create an '' +
        SObjectDescribe.getName() +
        '' denied.''
      );

    onAfterUndelete();
  }

  /**
   * Returns the SObjectType this Domain class represents
   **/
  public SObjectType getSObjectType() {
    return SObjectDescribe.getSObjectType();
  }

  /**
   * Returns the SObjectType this Domain class represents
   **/
  public SObjectType sObjectType() {
    return getSObjectType();
  }

  /**
   * Alternative to the Records property, provided to support mocking of Domain classes
   **/
  public List<SObject> getRecords() {
    return Records;
  }

  /**
   * Interface used to aid the triggerHandler in constructing instances of Domain classes
   **/
  public interface IConstructable {
    fflib_SObjectDomain construct(List<SObject> sObjectList);
  }

  /**
   * Interface used to aid the triggerHandler in constructing instances of Domain classes
   **/
  public interface IConstructable2 extends IConstructable {
    fflib_SObjectDomain construct(
      List<SObject> sObjectList,
      SObjectType sObjectType
    );
  }

  /**
   * For Domain classes implementing the ITriggerStateful interface returns the instance
   *   of the domain class being shared between trigger invocations, returns null if
   *   the Domain class trigger has not yet fired or the given domain class does not implement
   *   the ITriggerStateful interface. Note this method is sensitive to recursion, meaning
   *   it will return the applicable domain instance for the level of recursion
   **/
  public static fflib_SObjectDomain getTriggerInstance(Type domainClass) {
    List<fflib_SObjectDomain> domains = TriggerStateByClass.get(domainClass);
    if (domains == null || domains.size() == 0)
      return null;
    return domains[domains.size() - 1];
  }

  /**
   * Method constructs the given Domain class with the current Trigger context
   * before calling the applicable override methods such as beforeInsert, beforeUpdate etc.
   **/
  public static void triggerHandler(Type domainClass) {
    // Process the trigger context
    if (System.Test.isRunningTest() & Test.Database.hasRecords()) {
      // If in test context and records in the mock database delegate initially to the mock database trigger handler
      Test.Database.testTriggerHandler(domainClass);
    } else {
      // Process the runtime Apex Trigger context
      triggerHandler(
        domainClass,
        Trigger.isBefore,
        Trigger.isAfter,
        Trigger.isInsert,
        Trigger.isUpdate,
        Trigger.isDelete,
        Trigger.isUnDelete,
        Trigger.new,
        Trigger.oldMap
      );
    }
  }

  /**
   * Calls the applicable override methods such as beforeInsert, beforeUpdate etc. based on a Trigger context
   **/
  private static void triggerHandler(
    Type domainClass,
    Boolean isBefore,
    Boolean isAfter,
    Boolean isInsert,
    Boolean isUpdate,
    Boolean isDelete,
    Boolean isUndelete,
    List<SObject> newRecords,
    Map<Id, SObject> oldRecordsMap
  ) {
    // After phase of trigger will reuse prior instance of domain class if ITriggerStateful implemented
    fflib_SObjectDomain domainObject = isBefore
      ? null
      : popTriggerInstance(
          domainClass,
          isDelete ? oldRecordsMap.values() : newRecords
        );
    if (domainObject == null) {
      // Construct the domain class constructor class
      String domainClassName = domainClass.getName();
      Type constructableClass = domainClassName.endsWith(''Constructor'')
        ? Type.forName(domainClassName)
        : Type.forName(domainClassName + ''.Constructor'');
      IConstructable domainConstructor = (IConstructable) constructableClass.newInstance();

      // Construct the domain class with the approprite record set
      if (isInsert)
        domainObject = domainConstructor.construct(newRecords);
      else if (isUpdate)
        domainObject = domainConstructor.construct(newRecords);
      else if (isDelete)
        domainObject = domainConstructor.construct(oldRecordsMap.values());
      else if (isUndelete)
        domainObject = domainConstructor.construct(newRecords);

      // Should this instance be reused on the next trigger invocation?
      if (domainObject.Configuration.TriggerStateEnabled)
        // Push this instance onto the stack to be popped during the after phase
        pushTriggerInstance(domainClass, domainObject);
    }

    // has this event been disabled?
    if (
      !getTriggerEvent(domainClass)
        .isEnabled(isBefore, isAfter, isInsert, isUpdate, isDelete, isUndelete)
    ) {
      return;
    }

    // Invoke the applicable handler
    if (isBefore) {
      if (isInsert)
        domainObject.handleBeforeInsert();
      else if (isUpdate)
        domainObject.handleBeforeUpdate(oldRecordsMap);
      else if (isDelete)
        domainObject.handleBeforeDelete();
    } else {
      if (isInsert)
        domainObject.handleAfterInsert();
      else if (isUpdate)
        domainObject.handleAfterUpdate(oldRecordsMap);
      else if (isDelete)
        domainObject.handleAfterDelete();
      else if (isUndelete)
        domainObject.handleAfterUndelete();
    }
  }

  /**
   * Pushes to the stack of domain classes per type a domain object instance
   **/
  private static void pushTriggerInstance(
    Type domainClass,
    fflib_SObjectDomain domain
  ) {
    List<fflib_SObjectDomain> domains = TriggerStateByClass.get(domainClass);
    if (domains == null)
      TriggerStateByClass.put(
        domainClass,
        domains = new List<fflib_SObjectDomain>()
      );
    domains.add(domain);
  }

  /**
   * Pops from the stack of domain classes per type a domain object instance and updates the record set
   **/
  private static fflib_SObjectDomain popTriggerInstance(
    Type domainClass,
    List<SObject> records
  ) {
    List<fflib_SObjectDomain> domains = TriggerStateByClass.get(domainClass);
    if (domains == null || domains.size() == 0)
      return null;
    fflib_SObjectDomain domain = domains.remove(domains.size() - 1);
    domain.Records = records;
    return domain;
  }

  public static TriggerEvent getTriggerEvent(Type domainClass) {
    if (!TriggerEventByClass.containsKey(domainClass)) {
      TriggerEventByClass.put(domainClass, new TriggerEvent());
    }

    return TriggerEventByClass.get(domainClass);
  }

  public class TriggerEvent {
    public boolean BeforeInsertEnabled { get; private set; }
    public boolean BeforeUpdateEnabled { get; private set; }
    public boolean BeforeDeleteEnabled { get; private set; }

    public boolean AfterInsertEnabled { get; private set; }
    public boolean AfterUpdateEnabled { get; private set; }
    public boolean AfterDeleteEnabled { get; private set; }
    public boolean AfterUndeleteEnabled { get; private set; }

    public TriggerEvent() {
      this.enableAll();
    }

    // befores
    public TriggerEvent enableBeforeInsert() {
      BeforeInsertEnabled = true;
      return this;
    }
    public TriggerEvent enableBeforeUpdate() {
      BeforeUpdateEnabled = true;
      return this;
    }
    public TriggerEvent enableBeforeDelete() {
      BeforeDeleteEnabled = true;
      return this;
    }

    public TriggerEvent disableBeforeInsert() {
      BeforeInsertEnabled = false;
      return this;
    }
    public TriggerEvent disableBeforeUpdate() {
      BeforeUpdateEnabled = false;
      return this;
    }
    public TriggerEvent disableBeforeDelete() {
      BeforeDeleteEnabled = false;
      return this;
    }

    // afters
    public TriggerEvent enableAfterInsert() {
      AfterInsertEnabled = true;
      return this;
    }
    public TriggerEvent enableAfterUpdate() {
      AfterUpdateEnabled = true;
      return this;
    }
    public TriggerEvent enableAfterDelete() {
      AfterDeleteEnabled = true;
      return this;
    }
    public TriggerEvent enableAfterUndelete() {
      AfterUndeleteEnabled = true;
      return this;
    }

    public TriggerEvent disableAfterInsert() {
      AfterInsertEnabled = false;
      return this;
    }
    public TriggerEvent disableAfterUpdate() {
      AfterUpdateEnabled = false;
      return this;
    }
    public TriggerEvent disableAfterDelete() {
      AfterDeleteEnabled = false;
      return this;
    }
    public TriggerEvent disableAfterUndelete() {
      AfterUndeleteEnabled = false;
      return this;
    }

    public TriggerEvent enableAll() {
      return this.enableAllBefore().enableAllAfter();
    }

    public TriggerEvent disableAll() {
      return this.disableAllBefore().disableAllAfter();
    }

    public TriggerEvent enableAllBefore() {
      return this.enableBeforeInsert()
        .enableBeforeUpdate()
        .enableBeforeDelete();
    }

    public TriggerEvent disableAllBefore() {
      return this.disableBeforeInsert()
        .disableBeforeUpdate()
        .disableBeforeDelete();
    }

    public TriggerEvent enableAllAfter() {
      return this.enableAfterInsert()
        .enableAfterUpdate()
        .enableAfterDelete()
        .enableAfterUndelete();
    }

    public TriggerEvent disableAllAfter() {
      return this.disableAfterInsert()
        .disableAfterUpdate()
        .disableAfterDelete()
        .disableAfterUndelete();
    }

    public boolean isEnabled(
      Boolean isBefore,
      Boolean isAfter,
      Boolean isInsert,
      Boolean isUpdate,
      Boolean isDelete,
      Boolean isUndelete
    ) {
      if (isBefore) {
        if (isInsert)
          return BeforeInsertEnabled;
        else if (isUpdate)
          return BeforeUpdateEnabled;
        else if (isDelete)
          return BeforeDeleteEnabled;
      } else if (isAfter) {
        if (isInsert)
          return AfterInsertEnabled;
        else if (isUpdate)
          return AfterUpdateEnabled;
        else if (isDelete)
          return AfterDeleteEnabled;
        else if (isUndelete)
          return AfterUndeleteEnabled;
      }
      return true; // shouldnt ever get here!
    }
  }

  /**
   * Fluent style Configuration system for Domain class creation
   **/
  public class Configuration {
    /**
     * Backwards compatability mode for handleAfterUpdate routing to onValidate()
     **/
    public Boolean OldOnUpdateValidateBehaviour { get; private set; }
    /**
     * True if the base class is checking the users CRUD requirements before invoking trigger methods
     **/
    public Boolean EnforcingTriggerCRUDSecurity { get; private set; }

    /**
     * Enables reuse of the same Domain instance between before and after trigger phases (subject to recursive scenarios)
     **/
    public Boolean TriggerStateEnabled { get; private set; }

    /**
     * Default configuration
     **/
    public Configuration() {
      EnforcingTriggerCRUDSecurity = true; // Default is true for backwards compatability
      TriggerStateEnabled = false;
      OldOnUpdateValidateBehaviour = false; // Breaking change, but felt to better practice
    }

    /**
     * See associated property
     **/
    public Configuration enableTriggerState() {
      TriggerStateEnabled = true;
      return this;
    }

    /**
     * See associated property
     **/
    public Configuration disableTriggerState() {
      TriggerStateEnabled = false;
      return this;
    }

    /**
     * See associated property
     **/
    public Configuration enforceTriggerCRUDSecurity() {
      EnforcingTriggerCRUDSecurity = true;
      return this;
    }

    /**
     * See associated property
     **/
    public Configuration disableTriggerCRUDSecurity() {
      EnforcingTriggerCRUDSecurity = false;
      return this;
    }

    /**
     * See associated property
     **/
    public Configuration enableOldOnUpdateValidateBehaviour() {
      OldOnUpdateValidateBehaviour = true;
      return this;
    }

    /**
     * See associated property
     **/
    public Configuration disableOldOnUpdateValidateBehaviour() {
      OldOnUpdateValidateBehaviour = false;
      return this;
    }
  }

  /**
   * General exception class for the domain layer
   **/
  public class DomainException extends Exception {
  }

  /**
   * Ensures logging of errors in the Domain context for later assertions in tests
   **/
  public String error(String message, SObject record) {
    return Errors.error(this, message, record);
  }

  /**
   * Ensures logging of errors in the Domain context for later assertions in tests
   **/
  public String error(String message, SObject record, SObjectField field) {
    return Errors.error(this, message, record, field);
  }

  /**
   * Ensures logging of errors in the Domain context for later assertions in tests
   **/
  public class ErrorFactory {
    private List<Error> errorList = new List<Error>();

    private ErrorFactory() {
    }

    public String error(String message, SObject record) {
      return error(null, message, record);
    }

    private String error(
      fflib_SObjectDomain domain,
      String message,
      SObject record
    ) {
      ObjectError objectError = new ObjectError();
      objectError.domain = domain;
      objectError.message = message;
      objectError.record = record;
      errorList.add(objectError);
      return message;
    }

    public String error(String message, SObject record, SObjectField field) {
      return error(null, message, record, field);
    }

    private String error(
      fflib_SObjectDomain domain,
      String message,
      SObject record,
      SObjectField field
    ) {
      FieldError fieldError = new FieldError();
      fieldError.domain = domain;
      fieldError.message = message;
      fieldError.record = record;
      fieldError.field = field;
      errorList.add(fieldError);
      return message;
    }

    public List<Error> getAll() {
      return errorList.clone();
    }

    public void clearAll() {
      errorList.clear();
    }
  }

  /**
   * Ensures logging of errors in the Domain context for later assertions in tests
   **/
  public virtual class FieldError extends ObjectError {
    public SObjectField field;

    public FieldError() {
    }
  }

  /**
   * Ensures logging of errors in the Domain context for later assertions in tests
   **/
  public virtual class ObjectError extends Error {
    public SObject record;

    public ObjectError() {
    }
  }

  /**
   * Ensures logging of errors in the Domain context for later assertions in tests
   **/
  public abstract class Error {
    public String message;
    public fflib_SObjectDomain domain;
  }

  /**
   * Provides test context mocking facilities to unit tests testing domain classes
   **/
  public class TestFactory {
    public MockDatabase Database = new MockDatabase();

    private TestFactory() {
    }
  }

  /**
   * Class used during Unit testing of Domain classes, can be used (not exclusively) to speed up test execution and focus testing
   **/
  public class MockDatabase {
    private Boolean isInsert = false;
    private Boolean isUpdate = false;
    private Boolean isDelete = false;
    private Boolean isUndelete = false;
    private List<SObject> records = new List<SObject>();
    private Map<Id, SObject> oldRecords = new Map<Id, SObject>();

    private MockDatabase() {
    }

    private void testTriggerHandler(Type domainClass) {
      // Mock Before
      triggerHandler(
        domainClass,
        true,
        false,
        isInsert,
        isUpdate,
        isDelete,
        isUndelete,
        records,
        oldRecords
      );

      // Mock After
      triggerHandler(
        domainClass,
        false,
        true,
        isInsert,
        isUpdate,
        isDelete,
        isUndelete,
        records,
        oldRecords
      );
    }

    public void onInsert(List<SObject> records) {
      this.isInsert = true;
      this.isUpdate = false;
      this.isDelete = false;
      this.isUndelete = false;
      this.records = records;
    }

    public void onUpdate(List<SObject> records, Map<Id, SObject> oldRecords) {
      this.isInsert = false;
      this.isUpdate = true;
      this.isDelete = false;
      this.records = records;
      this.isUndelete = false;
      this.oldRecords = oldRecords;
    }

    public void onDelete(Map<Id, SObject> records) {
      this.isInsert = false;
      this.isUpdate = false;
      this.isDelete = true;
      this.isUndelete = false;
      this.oldRecords = records;
    }

    public void onUndelete(List<SObject> records) {
      this.isInsert = false;
      this.isUpdate = false;
      this.isDelete = false;
      this.isUndelete = true;
      this.records = records;
    }

    public Boolean hasRecords() {
      return records != null &&
        records.size() > 0 ||
        oldRecords != null &&
        oldRecords.size() > 0;
    }
  }

  /**
   * Test domain class (ideally this would be in the test class, however Type.newInstance does not see such classes)
   **/
  public with sharing class TestSObjectDomain extends fflib_SObjectDomain {
    private String someState;

    public TestSObjectDomain(List<Opportunity> sObjectList) {
      // Domain classes are initialised with lists to enforce bulkification throughout
      super(sObjectList);
    }

    public TestSObjectDomain(
      List<Opportunity> sObjectList,
      SObjectType sObjectType
    ) {
      // Domain classes are initialised with lists to enforce bulkification throughout
      super(sObjectList, sObjectType);
    }

    public override void onApplyDefaults() {
      // Not required in production code
      super.onApplyDefaults();

      // Apply defaults to Testfflib_SObjectDomain
      for (Opportunity opportunity : (List<Opportunity>) Records) {
        opportunity.CloseDate = System.today().addDays(30);
      }
    }

    public override void onValidate() {
      // Not required in production code
      super.onValidate();

      // Validate Testfflib_SObjectDomain
      for (Opportunity opp : (List<Opportunity>) Records) {
        if (
          opp.Type != null &&
          opp.Type.startsWith(''Existing'') &&
          opp.AccountId == null
        ) {
          opp.AccountId.addError(
            error(
              ''You must provide an Account for Opportunities for existing Customers.'',
              opp,
              Opportunity.AccountId
            )
          );
        }
      }
    }

    public override void onValidate(Map<Id, SObject> existingRecords) {
      // Not required in production code
      super.onValidate(existingRecords);

      // Validate changes to Testfflib_SObjectDomain
      for (Opportunity opp : (List<Opportunity>) Records) {
        Opportunity existingOpp = (Opportunity) existingRecords.get(opp.Id);
        if (opp.Type != existingOpp.Type) {
          opp.Type.addError(
            error(
              ''You cannot change the Opportunity type once it has been created.'',
              opp,
              Opportunity.Type
            )
          );
        }
      }
    }

    public override void onBeforeDelete() {
      // Not required in production code
      super.onBeforeDelete();

      // Validate changes to Testfflib_SObjectDomain
      for (Opportunity opp : (List<Opportunity>) Records) {
        opp.addError(error(''You cannot delete this Opportunity.'', opp));
      }
    }

    public override void onAfterUndelete() {
      // Not required in production code
      super.onAfterUndelete();
    }

    public override void onBeforeInsert() {
      // Assert this variable is null in the after insert (since this domain class is stateless)
      someState = ''This should not survice the trigger after phase'';
    }

    public override void onAfterInsert() {
      // This is a stateless domain class, so should not retain anything betweet before and after
      System.assertEquals(null, someState);
    }
  }

  /**
   * Typically an inner class to the domain class, supported here for test purposes
   **/
  public class TestSObjectDomainConstructor implements fflib_SObjectDomain.IConstructable {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new TestSObjectDomain(sObjectList);
    }
  }

  /**
   * Test domain class (ideally this would be in the test class, however Type.newInstance does not see such classes)
   **/
  public with sharing class TestSObjectStatefulDomain extends fflib_SObjectDomain {
    public String someState;

    public TestSObjectStatefulDomain(List<Opportunity> sObjectList) {
      super(sObjectList);

      // Ensure this instance is re-used in the after trigger phase (subject to recursive scenarios)
      Configuration.enableTriggerState();
    }

    public override void onBeforeInsert() {
      // This must always be null, as we do not reuse domain instances within recursive scenarios (different record sets)
      System.assertEquals(null, someState);

      // Process records
      List<Opportunity> newOpps = new List<Opportunity>();
      for (Opportunity opp : (List<Opportunity>) Records) {
        // Set some state sensitive to the incoming records
        someState = ''Error on Record '' + opp.Name;

        // Create a new Opportunity record to trigger recursive code path?
        if (opp.Name.equals(''Test Recursive 1''))
          newOpps.add(
            new Opportunity(
              Name = ''Test Recursive 2'',
              Type = ''Existing Account''
            )
          );
      }

      // If testing recursiving emulate an insert
      if (newOpps.size() > 0) {
        // This will force recursion and thus validate via the above assert results in a new domain instance
        fflib_SObjectDomain.Test.Database.onInsert(newOpps);
        fflib_SObjectDomain.triggerHandler(
          fflib_SObjectDomain.TestSObjectStatefulDomainConstructor.class
        );
      }
    }

    public override void onAfterInsert() {
      // Use the state set in the before insert (since this is a stateful domain class)
      if (someState != null)
        for (Opportunity opp : (List<Opportunity>) Records)
          opp.addError(error(someState, opp));
    }
  }

  /**
   * Typically an inner class to the domain class, supported here for test purposes
   **/
  public class TestSObjectStatefulDomainConstructor implements fflib_SObjectDomain.IConstructable {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new TestSObjectStatefulDomain(sObjectList);
    }
  }

  /**
   * Test domain class (ideally this would be in the test class, however Type.newInstance does not see such classes)
   **/
  public with sharing class TestSObjectOnValidateBehaviour extends fflib_SObjectDomain {
    public TestSObjectOnValidateBehaviour(List<Opportunity> sObjectList) {
      super(sObjectList);

      // Enable old behaviour based on the test Opportunity name passed in
      if (sObjectList[0].Name == ''Test Enable Old Behaviour'')
        Configuration.enableOldOnUpdateValidateBehaviour();
    }

    public override void onValidate() {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onValidate called'');
    }
  }

  /**
   * Typically an inner class to the domain class, supported here for test purposes
   **/
  public class TestSObjectOnValidateBehaviourConstructor implements fflib_SObjectDomain.IConstructable {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new TestSObjectOnValidateBehaviour(sObjectList);
    }
  }

  /**
   * Test domain class (ideally this would be in the test class, however Type.newInstance does not see such classes)
   **/
  public with sharing class TestSObjectDisableBehaviour extends fflib_SObjectDomain {
    public TestSObjectDisableBehaviour(List<Opportunity> sObjectList) {
      super(sObjectList);
    }

    public override void onAfterInsert() {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onAfterInsert called'');
    }

    public override void onBeforeInsert() {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onBeforeInsert called'');
    }

    public override void onAfterUpdate(map<id, SObject> existing) {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onAfterUpdate called'');
    }

    public override void onBeforeUpdate(map<id, SObject> existing) {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onBeforeUpdate called'');
    }

    public override void onAfterDelete() {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onAfterDelete called'');
    }

    public override void onBeforeDelete() {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onBeforeDelete called'');
    }

    public override void onAfterUndelete() {
      // Throw exception to give the test somethign to assert on
      throw new DomainException(''onAfterUndelete called'');
    }
  }

  /**
   * Typically an inner class to the domain class, supported here for test purposes
   **/
  public class TestSObjectDisableBehaviourConstructor implements fflib_SObjectDomain.IConstructable {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new TestSObjectDisableBehaviour(sObjectList);
    }
  }
}','3783793824.0','True','fflib_SObjectDomain','21589','Active');
INSERT INTO "ApexClass" VALUES(105,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private with sharing class fflib_SObjectDomainTest {
  @IsTest
  private static void testValidationWithoutDML() {
    fflib_SObjectDomain.TestSObjectDomain opps = new fflib_SObjectDomain.TestSObjectDomain(
      new List<Opportunity>{
        new Opportunity(Name = ''Test'', Type = ''Existing Account'')
      }
    );
    opps.onValidate();
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''You must provide an Account for Opportunities for existing Customers.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      Opportunity.AccountId,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );

    opps = new fflib_SObjectDomain.TestSObjectDomain(
      new List<SObject>{
        new Opportunity(Name = ''Test'', Type = ''Existing Account'')
      },
      Opportunity.SObjectType
    );
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''You must provide an Account for Opportunities for existing Customers.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      Opportunity.AccountId,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  @IsTest
  private static void testInsertValidationFailedWithoutDML() {
    Opportunity opp = new Opportunity(Name = ''Test'', Type = ''Existing Account'');
    System.assertEquals(false, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.Test.Database.onInsert(new List<Opportunity>{ opp });
    System.assertEquals(true, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectDomainConstructor.class
    );
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''You must provide an Account for Opportunities for existing Customers.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      Opportunity.AccountId,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  @IsTest
  private static void testUpdateValidationFailedWithoutDML() {
    Opportunity oldOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    oldOpp.Name = ''Test'';
    oldOpp.Type = ''Existing Account'';
    Opportunity newOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    newOpp.Name = ''Test'';
    newOpp.Type = ''New Account'';
    System.assertEquals(false, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.Test.Database.onUpdate(
      new List<Opportunity>{ newOpp },
      new Map<Id, SObject>{ newOpp.Id => oldOpp }
    );
    System.assertEquals(true, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectDomainConstructor.class
    );
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''You cannot change the Opportunity type once it has been created.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      Opportunity.Type,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  @IsTest
  private static void testOnBeforeDeleteWithoutDML() {
    Opportunity opp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    opp.Name = ''Test'';
    opp.Type = ''Existing Account'';
    System.assertEquals(false, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.Test.Database.onDelete(
      new Map<ID, Opportunity>{ opp.Id => opp }
    );
    System.assertEquals(true, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectDomainConstructor.class
    );
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''You cannot delete this Opportunity.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
  }

  @IsTest
  private static void testOnAfterUndeleteWithoutDML() {
    Opportunity opp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    opp.Name = ''Test'';
    opp.Type = ''Existing Account'';
    System.assertEquals(false, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.Test.Database.onUndelete(new List<Opportunity>{ opp });
    System.assertEquals(true, fflib_SObjectDomain.Test.Database.hasRecords());
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectDomainConstructor.class
    );
  }

  @IsTest
  private static void testObjectSecurity() {
    // Create a user which will not have access to the test object type
    User testUser = createChatterExternalUser();
    if (testUser == null)
      return; // Abort the test if unable to create a user with low enough acess
    System.runAs(testUser) {
      // Test Create object security
      Opportunity opp = new Opportunity(
        Name = ''Test'',
        Type = ''Existing Account''
      );
      fflib_SObjectDomain.Test.Database.onInsert(new List<Opportunity>{ opp });
      try {
        fflib_SObjectDomain.triggerHandler(
          fflib_SObjectDomain.TestSObjectDomainConstructor.class
        );
        System.assert(false, ''Expected access denied exception'');
      } catch (Exception e) {
        System.assertEquals(
          ''Permission to create an Opportunity denied.'',
          e.getMessage()
        );
      }

      // Test Update object security
      Opportunity existingOpp = (Opportunity) Opportunity.sObjectType.newSObject(
        ''006E0000006mkRQ''
      );
      existingOpp.Name = ''Test'';
      existingOpp.Type = ''Existing Account'';
      fflib_SObjectDomain.Test.Database.onUpdate(
        new List<Opportunity>{ opp },
        new Map<Id, Opportunity>{ opp.Id => opp }
      );
      try {
        fflib_SObjectDomain.triggerHandler(
          fflib_SObjectDomain.TestSObjectDomainConstructor.class
        );
        System.assert(false, ''Expected access denied exception'');
      } catch (Exception e) {
        System.assertEquals(
          ''Permission to udpate an Opportunity denied.'',
          e.getMessage()
        );
      }

      // Test Delete object security
      fflib_SObjectDomain.Test.Database.onDelete(
        new Map<Id, Opportunity>{ opp.Id => opp }
      );
      try {
        fflib_SObjectDomain.triggerHandler(
          fflib_SObjectDomain.TestSObjectDomainConstructor.class
        );
        System.assert(false, ''Expected access denied exception'');
      } catch (Exception e) {
        System.assertEquals(
          ''Permission to delete an Opportunity denied.'',
          e.getMessage()
        );
      }
    }
  }

  @IsTest
  private static void testErrorLogging() {
    // Test static helpers for raise none domain object instance errors
    Opportunity opp = new Opportunity(Name = ''Test'', Type = ''Existing Account'');
    fflib_SObjectDomain.Errors.error(''Error'', opp);
    fflib_SObjectDomain.Errors.error(''Error'', opp, Opportunity.Type);
    System.assertEquals(2, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Error'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      ''Error'',
      fflib_SObjectDomain.Errors.getAll()[1].message
    );
    System.assertEquals(
      Opportunity.Type,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[1])
        .field
    );
    fflib_SObjectDomain.Errors.clearAll();
    System.assertEquals(0, fflib_SObjectDomain.Errors.getAll().size());
  }

  @IsTest
  private static void testTriggerState() {
    Opportunity opp = new Opportunity(Name = ''Test'', Type = ''Existing Account'');
    fflib_SObjectDomain.Test.Database.onInsert(new List<Opportunity>{ opp });
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectStatefulDomainConstructor.class
    );
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Error on Record Test'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
  }

  @IsTest
  private static void testRecursiveTriggerState() {
    Opportunity opp = new Opportunity(
      Name = ''Test Recursive 1'',
      Type = ''Existing Account''
    );
    fflib_SObjectDomain.Test.Database.onInsert(new List<Opportunity>{ opp });
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectStatefulDomainConstructor.class
    );
    System.assertEquals(2, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Error on Record Test Recursive 2'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      ''Error on Record Test Recursive 1'',
      fflib_SObjectDomain.Errors.getAll()[1].message
    );
  }

  @IsTest
  private static void testOnValidateBehaviorDefault() {
    Opportunity oldOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    oldOpp.Name = ''Test Default Behaviour'';
    oldOpp.Type = ''Existing Account'';
    Opportunity newOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    newOpp.Name = ''Test Default Behaviour'';
    newOpp.Type = ''New Account'';
    fflib_SObjectDomain.Test.Database.onUpdate(
      new List<Opportunity>{ newOpp },
      new Map<Id, SObject>{ newOpp.Id => oldOpp }
    );
    fflib_SObjectDomain.triggerHandler(
      fflib_SObjectDomain.TestSObjectOnValidateBehaviourConstructor.class
    );
  }

  @IsTest
  private static void testOnValidateBehaviorOld() {
    Opportunity oldOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    oldOpp.Name = ''Test Enable Old Behaviour'';
    oldOpp.Type = ''Existing Account'';
    Opportunity newOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    newOpp.Name = ''Test Enable Old Behaviour'';
    newOpp.Type = ''New Account'';
    fflib_SObjectDomain.Test.Database.onUpdate(
      new List<Opportunity>{ newOpp },
      new Map<Id, SObject>{ newOpp.Id => oldOpp }
    );
    try {
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectOnValidateBehaviourConstructor.class
      );
      System.assert(false, ''Expected exception'');
    } catch (Exception e) {
      System.assertEquals(''onValidate called'', e.getMessage());
    }
  }

  /**
   * Create test user
   **/
  private static User createChatterExternalUser() {
    // Can only proceed with test if we have a suitable profile - Chatter External license has no access to Opportunity
    List<Profile> testProfiles = [
      SELECT Id
      FROM Profile
      WHERE UserLicense.Name = ''Chatter External''
      LIMIT 1
    ];
    if (testProfiles.size() != 1)
      return null;

    // Can only proceed with test if we can successfully insert a test user
    String testUsername =
      System.now().format(''yyyyMMddhhmmss'') + ''@testorg.com'';
    User testUser = new User(
      Alias = ''test1'',
      Email = ''testuser1@testorg.com'',
      EmailEncodingKey = ''UTF-8'',
      LastName = ''Testing'',
      LanguageLocaleKey = ''en_US'',
      LocaleSidKey = ''en_US'',
      ProfileId = testProfiles[0].Id,
      TimeZoneSidKey = ''America/Los_Angeles'',
      UserName = testUsername
    );
    try {
      insert testUser;
    } catch (Exception e) {
      return null;
    }
    return testUser;
  }

  /**
   *	The following tests that the ability to enable/disable all trigger events works as required
   **/
  @IsTest
  private static void testDisableTriggerEventsBehaviour() {
    boolean bError = false;

    String sErrorMessage = '''';

    Opportunity oldOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    oldOpp.Name = ''Test'';
    oldOpp.Type = ''Existing'';
    Opportunity newOpp = (Opportunity) Opportunity.sObjectType.newSObject(
      ''006E0000006mkRQ''
    );
    newOpp.Name = ''Test'';
    newOpp.Type = ''New'';

    // these will be called multiple times making sure the correct error message comes back out
    // so... there are alot of tests to do here sadly and remember everything is reversed and you need to run backwards!
    // 1 - all disabled
    try {
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .disableAll();
      fflib_SObjectDomain.Test.Database.onInsert(
        new List<Opportunity>{ newOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      bError = true;
    }

    System.AssertEquals(
      false,
      bError,
      ''Error - Trigger events have been fired when they are disabled''
    );

    ////////////////////////////
    // Insert!
    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableAfterInsert();
      fflib_SObjectDomain.Test.Database.onInsert(
        new List<Opportunity>{ newOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
      System.Debug(''Exception Fired :'' + e.getMEssage());
    }

    System.AssertEquals(
      ''onAfterInsert called'',
      sErrorMessage,
      ''Error - After Insert Event is enabled but did not run''
    );

    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableBeforeInsert();
      fflib_SObjectDomain.Test.Database.onInsert(
        new List<Opportunity>{ newOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
    }

    System.AssertEquals(
      ''onBeforeInsert called'',
      sErrorMessage,
      ''Error - Before Insert Event is enabled but did not run''
    );

    ////////////////////////////
    // Update!
    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableAfterUpdate();
      fflib_SObjectDomain.Test.Database.onUpdate(
        new List<Opportunity>{ newOpp },
        new Map<Id, SObject>{ newOpp.Id => oldOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
    }

    System.AssertEquals(
      ''onAfterUpdate called'',
      sErrorMessage,
      ''Error - After Update Event is enabled but did not run''
    );

    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableBeforeUpdate();
      fflib_SObjectDomain.Test.Database.onUpdate(
        new List<Opportunity>{ newOpp },
        new Map<Id, SObject>{ newOpp.Id => oldOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
    }

    System.AssertEquals(
      ''onBeforeUpdate called'',
      sErrorMessage,
      ''Error - Before Update Event is enabled but did not run''
    );

    ////////////////////////////
    // Delete!
    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableAfterDelete();
      fflib_SObjectDomain.Test.Database.onDelete(
        new Map<Id, Opportunity>{ newOpp.Id => newOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
    }

    System.AssertEquals(
      ''onAfterDelete called'',
      sErrorMessage,
      ''Error - After Delete Event is enabled but did not run''
    );

    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableBeforeDelete();
      fflib_SObjectDomain.Test.Database.onDelete(
        new Map<Id, Opportunity>{ newOpp.Id => newOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
    }

    System.AssertEquals(
      ''onBeforeDelete called'',
      sErrorMessage,
      ''Error - Before Delete Event is enabled but did not run''
    );

    ////////////////////////////
    // Undelete!
    try {
      // now lets go after insert and then before
      fflib_SObjectDomain.getTriggerEvent(
          fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
        )
        .enableAfterUndelete();
      fflib_SObjectDomain.Test.Database.onUndelete(
        new List<Opportunity>{ newOpp }
      );
      fflib_SObjectDomain.triggerHandler(
        fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor.class
      );
    } catch (Exception e) {
      sErrorMessage = e.getMessage();
    }

    System.AssertEquals(
      ''onAfterUndelete called'',
      sErrorMessage,
      ''Error - After Undelete Event is enabled but did not run''
    );

    /*

		fflib_SObjectDomain.Test.Database.onInsert(new Opportunity[] { opp } );



		fflib_SObjectDomain.Test.Database.onUpdate(new Opportunity[] { newOpp }, new Map<Id, SObject> { newOpp.Id => oldOpp } );

		fflib_SObjectDomain.Test.Database.onDelete(new Map<ID, Opportunity> { opp.Id => opp } );		

		fflib_SObjectDomain.Test.Database.onUndelete(new list<Opportunity> { opp } );		


		try {		
			fflib_SObjectDomain.triggerHandler(fflib_SObjectDomain.TestSObjectOnValidateBehaviourConstructor.class);
			System.assert(false, ''Expected exception'');
		} catch (Exception e) {
			System.assertEquals(''onValidate called'', e.getMessage());
		}
		*/
  }
}','396535225.0','True','fflib_SObjectDomainTest','16570','Active');
INSERT INTO "ApexClass" VALUES(106,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Validation and other behaviour for the Lookup Rollup Summary custom object or custom metadata records
 **/
public class RollupSummaries extends fflib_SObjectDomain {
  private static final Integer APEXTRIGGER_NAME_LENGTH = 40; // ApexTrigger.Name.getDescribe().getLength(); gives 255?

  private static final Integer APEXCLASS_NAME_LENGTH = 40; // ApexClass.Name.getDescribe().getLength(); gives 255?

  /**
   * Maps LookupRollupSummary__c.AggregateOperation__c picklist values to LREngine.RollupOperation enum
   **/
  public static Map<String, LREngine.RollupOperation> OPERATION_PICKLIST_TO_ENUMS = new Map<String, LREngine.RollupOperation>{
    AggregateOperation.Sum.name() => LREngine.RollupOperation.Sum,
    AggregateOperation.Max.name() => LREngine.RollupOperation.Max,
    AggregateOperation.Min.name() => LREngine.RollupOperation.Min,
    AggregateOperation.Avg.name() => LREngine.RollupOperation.Avg,
    AggregateOperation.Count.name() => LREngine.RollupOperation.Count,
    AggregateOperation.Count_Distinct.name()
      .replace(''_'', '' '') => LREngine.RollupOperation.Count_Distinct,
    AggregateOperation.Concatenate.name() => LREngine.RollupOperation.Concatenate,
    AggregateOperation.Concatenate_Distinct.name()
      .replace(''_'', '' '') => LREngine.RollupOperation.Concatenate_Distinct,
    AggregateOperation.First.name() => LREngine.RollupOperation.First,
    AggregateOperation.Last.name() => LREngine.RollupOperation.Last
  };

  /**
   * Enum reflecting CalculationMode__c field picklist values
   **/
  public enum CalculationMode {
    Realtime,
    Scheduled,
    Developer,
    Process_Builder
  }

  /**
   * Enum reflecting AggregateOperation__c field picklist values
   **/
  public enum AggregateOperation {
    Sum,
    Max,
    Min,
    Avg,
    Count,
    Count_Distinct,
    Concatenate,
    Concatenate_Distinct,
    First,
    Last
  }

  /**
   * Intentially shadow the Records base class property with a list of wrapped records
   **/
  public List<RollupSummary> Records;

  public RollupSummaries(List<SObject> records) {
    super(records);

    // Disable CRUD security enforced in Trigger context
    this.Configuration.disableTriggerCRUDSecurity();

    // Wrap the records from the Custom Object or Custom Metadata
    this.Records = RollupSummary.toList(records);
  }

  /**
   * Before Insert processing
   **/
  public override void onBeforeInsert() {
    updateDescribableFieldNames();
  }

  /**
   * Before Update processing
   **/
  public override void onBeforeUpdate(Map<Id, SObject> existingRecords) {
    updateDescribableFieldNames();
  }

  /**
   * update field names using describe info
   **/
  private void updateDescribableFieldNames() {
    Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
    Map<SObjectType, Map<String, Schema.SObjectField>> gdFields = new Map<SObjectType, Map<String, Schema.SObjectField>>();
    for (RollupSummary lookupRollupSummary : Records) {
      SObjectType parentObjectType = gd.get(lookupRollupSummary.ParentObject);
      SObjectType childObjectType = gd.get(lookupRollupSummary.ChildObject);
      if (parentObjectType != null && !gdFields.containsKey(parentObjectType))
        gdFields.put(
          parentObjectType,
          parentObjectType.getDescribe().fields.getMap()
        );
      if (childObjectType != null && !gdFields.containsKey(childObjectType))
        gdFields.put(
          childObjectType,
          childObjectType.getDescribe().fields.getMap()
        );
    }

    for (RollupSummary lookupRollupSummary : Records) {
      // Parent Object
      fflib_SObjectDescribe parentObject = fflib_SObjectDescribe.getDescribe(
        lookupRollupSummary.ParentObject
      );
      if (parentObject != null)
        lookupRollupSummary.ParentObject = parentObject.getDescribe().getName();

      // Child Object
      fflib_SObjectDescribe childObject = fflib_SObjectDescribe.getDescribe(
        lookupRollupSummary.ChildObject
      );
      if (childObject != null)
        lookupRollupSummary.ChildObject = childObject.getDescribe().getName();

      // Child Object fields
      SObjectField relationshipField = null;
      SObjectField fieldToAggregate = null;
      if (childObject != null) {
        // Relationship field
        relationshipField = childObject.getField(
          lookupRollupSummary.RelationshipField
        );
        if (relationshipField != null)
          lookupRollupSummary.RelationshipField = relationshipField.getDescribe()
            .getName();
        // Field to Aggregate
        fieldToAggregate = childObject.getField(
          lookupRollupSummary.FieldToAggregate
        );
        if (fieldToAggregate != null)
          lookupRollupSummary.FieldToAggregate = fieldToAggregate.getDescribe()
            .getName();
        // Field to Order By
        if (lookupRollupSummary.FieldToOrderBy != null) {
          try {
            lookupRollupSummary.FieldToOrderBy = parseOrderByClause(
              lookupRollupSummary.FieldToOrderBy,
              childObject
            );
          } catch (Utilities.OrderByInvalidException e) {
            // there is a problem with order by so we ignore it intentionally here since we''re just trying
            // to update field names with describe info.  The error will be caught during validation phase.
          }
        }
      }
      // Parent Object fields
      SObjectField aggregateResultField = null;
      if (parentObject != null) {
        // Aggregate Result field
        aggregateResultField = parentObject.getField(
          lookupRollupSummary.AggregateResultField
        );
        if (aggregateResultField != null)
          lookupRollupSummary.AggregateResultField = aggregateResultField.getDescribe()
            .getName();
      }
      // Check the list of fields expressed in the relationship critiera fields
      if (
        childObject != null &&
        lookupRollupSummary.RelationshipCriteriaFields != null
      ) {
        List<String> relationshipCriteriaFields = new List<String>();
        String[] fieldList = lookupRollupSummary.RelationshipCriteriaFields.split(
          ''\r\n''
        );
        for (String field : fieldList) {
          SObjectField relationshipCriteriaField = childObject.getField(field);
          relationshipCriteriaFields.add(
            relationshipCriteriaField != null
              ? relationshipCriteriaField.getDescribe().getName()
              : field
          );
        }
        lookupRollupSummary.RelationshipCriteriaFields = String.join(
          relationshipCriteriaFields,
          ''\r\n''
        );
      }
    }
  }

  /**
   * Validations for inserts and updates of records
   **/
  private void validateCommon() {
    // Calculate child object tigger names
    Set<String> rollupTriggerNames = new Set<String>();
    for (RollupSummary lookupRollupSummary : Records) {
      // Calculate trigger name child object reqquires in order to check existance
      fflib_SObjectDescribe childObject = fflib_SObjectDescribe.getDescribe(
        lookupRollupSummary.ChildObject
      );
      if (childObject != null)
        rollupTriggerNames.add(makeTriggerName(lookupRollupSummary));
    }

    // Query for any related Apex triggers
    Map<String, ApexTrigger> apexTriggers = new ApexTriggersSelector()
      .selectByName(rollupTriggerNames);

    for (RollupSummary lookupRollupSummary : Records) {
      // Custom Metadata shadow record?
      if (lookupRollupSummary.UniqueName != null) {
        if (lookupRollupSummary.UniqueName.startsWith(''mdt:'')) {
          // Prevent this record from being activated
          if (lookupRollupSummary.Active) {
            lookupRollupSummary.Fields.Active.addError(
              ''This rollup is managed by the system and cannot be activated.''
            );
            break;
          }
          // Skip rest of validation
          break;
        }
      }
      // Parent Object valid?
      fflib_SObjectDescribe parentObject = fflib_SObjectDescribe.getDescribe(
        lookupRollupSummary.ParentObject
      );
      if (parentObject == null)
        lookupRollupSummary.Fields.ParentObject.addError(
          error(
            ''Object does not exist.'',
            lookupRollupSummary.Record,
            LookupRollupSummary__c.ParentObject__c
          )
        );
      // Child Object valid?
      fflib_SObjectDescribe childObject = fflib_SObjectDescribe.getDescribe(
        lookupRollupSummary.ChildObject
      );
      if (childObject == null)
        lookupRollupSummary.Fields.ChildObject.addError(
          error(
            ''Object does not exist.'',
            lookupRollupSummary.Record,
            LookupRollupSummary__c.ChildObject__c
          )
        );
      // Child Object fields valid?
      SObjectField relationshipField = null;
      SObjectField fieldToAggregate = null;
      Boolean orderByIsValid = true;
      if (childObject != null) {
        // Relationship field valid?
        relationshipField = childObject.getField(
          lookupRollupSummary.RelationshipField
        );
        if (relationshipField == null)
          lookupRollupSummary.Fields.RelationshipField.addError(
            error(
              ''Field does not exist.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.RelationshipField__c
            )
          );
        // Field to Aggregate valid?
        fieldToAggregate = childObject.getField(
          lookupRollupSummary.FieldToAggregate
        );
        if (fieldToAggregate == null)
          lookupRollupSummary.Fields.FieldToAggregate.addError(
            error(
              ''Field does not exist.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.FieldToAggregate__c
            )
          );
        // Field to Order By valid?
        if (!String.isBlank(lookupRollupSummary.FieldToOrderBy)) {
          try {
            String orderByClause = parseOrderByClause(
              lookupRollupSummary.FieldToOrderBy,
              childObject
            );
          } catch (Utilities.OrderByInvalidException e) {
            orderByIsValid = false;
            lookupRollupSummary.Fields.FieldToOrderBy.addError(
              error(
                e.getMessage(),
                lookupRollupSummary.Record,
                LookupRollupSummary__c.FieldToOrderBy__c
              )
            );
          }
        }
        // TODO: Validate relationship field is a lookup to the parent
        // ...
      }
      // Parent Object fields valid?
      SObjectField aggregateResultField = null;
      if (parentObject != null) {
        // Aggregate Result field valid?
        aggregateResultField = parentObject.getField(
          lookupRollupSummary.AggregateResultField
        );
        if (aggregateResultField == null)
          lookupRollupSummary.Fields.AggregateResultField.addError(
            error(
              ''Field does not exist.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.AggregateResultField__c
            )
          );
      }
      // Cannot activate Realtime or Scheduled rollup without the required trigger deployed
      if (childObject != null) {
        String triggerName = makeTriggerName(lookupRollupSummary);
        if (
          lookupRollupSummary.Active &&
          (lookupRollupSummary.CalculationMode ==
          CalculationMode.Realtime.name() ||
          lookupRollupSummary.CalculationMode ==
          CalculationMode.Scheduled.name()) &&
          !apexTriggers.containsKey(triggerName)
        )
          lookupRollupSummary.Fields.Active.addError(
            error(
              ''Apex Trigger '' +
              triggerName +
              '' has not been deployed. Click Manage Child Trigger and try again.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.Active__c
            )
          );
      }
      // Check the list of fields expressed in the relationship critiera fields
      if (
        childObject != null &&
        lookupRollupSummary.RelationshipCriteriaFields != null
      ) {
        String[] fieldList = lookupRollupSummary.RelationshipCriteriaFields.split(
          ''[\r\n]+''
        );
        String[] fieldsInError = new List<String>();
        for (String field : fieldList)
          if (field.length() > 0)
            if (childObject.getField(field) == null)
              fieldsInError.add(field);
        if (fieldsInError.size() == 1)
          lookupRollupSummary.Fields.RelationshipCriteriaFields.addError(
            error(
              ''Field '' +
              fieldsInError[0] +
              '' does not exist on the child object.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.RelationshipCriteriaFields__c
            )
          );
        else if (fieldsInError.size() > 1)
          lookupRollupSummary.Fields.RelationshipCriteriaFields.addError(
            error(
              ''Fields '' +
              String.join(fieldsInError, '','') +
              '' do not exist on the child object.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.RelationshipCriteriaFields__c
            )
          );
      }
      // Row limit is only supported for certain operations
      LREngine.RollupOperation operation = OPERATION_PICKLIST_TO_ENUMS.get(
        lookupRollupSummary.AggregateOperation
      );
      if (
        operation != null &&
        lookupRollupSummary.RowLimit != null &&
        lookupRollupSummary.RowLimit > 0
      ) {
        Set<LREngine.RollupOperation> operationsSupportingRowLimit = new Set<LREngine.RollupOperation>{
          LREngine.RollupOperation.Last,
          LREngine.RollupOperation.Concatenate,
          LREngine.RollupOperation.Concatenate_Distinct
        };
        if (!operationsSupportingRowLimit.contains(operation)) {
          lookupRollupSummary.Fields.RowLimit.addError(
            error(
              ''Row Limit is only supported on Last and Concatentate operators.'',
              lookupRollupSummary.Record,
              LookupRollupSummary__c.RowLimit__c
            )
          );
        }
      }
      try {
        // If all objects and fields valid...
        if (
          parentObject != null &&
          childObject != null &&
          relationshipField != null &&
          aggregateResultField != null &&
          fieldToAggregate != null &&
          orderByIsValid
        ) {
          // Validate via LREngine context
          LREngine.Context lreContext = new LREngine.Context(
            parentObject.getSObjectType(), // parent object
            childObject.getSObjectType(), // child object
            relationshipField.getDescribe(), // relationship field name
            lookupRollupSummary.RelationShipCriteria,
            lookupRollupSummary.FieldToOrderBy
          );
          lreContext.add(
            new LREngine.RollupSummaryField(
              aggregateResultField.getDescribe(),
              fieldToAggregate.getDescribe(),
              operation,
              lookupRollupSummary.ConcatenateDelimiter
            )
          );
          // Validate the SOQL
          if (
            lookupRollupSummary.RelationShipCriteria != null &&
            lookupRollupSummary.RelationShipCriteria.length() > 0
          ) {
            try {
              // Validate only mode ensures no query is actually made should it be valid
              LREngine.rollUp(lreContext, new Set<Id>(), true);
            } catch (QueryException e) {
              lookupRollupSummary.Fields.RelationShipCriteria.addError(
                error(
                  String.format(
                    MSG_INVALID_CRITERIA,
                    new List<String>{
                      lookupRollupSummary.RelationShipCriteria,
                      e.getMessage()
                    }
                  ),
                  lookupRollupSummary.Record,
                  LookupRollupSummary__c.RelationShipCriteria__c
                )
              );
            }
          }
        }
      } catch (LREngine.BadRollUpSummaryStateException e) {
        // Associate exception message with the lookup rollup summary error
        lookupRollupSummary.addError(
          error(e.getMessage(), lookupRollupSummary.Record)
        );
      }
    }
  }

  /**
   * Validations for inserts of records
   **/
  public override void onValidate() {
    // invoke validation that should occur for insert & update
    validateCommon();
  }

  /**
   * Validations for updates of records
   **/
  public override void onValidate(Map<Id, SObject> existingRecords) {
    // invoke validation that should occur for insert & update
    validateCommon();
  }

  private static final String MSG_INVALID_CRITERIA = ''Relationship Criteria \''\''{0}\''\'' is not valid, see SOQL documentation http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_conditionexpression.htm, error is \''\''{1}\''\'''';

  public class Constructor implements fflib_SObjectDomain.IConstructable {
    public fflib_SObjectDomain construct(List<SObject> sObjectList) {
      return new RollupSummaries(sObjectList);
    }
  }

  /**
   * Trigger name for given lookup rollup summary
   **/
  public static String makeTriggerName(RollupSummary lookupRollupSummary) {
    if (
      Test.isRunningTest() && lookupRollupSummary.ChildObject == ''Opportunity''
    )
      return ''UnpackagedRollupServiceTestTrigger'';
    else if (
      Test.isRunningTest() &&
      lookupRollupSummary.ChildObject ==
      LookupChild__c.sObjectType.getDescribe().getName()
    )
      return ''UnpackagedRollupServiceTest2Trigger'';
    else if (
      Test.isRunningTest() && lookupRollupSummary.ChildObject == ''Account''
    )
      return ''UnpackagedRollupServiceTest3Trigger'';
    else if (Test.isRunningTest() && lookupRollupSummary.ChildObject == ''Task'')
      return ''UnpackagedRollupServiceTest4Trigger'';
    else if (
      Test.isRunningTest() && lookupRollupSummary.ChildObject == ''Contact''
    )
      return ''UnpackagedRollupServiceTest5Trigger'';
    return calculateComponentName(
      lookupRollupSummary.ChildObject,
      ''Trigger'',
      APEXTRIGGER_NAME_LENGTH
    );
  }

  /**
   * Apex test name for given lookup rollup summary
   **/
  public static String makeTriggerTestName(RollupSummary lookupRollupSummary) {
    if (
      Test.isRunningTest() && lookupRollupSummary.ChildObject == ''Opportunity''
    )
      return ''RollupSummariesTest'';
    return calculateComponentName(
      lookupRollupSummary.ChildObject,
      ''Test'',
      APEXCLASS_NAME_LENGTH
    );
  }

  /**
   * Trigger name for Parent object for given lookup rollup summary
   **/
  public static String makeParentTriggerName(
    RollupSummary lookupRollupSummary
  ) {
    if (
      Test.isRunningTest() && lookupRollupSummary.ParentObject == ''Opportunity''
    )
      return ''UnpackagedRollupServiceTestTrigger'';
    else if (
      Test.isRunningTest() &&
      lookupRollupSummary.ParentObject ==
      LookupParent__c.sObjectType.getDescribe().getName()
    )
      return ''UnpackagedRollupServiceTest2Trigger'';
    else if (
      Test.isRunningTest() && lookupRollupSummary.ParentObject == ''Account''
    )
      return ''UnpackagedRollupServiceTest3Trigger'';
    else if (Test.isRunningTest() && lookupRollupSummary.ParentObject == ''Task'')
      return ''UnpackagedRollupServiceTest4Trigger'';
    else if (
      Test.isRunningTest() && lookupRollupSummary.ParentObject == ''Contact''
    )
      return ''UnpackagedRollupServiceTest5Trigger'';
    return calculateComponentName(
      lookupRollupSummary.ParentObject,
      ''Trigger'',
      APEXTRIGGER_NAME_LENGTH
    );
  }

  /**
   * Apex test name for Parent object for given lookup rollup summary
   **/
  public static String makeParentTriggerTestName(
    RollupSummary lookupRollupSummary
  ) {
    if (
      Test.isRunningTest() && lookupRollupSummary.ParentObject == ''Opportunity''
    )
      return ''RollupSummariesTest'';
    return calculateComponentName(
      lookupRollupSummary.ParentObject,
      ''Test'',
      APEXCLASS_NAME_LENGTH
    );
  }

  /**
   * Ensures the component name never exceeds the given maximum length but yet still remains unique
   **/
  @TestVisible
  private static String calculateComponentName(
    String childObjectName,
    String suffix,
    Integer maxComponentNameLength
  ) {
    String trimmedObjectName = childObjectName.replace(''__c'', '''')
      .replace(''__'', ''_'');
    String prefix = Utilities.componentPrefix();
    String componentName = prefix + trimmedObjectName + suffix;
    Integer componentNameLength = componentName.length();
    if (
      componentNameLength > maxComponentNameLength // Do we need to trim the trigger name?
    ) {
      Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
      SObjectType childObjectType = gd.get(childObjectName);
      String childObjectPrefix = childObjectType.getDescribe().getKeyPrefix(); // Key prefix will be used to make the trimmed name unique again
      Integer overflowChars = componentNameLength - maxComponentNameLength; // How much do we need to trim the name by?
      trimmedObjectName = trimmedObjectName.substring(
        0,
        trimmedObjectName.length() - overflowChars
      ); // Trim the overflow characters from the name
      trimmedObjectName = trimmedObjectName.substring(
        0,
        trimmedObjectName.length() - childObjectPrefix.length()
      ); // Trim space for the prefix on the end
      trimmedObjectName += childObjectPrefix; // Add on the end the unique object prefix (to ensure the trimmed name is still unique)
      componentName = prefix + trimmedObjectName + suffix;
    }
    return componentName;
  }

  private static String parseOrderByClause(
    String orderByClause,
    fflib_SObjectDescribe fields
  ) {
    List<Utilities.Ordering> fieldsToOrderBy = Utilities.parseOrderByClause(
      orderByClause
    );
    if (fieldsToOrderBy == null || fieldsToOrderBy.isEmpty()) {
      return null;
    }

    String parsedOrderByClause = '''';
    for (Utilities.Ordering orderByField : fieldsToOrderBy) {
      SObjectField sObjectField = fields.getField(orderByField.getField());
      if (sObjectField == null) {
        throw new Utilities.OrderByInvalidException(''Field does not exist.'');
      }
      // update name with describe info
      orderByField.setField(sObjectField.getDescribe().getName());

      // using toAsSpecifiedString so that we update the field name to proper describe info
      // but leave the rest of what was input unchanged.  If we called toString() we would
      // add fully qualified Order By Clause and we don''t want to add in portions of the clause
      // that the user didn''t provide in the first place.
      parsedOrderByClause +=
        (String.isBlank(parsedOrderByClause) ? '''' : '','') +
        orderByField.toAsSpecifiedString();
    }

    return parsedOrderByClause;
  }
}','3085997425.0','True','RollupSummaries','19014','Active');
INSERT INTO "ApexClass" VALUES(107,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Various queries for the Lookup Rollup Summary custom object and cusotm metadata object
 **/
public class RollupSummariesSelector {
  @TestVisible
  private CustomObjectSelector m_customObjectSelector;

  @TestVisible
  private CustomMetadataSelector m_customMetadataSelector;

  public RollupSummariesSelector() {
    this(false, false);
  }

  public RollupSummariesSelector(boolean enforceSecurity) {
    this(enforceSecurity, false);
  }

  public RollupSummariesSelector(boolean enforceSecurity, boolean forEdit) {
    // Dual selectors for querying custom object and custom metadata stores
    m_customObjectSelector = new CustomObjectSelector(enforceSecurity, forEdit);
    m_customMetadataSelector = new CustomMetadataSelector(
      enforceSecurity,
      forEdit
    );
  }

  /**
   * Returns all rollups for the given Id set (can contain either Custom Metadata Id'' or DeveloperName''s)
   **/
  public List<RollupSummary> selectById(Set<String> idSet) {
    List<RollupSummary> records = new List<RollupSummary>();
    records = m_customObjectSelector.selectById(idSet);
    records.addAll(m_customMetadataSelector.selectById(idSet));
    records.addAll(m_customMetadataSelector.selectByDeveloperName(idSet));
    return records;
  }

  /**
   * Returns active lookup rollup summary definitions for thr given calculation mode and child object
   **/
  public List<RollupSummary> selectActiveByChildObject(
    RollupSummaries.CalculationMode calculationMode,
    Set<String> childObjectNames
  ) {
    List<RollupSummary> records = new List<RollupSummary>();
    records = m_customObjectSelector.selectActiveByChildObject(
      calculationMode,
      childObjectNames
    );
    records.addAll(
      m_customMetadataSelector.selectActiveByChildObject(
        calculationMode,
        childObjectNames
      )
    );
    return records;
  }

  /**
   * Returns active lookup rollup summary definitions for thr given calculation modes and child object
   **/
  public List<RollupSummary> selectActiveByChildObject(
    List<RollupSummaries.CalculationMode> calculationModes,
    Set<String> childObjectNames
  ) {
    List<RollupSummary> records = new List<RollupSummary>();
    records = m_customObjectSelector.selectActiveByChildObject(
      calculationModes,
      childObjectNames
    );
    records.addAll(
      m_customMetadataSelector.selectActiveByChildObject(
        calculationModes,
        childObjectNames
      )
    );
    return records;
  }

  /**
   * Returns active lookup rollup summary definitions for the given rollup unique names
   **/
  public List<RollupSummary> selectActiveByUniqueName(Set<String> uniqueNames) {
    List<RollupSummary> records = new List<RollupSummary>();
    records = m_customObjectSelector.selectActiveByUniqueName(uniqueNames);
    records.addAll(
      m_customMetadataSelector.selectActiveByUniqueName(uniqueNames)
    );
    return records;
  }

  /**
   * Returns lookup rollup summary definitions for all fields
   **/
  public List<RollupSummary> selectAll() {
    List<RollupSummary> records = new List<RollupSummary>();
    records = m_customMetadataSelector.selectAll();
    records.addAll(m_customObjectSelector.selectAll());

    return records;
  }

  /**
   * Queries Custom Object store for rollups
   **/
  public class CustomObjectSelector extends fflib_SObjectSelector {
    public CustomObjectSelector(boolean enforceSecurity) {
      this(enforceSecurity, false);
    }

    public CustomObjectSelector(boolean enforceSecurity, boolean forEdit) {
      super(false, enforceSecurity, enforceSecurity);
    }

    public List<Schema.SObjectField> getSObjectFieldList() {
      return new List<Schema.SObjectField>{
        LookupRollupSummary__c.Name,
        LookupRollupSummary__c.Active__c,
        LookupRollupSummary__c.AggregateOperation__c,
        LookupRollupSummary__c.AggregateResultField__c,
        LookupRollupSummary__c.CalculationMode__c,
        LookupRollupSummary__c.ChildObject__c,
        LookupRollupSummary__c.ConcatenateDelimiter__c,
        LookupRollupSummary__c.FieldToAggregate__c,
        LookupRollupSummary__c.FieldToOrderBy__c,
        LookupRollupSummary__c.ParentObject__c,
        LookupRollupSummary__c.RelationshipCriteria__c,
        LookupRollupSummary__c.RelationshipCriteriaFields__c,
        LookupRollupSummary__c.RelationshipField__c,
        LookupRollupSummary__c.UniqueName__c,
        LookupRollupSummary__c.CalculationSharingMode__c,
        LookupRollupSummary__c.TestCode__c,
        LookupRollupSummary__c.TestCodeSeeAllData__c,
        LookupRollupSummary__c.AggregateAllRows__c,
        LookupRollupSummary__c.RowLimit__c
      };
    }

    public Schema.SObjectType getSObjectType() {
      return LookupRollupSummary__c.sObjectType;
    }

    public List<RollupSummary> selectById(Set<String> idSet) {
      Set<Id> recordIds = new Set<Id>();
      for (String idAsString : idSet)
        recordIds.add((Id) idAsString);
      return RollupSummary.toList(selectSObjectsById(recordIds));
    }

    /**
     * Returns active lookup rollup summary definitions for thr given calculation mode and child object
     **/
    public List<RollupSummary> selectActiveByChildObject(
      RollupSummaries.CalculationMode calculationMode,
      Set<String> childObjectNames
    ) {
      return selectActiveByChildObject(
        new List<RollupSummaries.CalculationMode>{ calculationMode },
        childObjectNames
      );
    }

    /**
     * Returns active lookup rollup summary definitions for thr given calculation modes and child object
     **/
    public List<RollupSummary> selectActiveByChildObject(
      List<RollupSummaries.CalculationMode> calculationModes,
      Set<String> childObjectNames
    ) {
      List<String> calculationModeNames = new List<String>();
      for (RollupSummaries.CalculationMode calculationMode : calculationModes)
        calculationModeNames.add(calculationMode.name());
      return RollupSummary.toList(
        Database.query(
          newQueryFactory()
            .setCondition(
              ''CalculationMode__c in :calculationModeNames and ChildObject__c in :childObjectNames and Active__c = true''
            )
            .addOrdering(
              LookupRollupSummary__c.ParentObject__c,
              fflib_QueryFactory.SortOrder.ASCENDING
            )
            .addOrdering(
              LookupRollupSummary__c.RelationshipField__c,
              fflib_QueryFactory.SortOrder.ASCENDING
            )
            .toSOQL()
        )
      );
    }

    /**
     * Returns active lookup rollup summary definitions for the given rollup unique names
     **/
    public List<RollupSummary> selectActiveByUniqueName(
      Set<String> uniqueNames
    ) {
      return RollupSummary.toList(
        Database.query(
          newQueryFactory()
            .setCondition(''UniqueName__c in :uniqueNames and Active__c = true'')
            .addOrdering(
              LookupRollupSummary__c.ParentObject__c,
              fflib_QueryFactory.SortOrder.ASCENDING
            )
            .addOrdering(
              LookupRollupSummary__c.RelationshipField__c,
              fflib_QueryFactory.SortOrder.ASCENDING
            )
            .toSOQL()
        )
      );
    }

    /**
     * Returns lookup rollup summary definitions for the given rollup unique names
     **/
    public List<RollupSummary> selectByUniqueName(Set<String> uniqueNames) {
      return RollupSummary.toList(
        Database.query(
          newQueryFactory()
            .setCondition(''UniqueName__c in :uniqueNames'')
            .addOrdering(
              LookupRollupSummary__c.ParentObject__c,
              fflib_QueryFactory.SortOrder.ASCENDING
            )
            .addOrdering(
              LookupRollupSummary__c.RelationshipField__c,
              fflib_QueryFactory.SortOrder.ASCENDING
            )
            .toSOQL()
        )
      );
    }

    /**
     * Select all
     **/
    public List<RollupSummary> selectAll() {
      return RollupSummary.toList(Database.query(newQueryFactory().toSOQL()));
    }
  }

  /**
   * Queries Custom Metadata store for rollups
   **/
  public virtual class CustomMetadataSelector extends fflib_SObjectSelector {
    private boolean forEdit = false;

    public CustomMetadataSelector(boolean enforceSecurity) {
      this(enforceSecurity, false);
    }

    public CustomMetadataSelector(boolean enforceSecurity, boolean forEdit) {
      super(false, enforceSecurity, enforceSecurity);
      this.forEdit = forEdit;
    }

    public List<Schema.SObjectField> getSObjectFieldList() {
      List<Schema.SObjectField> selectorFields = new List<Schema.SObjectField>{
        LookupRollupSummary2__mdt.Id,
        LookupRollupSummary2__mdt.Label,
        LookupRollupSummary2__mdt.DeveloperName,
        LookupRollupSummary2__mdt.Active__c,
        LookupRollupSummary2__mdt.AggregateOperation__c,
        LookupRollupSummary2__mdt.AggregateResultField__c,
        LookupRollupSummary2__mdt.CalculationMode__c,
        LookupRollupSummary2__mdt.ChildObject__c,
        LookupRollupSummary2__mdt.ConcatenateDelimiter__c,
        LookupRollupSummary2__mdt.FieldToAggregate__c,
        LookupRollupSummary2__mdt.FieldToOrderBy__c,
        LookupRollupSummary2__mdt.ParentObject__c,
        LookupRollupSummary2__mdt.RelationshipCriteria__c,
        LookupRollupSummary2__mdt.RelationshipCriteriaFields__c,
        LookupRollupSummary2__mdt.RelationshipField__c,
        LookupRollupSummary2__mdt.CalculationSharingMode__c,
        LookupRollupSummary2__mdt.TestCode__c,
        LookupRollupSummary2__mdt.TestCodeSeeAllData__c,
        LookupRollupSummary2__mdt.Description__c,
        LookupRollupSummary2__mdt.AggregateAllRows__c,
        LookupRollupSummary2__mdt.RowLimit__c
      };
      if (forEdit) {
        selectorFields.add(LookupRollupSummary2__mdt.TestCode2__c);
        selectorFields.add(LookupRollupSummary2__mdt.TestCodeParent__c);
      }

      return selectorFields;
    }

    public Schema.SObjectType getSObjectType() {
      return LookupRollupSummary2__mdt.sObjectType;
    }

    public List<RollupSummary> selectById(Set<String> idSet) {
      if (this.forEdit) {
        return RollupSummary.toList(
          this.getLookupRollupSummariesWithParameters(
            newQueryFactory().setCondition(''id in :tmpVar1'').toSOQL(),
            new List<Object>{ idSet }
          )
        );
      } else {
        List<RollupSummary> summaries = new List<RollupSummary>();
        List<SObject> records = new List<SObject>();
        for (String idVal : idSet) {
          SObject record = this.getLookupRollupSummaryByDeveloperNameOrId(
            idVal
          );
          if (record != null) {
            records.add(record);
          }
        }

        return RollupSummary.toList(records);
      }
    }

    public List<RollupSummary> selectByDeveloperName(
      Set<String> developerNames
    ) {
      String developerName = new List<String>(developerNames)[0];
      if (this.forEdit) {
        return RollupSummary.toList(
          this.getLookupRollupSummariesWithParameters(
            newQueryFactory().setCondition(''DeveloperName = :tmpVar1'').toSOQL(),
            new List<Object>{ developerName }
          )
        );
      } else {
        List<RollupSummary> summaries = new List<RollupSummary>();
        List<SObject> records = new List<SObject>();
        SObject record = this.getLookupRollupSummaryByDeveloperNameOrId(
          developerName
        );
        if (record != null) {
          records.add(
            this.getLookupRollupSummaryByDeveloperNameOrId(developerName)
          );
        }
        return RollupSummary.toList(records);
      }
    }

    /**
     * Returns active lookup rollup summary definitions for thr given calculation mode and child object
     **/
    public List<RollupSummary> selectActiveByChildObject(
      RollupSummaries.CalculationMode calculationMode,
      Set<String> childObjectNames
    ) {
      return selectActiveByChildObject(
        new List<RollupSummaries.CalculationMode>{ calculationMode },
        childObjectNames
      );
    }

    /**
     * Returns active lookup rollup summary definitions for thr given calculation modes and child object
     **/
    public List<RollupSummary> selectActiveByChildObject(
      List<RollupSummaries.CalculationMode> calculationModes,
      Set<String> childObjectNames
    ) {
      List<String> calculationModeNames = new List<String>();
      for (RollupSummaries.CalculationMode calculationMode : calculationModes)
        calculationModeNames.add(calculationMode.name());
      if (this.forEdit) {
        return RollupSummary.toList(
          this.getLookupRollupSummariesWithParameters(
            newQueryFactory()
              .setCondition(
                ''CalculationMode__c in :tmpVar1 and ChildObject__c in :tmpVar2 and Active__c = true''
              )
              .addOrdering(
                LookupRollupSummary2__mdt.ParentObject__c,
                fflib_QueryFactory.SortOrder.ASCENDING
              )
              .addOrdering(
                LookupRollupSummary2__mdt.RelationshipField__c,
                fflib_QueryFactory.SortOrder.ASCENDING
              )
              .toSOQL(),
            new List<Object>{ calculationModeNames, childObjectNames }
          )
        );
      } else {
        List<RollupSummary> summaries = RollupSummary.toList(
          this.getLookupRollupSummaries()
        );

        List<RollupSummary> filteredSummaries = new List<RollupSummary>();

        for (RollupSummary summary : summaries) {
          if (
            summary != null &&
            summary.Active &&
            calculationModeNames.contains(summary.CalculationMode) &&
            childObjectNames.contains(summary.ChildObject)
          ) {
            filteredSummaries.add(summary);
          }
        }

        return sortSummaries(
          filteredSummaries,
          ''ParentObject__c'',
          ''RelationshipField__c''
        );
      }
    }

    /**
     * Returns active lookup rollup summary definitions for the given rollup unique names
     **/
    public List<RollupSummary> selectActiveByUniqueName(
      Set<String> uniqueNames
    ) {
      if (this.forEdit) {
        return RollupSummary.toList(
          this.getLookupRollupSummariesWithParameters(
            newQueryFactory()
              .setCondition(''DeveloperName in :tmpVar1 and Active__c = true'')
              .addOrdering(
                LookupRollupSummary2__mdt.ParentObject__c,
                fflib_QueryFactory.SortOrder.ASCENDING
              )
              .addOrdering(
                LookupRollupSummary2__mdt.RelationshipField__c,
                fflib_QueryFactory.SortOrder.ASCENDING
              )
              .toSOQL(),
            new List<Object>{ uniqueNames }
          )
        );
      } else {
        List<RollupSummary> summaries = new List<RollupSummary>();
        List<SObject> records = new List<SObject>();
        for (String uniqueName : uniqueNames) {
          SObject record = getLookupRollupSummaryByDeveloperNameOrId(
            uniqueName
          );
          if (record != null && (Boolean) record.get(''Active__c'')) {
            records.add(record);
          }
        }

        return sortSummaries(
          RollupSummary.toList(records),
          ''ParentObject__c'',
          ''RelationshipField__c''
        );
      }
    }

    /**
     * Select all
     **/
    public List<RollupSummary> selectAll() {
      if (this.forEdit) {
        return RollupSummary.toList(
          this.getLookupRollupSummariesWithParameters(
            newQueryFactory()
              .addOrdering(
                LookupRollupSummary2__mdt.Label,
                fflib_QueryFactory.SortOrder.ASCENDING
              )
              .toSOQL(),
            new List<Object>()
          )
        );
      } else {
        List<RollupSummary> summaries = RollupSummary.toList(
          this.getLookupRollupSummaries()
        );

        return sortSummaries(summaries, ''Label'', null);
      }
    }

    protected virtual List<SObject> getLookupRollupSummariesWithParameters(
      String queryString,
      List<Object> tmpVars
    ) {
      //Executing dynamic SOQL requires any variable binding to be in the same
      //scope. We only ever use 2 variables in this class, so just hard coding
      //two temporary variables for the dynamic SOQL to run
      Object tmpVar1 = tmpVars.size() > 0 ? tmpVars[0] : null;
      Object tmpVar2 = tmpVars.size() > 1 ? tmpVars[1] : null;

      return Database.query(queryString);
    }

    protected virtual List<SObject> getLookupRollupSummaries() {
      return LookupRollupSummary2__mdt.getAll().values();
    }

    protected virtual SObject getLookupRollupSummaryByDeveloperNameOrId(
      String developerNameOrId
    ) {
      return LookupRollupSummary2__mdt.getInstance(developerNameOrId);
    }

    private List<RollupSummary> sortSummaries(
      List<RollupSummary> summaries,
      String sortField,
      String sortFieldSecondary
    ) {
      List<RollupSummaryComparable> rollupSummaryComparables = new List<RollupSummaryComparable>();
      for (RollupSummary summary : summaries) {
        rollupSummaryComparables.add(
          new RollupSummaryComparable(summary, sortField, sortFieldSecondary)
        );
      }

      rollupSummaryComparables.sort();

      List<RollupSummary> sortedSummaries = new List<RollupSummary>();

      for (RollupSummaryComparable comparable : rollupSummaryComparables) {
        sortedSummaries.add(comparable.summary);
      }

      return sortedSummaries;
    }
  }

  private class RollupSummaryComparable implements Comparable {
    private RollupSummary summary;
    private String fieldToSortOn;
    private String sortOrder;
    private String fieldToSortOnSecondary;

    private RollupSummaryComparable(
      RollupSummary summary,
      String fieldToSortOn,
      String fieldToSortOnSecondary
    ) {
      this.summary = summary;
      this.fieldToSortOn = fieldToSortOn;
      this.fieldToSortOnSecondary = fieldToSortOnSecondary;
    }

    public Integer compareTo(Object compareTo) {
      RollupSummaryComparable compareToSummary = (RollupSummaryComparable) compareTo;

      // The return value of 0 indicates that both elements are equal.
      Integer returnValue = 0;
      if (
        String.valueOf(this.summary.record.get(this.fieldToSortOn)) >
        String.valueOf(compareToSummary.summary.record.get(this.fieldToSortOn))
      ) {
        // Set return value to a positive value.
        returnValue = 1;
      } else if (
        String.valueOf(this.summary.record.get(this.fieldToSortOn)) <
        String.valueOf(compareToSummary.summary.record.get(this.fieldToSortOn))
      ) {
        // Set return value to a negative value.
        returnValue = -1;
      } else if (this.fieldToSortOnSecondary != null) {
        // First value the same, consider second value
        if (
          String.valueOf(this.summary.record.get(this.fieldToSortOnSecondary)) >
          String.valueOf(
            compareToSummary.summary.record.get(this.fieldToSortOnSecondary)
          )
        ) {
          return 1;
        } else if (
          String.valueOf(this.summary.record.get(this.fieldToSortOnSecondary)) <
          String.valueOf(
            compareToSummary.summary.record.get(this.fieldToSortOnSecondary)
          )
        ) {
          return -1;
        }
      }
      return returnValue;
    }
  }
}','2068999920.0','True','RollupSummariesSelector','17420','Active');
INSERT INTO "ApexClass" VALUES(108,'57.0','@isTest
private with sharing class RollupSummariesSelectorTest {
  @isTest
  private static void selectAll_notForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    Test.startTest();

    List<RollupSummary> summaries = metadataSelector.selectAll();

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesNotForEditCalled,
      ''No SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectAll_ForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(
      false,
      true
    );
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    Test.startTest();

    List<RollupSummary> summaries = metadataSelector.selectAll();

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesForEditCalled,
      ''SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectAll_ForEdit_queryValidation_MDT() {
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = new RollupSummariesSelector.CustomMetadataSelector(
      false,
      true
    );

    System.QueryException unexpectedEx;
    Test.startTest();

    try {
      metadataSelector.selectAll();
    } catch(System.QueryException ex) {
      unexpectedEx = ex;
    }

    Test.stopTest();

    System.assertEquals(
      null,
      unexpectedEx,
      ''SOQL query should not throw an exception''
    );
  }

  @isTest
  private static void selectAll_NotForEdit_SortOrder_MDT() {
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = new MockedCustomMetadataSelector(
      false
    );

    Test.startTest();
    List<RollupSummary> summaries = metadataSelector.selectAll();
    Test.stopTest();

    System.assertEquals(
      5,
      summaries.size(),
      ''All of the records should have been returned''
    );

    System.assertEquals(
      ''A Summary'',
      String.valueOf(summaries[0].record.get(''Label'')),
      ''The summaries should be returned in ASC order by Label''
    );
    System.assertEquals(
      ''B Summary'',
      String.valueOf(summaries[1].record.get(''Label'')),
      ''The summaries should be returned in ASC order by Label''
    );
    System.assertEquals(
      ''C Summary'',
      String.valueOf(summaries[2].record.get(''Label'')),
      ''The summaries should be returned in ASC order by Label''
    );
    System.assertEquals(
      ''D Summary'',
      String.valueOf(summaries[3].record.get(''Label'')),
      ''The summaries should be returned in ASC order by Label''
    );
    System.assertEquals(
      ''E Summary'',
      String.valueOf(summaries[4].record.get(''Label'')),
      ''The summaries should be returned in ASC order by Label''
    );
  }

  @isTest
  private static void selectActiveByUniqueName_notForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, false);
    rollupSelector.m_customMetadataSelector = mock;

    Test.startTest();

    List<RollupSummary> summaries = rollupSelector.selectActiveByUniqueName(
      new Set<String>{ ''A_Summary'' }
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummaryByDeveloperNameOrIdCalled,
      ''no SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectActiveByUniqueName_ForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false, true);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, true);
    rollupSelector.m_customMetadataSelector = mock;

    Test.startTest();

    //There are no records in the database, just use an empty Set to check against query limits
    List<RollupSummary> summaries = rollupSelector.selectActiveByUniqueName(
      new Set<String>()
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesForEditCalled,
      ''SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectActiveByUniqueName_NotForEdit_SortOrder() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, false);
    rollupSelector.m_customMetadataSelector = mock;

    Set<String> uniqueNames = new Set<String>{
      ''A_Summary'',
      ''B_Summary'',
      ''C_Summary'',
      ''D_Summary'',
      ''E_Summary''
    };

    Test.startTest();
    List<RollupSummary> summaries = rollupSelector.selectActiveByUniqueName(
      uniqueNames
    );
    Test.stopTest();

    System.assertEquals(
      4,
      summaries.size(),
      ''Only the active summaries should be returned''
    );

    System.assertEquals(
      ''D_Summary'',
      String.valueOf(summaries[0].record.get(''DeveloperName'')),
      ''The summaries should be returned in ASC order by ParentObject__c, and then RelationshipField__c''
    );
    System.assertEquals(
      ''A_Summary'',
      String.valueOf(summaries[1].record.get(''DeveloperName'')),
      ''The summaries should be returned in ASC order by ParentObject__c, and then RelationshipField__c''
    );
    System.assertEquals(
      ''B_Summary'',
      String.valueOf(summaries[2].record.get(''DeveloperName'')),
      ''The summaries should be returned in ASC order by ParentObject__c, and then RelationshipField__c''
    );
    System.assertEquals(
      ''E_Summary'',
      String.valueOf(summaries[3].record.get(''DeveloperName'')),
      ''The summaries should be returned in ASC order by ParentObject__c, and then RelationshipField__c''
    );
  }

  @isTest
  private static void selectActiveByChildObject_notForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, false);
    rollupSelector.m_customMetadataSelector = mock;

    Test.startTest();

    List<RollupSummary> summaries = rollupSelector.selectActiveByChildObject(
      RollupSummaries.CalculationMode.Realtime,
      new Set<String>()
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesNotForEditCalled,
      ''no SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectActiveByChildObject_ForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false, true);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, true);
    rollupSelector.m_customMetadataSelector = mock;

    Test.startTest();

    //There are no records in the database, just use an empty Set to check against query limits
    List<RollupSummary> summaries = rollupSelector.selectActiveByChildObject(
      RollupSummaries.CalculationMode.Realtime,
      new Set<String>()
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesForEditCalled,
      ''SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectActiveByChildObject_ForEdit_queryValidation_MDT() {
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = new RollupSummariesSelector.CustomMetadataSelector(
      false,
      true
    );

    System.QueryException unexpectedEx;
    Test.startTest();

    try {
      metadataSelector.selectActiveByChildObject(
        RollupSummaries.CalculationMode.Realtime,
        new Set<String>()
      );
    } catch(System.QueryException ex) {
      unexpectedEx = ex;
    }

    Test.stopTest();

    System.assertEquals(
      null,
      unexpectedEx,
      ''SOQL query should not throw an exception''
    );
  }

  @isTest
  private static void selectActiveByChildObject_NotForEdit_SortOrder_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, false);
    rollupSelector.m_customMetadataSelector = mock;

    Set<String> uniqueNames = new Set<String>{
      ''A_Summary'',
      ''B_Summary'',
      ''C_Summary'',
      ''D_Summary'',
      ''E_Summary''
    };

    Test.startTest();
    List<RollupSummary> summaries = metadataSelector.selectActiveByChildObject(
      RollupSummaries.CalculationMode.Realtime,
      new Set<String>{ ''X'', ''Y'' }
    );
    Test.stopTest();

    System.assertEquals(
      2,
      summaries.size(),
      ''Only the active summaries should be returned''
    );

    System.assertEquals(
      ''D_Summary'',
      String.valueOf(summaries[0].record.get(''DeveloperName'')),
      ''The summaries should be returned in ASC order by ParentObject__c, and then RelationshipField__c''
    );
    System.assertEquals(
      ''Realtime'',
      String.valueOf(summaries[0].record.get(''CalculationMode__c'')),
      ''Only the Realtime calculation modes should be returned''
    );

    System.assertEquals(
      ''A_Summary'',
      String.valueOf(summaries[1].record.get(''DeveloperName'')),
      ''The summaries should be returned in ASC order by ParentObject__c, and then RelationshipField__c''
    );
    System.assertEquals(
      ''Realtime'',
      String.valueOf(summaries[1].record.get(''CalculationMode__c'')),
      ''Only the Realtime calculation modes should be returned''
    );
  }

  @isTest
  private static void selectByDeveloperName_notForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    Test.startTest();

    List<RollupSummary> summaries = metadataSelector.selectByDeveloperName(
      new Set<String>{ ''A_Summary'' }
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummaryByDeveloperNameOrIdCalled,
      ''no SOQL queries should have been used''
    );
    System.assertEquals(
      ''A_Summary'',
      String.valueOf(summaries[0].record.get(''DeveloperName'')),
      ''The summary with the specified developer name should be returned''
    );
  }

  @isTest
  private static void selectByDeveloperName_ForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(
      false,
      true
    );
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    Test.startTest();

    //There are no records in the database, just use an empty Set to check against query limits
    List<RollupSummary> summaries = metadataSelector.selectByDeveloperName(
      new Set<String>{ ''A_Summary'' }
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesForEditCalled,
      ''SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectByDeveloperName_ForEdit_queryValidation_MDT() {
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = new RollupSummariesSelector.CustomMetadataSelector(
      false,
      true
    );

    System.QueryException unexpectedEx;
    Test.startTest();

    try {
      metadataSelector.selectByDeveloperName(
        new Set<String>{ ''A_Summary'' }
      );
    } catch(System.QueryException ex) {
      unexpectedEx = ex;
    }

    Test.stopTest();

    System.assertEquals(
      null,
      unexpectedEx,
      ''SOQL query should not throw an exception''
    );
  }

  @isTest
  private static void selectById_notForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, false);
    rollupSelector.m_customMetadataSelector = mock;
    String idVal = mock.summariesByDeveloperName.get(''D_Summary'').Id;

    Test.startTest();

    List<RollupSummary> summaries = rollupSelector.selectById(
      new Set<String>{ idVal }
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummaryByDeveloperNameOrIdCalled,
      ''no SOQL queries should have been used''
    );
    System.assertEquals(
      ''D_Summary'',
      String.valueOf(summaries[0].record.get(''DeveloperName'')),
      ''The summary with the specified developer name should be returned''
    );
  }

  @isTest
  private static void selectById_ForEdit_MDT() {
    MockedCustomMetadataSelector mock = new MockedCustomMetadataSelector(false, true);
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = mock;

    RollupSummariesSelector rollupSelector = new RollupSummariesSelector(false, true);
    rollupSelector.m_customMetadataSelector = mock;

    Test.startTest();

    //There are no records in the database, just use an empty Set to check against query limits
    List<RollupSummary> summaries = rollupSelector.selectById(
      new Set<String>{ ''00X00000000000000D'' }
    );

    Test.stopTest();

    //No query rows exist in org and query invocations not called. Just check that correct method is used
    System.assert(
      mock.getLookupRollupSummariesForEditCalled,
      ''SOQL queries should have been used''
    );
  }

  @isTest
  private static void selectById_ForEdit_queryValidation_MDT() {
    RollupSummariesSelector.CustomMetadataSelector metadataSelector = new RollupSummariesSelector.CustomMetadataSelector(
      false,
      true
    );

    System.QueryException unexpectedEx;
    Test.startTest();

    try {
      metadataSelector.selectById(
        new Set<String>{ ''00X00000000000000D'' }
      );
    } catch(System.QueryException ex) {
      unexpectedEx = ex;
    }

    Test.stopTest();

    System.assertEquals(
      null,
      unexpectedEx,
      ''SOQL query should not throw an exception''
    );
  }


  private class MockedCustomMetadataSelector extends RollupSummariesSelector.CustomMetadataSelector {
    Boolean getLookupRollupSummariesForEditCalled = false;
    Boolean getLookupRollupSummariesNotForEditCalled = false;
    Boolean getLookupRollupSummaryByDeveloperNameOrIdCalled = false;
    String prefix = LookupRollupSummary2__mdt.sObjectType.getDescribe()
      .getKeyPrefix();
    Map<String, LookupRollupSummary2__mdt> summariesByDeveloperName = new Map<String, LookupRollupSummary2__mdt>{
      ''D_Summary'' => new LookupRollupSummary2__mdt(
        Id = prefix + ''00000000000000D'',
        Label = ''D Summary'',
        DeveloperName = ''D_Summary'',
        ParentObject__c = ''A'',
        ChildObject__c = ''X'',
        RelationshipField__c = ''1'',
        CalculationMode__c = ''Realtime'',
        Active__c = true
      ),
      ''A_Summary'' => new LookupRollupSummary2__mdt(
        Id = prefix + ''00000000000000A'',
        Label = ''A Summary'',
        DeveloperName = ''A_Summary'',
        ParentObject__c = ''B'',
        ChildObject__c = ''X'',
        RelationshipField__c = ''1'',
        CalculationMode__c = ''Realtime'',
        Active__c = true
      ),
      ''C_Summary'' => new LookupRollupSummary2__mdt(
        Id = prefix + ''00000000000000C'',
        Label = ''C Summary'',
        DeveloperName = ''C_Summary'',
        ParentObject__c = ''A'',
        ChildObject__c = ''Y'',
        RelationshipField__c = ''2'',
        CalculationMode__c = ''Realtime'',
        Active__c = false
      ),
      ''B_Summary'' => new LookupRollupSummary2__mdt(
        Id = prefix + ''00000000000000B'',
        Label = ''B Summary'',
        DeveloperName = ''B_Summary'',
        ParentObject__c = ''B'',
        ChildObject__c = ''Y'',
        RelationshipField__c = ''2'',
        CalculationMode__c = ''Developer'',
        Active__c = true
      ),
      ''E_Summary'' => new LookupRollupSummary2__mdt(
        Id = prefix + ''00000000000000E'',
        Label = ''E Summary'',
        DeveloperName = ''E_Summary'',
        ParentObject__c = ''B'',
        ChildObject__c = ''Z'',
        RelationshipField__c = ''3'',
        CalculationMode__c = ''Process_Builder'',
        Active__c = true
      )
    };

    Map<String, LookupRollupSummary2__mdt> summariesById = new Map<String, LookupRollupSummary2__mdt>{
      summariesByDeveloperName.get(''D_Summary'')
        .Id => summariesByDeveloperName.get(''D_Summary''),
      summariesByDeveloperName.get(''A_Summary'')
        .Id => summariesByDeveloperName.get(''A_Summary''),
      summariesByDeveloperName.get(''C_Summary'')
        .Id => summariesByDeveloperName.get(''C_Summary''),
      summariesByDeveloperName.get(''B_Summary'')
        .Id => summariesByDeveloperName.get(''B_Summary''),
      summariesByDeveloperName.get(''E_Summary'')
        .Id => summariesByDeveloperName.get(''E_Summary'')
    };

    public MockedCustomMetadataSelector(boolean enforceSecurity) {
      super(enforceSecurity);
    }

    private MockedCustomMetadataSelector(
      boolean enforceSecurity,
      boolean forEdit
    ) {
      super(enforceSecurity, forEdit);
    }

    protected override List<SObject> getLookupRollupSummariesWithParameters(
      String query,
      List<Object> tmpVars
    ) {
      this.getLookupRollupSummariesForEditCalled = true;
      return this.summariesByDeveloperName.values();
    }

    protected override List<SObject> getLookupRollupSummaries() {
      this.getLookupRollupSummariesNotForEditCalled = true;
      return this.summariesByDeveloperName.values();
    }

    protected override SObject getLookupRollupSummaryByDeveloperNameOrId(
      String developerNameOrId
    ) {
      this.getLookupRollupSummaryByDeveloperNameOrIdCalled = true;
      if (this.summariesByDeveloperName.get(developerNameOrId) != null) {
        return this.summariesByDeveloperName.get(developerNameOrId);
      } else if (this.summariesById.get(developerNameOrId) != null) {
        return this.summariesById.get(developerNameOrId);
      } else {
        return null;
      }
    }
  }
}','3273966890.0','False','RollupSummariesSelectorTest','17542','Active');
INSERT INTO "ApexClass" VALUES(109,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private class RollupSummariesTest {
  // TODO: Write a test to validate the criteria fields validation
  // ...

  // TODO: Write a test to validate the criteria fields are specified when criteria is specified
  // ...

  /**
   * Issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/108
   **/
  private testMethod static void testBadCriteria() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = ''StageName Equals Won'';
    rollupSummary.RelationShipCriteriaFields__c = ''StageName'';
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Relationship Criteria \''StageName Equals Won\'' is not valid, see SOQL documentation http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_conditionexpression.htm, error is \''unexpected token: \''Equals\''\'''',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteria__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  /**
   * Issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/115
   **/
  private testMethod static void testInsertBadChildBigName() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Max Birthday for Contacts related to an Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''BadBadBadBadBadBadBadBadBadBad'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''LastCURequestDate'';
    rollupSummary.AggregateOperation__c = ''Count'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.RelationshipCriteriaFields__c = ''Bad'';
    rollupSummary.Active__c = false;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Object does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.ChildObject__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  /**
   * Issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/212
   **/
  private testMethod static void testUpdateBadChildBigName() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    String rsId = fflib_IDGenerator.generate(
      LookupRollupSummary__c.SObjectType
    );

    LookupRollupSummary__c oldRollupSummary = new LookupRollupSummary__c(
      Id = rsId
    );
    oldRollupSummary.Name = ''Max Birthday for Contacts related to an Account'';
    oldRollupSummary.ParentObject__c = ''Account'';
    oldRollupSummary.ChildObject__c = ''Contact'';
    oldRollupSummary.RelationShipField__c = ''AccountId'';
    oldRollupSummary.RelationShipCriteria__c = null;
    oldRollupSummary.FieldToAggregate__c = ''LastCURequestDate'';
    oldRollupSummary.AggregateOperation__c = ''Count'';
    oldRollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    oldRollupSummary.Active__c = false;
    oldRollupSummary.CalculationMode__c = ''Realtime'';

    LookupRollupSummary__c newRollupSummary = oldRollupSummary.clone(
      true,
      true,
      true,
      true
    );
    newRollupSummary.ChildObject__c = ''BadBadBadBadBadBadBadBadBadBad'';
    fflib_SObjectDomain.Test.Database.onUpdate(
      new List<LookupRollupSummary__c>{ newRollupSummary },
      new Map<Id, SObject>{ oldRollupSummary.Id => oldRollupSummary }
    );

    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Object does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.ChildObject__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  /**
   * Issue https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/97
   **/
  private testMethod static void testInsertBadChildBadCriteria() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Max Birthday for Contacts related to an Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Bad'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''LastCURequestDate'';
    rollupSummary.AggregateOperation__c = ''Count'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.RelationshipCriteriaFields__c = ''Bad'';
    rollupSummary.Active__c = false;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Object does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.ChildObject__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertActiveValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Last Lead raised for this Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Lead'';
    rollupSummary.RelationShipField__c = ''OwnerId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Name'';
    rollupSummary.AggregateOperation__c = ''Last'';
    rollupSummary.AggregateResultField__c = ''Description'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Apex Trigger '' +
      RollupSummaries.makeTriggerName(new RollupSummary(rollupSummary)) +
      '' has not been deployed. Click Manage Child Trigger and try again.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.Active__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertParentObjectValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''AccountX'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Object does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.ParentObject__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertChildObjectValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''OpportunityX'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Object does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.ChildObject__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertRelationshipFieldValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountIdX'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Field does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipField__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertFieldToAggregateValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''AmountX'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Field does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.FieldToAggregate__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertFieldToOrderByValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.FieldToOrderBy__c = ''AmountX'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Field does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.FieldToOrderBy__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertFieldToOrderByInvalidClauseValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.FieldToOrderBy__c = ''Amount ASC NULLS BAD'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Invalid order by clause.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.FieldToOrderBy__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertAggregateResultFieldValidation() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenueX'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Field does not exist.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.AggregateResultField__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }

  private testMethod static void testInsertBadFieldTypesStringNotValid() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Name'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Only Date/DateTime/Time/Numeric fields are allowed for Sum, Max, Min and Avg'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      rollupSummary,
      ((fflib_SObjectDomain.ObjectError) fflib_SObjectDomain.Errors.getAll()[0])
        .record
    );
  }

  private testMethod static void testInsertBadFieldTypeSumNotValid() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''CloseDate'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''SLAExpirationDate__c'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Sum/Avg doesnt looks like valid for dates ! Still want, then implement the IRollerCoaster yourself and change this class as required.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      rollupSummary,
      ((fflib_SObjectDomain.ObjectError) fflib_SObjectDomain.Errors.getAll()[0])
        .record
    );
  }

  private testMethod static void testTriggerAndTestClassNaming() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    String componentPrefix = Utilities.componentPrefix();
    String objectPrefix = Utilities.objectPrefix();
    System.assertEquals(
      componentPrefix + ''LeadTrigger'',
      RollupSummaries.makeTriggerName(
        new RollupSummary(new LookupRollupSummary__c(ChildObject__c = ''Lead''))
      )
    );
    System.assertEquals(
      componentPrefix + ''LeadTest'',
      RollupSummaries.makeTriggerTestName(
        new RollupSummary(new LookupRollupSummary__c(ChildObject__c = ''Lead''))
      )
    );
    System.assertEquals(
      componentPrefix + ''pse_AssignmentTrigger'',
      RollupSummaries.makeTriggerName(
        new RollupSummary(
          new LookupRollupSummary__c(ChildObject__c = ''pse__Assignment__c'')
        )
      )
    );
    System.assertEquals(
      componentPrefix + ''pse_AssignmentTest'',
      RollupSummaries.makeTriggerTestName(
        new RollupSummary(
          new LookupRollupSummary__c(ChildObject__c = ''pse__Assignment__c'')
        )
      )
    );
    System.assertEquals(
      componentPrefix + ''MyCustomObjectTrigger'',
      RollupSummaries.makeTriggerName(
        new RollupSummary(
          new LookupRollupSummary__c(ChildObject__c = ''MyCustomObject__c'')
        )
      )
    );
    System.assertEquals(
      componentPrefix + ''MyCustomObjectTest'',
      RollupSummaries.makeTriggerTestName(
        new RollupSummary(
          new LookupRollupSummary__c(ChildObject__c = ''MyCustomObject__c'')
        )
      )
    );

    String dlrsKeyPrefix = DeclarativeLookupRollupSummaries__c.sObjectType.getDescribe()
      .getKeyPrefix();
    // Test RollupSummaries.calculateComponentName directly so we can override the maxComponentNameLength
    System.assertEquals(
      componentPrefix +
      componentPrefix +
      ''DeclarativeLookupRollupSu'' +
      dlrsKeyPrefix +
      ''Trigger'',
      RollupSummaries.calculateComponentName(
        objectPrefix + ''DeclarativeLookupRollupSummaries__c'',
        ''Trigger'',
        35 + 2 * componentPrefix.length()
      )
    );
    System.assertEquals(
      componentPrefix +
      componentPrefix +
      ''DeclarativeLookupRollupSumma'' +
      dlrsKeyPrefix +
      ''Test'',
      RollupSummaries.calculateComponentName(
        objectPrefix + ''DeclarativeLookupRollupSummaries__c'',
        ''Test'',
        35 + 2 * componentPrefix.length()
      )
    );
  }

  private testMethod static void testRelationshipCriteriaFieldsValidationSingle() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = ''Stage = \''Won\'''';
    rollupSummary.RelationShipCriteriaFields__c = ''Stage'';
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(2, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Field Stage does not exist on the child object.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteriaFields__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
    System.assertEquals(
      ''Relationship Criteria \''Stage = \''Won\''\'' is not valid, see SOQL documentation http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_conditionexpression.htm, error is \''No such column \''Stage\'' on entity \''Opportunity\''. If you are attempting to use a custom field, be sure to append the \''__c\'' after the custom field name. Please reference your WSDL or the describe call for the appropriate names.\'''',
      fflib_SObjectDomain.Errors.getAll()[1].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteria__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[1])
        .field
    );
  }

  private testMethod static void testRelationshipCriteriaFieldsValidationMulti() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = ''Stage = \''Won\'''';
    rollupSummary.RelationShipCriteriaFields__c = ''Stage\r\nAnother'';
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(2, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Fields Stage,Another do not exist on the child object.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteriaFields__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
    System.assertEquals(
      ''Relationship Criteria \''Stage = \''Won\''\'' is not valid, see SOQL documentation http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_conditionexpression.htm, error is \''No such column \''Stage\'' on entity \''Opportunity\''. If you are attempting to use a custom field, be sure to append the \''__c\'' after the custom field name. Please reference your WSDL or the describe call for the appropriate names.\'''',
      fflib_SObjectDomain.Errors.getAll()[1].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteria__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[1])
        .field
    );
  }

  private testMethod static void testRelationshipCriteriaFieldsValidationMultiViaMDT() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = ''Stage = \''Won\'''';
    rollupSummary.RelationShipCriteriaFields__c = ''Stage\nAnother'';
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(2, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Fields Stage,Another do not exist on the child object.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteriaFields__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
    System.assertEquals(
      ''Relationship Criteria \''Stage = \''Won\''\'' is not valid, see SOQL documentation http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_conditionexpression.htm, error is \''No such column \''Stage\'' on entity \''Opportunity\''. If you are attempting to use a custom field, be sure to append the \''__c\'' after the custom field name. Please reference your WSDL or the describe call for the appropriate names.\'''',
      fflib_SObjectDomain.Errors.getAll()[1].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RelationShipCriteria__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[1])
        .field
    );
  }

  private testMethod static void testInsertCountByCloseDateNoErrors() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''CloseDate'';
    rollupSummary.AggregateOperation__c = ''Count'';
    rollupSummary.AggregateResultField__c = ''SLAExpirationDate__c'';
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(0, fflib_SObjectDomain.Errors.getAll().size());
  }

  private testMethod static void testUseOfRowLimitOnSum() {
    // Test supported?
    if (!TestContext.isSupported())
      return;

    LookupRollupSummary__c rollupSummary = new LookupRollupSummary__c();
    rollupSummary.Name = ''Total Opportunities into Annual Revenue on Account'';
    rollupSummary.ParentObject__c = ''Account'';
    rollupSummary.ChildObject__c = ''Opportunity'';
    rollupSummary.RelationShipField__c = ''AccountId'';
    rollupSummary.RelationShipCriteria__c = null;
    rollupSummary.FieldToAggregate__c = ''Amount'';
    rollupSummary.AggregateOperation__c = ''Sum'';
    rollupSummary.AggregateResultField__c = ''AnnualRevenue'';
    rollupSummary.RowLimit__c = 10;
    rollupSummary.Active__c = true;
    rollupSummary.CalculationMode__c = ''Realtime'';
    fflib_SObjectDomain.Test.Database.onInsert(
      new List<LookupRollupSummary__c>{ rollupSummary }
    );
    fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
    System.assertEquals(1, fflib_SObjectDomain.Errors.getAll().size());
    System.assertEquals(
      ''Row Limit is only supported on Last and Concatentate operators.'',
      fflib_SObjectDomain.Errors.getAll()[0].message
    );
    System.assertEquals(
      LookupRollupSummary__c.RowLimit__c,
      ((fflib_SObjectDomain.FieldError) fflib_SObjectDomain.Errors.getAll()[0])
        .field
    );
  }
}','1479314912.0','False','RollupSummariesTest','29934','Active');
INSERT INTO "ApexClass" VALUES(110,'57.0','/**
 * Copyright (c), Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Wrapper class abstracts away from the underlying storage approached used for the rollup, this allows
 *   for the tools domain and service layer logic to work regardless of how the rollup summary is stored
 *
 *   TODO: I may implement this in due course differently, to use a small factory pattern and
 *         leverage explicit references to the Custom Object or Custom Metadata fields, likely
 *         faster and also ensures the compiler is aware of the references
 **/
public class RollupSummary {
  /**
   * Provides access to the wrapped SObject
   **/
  public SObject Record { get; private set; }

  /**
   * Provides a means to log field level errors against the wrapped record
   **/
  public RecordMetadata Fields { get; private set; }

  /**
   * Record level error message
   **/
  public String Error { get; private set; }

  /**
   * Wraps the given LookupRollupSummary__c or LookupRollupSummary2__c
   **/
  public RollupSummary(SObject record) {
    this.Record = migrate(record);
    this.Fields = new RecordMetadata(this);
  }

  public String Id {
    get {
      return (String) Record.get(''Id'');
    }
  }

  public String Name {
    get {
      return (String) Record.get(
        Record instanceof LookupRollupSummary__c ? ''Name'' : ''Label''
      );
    }
    set {
      Record.put(''Name'', value);
    }
  }

  public Boolean Active {
    get {
      return (Boolean) Record.get(''Active__c'');
    }
    set {
      Record.put(''Active__c'', value);
    }
  }

  public String AggregateOperation {
    get {
      return (String) Record.get(''AggregateOperation__c'');
    }
    set {
      Record.put(''AggregateOperation__c'', value);
    }
  }

  public String AggregateResultField {
    get {
      return (String) Record.get(''AggregateResultField__c'');
    }
    set {
      Record.put(''AggregateResultField__c'', value);
    }
  }

  public String CalculationMode {
    get {
      return (String) Record.get(''CalculationMode__c'');
    }
    set {
      Record.put(''CalculationMode__c'', value);
    }
  }

  public String CalculationSharingMode {
    get {
      return (String) Record.get(''CalculationSharingMode__c'');
    }
    set {
      Record.put(''CalculationSharingMode__c'', value);
    }
  }

  public String ChildObject {
    get {
      return (String) Record.get(''ChildObject__c'');
    }
    set {
      Record.put(''ChildObject__c'', value);
    }
  }

  public String ConcatenateDelimiter {
    get {
      return (String) Record.get(''ConcatenateDelimiter__c'');
    }
    set {
      Record.put(''ConcatenateDelimiter__c'', value);
    }
  }

  public String Description {
    get {
      return (String) Record.get(''Description__c'');
    }
    set {
      Record.put(''Description__c'', value);
    }
  }

  public String FieldToAggregate {
    get {
      return (String) Record.get(''FieldToAggregate__c'');
    }
    set {
      Record.put(''FieldToAggregate__c'', value);
    }
  }

  public String FieldToOrderBy {
    get {
      return (String) Record.get(''FieldToOrderBy__c'');
    }
    set {
      Record.put(''FieldToOrderBy__c'', value);
    }
  }

  public String UniqueName {
    get {
      return (String) Record.get(
        Record instanceof LookupRollupSummary__c
          ? ''UniqueName__c''
          : ''DeveloperName''
      );
    }
    set {
      Record.put(
        Record instanceof LookupRollupSummary__c
          ? ''UniqueName__c''
          : ''DeveloperName'',
        value
      );
    }
  }

  public String ParentObject {
    get {
      return (String) Record.get(''ParentObject__c'');
    }
    set {
      Record.put(''ParentObject__c'', value);
    }
  }

  public String RelationshipCriteria {
    get {
      return (String) Record.get(''RelationshipCriteria__c'');
    }
    set {
      Record.put(''RelationshipCriteria__c'', value);
    }
  }

  public String RelationshipCriteriaFields {
    get {
      return (String) Record.get(''RelationshipCriteriaFields__c'');
    }
    set {
      Record.put(''RelationshipCriteriaFields__c'', value);
    }
  }

  public String RelationshipField {
    get {
      return (String) Record.get(''RelationshipField__c'');
    }
    set {
      Record.put(''RelationshipField__c'', value);
    }
  }

  public String TestCode {
    get {
      return (String) Record.get(
        Record instanceof LookupRollupSummary2__mdt
          ? ''TestCode2__c''
          : ''TestCode__c''
      );
    }
    set {
      Record.put(
        Record instanceof LookupRollupSummary2__mdt
          ? ''TestCode2__c''
          : ''TestCode__c'',
        value
      );
    }
  }

  public String TestCodeParent {
    get {
      if (Record instanceof LookupRollupSummary2__mdt) {
        return (String) Record.get(''TestCodeParent__c'');
      } else {
        return null;
      }
    }
    set {
      if (Record instanceof LookupRollupSummary2__mdt) {
        Record.put(''TestCodeParent__c'', value);
      }
    }
  }

  public Boolean TestCodeSeeAllData {
    get {
      return (Boolean) Record.get(''TestCodeSeeAllData__c'');
    }
    set {
      Record.put(''TestCodeSeeAllData__c'', value);
    }
  }

  public Boolean AggregateAllRows {
    get {
      return (Boolean) Record.get(''AggregateAllRows__c'');
    }
    set {
      Record.put(''AggregateAllRows__c'', value);
    }
  }

  public Decimal RowLimit {
    get {
      return (Decimal) Record.get(''RowLimit__c'');
    }
    set {
      Record.put(''RowLimit__c'', value);
    }
  }

  public void addError(String errorMessage) {
    // Store the error message
    Error = errorMessage;

    // For Custom Object backed Rollup Summaries utilise SObject.addError
    if (Record instanceof LookupRollupSummary__c) {
      LookupRollupSummary__c rollupSummaryRecord = (LookupRollupSummary__c) Record;
      rollupSummaryRecord.addError(errorMessage);
    }
  }

  public Boolean equals(Object obj) {
    return Record == obj;
  }

  public Integer hashCode() {
    return System.hashCode(Record);
  }

  /**
   * Class exposes type safe instances of FieldData to capture errors
   **/
  public class RecordMetadata {
    public RollupSummary RollupSummary { get; private set; }

    public List<String> Errors { get; private set; }

    private RecordMetadata(RollupSummary rollupSummary) {
      this.RollupSummary = rollupSummary;
      this.Errors = new List<String>();
    }

    public final FieldData Active = new FieldData(this);
    public final FieldData AggregateOperation = new FieldData(this);
    public final FieldData AggregateResultField = new FieldData(this);
    public final FieldData CalculationMode = new FieldData(this);
    public final FieldData CalculationSharingMode = new FieldData(this);
    public final FieldData ChildObject = new FieldData(this);
    public final FieldData ConcatenateDelimiter = new FieldData(this);
    public final FieldData Description = new FieldData(this);
    public final FieldData FieldToAggregate = new FieldData(this);
    public final FieldData FieldToOrderBy = new FieldData(this);
    public final FieldData UniqueName = new FieldData(this);
    public final FieldData ParentObject = new FieldData(this);
    public final FieldData RelationshipCriteria = new FieldData(this);
    public final FieldData RelationshipCriteriaFields = new FieldData(this);
    public final FieldData RelationshipField = new FieldData(this);
    public final FieldData TestCode = new FieldData(this);
    public final FieldData TestCodeSeeAllData = new FieldData(this);
    public final FieldData AggregateAllRows = new FieldData(this);
    public final FieldData RowLimit = new FieldData(this);
  }

  /**
   * Class provides a wrapper around a given record field data, error messages
   **/
  public class FieldData {
    public RecordMetadata RecordMetadata { get; private set; }

    public FieldData(RecordMetadata recordMetadata) {
      this.RecordMetadata = recordMetadata;
    }

    public void addError(String errorMessage) {
      // Field in error?
      String fieldLabelInError;
      if (this === RecordMetadata.Active) {
        fieldLabelInError = LookupRollupSummary__c.Active__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.AggregateOperation) {
        fieldLabelInError = LookupRollupSummary__c.AggregateOperation__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.AggregateResultField) {
        fieldLabelInError = LookupRollupSummary__c.AggregateResultField__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.CalculationMode) {
        fieldLabelInError = LookupRollupSummary__c.CalculationMode__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.CalculationSharingMode) {
        fieldLabelInError = LookupRollupSummary__c.CalculationSharingMode__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.ChildObject) {
        fieldLabelInError = LookupRollupSummary__c.ChildObject__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.ConcatenateDelimiter) {
        fieldLabelInError = LookupRollupSummary__c.ConcatenateDelimiter__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.Description) {
        fieldLabelInError = LookupRollupSummary__c.Description__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.FieldToAggregate) {
        fieldLabelInError = LookupRollupSummary__c.FieldToAggregate__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.FieldToOrderBy) {
        fieldLabelInError = LookupRollupSummary__c.FieldToOrderBy__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.UniqueName) {
        fieldLabelInError = LookupRollupSummary__c.UniqueName__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.ParentObject) {
        fieldLabelInError = LookupRollupSummary__c.ParentObject__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.RelationshipCriteria) {
        fieldLabelInError = LookupRollupSummary__c.RelationshipCriteria__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.RelationshipCriteriaFields) {
        fieldLabelInError = LookupRollupSummary__c.RelationshipCriteriaFields__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.RelationshipField) {
        fieldLabelInError = LookupRollupSummary__c.RelationshipField__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.TestCode) {
        fieldLabelInError = LookupRollupSummary__c.TestCode__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.TestCodeSeeAllData) {
        fieldLabelInError = LookupRollupSummary__c.TestCodeSeeAllData__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.AggregateAllRows) {
        fieldLabelInError = LookupRollupSummary__c.AggregateAllRows__c.getDescribe()
          .getLabel();
      } else if (this === RecordMetadata.RowLimit) {
        fieldLabelInError = LookupRollupSummary__c.RowLimit__c.getDescribe()
          .getLabel();
      }

      // Store error
      RecordMetadata.Errors.add(fieldLabelInError + '': '' + errorMessage);

      // For Custom Object backed Rollup Summaries utilise SObject.addError
      if (
        RecordMetadata.RollupSummary.Record instanceof LookupRollupSummary__c
      ) {
        LookupRollupSummary__c customObjectRecord = (LookupRollupSummary__c) RecordMetadata.RollupSummary.Record;
        // Route the error accordingly
        if (this === RecordMetadata.Active) {
          customObjectRecord.Active__c.addError(errorMessage);
          fieldLabelInError = LookupRollupSummary__c.Active__c.getDescribe()
            .getLabel();
        } else if (this === RecordMetadata.AggregateOperation) {
          customObjectRecord.AggregateOperation__c.addError(errorMessage);
        } else if (this === RecordMetadata.AggregateResultField) {
          customObjectRecord.AggregateResultField__c.addError(errorMessage);
        } else if (this === RecordMetadata.CalculationMode) {
          customObjectRecord.CalculationMode__c.addError(errorMessage);
        } else if (this === RecordMetadata.CalculationSharingMode) {
          customObjectRecord.CalculationSharingMode__c.addError(errorMessage);
        } else if (this === RecordMetadata.ChildObject) {
          customObjectRecord.ChildObject__c.addError(errorMessage);
        } else if (this === RecordMetadata.ConcatenateDelimiter) {
          customObjectRecord.ConcatenateDelimiter__c.addError(errorMessage);
        } else if (this === RecordMetadata.Description) {
          customObjectRecord.Description__c.addError(errorMessage);
        } else if (this === RecordMetadata.FieldToAggregate) {
          customObjectRecord.FieldToAggregate__c.addError(errorMessage);
        } else if (this === RecordMetadata.FieldToOrderBy) {
          customObjectRecord.FieldToOrderBy__c.addError(errorMessage);
        } else if (this === RecordMetadata.UniqueName) {
          customObjectRecord.UniqueName__c.addError(errorMessage);
        } else if (this === RecordMetadata.ParentObject) {
          customObjectRecord.ParentObject__c.addError(errorMessage);
        } else if (this === RecordMetadata.RelationshipCriteria) {
          customObjectRecord.RelationshipCriteria__c.addError(errorMessage);
        } else if (this === RecordMetadata.RelationshipCriteriaFields) {
          customObjectRecord.RelationshipCriteriaFields__c.addError(
            errorMessage
          );
        } else if (this === RecordMetadata.RelationshipField) {
          customObjectRecord.RelationshipField__c.addError(errorMessage);
        } else if (this === RecordMetadata.TestCode) {
          customObjectRecord.TestCode__c.addError(errorMessage);
        } else if (this === RecordMetadata.TestCodeSeeAllData) {
          customObjectRecord.TestCodeSeeAllData__c.addError(errorMessage);
        } else if (this === RecordMetadata.AggregateAllRows) {
          customObjectRecord.AggregateAllRows__c.addError(errorMessage);
        } else if (this === RecordMetadata.RowLimit) {
          customObjectRecord.RowLimit__c.addError(errorMessage);
        }
      }
    }
  }

  public static List<RollupSummary> toList(List<SObject> records) {
    List<RollupSummary> summaries = new List<RollupSummary>();
    for (SObject record : records) {
      summaries.add(new RollupSummary(record));
    }
    return summaries;
  }

  public static Map<String, RollupSummary> toMap(List<RollupSummary> records) {
    Map<String, RollupSummary> summariesById = new Map<String, RollupSummary>();
    for (RollupSummary record : records) {
      summariesById.put(record.Id, record);
    }
    return summariesById;
  }

  /**
   * Migrate in memory representation to latest by migrating values from old fields to new ones accordingly
   *   (this approach makes code elsewhere in the tool simpler as it only deals with the latest fields)
   **/
  public static SObject migrate(SObject rollup) {
    // No migrations for legacy Custom Object based rollups presently
    if (rollup instanceof LookupRollupSummary__c) {
      return rollup;
    }
    // Perform various field migrations for Custom Metadata based rollups (done via JSON, since Apex cannot write to MDT fields)
    String jsonRollup = JSON.serialize(rollup, true);
    Map<String, Object> jsonParsed = (Map<String, Object>) JSON.deserializeUntyped(
      jsonRollup
    );
    Map<String, Object> jsonNew = new Map<String, Object>();
    for (String field : jsonParsed.keySet()) {
      // Migrate TestCode__c to TestCode2__c
      if (field.endsWith(''TestCode__c'')) {
        jsonNew.put(
          field.replace(''TestCode__c'', ''TestCode2__c''),
          jsonParsed.get(field)
        );
        // Migrate all other fields as-is
      } else {
        jsonNew.put(field, jsonParsed.get(field));
      }
    }
    return (SObject) JSON.deserializeStrict(
      JSON.serialize(jsonNew),
      LookupRollupSummary2__mdt.class
    );
  }
}','3259231048.0','True','RollupSummary','14332','Active');
INSERT INTO "ApexClass" VALUES(111,'57.0','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Contributed by Wes Weingartner, https://github.com/wes1278
 *
 * https://github.com/afawcett/declarative-lookup-rollup-summaries/pull/15
 **/
public with sharing class RollupSummaryEnhancedController {
  private ApexPages.StandardController controller { get; set; }
  private LookupRollupSummary__c rus;
  private Set<String> numeric;
  public List<SelectOption> parentObjects { get; set; }
  public List<SelectOption> parentFields {
    get {
      List<SelectOption> retList = new List<SelectOption>();
      retList.add(
        new SelectOption(
          '''',
          ''Select'' +
          (String.isBlank(rus.ParentObject__c)
            ? ''''
            : '' '' + rus.ParentObject__c) +
          '' field...''
        )
      );
      if (String.isNotBlank(rus.ParentObject__c)) {
        Map<String, Schema.SObjectField> parentFieldMap = gd.get(
            rus.ParentObject__c
          )
          .getDescribe()
          .fields.getMap();
        for (Schema.SObjectField field : parentFieldMap.values()) {
          Schema.DescribeFieldResult res = field.getDescribe();
          if (
            res.isAccessible() &&
            res.isUpdateable() &&
            numeric.contains(String.valueOf(res.getType()).trim().toLowercase())
          ) {
            String objLabel = res.getLabel();
            String objAPI = res.getName();
            retList.add(new SelectOption(objApi, objLabel));
          }
        }
      }
      retList.sort();
      return retList;
    }
    set;
  }
  public List<SelectOption> childObjects {
    get {
      List<SelectOption> retList = new List<SelectOption>();
      retList.add(new SelectOption('''', ''Select a child object.''));
      if (String.isNotBlank(rus.ParentObject__c)) {
        for (
          Schema.ChildRelationship rel : gd.get(rus.ParentObject__c)
            .getDescribe()
            .getChildRelationships()
        ) {
          Schema.DescribeSObjectResult res = rel.getChildSObject()
            .getDescribe();
          if (res.isAccessible() && res.isUpdateable()) {
            String objLabel = res.getLabel() + '' ('' + rel.getField() + '')'';
            String objAPI = res.getName() + ''.'' + rel.getField();
            retList.add(new SelectOption(objApi, objLabel));
          }
        }
      }
      retList.sort();
      return retList;
    }
    set;
  }
  public List<SelectOption> childFields {
    get {
      List<SelectOption> retList = new List<SelectOption>();
      retList.add(new SelectOption('''', ''Select child field...''));
      if (String.isNotBlank(rus.ChildObject__c)) {
        String strChildObject = rus.ChildObject__c.substringBefore(''.'');

        Map<String, Schema.SObjectField> parentFieldMap = gd.get(strChildObject)
          .getDescribe()
          .fields.getMap();
        for (Schema.SObjectField field : parentFieldMap.values()) {
          Schema.DescribeFieldResult res = field.getDescribe();
          if (
            res.isAccessible() &&
            res.isUpdateable() &&
            numeric.contains(String.valueOf(res.getType()).trim().toLowercase())
          ) {
            String objLabel = res.getLabel();
            String objAPI = res.getName();
            retList.add(new SelectOption(objApi, objLabel));
          }
        }
      }
      retList.sort();
      return retList;
    }
    set;
  }
  private Map<String, Schema.SObjectType> gd;
  public RollupSummaryEnhancedController(
    ApexPages.StandardController stdController
  ) {
    this.controller = stdController;
    this.controller.addFields(
      new List<String>{
        LookupRollupSummary__c.ChildObject__c.getDescribe().getName(),
        LookupRollupSummary__c.RelationshipField__c.getDescribe().getName()
      }
    );
    this.rus = (LookupRollupSummary__c) controller.getRecord();
    gd = Schema.getGlobalDescribe();
    numeric = new Set<String>();
    numeric.add(''currency'');
    numeric.add(''date'');
    numeric.add(''double'');
    numeric.add(''integer'');
    numeric.add(''percent'');

    // Get the list of creatable,updateable objects.
    parentObjects = new List<SelectOption>();
    parentObjects.add(new SelectOption('''', ''Select Parent Object''));
    for (String obj : gd.keySet()) {
      Schema.DescribeSObjectResult res = gd.get(obj).getDescribe();
      if (res.isCreateable() && res.isUpdateable()) {
        String objLabel = res.getLabel();
        String objAPI = res.getName();
        parentObjects.add(new SelectOption(objApi, objLabel));
      }
    }
    parentObjects.sort();

    // Deprication warning
    ApexPages.addMessage(
      new ApexPages.Message(
        ApexPages.Severity.Warning,
        ''Use of the Lookup Rollup Summaries tab is still functional but no longer being enhanced. Consider using the Manage Lookup Rollup Summaries tab.''
      )
    );
  }
  public String getRelationshipField() {
    return rus.ChildObject__c + ''.'' + rus.RelationshipField__c;
  }
  public void setRelationshipField(String value) {
    rus.ChildObject__c = value;
  }
  public void calculateRelationshipField() {
    rus.RelationshipField__c = (rus != null &&
      String.isNotBlank(rus.ChildObject__c)
      ? rus.ChildObject__c.substringAfter(''.'')
      : '''');
  }
  public PageReference save() {
    // trigger exists?
    Boolean foundTrigger = false;
    if (rus.ChildObject__c != null) {
      rus.ChildObject__c = rus.ChildObject__c.substringBefore(''.'');
      Set<String> childTrigger = new Set<String>();
      childTrigger.add(rus.ChildObject__c);
      Map<String, ApexTrigger> apexTriggers = new ApexTriggersSelector()
        .selectByName(childTrigger);
      String triggerName = RollupSummaries.makeTriggerName(
        new RollupSummary(rus)
      );
      foundTrigger = apexTriggers.containsKey(triggerName);
    }

    Database.SaveResult sr;
    if (
      (rus.CalculationMode__c ==
      RollupSummaries.CalculationMode.Realtime.name() ||
      rus.CalculationMode__c ==
      RollupSummaries.CalculationMode.Scheduled.name()) && !foundTrigger
    ) {
      //we need the trigger to be created so let''s create it,
      // and then let''s set rus.Active__c = true;
      //and then insert the rus record.
      Boolean triggerWasDeployedSuccessfully = true; // TODO if the trigger deployment was successful
      if (triggerWasDeployedSuccessfully) {
        //rus.Active__c = true; //Uncomment once the trigger deploying works.
        if (rus.Id != null) {
          fflib_SecurityUtils.checkObjectIsUpdateable(
            LookupRollupSummary__c.SObjectType
          );
          sr = Database.update(rus, false);
        } else {
          fflib_SecurityUtils.checkObjectIsInsertable(
            LookupRollupSummary__c.SObjectType
          );
          sr = Database.insert(rus, false);
        }
      }
    } else {
      //rus.Active__c = true; //Uncomment once the trigger deploying works.
      if (rus.Id != null) {
        fflib_SecurityUtils.checkObjectIsUpdateable(
          LookupRollupSummary__c.SObjectType
        );
        sr = Database.update(rus, false);
      } else {
        fflib_SecurityUtils.checkObjectIsInsertable(
          LookupRollupSummary__c.SObjectType
        );
        sr = Database.insert(rus, false);
      }
    }
    PageReference pageRef;
    if (sr.isSuccess()) {
      pageRef = new PageReference(''/'' + rus.Id);
      pageRef.setRedirect(true);
    } else {
      for (Database.Error err : sr.getErrors()) {
        ApexPages.addMessage(
          new ApexPages.Message(ApexPages.Severity.Error, err.getMessage())
        );
      }
    }
    return pageRef;
  }
  public void getChildFields(String parentObjectName) {
    Map<SObjectType, Map<String, Schema.SObjectField>> gdFields = new Map<SObjectType, Map<String, Schema.SObjectField>>();
    SObjectType parentObjectType = gd.get(rus.ParentObject__c);
    SObjectType childObjectType = gd.get(rus.ChildObject__c);

    if (parentObjectType != null && !gdFields.containsKey(parentObjectType))
      gdFields.put(
        parentObjectType,
        parentObjectType.getDescribe().fields.getMap()
      );
    if (childObjectType != null && !gdFields.containsKey(childObjectType))
      gdFields.put(
        childObjectType,
        childObjectType.getDescribe().fields.getMap()
      );
  }
}','3674688496.0','False','RollupSummaryEnhancedController','7646','Active');
INSERT INTO "ApexClass" VALUES(112,'57.0','/* Generated by apex-mocks-generator version 4.0.0 */
@isTest
public class fflib_SObjectMocks {
  public virtual class SObjectDomain implements fflib_ISObjectDomain {
    private fflib_ApexMocks mocks;

    public SObjectDomain(fflib_ApexMocks mocks) {
      this.mocks = mocks;
    }

    public Schema.SObjectType sObjectType() {
      return (Schema.SObjectType) mocks.mockNonVoidMethod(
        this,
        ''sObjectType'',
        new List<Type>{},
        new List<Object>{}
      );
    }

    public List<SObject> getRecords() {
      return (List<SObject>) mocks.mockNonVoidMethod(
        this,
        ''getRecords'',
        new List<Type>{},
        new List<Object>{}
      );
    }
  }

  public virtual class SObjectSelector implements fflib_ISObjectSelector {
    private fflib_ApexMocks mocks;

    public SObjectSelector(fflib_ApexMocks mocks) {
      this.mocks = mocks;
    }

    public Schema.SObjectType sObjectType() {
      return (Schema.SObjectType) mocks.mockNonVoidMethod(
        this,
        ''sObjectType'',
        new List<Type>{},
        new List<Object>{}
      );
    }

    public List<SObject> selectSObjectsById(Set<Id> idSet) {
      return (List<SObject>) mocks.mockNonVoidMethod(
        this,
        ''selectSObjectsById'',
        new List<Type>{ Set<Id>.class },
        new List<Object>{ idSet }
      );
    }
  }

  public virtual class SObjectUnitOfWork implements fflib_ISObjectUnitOfWork {
    private fflib_ApexMocks mocks;

    public SObjectUnitOfWork(fflib_ApexMocks mocks) {
      this.mocks = mocks;
    }

    public void registerNew(SObject record) {
      mocks.mockVoidMethod(
        this,
        ''registerNew'',
        new List<Type>{ SObject.class },
        new List<Object>{ record }
      );
    }

    public void registerNew(List<SObject> records) {
      mocks.mockVoidMethod(
        this,
        ''registerNew'',
        new List<Type>{ List<SObject>.class },
        new List<Object>{ records }
      );
    }

    public void registerNew(
      SObject record,
      Schema.sObjectField relatedToParentField,
      SObject relatedToParentRecord
    ) {
      mocks.mockVoidMethod(
        this,
        ''registerNew'',
        new List<Type>{
          SObject.class,
          Schema.sObjectField.class,
          SObject.class
        },
        new List<Object>{ record, relatedToParentField, relatedToParentRecord }
      );
    }

    public void registerRelationship(
      SObject record,
      Schema.sObjectField relatedToField,
      SObject relatedTo
    ) {
      mocks.mockVoidMethod(
        this,
        ''registerRelationship'',
        new List<Type>{
          SObject.class,
          Schema.sObjectField.class,
          SObject.class
        },
        new List<Object>{ record, relatedToField, relatedTo }
      );
    }

    public void registerRelationship(
      Messaging.SingleEmailMessage email,
      SObject relatedTo
    ) {
      mocks.mockVoidMethod(
        this,
        ''registerRelationship'',
        new List<Type>{ Messaging.SingleEmailMessage.class, SObject.class },
        new List<Object>{ email, relatedTo }
      );
    }

    public void registerDirty(SObject record) {
      mocks.mockVoidMethod(
        this,
        ''registerDirty'',
        new List<Type>{ SObject.class },
        new List<Object>{ record }
      );
    }

    public void registerDirty(
      SObject record,
      Schema.sObjectField relatedToParentField,
      SObject relatedToParentRecord
    ) {
      mocks.mockVoidMethod(
        this,
        ''registerDirty'',
        new List<Type>{ SObject.class },
        new List<Object>{ record }
      );
    }

    public void registerDirty(List<SObject> records) {
      mocks.mockVoidMethod(
        this,
        ''registerDirty'',
        new List<Type>{ List<SObject>.class },
        new List<Object>{ records }
      );
    }

    public void registerDeleted(SObject record) {
      mocks.mockVoidMethod(
        this,
        ''registerDeleted'',
        new List<Type>{ SObject.class },
        new List<Object>{ record }
      );
    }

    public void registerDeleted(List<SObject> records) {
      mocks.mockVoidMethod(
        this,
        ''registerDeleted'',
        new List<Type>{ List<SObject>.class },
        new List<Object>{ records }
      );
    }

    public void commitWork() {
      mocks.mockVoidMethod(
        this,
        ''commitWork'',
        new List<Type>{},
        new List<Object>{}
      );
    }

    public void registerWork(fflib_SObjectUnitOfWork.IDoWork work) {
      mocks.mockVoidMethod(
        this,
        ''registerWork'',
        new List<Type>{ fflib_SObjectUnitOfWork.IDoWork.class },
        new List<Object>{ work }
      );
    }

    public void registerEmail(Messaging.Email email) {
      mocks.mockVoidMethod(
        this,
        ''registerEmail'',
        new List<Type>{ Messaging.Email.class },
        new List<Object>{ email }
      );
    }
  }
}','3241103302.0','True','fflib_SObjectMocks','4870','Active');
INSERT INTO "ApexClass" VALUES(113,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Class providing common database query support for abstracting and encapsulating query logic
 **/
public abstract with sharing class fflib_SObjectSelector implements fflib_ISObjectSelector {
  /**
   * Indicates whether the sObject has the currency ISO code field for organisations which have multi-currency
   * enabled.
   **/
  private Boolean CURRENCY_ISO_CODE_ENABLED {
    get {
      if (CURRENCY_ISO_CODE_ENABLED == null) {
        CURRENCY_ISO_CODE_ENABLED = describeWrapper.getFieldsMap()
          .keySet()
          .contains(''currencyisocode'');
      }
      return CURRENCY_ISO_CODE_ENABLED;
    }
    set;
  }

  /**
   * Should this selector automatically include the FieldSet fields when building queries?
   **/
  private Boolean m_includeFieldSetFields;

  /**
   * Enforce FLS Security
   **/
  private Boolean m_enforceFLS;

  /**
   * Enforce CRUD Security
   **/
  private Boolean m_enforceCRUD;

  /**
   * Order by field
   **/
  private String m_orderBy;

  /**
   * Sort the query fields in the select statement (defaults to true, at the expense of performance).
   * Switch this off if you need more performant queries.
   **/
  private Boolean m_sortSelectFields;

  /**
   * Describe helper
   **/
  private fflib_SObjectDescribe describeWrapper {
    get {
      if (describeWrapper == null)
        describeWrapper = fflib_SObjectDescribe.getDescribe(getSObjectType());
      return describeWrapper;
    }
    set;
  }

  /**
   * Implement this method to inform the base class of the SObject (custom or standard) to be queried
   **/
  abstract Schema.SObjectType getSObjectType();

  /**
   * Implement this method to inform the base class of the common fields to be queried or listed by the base class methods
   **/
  abstract List<Schema.SObjectField> getSObjectFieldList();

  /**
   * Constructs the Selector, defaults to not including any FieldSet fields automatically
   **/
  public fflib_SObjectSelector() {
    this(false);
  }

  /**
   * Constructs the Selector
   *
   * @param includeFieldSetFields Set to true if the Selector queries are to include Fieldset fields as well
   **/
  public fflib_SObjectSelector(Boolean includeFieldSetFields) {
    this(includeFieldSetFields, true, false);
  }

  /**
   * Constructs the Selector
   *
   * @param includeFieldSetFields Set to true if the Selector queries are to include Fieldset fields as well
   **/
  public fflib_SObjectSelector(
    Boolean includeFieldSetFields,
    Boolean enforceCRUD,
    Boolean enforceFLS
  ) {
    this(includeFieldSetFields, enforceCRUD, enforceFLS, true);
  }

  /**
   * Constructs the Selector
   *
   * @param includeFieldSetFields Set to true if the Selector queries are to include Fieldset fields as well
   * @param enforceCRUD Enforce CRUD security
   * @param enforeFLS Enforce Field Level Security
   * @param sortSelectFields Set to false if selecting many columns to skip sorting select fields and improve performance
   **/
  public fflib_SObjectSelector(
    Boolean includeFieldSetFields,
    Boolean enforceCRUD,
    Boolean enforceFLS,
    Boolean sortSelectFields
  ) {
    m_includeFieldSetFields = includeFieldSetFields;
    m_enforceCRUD = enforceCRUD;
    m_enforceFLS = enforceFLS;
    m_sortSelectFields = sortSelectFields;
  }

  /**
   * Override this method to provide a list of Fieldsets that can optionally drive inclusion of additional fields in the base queries
   **/
  public virtual List<Schema.FieldSet> getSObjectFieldSetList() {
    return null;
  }

  /**
   * Override this method to control the default ordering of records returned by the base queries,
   * defaults to the name field of the object or CreatedDate if there is none
   **/
  public virtual String getOrderBy() {
    if (m_orderBy == null) {
      m_orderBy = ''CreatedDate'';
      if (describeWrapper.getNameField() != null) {
        m_orderBy = describeWrapper.getNameField().getDescribe().getName();
      }
    }
    return m_orderBy;
  }

  /**
   * Returns True if this Selector instance has been instructed by the caller to include Field Set fields
   **/
  public Boolean isIncludeFieldSetFields() {
    return m_includeFieldSetFields;
  }

  /**
   * Returns True if this Selector is enforcing FLS
   **/
  public Boolean isEnforcingFLS() {
    return m_enforceFLS;
  }

  /**
   * Returns True if this Selector is enforcing CRUD Security
   **/
  public Boolean isEnforcingCRUD() {
    return m_enforceCRUD;
  }

  /**
   * Provides access to the builder containing the list of fields base queries are using, this is demand
   *   created if one has not already been defined via setFieldListBuilder
   *
   * @depricated See newQueryFactory
   **/
  public fflib_StringBuilder.CommaDelimitedListBuilder getFieldListBuilder() {
    return new fflib_StringBuilder.CommaDelimitedListBuilder(
      new List<String>(newQueryFactory().getSelectedFields())
    );
  }

  /**
   * Use this method to override the default FieldListBuilder (created on demand via getFieldListBuilder) with a custom one,
   *   warning, this will bypass anything getSObjectFieldList or getSObjectFieldSetList returns
   *
   * @depricated See newQueryFactory
   **/
  public void setFieldListBuilder(
    fflib_StringBuilder.FieldListBuilder fieldListBuilder
  ) {
    // TODO: Consider if given the known use cases for this (dynamic selector optomisation) if it''s OK to leave this as a null operation
  }

  /**
   * Returns in string form a comma delimted list of fields as defined via getSObjectFieldList and optionally getSObjectFieldSetList
   *
   * @depricated See newQueryFactory
   **/
  public String getFieldListString() {
    return getFieldListBuilder().getStringValue();
  }

  /**
   * Returns in string form a comma delimted list of fields as defined via getSObjectFieldList and optionally getSObjectFieldSetList
   * @param relation Will prefix fields with the given relation, e.g. MyLookupField__r
   *
   * @depricated See newQueryFactory
   **/
  public String getRelatedFieldListString(String relation) {
    return getFieldListBuilder().getStringValue(relation + ''.'');
  }

  /**
   * Returns the string representaiton of the SObject this selector represents
   **/
  public String getSObjectName() {
    return describeWrapper.getDescribe().getName();
  }

  /**
   * Performs a SOQL query,
   *   - Selecting the fields described via getSObjectFieldsList and getSObjectFieldSetList (if included)
   *   - From the SObject described by getSObjectType
   *   - Where the Id''s match those provided in the set
   *   - Ordered by the fields returned via getOrderBy
   * @returns A list of SObject''s
   **/
  public List<SObject> selectSObjectsById(Set<Id> idSet) {
    return Database.query(buildQuerySObjectById());
  }

  /**
   * Performs a SOQL query,
   *   - Selecting the fields described via getSObjectFieldsList and getSObjectFieldSetList (if included)
   *   - From the SObject described by getSObjectType
   *   - Where the Id''s match those provided in the set
   *   - Ordered by the fields returned via getOrderBy
   * @returns A QueryLocator (typically for use in a Batch Apex job)
   **/
  public Database.QueryLocator queryLocatorById(Set<Id> idSet) {
    return Database.getQueryLocator(buildQuerySObjectById());
  }

  /**
   * Throws an exception if the SObject indicated by getSObjectType is not accessible to the current user (read access)
   *
   * @depricated If you utilise the newQueryFactory method this is automatically done for you (unless disabled by the selector)
   **/
  public void assertIsAccessible() {
    if (!getSObjectType().getDescribe().isAccessible())
      throw new fflib_SObjectDomain.DomainException(
        ''Permission to access an '' +
        getSObjectType().getDescribe().getName() +
        '' denied.''
      );
  }

  /**
   * Public acccess for the getSObjectType during Mock registration
   *   (adding public to the existing method broken base class API backwards compatability)
   **/
  public SObjectType getSObjectType2() {
    return getSObjectType();
  }

  /**
   * Public acccess for the getSObjectType during Mock registration
   *   (adding public to the existing method broken base class API backwards compatability)
   **/
  public SObjectType sObjectType() {
    return getSObjectType();
  }

  /**
   * Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by
   **/
  public fflib_QueryFactory newQueryFactory() {
    return newQueryFactory(m_enforceCRUD, m_enforceFLS, true);
  }

  /**
   * Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by
   **/
  public fflib_QueryFactory newQueryFactory(Boolean includeSelectorFields) {
    return newQueryFactory(m_enforceCRUD, m_enforceFLS, includeSelectorFields);
  }

  /**
   * Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by
   * CRUD and FLS read security will be checked if the corresponding inputs are true (overrides that defined in the selector).
   **/
  public fflib_QueryFactory newQueryFactory(
    Boolean assertCRUD,
    Boolean enforceFLS,
    Boolean includeSelectorFields
  ) {
    // Construct QueryFactory around the given SObject
    return configureQueryFactory(
      new fflib_QueryFactory(getSObjectType2()),
      assertCRUD,
      enforceFLS,
      includeSelectorFields
    );
  }

  /**
   * Adds the selectors fields to the given QueryFactory using the given relationship path as a prefix
   *
   * // TODO: This should be consistant (ideally) with configureQueryFactory below
   **/
  public void configureQueryFactoryFields(
    fflib_QueryFactory queryFactory,
    String relationshipFieldPath
  ) {
    // Add fields from selector prefixing the relationship path
    for (SObjectField field : getSObjectFieldList())
      queryFactory.selectField(
        relationshipFieldPath +
        ''.'' +
        field.getDescribe().getName()
      );
    // Automatically select the CurrencyIsoCode for MC orgs (unless the object is a known exception to the rule)
    if (Userinfo.isMultiCurrencyOrganization() && CURRENCY_ISO_CODE_ENABLED)
      queryFactory.selectField(relationshipFieldPath + ''.CurrencyIsoCode'');
  }

  /**
   * Adds a subselect QueryFactory based on this selector to the given QueryFactor, returns the parentQueryFactory
   **/
  public fflib_QueryFactory addQueryFactorySubselect(
    fflib_QueryFactory parentQueryFactory
  ) {
    return addQueryFactorySubselect(parentQueryFactory, true);
  }

  /**
   * Adds a subselect QueryFactory based on this selector to the given QueryFactor
   **/
  public fflib_QueryFactory addQueryFactorySubselect(
    fflib_QueryFactory parentQueryFactory,
    Boolean includeSelectorFields
  ) {
    fflib_QueryFactory subSelectQueryFactory = parentQueryFactory.subselectQuery(
      getSObjectType2()
    );
    return configureQueryFactory(
      subSelectQueryFactory,
      m_enforceCRUD,
      m_enforceFLS,
      includeSelectorFields
    );
  }

  /**
   * Adds a subselect QueryFactory based on this selector to the given QueryFactor, returns the parentQueryFactory
   **/
  public fflib_QueryFactory addQueryFactorySubselect(
    fflib_QueryFactory parentQueryFactory,
    String relationshipName
  ) {
    return addQueryFactorySubselect(parentQueryFactory, relationshipName, true);
  }

  /**
   * Adds a subselect QueryFactory based on this selector to the given QueryFactor
   **/
  public fflib_QueryFactory addQueryFactorySubselect(
    fflib_QueryFactory parentQueryFactory,
    String relationshipName,
    Boolean includeSelectorFields
  ) {
    fflib_QueryFactory subSelectQueryFactory = parentQueryFactory.subselectQuery(
      relationshipName
    );
    return configureQueryFactory(
      subSelectQueryFactory,
      m_enforceCRUD,
      m_enforceFLS,
      includeSelectorFields
    );
  }

  /**
   * Constructs the default SOQL query for this selector, see selectSObjectsById and queryLocatorById
   **/
  private String buildQuerySObjectById() {
    return newQueryFactory().setCondition(''id in :idSet'').toSOQL();
  }

  /**
   * Configures a QueryFactory instance according to the configuration of this selector
   **/
  private fflib_QueryFactory configureQueryFactory(
    fflib_QueryFactory queryFactory,
    Boolean assertCRUD,
    Boolean enforceFLS,
    Boolean includeSelectorFields
  ) {
    // CRUD and FLS security required?
    if (assertCRUD) {
      try {
        // Leverage QueryFactory for CRUD checking
        queryFactory.assertIsAccessible();
      } catch (fflib_SecurityUtils.CrudException e) {
        // Marshal exception into DomainException for backwards compatability
        throw new fflib_SObjectDomain.DomainException(
          ''Permission to access an '' +
          getSObjectType().getDescribe().getName() +
          '' denied.''
        );
      }
    }
    queryFactory.setEnforceFLS(enforceFLS);

    // Configure the QueryFactory with the Selector fields?
    if (includeSelectorFields) {
      // select the Selector fields and Fieldsets and set order
      queryFactory.selectFields(getSObjectFieldList());

      List<Schema.FieldSet> fieldSetList = getSObjectFieldSetList();
      if (m_includeFieldSetFields && fieldSetList != null)
        for (Schema.FieldSet fieldSet : fieldSetList)
          queryFactory.selectFieldSet(fieldSet);

      // Automatically select the CurrencyIsoCode for MC orgs (unless the object is a known exception to the rule)
      if (Userinfo.isMultiCurrencyOrganization() && CURRENCY_ISO_CODE_ENABLED)
        queryFactory.selectField(''CurrencyIsoCode'');
    }

    // Parse the getOrderBy()
    for (String orderBy : getOrderBy().split('','')) {
      // TODO: Handle NULLS FIRST and NULLS LAST, http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_orderby.htm
      List<String> orderByParts = orderBy.trim().split('' '');
      String fieldNamePart = orderByParts[0];
      String fieldSortOrderPart = orderByParts.size() > 1
        ? orderByParts[1]
        : null;
      fflib_QueryFactory.SortOrder fieldSortOrder = fflib_QueryFactory.SortOrder.ASCENDING;
      if (fieldSortOrderPart == null)
        fieldSortOrder = fflib_QueryFactory.SortOrder.ASCENDING;
      else if (fieldSortOrderPart.equalsIgnoreCase(''DESC''))
        fieldSortOrder = fflib_QueryFactory.SortOrder.DESCENDING;
      else if (fieldSortOrderPart.equalsIgnoreCase(''ASC''))
        fieldSortOrder = fflib_QueryFactory.SortOrder.ASCENDING;
      queryFactory.addOrdering(fieldNamePart, fieldSortOrder);
    }

    queryFactory.setSortSelectFields(m_sortSelectFields);

    return queryFactory;
  }
}','2291571591.0','True','fflib_SObjectSelector','7631','Active');
INSERT INTO "ApexClass" VALUES(114,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private with sharing class fflib_SObjectSelectorTest {
  static testMethod void testGetSObjectName() {
    Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector();
    system.assertEquals(null, selector.getSObjectFieldSetList());
    system.assertEquals(''Account'', selector.getSObjectName());
  }

  static testMethod void testSelectSObjectsById() {
    // Inserting in reverse order so that we can test the order by of select
    List<Account> accountList = new List<Account>{
      new Account(
        Name = ''TestAccount2'',
        AccountNumber = ''A2'',
        AnnualRevenue = 12345.67
      ),
      new Account(
        Name = ''TestAccount1'',
        AccountNumber = ''A1'',
        AnnualRevenue = 76543.21
      )
    };
    insert accountList;
    Set<Id> idSet = new Set<Id>();
    for (Account item : accountList)
      idSet.add(item.Id);

    Test.startTest();
    Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector();
    List<Account> result = (List<Account>) selector.selectSObjectsById(idSet);
    Test.stopTest();

    system.assertEquals(2, result.size());
    system.assertEquals(''TestAccount2'', result[0].Name);
    system.assertEquals(''A2'', result[0].AccountNumber);
    system.assertEquals(12345.67, result[0].AnnualRevenue);
    system.assertEquals(''TestAccount1'', result[1].Name);
    system.assertEquals(''A1'', result[1].AccountNumber);
    system.assertEquals(76543.21, result[1].AnnualRevenue);
  }

  static testMethod void testQueryLocatorById() {
    // Inserting in reverse order so that we can test the order by of select
    List<Account> accountList = new List<Account>{
      new Account(
        Name = ''TestAccount2'',
        AccountNumber = ''A2'',
        AnnualRevenue = 12345.67
      ),
      new Account(
        Name = ''TestAccount1'',
        AccountNumber = ''A1'',
        AnnualRevenue = 76543.21
      )
    };
    insert accountList;
    Set<Id> idSet = new Set<Id>();
    for (Account item : accountList)
      idSet.add(item.Id);

    Test.startTest();
    Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector();
    Database.QueryLocator result = selector.queryLocatorById(idSet);
    System.Iterator<SObject> iteratorResult = result.iterator();
    Test.stopTest();

    System.assert(true, iteratorResult.hasNext());
    Account account = (Account) iteratorResult.next();
    system.assertEquals(''TestAccount2'', account.Name);
    system.assertEquals(''A2'', account.AccountNumber);
    system.assertEquals(12345.67, account.AnnualRevenue);
    System.assert(true, iteratorResult.hasNext());
    account = (Account) iteratorResult.next();
    system.assertEquals(''TestAccount1'', account.Name);
    system.assertEquals(''A1'', account.AccountNumber);
    system.assertEquals(76543.21, account.AnnualRevenue);
    System.assertEquals(false, iteratorResult.hasNext());
  }

  static testMethod void testAssertIsAccessible() {
    List<Account> accountList = new List<Account>{
      new Account(
        Name = ''TestAccount2'',
        AccountNumber = ''A2'',
        AnnualRevenue = 12345.67
      ),
      new Account(
        Name = ''TestAccount1'',
        AccountNumber = ''A1'',
        AnnualRevenue = 76543.21
      )
    };
    insert accountList;
    Set<Id> idSet = new Set<Id>();
    for (Account item : accountList)
      idSet.add(item.Id);

    // Create a user which will not have access to the test object type
    User testUser = createChatterExternalUser();
    if (testUser == null)
      return; // Abort the test if unable to create a user with low enough acess
    System.runAs(testUser) {
      Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector();
      try {
        List<Account> result = (List<Account>) selector.selectSObjectsById(
          idSet
        );
        System.assert(false, ''Expected exception was not thrown'');
      } catch (fflib_SObjectDomain.DomainException e) {
        System.assertEquals(
          ''Permission to access an Account denied.'',
          e.getMessage()
        );
      }
    }
  }

  static testMethod void testCRUDOff() {
    List<Account> accountList = new List<Account>{
      new Account(
        Name = ''TestAccount2'',
        AccountNumber = ''A2'',
        AnnualRevenue = 12345.67
      ),
      new Account(
        Name = ''TestAccount1'',
        AccountNumber = ''A1'',
        AnnualRevenue = 76543.21
      )
    };
    insert accountList;
    Set<Id> idSet = new Set<Id>();
    for (Account item : accountList)
      idSet.add(item.Id);

    // Create a user which will not have access to the test object type
    User testUser = createChatterExternalUser();
    if (testUser == null)
      return; // Abort the test if unable to create a user with low enough acess
    System.runAs(testUser) {
      Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector(
        false,
        false,
        false,
        true
      );
      try {
        List<Account> result = (List<Account>) selector.selectSObjectsById(
          idSet
        );
      } catch (fflib_SObjectDomain.DomainException e) {
        System.assert(false, ''Did not expect an exception to be thrown'');
      }
    }
  }

  static testMethod void testSOQL() {
    Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector();
    String soql = selector.newQueryFactory().toSOQL();
    Pattern p = Pattern.compile(
      ''SELECT (.*) FROM Account ORDER BY Name DESC NULLS FIRST , AnnualRevenue ASC NULLS FIRST ''
    );
    Matcher m = p.matcher(soql);
    System.assert(
      m.matches(),
      ''Generated SOQL does not match expected pattern. Here is the generated SOQL: '' +
      soql
    );
    System.assertEquals(
      1,
      m.groupCount(),
      ''Unexpected number of groups captured.''
    );
    String fieldListString = m.group(1);
    assertFieldListString(fieldListString, null);
  }

  static testMethod void testDefaultConfig() {
    Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector();
    System.assertEquals(false, selector.isEnforcingFLS());
    System.assertEquals(true, selector.isEnforcingCRUD());
    System.assertEquals(false, selector.isIncludeFieldSetFields());

    System.assertEquals(''Account'', selector.getSObjectName());
    System.assertEquals(Account.SObjectType, selector.getSObjectType2());
  }

  private static void assertFieldListString(
    String fieldListString,
    String prefix
  ) {
    String prefixString = (!String.isBlank(prefix)) ? prefix + ''.'' : '''';
    List<String> fieldList = fieldListString.split('',{1}\\s?'');
    System.assertEquals(
      UserInfo.isMultiCurrencyOrganization() ? 5 : 4,
      fieldList.size()
    );
    Set<String> fieldSet = new Set<String>();
    fieldSet.addAll(fieldList);
    String expected = prefixString + ''AccountNumber'';
    System.assert(
      fieldSet.contains(expected),
      expected +
      '' missing from field list string: '' +
      fieldListString
    );
    expected = prefixString + ''AnnualRevenue'';
    System.assert(
      fieldSet.contains(expected),
      expected +
      '' missing from field list string: '' +
      fieldListString
    );
    expected = prefixString + ''Id'';
    System.assert(
      fieldSet.contains(expected),
      expected +
      '' missing from field list string: '' +
      fieldListString
    );
    expected = prefixString + ''Name'';
    System.assert(
      fieldSet.contains(expected),
      expected +
      '' missing from field list string: '' +
      fieldListString
    );
    if (UserInfo.isMultiCurrencyOrganization()) {
      expected = prefixString + ''CurrencyIsoCode'';
      System.assert(
        fieldSet.contains(expected),
        expected +
        '' missing from field list string: '' +
        fieldListString
      );
    }
  }

  @isTest
  static void testWithoutSorting() {
    //Given
    Testfflib_SObjectSelector selector = new Testfflib_SObjectSelector(
      false,
      false,
      false,
      false
    );
    fflib_QueryFactory qf = selector.newQueryFactory();

    Set<String> expectedSelectFields = new Set<String>{
      ''Name'',
      ''Id'',
      ''AccountNumber'',
      ''AnnualRevenue''
    };
    if (UserInfo.isMultiCurrencyOrganization()) {
      expectedSelectFields.add(''CurrencyIsoCode'');
    }

    //When
    String soql = qf.toSOQL();

    //Then
    Pattern soqlPattern = Pattern.compile(
      ''SELECT (.*) FROM Account ORDER BY Name DESC NULLS FIRST , AnnualRevenue ASC NULLS FIRST ''
    );
    Matcher soqlMatcher = soqlPattern.matcher(soql);
    soqlMatcher.matches();

    List<String> actualSelectFields = soqlMatcher.group(1)
      .deleteWhiteSpace()
      .split('','');
    System.assertEquals(
      expectedSelectFields,
      new Set<String>(actualSelectFields)
    );
  }

  private static void assertEqualsSelectFields(
    String expectedSelectFields,
    String actualSelectFields
  ) {
    Set<String> expected = new Set<String>(
      expectedSelectFields.deleteWhiteSpace().split('','')
    );
    Set<String> actual = new Set<String>(
      actualSelectFields.deleteWhiteSpace().split('','')
    );

    System.assertEquals(expected, actual);
  }

  private class Testfflib_SObjectSelector extends fflib_SObjectSelector {
    public Testfflib_SObjectSelector() {
      super();
    }

    public Testfflib_SObjectSelector(
      Boolean includeFieldSetFields,
      Boolean enforceCRUD,
      Boolean enforceFLS,
      Boolean sortSelectFields
    ) {
      super(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields);
    }

    public List<Schema.SObjectField> getSObjectFieldList() {
      return new List<Schema.SObjectField>{
        Account.Name,
        Account.Id,
        Account.AccountNumber,
        Account.AnnualRevenue
      };
    }

    public Schema.SObjectType getSObjectType() {
      return Account.sObjectType;
    }

    public override String getOrderBy() {
      return ''Name DESC, AnnualRevenue ASC'';
    }
  }

  /**
   * Create test user
   **/
  private static User createChatterExternalUser() {
    // Can only proceed with test if we have a suitable profile - Chatter External license has no access to Opportunity
    List<Profile> testProfiles = [
      SELECT Id
      FROM Profile
      WHERE UserLicense.Name = ''Chatter External''
      LIMIT 1
    ];
    if (testProfiles.size() != 1)
      return null;

    // Can only proceed with test if we can successfully insert a test user
    String testUsername =
      System.now().format(''yyyyMMddhhmmss'') + ''@testorg.com'';
    User testUser = new User(
      Alias = ''test1'',
      Email = ''testuser1@testorg.com'',
      EmailEncodingKey = ''UTF-8'',
      LastName = ''Testing'',
      LanguageLocaleKey = ''en_US'',
      LocaleSidKey = ''en_US'',
      ProfileId = testProfiles[0].Id,
      TimeZoneSidKey = ''America/Los_Angeles'',
      UserName = testUsername
    );
    try {
      insert testUser;
    } catch (Exception e) {
      return null;
    }
    return testUser;
  }
}','3193781591.0','True','fflib_SObjectSelectorTest','10210','Active');
INSERT INTO "ApexClass" VALUES(115,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Provides an implementation of the Enterprise Application Architecture Unit Of Work, as defined by Martin Fowler
 *   http://martinfowler.com/eaaCatalog/unitOfWork.html
 *
 * "When you''re pulling data in and out of a database, it''s important to keep track of what you''ve changed; otherwise,
 *  that data won''t be written back into the database. Similarly you have to insert new objects you create and
 *  remove any objects you delete."
 *
 * "You can change the database with each change to your object model, but this can lead to lots of very small database calls,
 *  which ends up being very slow. Furthermore it requires you to have a transaction open for the whole interaction, which is
 *  impractical if you have a business transaction that spans multiple requests. The situation is even worse if you need to
 *  keep track of the objects you''ve read so you can avoid inconsistent reads."
 *
 * "A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you''re done,
 *  it figures out everything that needs to be done to alter the database as a result of your work."
 *
 * In an Apex context this pattern provides the following specific benifits
 *  - Applies bulkfication to DML operations, insert, update and delete
 *  - Manages a business transaction around the work and ensures a rollback occurs (even when exceptions are later handled by the caller)
 *  - Honours dependency rules between records and updates dependent relationships automatically during the commit
 *
 * Please refer to the testMethod''s in this class for example usage
 *
 * TODO: Need to complete the 100% coverage by covering parameter exceptions in tests
 * TODO: Need to add some more test methods for more complex use cases and some unexpected (e.g. registerDirty and then registerDeleted)
 *
 **/
public virtual class fflib_SObjectUnitOfWork implements fflib_ISObjectUnitOfWork {
  protected List<Schema.SObjectType> m_sObjectTypes = new List<Schema.SObjectType>();

  protected Map<String, List<SObject>> m_newListByType = new Map<String, List<SObject>>();

  protected Map<String, Map<Id, SObject>> m_dirtyMapByType = new Map<String, Map<Id, SObject>>();

  protected Map<String, Map<Id, SObject>> m_deletedMapByType = new Map<String, Map<Id, SObject>>();

  protected Map<String, Relationships> m_relationships = new Map<String, Relationships>();

  protected List<IDoWork> m_workList = new List<IDoWork>();

  protected SendEmailWork m_emailWork = new SendEmailWork();

  protected IDML m_dml;

  /**
   * Interface describes work to be performed during the commitWork method
   **/
  public interface IDoWork {
    void doWork();
  }

  public interface IDML {
    void dmlInsert(List<SObject> objList);
    void dmlUpdate(List<SObject> objList);
    void dmlDelete(List<SObject> objList);
  }

  public class SimpleDML implements IDML {
    public void dmlInsert(List<SObject> objList) {
      insert objList;
    }
    public void dmlUpdate(List<SObject> objList) {
      update objList;
    }
    public void dmlDelete(List<SObject> objList) {
      delete objList;
    }
  }
  /**
   * Constructs a new UnitOfWork to support work against the given object list
   *
   * @param sObjectList A list of objects given in dependency order (least dependent first)
   */
  public fflib_SObjectUnitOfWork(List<Schema.SObjectType> sObjectTypes) {
    this(sObjectTypes, new SimpleDML());
  }

  public fflib_SObjectUnitOfWork(
    List<Schema.SObjectType> sObjectTypes,
    IDML dml
  ) {
    m_sObjectTypes = sObjectTypes.clone();

    for (Schema.SObjectType sObjectType : m_sObjectTypes) {
      // register the type
      handleRegisterType(sObjectType);
    }

    m_relationships.put(
      Messaging.SingleEmailMessage.class.getName(),
      new Relationships()
    );

    m_workList.add(m_emailWork);

    m_dml = dml;
  }

  // default implementations for commitWork events
  public virtual void onRegisterType(Schema.SObjectType sObjectType) {
  }
  public virtual void onCommitWorkStarting() {
  }
  public virtual void onDMLStarting() {
  }
  public virtual void onDMLFinished() {
  }
  public virtual void onDoWorkStarting() {
  }
  public virtual void onDoWorkFinished() {
  }
  public virtual void onCommitWorkFinishing() {
  }
  public virtual void onCommitWorkFinished(Boolean wasSuccessful) {
  }

  /**
   * Registers the type to be used for DML operations
   *
   * @param sObjectType - The type to register
   *
   */
  private void handleRegisterType(Schema.SObjectType sObjectType) {
    // add type to dml operation tracking
    m_newListByType.put(
      sObjectType.getDescribe().getName(),
      new List<SObject>()
    );
    m_dirtyMapByType.put(
      sObjectType.getDescribe().getName(),
      new Map<Id, SObject>()
    );
    m_deletedMapByType.put(
      sObjectType.getDescribe().getName(),
      new Map<Id, SObject>()
    );
    m_relationships.put(
      sObjectType.getDescribe().getName(),
      new Relationships()
    );

    // give derived class opportunity to register the type
    onRegisterType(sObjectType);
  }

  /**
   * Register a generic peace of work to be invoked during the commitWork phase
   **/
  public void registerWork(IDoWork work) {
    m_workList.add(work);
  }

  /**
   * Registers the given email to be sent during the commitWork
   **/
  public void registerEmail(Messaging.Email email) {
    m_emailWork.registerEmail(email);
  }

  /**
   * Register a newly created SObject instance to be inserted when commitWork is called
   *
   * @param record A newly created SObject instance to be inserted during commitWork
   **/
  public void registerNew(SObject record) {
    registerNew(record, null, null);
  }

  /**
   * Register a list of newly created SObject instances to be inserted when commitWork is called
   *
   * @param records A list of newly created SObject instances to be inserted during commitWork
   **/
  public void registerNew(List<SObject> records) {
    for (SObject record : records) {
      registerNew(record, null, null);
    }
  }

  /**
   * Register a newly created SObject instance to be inserted when commitWork is called,
   *   you may also provide a reference to the parent record instance (should also be registered as new separatly)
   *
   * @param record A newly created SObject instance to be inserted during commitWork
   * @param relatedToParentField A SObjectField reference to the child field that associates the child record with its parent
   * @param relatedToParentRecord A SObject instance of the parent record (should also be registered as new separatly)
   **/
  public void registerNew(
    SObject record,
    Schema.sObjectField relatedToParentField,
    SObject relatedToParentRecord
  ) {
    if (record.Id != null)
      throw new UnitOfWorkException(
        ''Only new records can be registered as new''
      );
    String sObjectType = record.getSObjectType().getDescribe().getName();
    if (!m_newListByType.containsKey(sObjectType))
      throw new UnitOfWorkException(
        String.format(
          ''SObject type {0} is not supported by this unit of work'',
          new List<String>{ sObjectType }
        )
      );
    m_newListByType.get(sObjectType).add(record);
    if (relatedToParentRecord != null && relatedToParentField != null)
      registerRelationship(record, relatedToParentField, relatedToParentRecord);
  }

  /**
   * Register a relationship between two records that have yet to be inserted to the database. This information will be
   *  used during the commitWork phase to make the references only when related records have been inserted to the database.
   *
   * @param record An existing or newly created record
   * @param relatedToField A SObjectField referene to the lookup field that relates the two records together
   * @param relatedTo A SOBject instance (yet to be commited to the database)
   */
  public void registerRelationship(
    SObject record,
    Schema.sObjectField relatedToField,
    SObject relatedTo
  ) {
    String sObjectType = record.getSObjectType().getDescribe().getName();
    if (!m_newListByType.containsKey(sObjectType))
      throw new UnitOfWorkException(
        String.format(
          ''SObject type {0} is not supported by this unit of work'',
          new List<String>{ sObjectType }
        )
      );
    m_relationships.get(sObjectType).add(record, relatedToField, relatedTo);
  }

  /**
   * Registers a relationship between a record and a Messaging.Email where the record has yet to be inserted
   *  to the database.  This information will be
   *  used during the commitWork phase to make the references only when related records have been inserted to the database.
   *
   * @param a single email message instance
   * @param relatedTo A SOBject instance (yet to be commited to the database)
   */
  public void registerRelationship(
    Messaging.SingleEmailMessage email,
    SObject relatedTo
  ) {
    m_relationships.get(Messaging.SingleEmailMessage.class.getName())
      .add(email, relatedTo);
  }

  /**
   * Register an existing record to be updated during the commitWork method
   *
   * @param record An existing record
   **/
  public void registerDirty(SObject record) {
    if (record.Id == null)
      throw new UnitOfWorkException(
        ''New records cannot be registered as dirty''
      );
    String sObjectType = record.getSObjectType().getDescribe().getName();
    if (!m_dirtyMapByType.containsKey(sObjectType))
      throw new UnitOfWorkException(
        String.format(
          ''SObject type {0} is not supported by this unit of work'',
          new List<String>{ sObjectType }
        )
      );
    m_dirtyMapByType.get(sObjectType).put(record.Id, record);
  }

  /**
   * Register an existing record to be updated when commitWork is called,
   *   you may also provide a reference to the parent record instance (should also be registered as new separatly)
   *
   * @param record A newly created SObject instance to be inserted during commitWork
   * @param relatedToParentField A SObjectField reference to the child field that associates the child record with its parent
   * @param relatedToParentRecord A SObject instance of the parent record (should also be registered as new separatly)
   **/
  public void registerDirty(
    SObject record,
    Schema.sObjectField relatedToParentField,
    SObject relatedToParentRecord
  ) {
    if (record.Id == null)
      throw new UnitOfWorkException(
        ''New records cannot be registered as dirty''
      );
    String sObjectType = record.getSObjectType().getDescribe().getName();
    if (!m_dirtyMapByType.containsKey(sObjectType))
      throw new UnitOfWorkException(
        String.format(
          ''SObject type {0} is not supported by this unit of work'',
          new List<String>{ sObjectType }
        )
      );
    m_dirtyMapByType.get(sObjectType).put(record.Id, record);
    if (relatedToParentRecord != null && relatedToParentField != null)
      registerRelationship(record, relatedToParentField, relatedToParentRecord);
  }

  /**
   * Register a list of existing records to be updated during the commitWork method
   *
   * @param records A list of existing records
   **/
  public void registerDirty(List<SObject> records) {
    for (SObject record : records) {
      this.registerDirty(record);
    }
  }

  /**
   * Register an existing record to be deleted during the commitWork method
   *
   * @param record An existing record
   **/
  public void registerDeleted(SObject record) {
    if (record.Id == null)
      throw new UnitOfWorkException(
        ''New records cannot be registered for deletion''
      );
    String sObjectType = record.getSObjectType().getDescribe().getName();
    if (!m_deletedMapByType.containsKey(sObjectType))
      throw new UnitOfWorkException(
        String.format(
          ''SObject type {0} is not supported by this unit of work'',
          new List<String>{ sObjectType }
        )
      );
    m_deletedMapByType.get(sObjectType).put(record.Id, record);
  }

  /**
   * Register a list of existing records to be deleted during the commitWork method
   *
   * @param records A list of existing records
   **/
  public void registerDeleted(List<SObject> records) {
    for (SObject record : records) {
      this.registerDeleted(record);
    }
  }

  /**
   * Takes all the work that has been registered with the UnitOfWork and commits it to the database
   **/
  public void commitWork() {
    // notify we''re starting the commit work
    onCommitWorkStarting();

    // Wrap the work in its own transaction
    Savepoint sp = Database.setSavePoint();
    Boolean wasSuccessful = false;
    try {
      // notify we''re starting the DML operations
      onDMLStarting();
      // Insert by type
      for (Schema.SObjectType sObjectType : m_sObjectTypes) {
        m_relationships.get(sObjectType.getDescribe().getName()).resolve();
        m_dml.dmlInsert(
          m_newListByType.get(sObjectType.getDescribe().getName())
        );
      }
      // Update by type
      for (Schema.SObjectType sObjectType : m_sObjectTypes)
        m_dml.dmlUpdate(
          m_dirtyMapByType.get(sObjectType.getDescribe().getName()).values()
        );
      // Delete by type (in reverse dependency order)
      Integer objectIdx = m_sObjectTypes.size() - 1;
      while (objectIdx >= 0)
        m_dml.dmlDelete(
          m_deletedMapByType.get(
              m_sObjectTypes[objectIdx--].getDescribe().getName()
            )
            .values()
        );

      // manage any record relationships to emails that need to be resolved.
      m_relationships.get(Messaging.SingleEmailMessage.class.getName())
        .resolve();

      // notify we''re done with DML
      onDMLFinished();

      // notify we''re starting to process registered work
      onDoWorkStarting();
      // Generic work
      for (IDoWork work : m_workList)
        work.doWork();
      // notify we''ve completed processing registered work
      onDoWorkFinished();

      // notify we''ve completed all steps and are in the final stage of completing
      onCommitWorkFinishing();

      // mark tracker to indicate success
      wasSuccessful = true;
    } catch (Exception e) {
      // Rollback
      Database.rollback(sp);
      // Throw exception on to caller
      throw e;
    } finally {
      // notify we''re done with commit work
      onCommitWorkFinished(wasSuccessful);
    }
  }

  private class Relationships {
    private List<IRelationship> m_relationships = new List<IRelationship>();

    public void resolve() {
      // Resolve relationships
      for (IRelationship relationship : m_relationships) {
        //relationship.Record.put(relationship.RelatedToField, relationship.RelatedTo.Id);
        relationship.resolve();
      }
    }

    public void add(
      SObject record,
      Schema.sObjectField relatedToField,
      SObject relatedTo
    ) {
      // Relationship to resolve
      Relationship relationship = new Relationship();
      relationship.Record = record;
      relationship.RelatedToField = relatedToField;
      relationship.RelatedTo = relatedTo;
      m_relationships.add(relationship);
    }

    public void add(Messaging.SingleEmailMessage email, SObject relatedTo) {
      EmailRelationship emailRelationship = new EmailRelationship();
      emailRelationship.email = email;
      emailRelationship.relatedTo = relatedTo;
      m_relationships.add(emailRelationship);
    }
  }

  private interface IRelationship {
    void resolve();
  }

  private class Relationship implements IRelationship {
    public SObject Record;
    public Schema.sObjectField RelatedToField;
    public SObject RelatedTo;

    public void resolve() {
      this.Record.put(this.RelatedToField, this.RelatedTo.Id);
    }
  }

  private class EmailRelationship implements IRelationship {
    public Messaging.SingleEmailMessage email;
    public SObject relatedTo;

    public void resolve() {
      this.email.setWhatId(this.RelatedTo.Id);
    }
  }

  /**
   * UnitOfWork Exception
   **/
  public class UnitOfWorkException extends Exception {
  }

  /**
   * Internal implementation of Messaging.sendEmail, see outer class registerEmail method
   **/
  private class SendEmailWork implements IDoWork {
    private List<Messaging.Email> emails;

    public SendEmailWork() {
      this.emails = new List<Messaging.Email>();
    }

    public void registerEmail(Messaging.Email email) {
      this.emails.add(email);
    }

    public void doWork() {
      if (emails.size() > 0)
        Messaging.sendEmail(emails);
    }
  }
}','3108913359.0','True','fflib_SObjectUnitOfWork','9868','Active');
INSERT INTO "ApexClass" VALUES(116,'57.0','/**
 * Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

@IsTest
private with sharing class fflib_SObjectUnitOfWorkTest {
  // SObjects (in order of dependency) used by UnitOfWork in tests bellow
  private static List<Schema.SObjectType> MY_SOBJECTS = new List<Schema.SObjectType>{
    Product2.SObjectType,
    PricebookEntry.SObjectType,
    Opportunity.SObjectType,
    OpportunityLineItem.SObjectType
  };

  @isTest
  private static void testUnitOfWorkEmail() {
    string testRecordName = ''UoW Test Name 1'';

    Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
    email.setToAddresses(new List<String>{ ''foobar@test.com'' });
    email.setPlainTextBody(''See Spot run.'');

    fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(MY_SOBJECTS);

    Opportunity opp = new Opportunity();
    opp.Name = testRecordName;
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    uow.registerNew(opp);

    uow.registerEmail(email);

    uow.registerRelationship(email, opp);

    uow.commitWork();

    List<Opportunity> opps = [
      SELECT Id, Name, (SELECT Id FROM OpportunityLineItems)
      FROM Opportunity
      WHERE Name = :testRecordName
      ORDER BY Name
    ];

    // assert that an email was sent
    system.assertEquals(1, Limits.getEmailInvocations());

    System.assertEquals(1, opps.size());
  }

  @isTest
  private static void testUnitOfWorkNewDirtyDelete() {
    // Insert Opporunities with UnitOfWork
    {
      fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(MY_SOBJECTS);
      for (Integer o = 0; o < 10; o++) {
        Opportunity opp = new Opportunity();
        opp.Name = ''UoW Test Name '' + o;
        opp.StageName = ''Open'';
        opp.CloseDate = System.today();
        uow.registerNew(new List<SObject>{ opp });
        for (Integer i = 0; i < o + 1; i++) {
          Product2 product = new Product2();
          product.Name = opp.Name + '' : Product : '' + i;
          uow.registerNew(new List<SObject>{ product });
          PricebookEntry pbe = new PricebookEntry();
          pbe.UnitPrice = 10;
          pbe.IsActive = true;
          pbe.UseStandardPrice = false;
          pbe.Pricebook2Id = Test.getStandardPricebookId();
          uow.registerNew(pbe, PricebookEntry.Product2Id, product);
          OpportunityLineItem oppLineItem = new OpportunityLineItem();
          oppLineItem.Quantity = 1;
          oppLineItem.TotalPrice = 10;
          uow.registerRelationship(
            oppLineItem,
            OpportunityLineItem.PricebookEntryId,
            pbe
          );
          uow.registerNew(oppLineItem, OpportunityLineItem.OpportunityId, opp);
        }
      }

      uow.commitWork();
    }

    // Assert Results
    assertResults(''UoW'');
    // TODO: Need to re-instate this check with a better approach, as it is not possible when
    //       product triggers contribute to DML (e.g. in sample app Opportunity trigger)
    // System.assertEquals(5 /* Oddly a setSavePoint consumes a DML */, Limits.getDmlStatements());

    // Records to update
    List<Opportunity> opps = [
      SELECT Id, Name, (SELECT Id FROM OpportunityLineItems)
      FROM Opportunity
      WHERE Name LIKE ''UoW Test Name %''
      ORDER BY Name
    ];

    // Update some records with UnitOfWork
    {
      fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(MY_SOBJECTS);
      Opportunity opp = opps[0];
      opp.Name = opp.Name + '' Changed'';
      uow.registerDirty(new List<SObject>{ opp });
      Product2 product = new Product2();
      product.Name = opp.Name + '' : New Product'';
      uow.registerNew(new List<SObject>{ product });
      PricebookEntry pbe = new PricebookEntry();
      pbe.UnitPrice = 10;
      pbe.IsActive = true;
      pbe.UseStandardPrice = false;
      pbe.Pricebook2Id = Test.getStandardPricebookId();
      uow.registerNew(pbe, PricebookEntry.Product2Id, product);
      OpportunityLineItem newOppLineItem = new OpportunityLineItem();
      newOppLineItem.Quantity = 1;
      newOppLineItem.TotalPrice = 10;
      uow.registerRelationship(
        newOppLineItem,
        OpportunityLineItem.PricebookEntryId,
        pbe
      );
      uow.registerNew(newOppLineItem, OpportunityLineItem.OpportunityId, opp);
      OpportunityLineItem existingOppLine = opp.OpportunityLineItems[0];
      // Test that operations on the same object can be daisy chained, and the same object registered as dirty more than once
      // This verifies that using a Map to back the dirty records collection prevents duplicate registration.
      existingOppLine.Quantity = 2;
      uow.registerDirty(new List<SObject>{ existingOppLine });
      existingOppLine.TotalPrice = 20;
      uow.registerDirty(new List<SObject>{ existingOppLine });
      uow.commitWork();
    }

    // Assert Results
    // TODO: Need to re-instate this check with a better approach, as it is not possible when
    //       product triggers contribute to DML (e.g. in sample app Opportunity trigger)
    // System.assertEquals(11, Limits.getDmlStatements());
    opps = [
      SELECT
        Id,
        Name,
        (
          SELECT Id, PricebookEntry.Product2.Name, Quantity, TotalPrice
          FROM OpportunityLineItems
          ORDER BY PricebookEntry.Product2.Name
        )
      FROM Opportunity
      WHERE Name LIKE ''UoW Test Name %''
      ORDER BY Name
    ];
    System.assertEquals(10, opps.size());
    System.assertEquals(''UoW Test Name 0 Changed'', opps[0].Name);
    System.assertEquals(2, opps[0].OpportunityLineItems.size());
    // Verify that both fields were updated properly
    System.assertEquals(2, opps[0].OpportunityLineItems[0].Quantity);
    System.assertEquals(20, opps[0].OpportunityLineItems[0].TotalPrice);
    System.assertEquals(
      ''UoW Test Name 0 Changed : New Product'',
      opps[0].OpportunityLineItems[1].PricebookEntry.Product2.Name
    );

    // Delete some records with the UnitOfWork
    {
      fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(MY_SOBJECTS);
      uow.registerDeleted(
        new List<SObject>{
          opps[0].OpportunityLineItems[1].PricebookEntry.Product2
        }
      ); // Delete PricebookEntry Product
      uow.registerDeleted(
        new List<SObject>{ opps[0].OpportunityLineItems[1].PricebookEntry }
      ); // Delete PricebookEntry
      uow.registerDeleted(new List<SObject>{ opps[0].OpportunityLineItems[1] }); // Delete OpportunityLine Item
      // Register the same deletions more than once.
      // This verifies that using a Map to back the deleted records collection prevents duplicate registration.
      uow.registerDeleted(
        new List<SObject>{
          opps[0].OpportunityLineItems[1].PricebookEntry.Product2
        }
      ); // Delete PricebookEntry Product
      uow.registerDeleted(
        new List<SObject>{ opps[0].OpportunityLineItems[1].PricebookEntry }
      ); // Delete PricebookEntry
      uow.registerDeleted(new List<SObject>{ opps[0].OpportunityLineItems[1] }); // Delete OpportunityLine Item
      uow.commitWork();
    }

    // Assert Results
    // TODO: Need to re-instate this check with a better approach, as it is not possible when
    //       product triggers contribute to DML (e.g. in sample app Opportunity trigger)
    // System.assertEquals(15, Limits.getDmlStatements());
    opps = [
      SELECT
        Id,
        Name,
        (
          SELECT Id, PricebookEntry.Product2.Name, Quantity
          FROM OpportunityLineItems
          ORDER BY PricebookEntry.Product2.Name
        )
      FROM Opportunity
      WHERE Name LIKE ''UoW Test Name %''
      ORDER BY Name
    ];
    List<Product2> prods = [
      SELECT Id
      FROM Product2
      WHERE Name = ''UoW Test Name 0 Changed : New Product''
    ];
    System.assertEquals(10, opps.size());
    System.assertEquals(''UoW Test Name 0 Changed'', opps[0].Name);
    System.assertEquals(1, opps[0].OpportunityLineItems.size()); // Should have deleted OpportunityLineItem added above
    System.assertEquals(0, prods.size()); // Should have deleted Product added above
  }

  private static void assertResults(String prefix) {
    // Standard Assertions on tests data inserted by tests
    String filter = prefix + '' Test Name %'';
    List<Opportunity> opps = [
      SELECT Id, Name, (SELECT Id FROM OpportunityLineItems)
      FROM Opportunity
      WHERE Name LIKE :filter
      ORDER BY Name
    ];
    System.assertEquals(10, opps.size());
    System.assertEquals(1, opps[0].OpportunityLineItems.size());
    System.assertEquals(2, opps[1].OpportunityLineItems.size());
    System.assertEquals(3, opps[2].OpportunityLineItems.size());
    System.assertEquals(4, opps[3].OpportunityLineItems.size());
    System.assertEquals(5, opps[4].OpportunityLineItems.size());
    System.assertEquals(6, opps[5].OpportunityLineItems.size());
    System.assertEquals(7, opps[6].OpportunityLineItems.size());
    System.assertEquals(8, opps[7].OpportunityLineItems.size());
    System.assertEquals(9, opps[8].OpportunityLineItems.size());
    System.assertEquals(10, opps[9].OpportunityLineItems.size());
  }

  /**
   * Create uow with new records and commit
   *
   *	Testing:
   *
   *		- Correct events are fired when commitWork completes successfully
   *
   */
  @isTest
  private static void testDerivedUnitOfWork_CommitSuccess() {
    // Insert Opporunities with UnitOfWork
    DerivedUnitOfWork uow = new DerivedUnitOfWork(MY_SOBJECTS);
    for (Integer o = 0; o < 10; o++) {
      Opportunity opp = new Opportunity();
      opp.Name = ''UoW Test Name '' + o;
      opp.StageName = ''Open'';
      opp.CloseDate = System.today();
      uow.registerNew(new List<SObject>{ opp });
      for (Integer i = 0; i < o + 1; i++) {
        Product2 product = new Product2();
        product.Name = opp.Name + '' : Product : '' + i;
        uow.registerNew(new List<SObject>{ product });
        PricebookEntry pbe = new PricebookEntry();
        pbe.UnitPrice = 10;
        pbe.IsActive = true;
        pbe.UseStandardPrice = false;
        pbe.Pricebook2Id = Test.getStandardPricebookId();
        uow.registerNew(pbe, PricebookEntry.Product2Id, product);
        OpportunityLineItem oppLineItem = new OpportunityLineItem();
        oppLineItem.Quantity = 1;
        oppLineItem.TotalPrice = 10;
        uow.registerRelationship(
          oppLineItem,
          OpportunityLineItem.PricebookEntryId,
          pbe
        );
        uow.registerNew(oppLineItem, OpportunityLineItem.OpportunityId, opp);
      }
    }
    uow.commitWork();

    // Assert Results
    assertResults(''UoW'');

    assertEvents(
      new List<String>{
        ''onCommitWorkStarting'',
        ''onDMLStarting'',
        ''onDMLFinished'',
        ''onDoWorkStarting'',
        ''onDoWorkFinished'',
        ''onCommitWorkFinishing'',
        ''onCommitWorkFinished - true''
      },
      uow.getCommitWorkEventsFired(),
      new Set<Schema.SObjectType>(MY_SOBJECTS),
      uow.getRegisteredTypes()
    );
  }

  /**
   * Create uow with data that results in DML Exception
   *
   *	Testing:
   *
   *		- Correct events are fired when commitWork fails during DML processing
   *
   */
  @isTest
  private static void testDerivedUnitOfWork_CommitDMLFail() {
    // Insert Opporunities with UnitOfWork forcing a failure on DML by not setting ''Name'' field
    DerivedUnitOfWork uow = new DerivedUnitOfWork(MY_SOBJECTS);
    Opportunity opp = new Opportunity();
    uow.registerNew(new List<SObject>{ opp });
    Boolean didFail = false;
    System.DmlException caughtEx = null;

    try {
      uow.commitWork();
    } catch (System.DmlException dmlex) {
      didFail = true;
      caughtEx = dmlex;
    }

    // Assert Results
    System.assertEquals(didFail, true, ''didFail'');
    System.assert(
      caughtEx.getMessage().contains(''REQUIRED_FIELD_MISSING''),
      String.format(
        ''Exception message was '',
        new List<String>{ caughtEx.getMessage() }
      )
    );

    assertEvents(
      new List<String>{
        ''onCommitWorkStarting'',
        ''onDMLStarting'',
        ''onCommitWorkFinished - false''
      },
      uow.getCommitWorkEventsFired(),
      new Set<Schema.SObjectType>(MY_SOBJECTS),
      uow.getRegisteredTypes()
    );
  }

  /**
   * Create uow with work that fails
   *
   *	Testing:
   *
   *		- Correct events are fired when commitWork fails during DoWork processing
   *
   */
  @isTest
  private static void testDerivedUnitOfWork_CommitDoWorkFail() {
    // Insert Opporunities with UnitOfWork
    DerivedUnitOfWork uow = new DerivedUnitOfWork(MY_SOBJECTS);
    Opportunity opp = new Opportunity();
    opp.Name = ''UoW Test Name 1'';
    opp.StageName = ''Open'';
    opp.CloseDate = System.today();
    uow.registerNew(new List<SObject>{ opp });

    // register work that will fail during processing
    FailDoingWork fdw = new FailDoingWork();
    uow.registerWork(fdw);

    Boolean didFail = false;
    FailDoingWorkException caughtEx = null;

    try {
      uow.commitWork();
    } catch (FailDoingWorkException fdwe) {
      didFail = true;
      caughtEx = fdwe;
    }

    // Assert Results
    System.assertEquals(didFail, true, ''didFail'');
    System.assert(
      caughtEx.getMessage().contains(''Work failed.''),
      String.format(
        ''Exception message was '',
        new List<String>{ caughtEx.getMessage() }
      )
    );

    assertEvents(
      new List<String>{
        ''onCommitWorkStarting'',
        ''onDMLStarting'',
        ''onDMLFinished'',
        ''onDoWorkStarting'',
        ''onCommitWorkFinished - false''
      },
      uow.getCommitWorkEventsFired(),
      new Set<Schema.SObjectType>(MY_SOBJECTS),
      uow.getRegisteredTypes()
    );
  }

  /**
   * Assert that actual events exactly match expected events (size, order and name)
   * and types match expected types
   */
  private static void assertEvents(
    List<String> expectedEvents,
    List<String> actualEvents,
    Set<Schema.SObjectType> expectedTypes,
    Set<Schema.SObjectType> actualTypes
  ) {
    // assert that events match
    System.assertEquals(
      expectedEvents.size(),
      actualEvents.size(),
      ''events size''
    );
    for (Integer i = 0; i < expectedEvents.size(); i++) {
      System.assertEquals(
        expectedEvents[i],
        actualEvents[i],
        String.format(
          ''Event {0} was not fired in order expected.'',
          new List<String>{ expectedEvents[i] }
        )
      );
    }

    // assert that types match
    System.assertEquals(expectedTypes.size(), actualTypes.size(), ''types size'');
    for (Schema.SObjectType sObjectType : expectedTypes) {
      System.assertEquals(
        true,
        actualTypes.contains(sObjectType),
        String.format(
          ''Type {0} was not registered.'',
          new List<String>{ sObjectType.getDescribe().getName() }
        )
      );
    }
  }

  /**
   * DoWork implementation that throws exception during processing
   */
  private class FailDoingWork implements fflib_SObjectUnitOfWork.IDoWork {
    public void doWork() {
      throw new FailDoingWorkException(''Work failed.'');
    }
  }

  /**
   * Derived unit of work that tracks event notifications and handle registration of type
   */
  private class DerivedUnitOfWork extends fflib_SObjectUnitOfWork {
    private List<String> m_commitWorkEventsFired = new List<String>();
    private Set<Schema.SObjectType> m_registeredTypes = new Set<Schema.SObjectType>();

    public List<String> getCommitWorkEventsFired() {
      return m_commitWorkEventsFired.clone();
    }

    public Set<Schema.SObjectType> getRegisteredTypes() {
      return m_registeredTypes.clone();
    }

    public DerivedUnitOfWork(List<Schema.SObjectType> sObjectTypes) {
      super(sObjectTypes);
    }

    public DerivedUnitOfWork(List<Schema.SObjectType> sObjectTypes, IDML dml) {
      super(sObjectTypes, dml);
    }

    private void addEvent(String event) {
      // events should only be fired one time
      // ensure that this event has not been fired already
      for (String eventName : m_commitWorkEventsFired) {
        if (event == eventName) {
          throw new DerivedUnitOfWorkException(
            String.format(
              ''Event {0} has already been fired.'',
              new List<String>{ event }
            )
          );
        }
      }
      m_commitWorkEventsFired.add(event);
    }

    public override void onRegisterType(Schema.SObjectType sObjectType) {
      if (m_registeredTypes.contains(sObjectType)) {
        throw new DerivedUnitOfWorkException(
          String.format(
            ''Type {0} has already been registered.'',
            new List<String>{ sObjectType.getDescribe().getName() }
          )
        );
      }
      m_registeredTypes.add(sObjectType);
    }

    public override void onCommitWorkStarting() {
      addEvent(''onCommitWorkStarting'');
    }

    public override void onDMLStarting() {
      addEvent(''onDMLStarting'');
    }

    public override void onDMLFinished() {
      addEvent(''onDMLFinished'');
    }

    public override void onDoWorkStarting() {
      addEvent(''onDoWorkStarting'');
    }

    public override void onDoWorkFinished() {
      addEvent(''onDoWorkFinished'');
    }

    public override void onCommitWorkFinishing() {
      addEvent(''onCommitWorkFinishing'');
    }

    public override void onCommitWorkFinished(Boolean wasSuccessful) {
      addEvent(''onCommitWorkFinished - '' + wasSuccessful);
    }
  }

  public class DerivedUnitOfWorkException extends Exception {
  }
  public class FailDoingWorkException extends Exception {
  }
}','578819583.0','True','fflib_SObjectUnitOfWorkTest','14286','Active');
INSERT INTO "ApexClass" VALUES(117,'57.0','/**
 * Copyright (c) 2014, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/**
 * Utility class for checking FLS/CRUD. NOTE: all "check" methods will throw a SecurityException (or subclass) if the
 * user does not have the proper security granted.
 **/
public class fflib_SecurityUtils {
  @TestVisible
  private enum OperationType {
    CREATE,
    READ,
    MODIFY,
    DEL
  } //UPDATE and DELETE are reserved words

  /**
   * SecurityException is never be thrown directly by fflib_SecurityUtils, instead all
   * forms of CRUD and FLD violations throw subclasses of it. It is provided as a convenience
   * in the event you wish to handle CRUD and FLS violations the same way (e.g. die and display an error)
   **/
  public virtual class SecurityException extends Exception {
    protected OperationType m_operation;
    protected Schema.SObjectType m_objectType;
  }

  /**
   * CrudException represents a running user''s lack of read/create/update/delete access at a profile (or permission set)
   * level. Sharing and field level security issues will never cause this.
   **/
  public class CrudException extends SecurityException {
    private CrudException(
      OperationType operation,
      Schema.SObjectType objectType
    ) {
      this.m_operation = operation;
      this.m_objectType = objectType;
      if (operation == OperationType.CREATE)
        this.setMessage(
          System.Label.fflib_security_error_object_not_insertable
        );
      else if (operation == OperationType.READ)
        this.setMessage(System.Label.fflib_security_error_object_not_readable);
      else if (operation == OperationType.MODIFY)
        this.setMessage(
          System.Label.fflib_security_error_object_not_updateable
        );
      else if (operation == OperationType.DEL)
        this.setMessage(System.Label.fflib_security_error_object_not_deletable);

      this.setMessage(
        String.format(
          this.getMessage(),
          new List<String>{ objectType.getDescribe().getName() }
        )
      );
    }
  }
  /**
   * FlsException represents a running user''s lack of field level security to a specific field at a profile (or permission set) level
   * Sharing and CRUD security issues will never cause this to be thrown.
   **/
  public class FlsException extends SecurityException {
    private Schema.SObjectField m_fieldToken;

    private FlsException(
      OperationType operation,
      Schema.SObjectType objectType,
      Schema.SObjectField fieldToken
    ) {
      this.m_operation = operation;
      this.m_objectType = objectType;
      this.m_fieldToken = fieldToken;
      if (operation == OperationType.CREATE)
        this.setMessage(System.Label.fflib_security_error_field_not_insertable);
      else if (operation == OperationType.READ)
        this.setMessage(System.Label.fflib_security_error_field_not_readable);
      else if (operation == OperationType.MODIFY)
        this.setMessage(System.Label.fflib_security_error_field_not_updateable);

      this.setMessage(
        String.format(
          this.getMessage(),
          new List<String>{
            objectType.getDescribe().getName(),
            fieldToken.getDescribe().getName()
          }
        )
      );
    }
  }

  /**
   * If set to true all check methods will always return void, and never throw exceptions.
   * This should really only be set to true if an app-wide setting to disable in-apex
   * FLS and CRUD checks exists and is enabled.
   * Per security best practices setting BYPASS should be an a opt-in, and not the default behavior.
   **/
  public static Boolean BYPASS_INTERNAL_FLS_AND_CRUD = false;

  /**
   * Check{Insert,Read,Update} methods check both FLS and CRUD
   **/

  /**
   * Checks both insert FLS and CRUD for the specified object type and fields.
   * @exception FlsException if the running user does not have insert rights to any fields in {@code fieldNames}.
   * @exception CrudException if the running user does not have insert rights to {@code objType}
   **/
  public static void checkInsert(SObjectType objType, List<String> fieldNames) {
    checkObjectIsInsertable(objType);
    for (String fieldName : fieldNames) {
      checkFieldIsInsertable(objType, fieldName);
    }
  }

  /**
   * Identical to {@link #checkInsert(SObjectType,List<String>)}, except with SObjectField instead of String field references.
   * @exception FlsException if the running user does not have insert rights to any fields in {@code fieldTokens}.
   * @exception CrudException if the running user does not have insert rights to {@code objType}
   **/
  public static void checkInsert(
    SObjectType objType,
    List<SObjectField> fieldTokens
  ) {
    checkObjectIsInsertable(objType);
    for (SObjectField fieldToken : fieldTokens) {
      checkFieldIsInsertable(objType, fieldToken);
    }
  }

  /**
   * Checks both read FLS and CRUD for the specified object type and fields.
   * @exception FlsException if the running user does not have read rights to any fields in {@code fieldNames}.
   * @exception CrudException if the running user does not have read rights to {@code objType}
   **/
  public static void checkRead(SObjectType objType, List<String> fieldNames) {
    checkObjectIsReadable(objType);
    for (String fieldName : fieldNames) {
      checkFieldIsReadable(objType, fieldName);
    }
  }

  /**
   * Identical to {@link #checkRead(SObjectType,List<String>)}, except with SObjectField instead of String field references.
   * @exception FlsException if the running user does not have read rights to any fields in {@code fieldTokens}.
   * @exception CrudException if the running user does not have read rights to {@code objType}
   **/
  public static void checkRead(
    SObjectType objType,
    List<SObjectField> fieldTokens
  ) {
    checkObjectIsReadable(objType);
    for (SObjectField fieldToken : fieldTokens) {
      checkFieldIsReadable(objType, fieldToken);
    }
  }

  /**
   * Checks both update FLS and CRUD for the specified object type and fields.
   * @exception FlsException if the running user does not have update rights to any fields in {@code fieldNames}.
   * @exception CrudException if the running user does not have update rights to {@code objType}
   **/
  public static void checkUpdate(SObjectType objType, List<String> fieldNames) {
    checkObjectIsUpdateable(objType);
    for (String fieldName : fieldNames) {
      checkFieldIsUpdateable(objType, fieldName);
    }
  }

  /**
   * Identical to {@link #checkUpdate(SObjectType,List<String>)}, except with SObjectField instead of String field references.
   * @exception FlsException if the running user does not have update rights to any fields in {@code fieldTokens}.
   * @exception CrudException if the running user does not have update rights to {@code objType}
   **/
  public static void checkUpdate(
    SObjectType objType,
    List<SObjectField> fieldTokens
  ) {
    checkObjectIsUpdateable(objType);
    for (SObjectField fieldToken : fieldTokens) {
      checkFieldIsUpdateable(objType, fieldToken);
    }
  }

  /**
   * CheckFieldIs* method check only FLS
   **/

  /**
   * Checks insert field level security only (no CRUD) for the specified fields on {@code objType}
   * @exception FlsException if the running user does not have insert rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsInsertable(
    SObjectType objType,
    String fieldName
  ) {
    checkFieldIsInsertable(
      objType,
      fflib_SObjectDescribe.getDescribe(objType).getField(fieldName)
    );
  }

  /**
   * Identical to {@link #checkFieldIsInsertable(SObjectType,String)}, except with SObjectField instead of String field reference.
   * @exception FlsException if the running user does not have insert rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsInsertable(
    SObjectType objType,
    SObjectField fieldToken
  ) {
    checkFieldIsInsertable(objType, fieldToken.getDescribe());
  }

  /**
   * Identical to {@link #checkFieldIsInsertable(SObjectType,String)}, except with DescribeFieldResult instead of String field reference.
   * @exception FlsException if the running user does not have insert rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsInsertable(
    SObjectType objType,
    DescribeFieldResult fieldDescribe
  ) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!fieldDescribe.isCreateable())
      throw new FlsException(
        OperationType.CREATE,
        objType,
        fieldDescribe.getSObjectField()
      );
  }

  /**
   * Checks read field level security only (no CRUD) for the specified fields on {@code objType}
   * @exception FlsException if the running user does not have read rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsReadable(
    SObjectType objType,
    String fieldName
  ) {
    checkFieldIsReadable(
      objType,
      fflib_SObjectDescribe.getDescribe(objType).getField(fieldName)
    );
  }

  /**
   * Identical to {@link #checkFieldIsReadable(SObjectType,String)}, except with SObjectField instead of String field reference.
   * @exception FlsException if the running user does not have read rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsReadable(
    SObjectType objType,
    SObjectField fieldToken
  ) {
    checkFieldIsReadable(objType, fieldToken.getDescribe());
  }

  /**
   * Identical to {@link #checkFieldIsReadable(SObjectType,String)}, except with DescribeFieldResult instead of String field reference.
   * @exception FlsException if the running user does not have read rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsReadable(
    SObjectType objType,
    DescribeFieldResult fieldDescribe
  ) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!fieldDescribe.isAccessible())
      throw new FlsException(
        OperationType.READ,
        objType,
        fieldDescribe.getSObjectField()
      );
  }

  /**
   * Checks update field level security only (no CRUD) for the specified fields on {@code objType}
   * @exception FlsException if the running user does not have update rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsUpdateable(
    SObjectType objType,
    String fieldName
  ) {
    checkFieldIsUpdateable(
      objType,
      fflib_SObjectDescribe.getDescribe(objType).getField(fieldName)
    );
  }

  /**
   * Identical to {@link #checkFieldIsUpdateable(SObjectType,String)}, except with SObjectField instead of String field reference.
   * @exception FlsException if the running user does not have update rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsUpdateable(
    SObjectType objType,
    SObjectField fieldToken
  ) {
    checkFieldIsUpdateable(objType, fieldToken.getDescribe());
  }

  /**
   * Identical to {@link #checkFieldIsUpdateable(SObjectType,String)}, except with DescribeFieldResult instead of String field reference.
   * @exception FlsException if the running user does not have update rights to the {@code fieldName} field.
   **/
  public static void checkFieldIsUpdateable(
    SObjectType objType,
    DescribeFieldResult fieldDescribe
  ) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!fieldDescribe.isUpdateable())
      throw new FlsException(
        OperationType.MODIFY,
        objType,
        fieldDescribe.getSObjectField()
      );
  }

  /**
   * CheckObjectIs* methods check only CRUD
   **/

  /**
   * Checks insert CRUD for the specified object type.
   * @exception CrudException if the running user does not have insert rights to the {@code objType} SObject.
   **/
  public static void checkObjectIsInsertable(SObjectType objType) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!objType.getDescribe().isCreateable()) {
      throw new CrudException(OperationType.CREATE, objType);
    }
  }

  /**
   * Checks read CRUD for the specified object type.
   * @exception CrudException if the running user does not have read rights to the {@code objType} SObject.
   **/
  public static void checkObjectIsReadable(SObjectType objType) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!objType.getDescribe().isAccessible())
      throw new CrudException(OperationType.READ, objType);
  }

  /**
   * Checks update CRUD for the specified object type.
   * @exception CrudException if the running user does not have update rights to the {@code objType} SObject.
   **/
  public static void checkObjectIsUpdateable(SObjectType objType) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!objType.getDescribe().isUpdateable())
      throw new CrudException(OperationType.MODIFY, objType);
  }

  /**
   * Checks delete CRUD for the specified object type.
   * @exception CrudException if the running user does not have delete rights to the {@code objType} SObject.
   **/
  public static void checkObjectIsDeletable(SObjectType objType) {
    if (BYPASS_INTERNAL_FLS_AND_CRUD)
      return;
    if (!objType.getDescribe().isDeletable())
      throw new CrudException(OperationType.DEL, objType);
  }
}','1721476989.0','True','fflib_SecurityUtils','6773','Active');
INSERT INTO "ApexClass" VALUES(118,'51.0','/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
@IsTest
private class ContactTest
{
    @IsTest
    private static void testTrigger()
    {
        // Force the ContactTrigger to be invoked, fails the test if org config or other Apex code prevents this.
        RollupService.testHandler(new Contact());
    }
}','2963406653.0','True','ContactTest','150','Active');
CREATE TABLE "ApexComponent" (
	id INTEGER NOT NULL, 
	"ApiVersion" VARCHAR(255), 
	"ControllerKey" VARCHAR(255), 
	"ControllerType" VARCHAR(255), 
	"Description" VARCHAR(255), 
	"MasterLabel" VARCHAR(255), 
	"Markup" VARCHAR(255), 
	"Name" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "ApexComponent" VALUES(1,'57.0','core.apexpages.components.cdk.NullController','3','','Zip','<!--
/**
 * Copyright (c) 2012, Andrew Fawcett,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:component >
	<apex:attribute name="oncomplete" type="string" description="Javascript executed once all files have been zipped"/>
	<apex:attribute name="name" type="string" description="Name of the Javascript function generated to zip files"/>
	<script>
		// Create JSZip (currently global) instance to receive files 
		zipFile = new JSZip();
	</script>
	<!--  Output children, typically <c:zipEntry> components -->
	<apex:componentBody />
	<script>
		// Function to be called from the page to start the zip generation process
		function {!Name}()
		{
			// Execute given Javascript to handle completion of zip generation 
			var data = zipFile.generate();
			eval(''{!oncomplete}'');
		}
	</script>
</apex:component>','zip');
INSERT INTO "ApexComponent" VALUES(2,'57.0','core.apexpages.components.cdk.NullController','3','','Zip Entry','<!--
/**
 * Copyright (c) 2012, Andrew Fawcett,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:component >
	<apex:attribute name="path" type="string" description="Path to entry in the zip file"/>
	<apex:attribute name="data" type="string" description="File data"/>
	<script>
		zipFile.file(''{!path}'', ''{!JSENCODE(data)}'');
	</script>
</apex:component>','zipEntry');
CREATE TABLE "ApexPage" (
	id INTEGER NOT NULL, 
	"ApiVersion" VARCHAR(255), 
	"IsAvailableInTouch" VARCHAR(255), 
	"ControllerKey" VARCHAR(255), 
	"ControllerType" VARCHAR(255), 
	"Description" VARCHAR(255), 
	"MasterLabel" VARCHAR(255), 
	"Markup" VARCHAR(255), 
	"Name" VARCHAR(255), 
	"IsConfirmationTokenRequired" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "ApexPage" VALUES(1,'57.0','True','ManageLookupRollupSummariesNewController','2','','managelookuprollupsummaries_New','<apex:page controller="ManageLookupRollupSummariesNewController" lightningStylesheets="true" tabStyle="ManageLookupRollupSummaries__tab"
    showHeader="true" sidebar="true" action="{!init}">
    <style type="text/css">
        .imgclass {
            background-image: url(/img/help/helpOrbs.gif);
            background-repeat: no-repeat;
            background-position: right;
            width: 20px;
            height: 15px;
            vertical-align: top;
        }

        .imgclass:hover {
            background-image: url(/img/help/helpOrbs.gif);
            background-repeat: no-repeat;
            background-position: left;
            width: 20px;
            height: 15px;
            vertical-align: top;
        }

        td.pbTitle {
            width: 100% !important;
            text-align: center;
            colspan: 2;
        }
    </style>

    <apex:form >
        <apex:actionFunction name="updateRField" action="{!updateRField}" reRender="refreshPb" />
        <apex:actionFunction name="updateChildField" action="{!updateChildField}" reRender="refreshPb" />
        <apex:actionFunction name="updateParentField" action="{!updateParentField}" reRender="refreshPb" />
        <apex:actionFunction name="updateAggregateField" action="{!updateAggregateField}" reRender="refreshPCFields" />
        <apex:actionFunction name="updateCalcMode" action="{!updateCalcMode}" reRender="refreshPCFields" />
        <apex:sectionHeader title="Manage Lookup Rollup Summaries" subtitle="Manage, Deploy, Run and Schedule" />
        <apex:pageMessage rendered="{!$Setup.DeclarativeLookupRollupSummaries__c.HideManageLookupRollupSummariesInfo__c==false}"
            strength="1" escape="false" severity="Info" summary="This tab provides the ability to store rollup definitions as <b>Custom Metadata</b>. This allows your rollups to be added to <b>Change Sets</b> and <b>Packages</b> and automatically cloned during a <b>Sandbox</b> refresh. Note that you can also change the configuration entered here under the <b>Setup</b> menu <b>Custom Metadata Types</b> page. However, using this page is recommended as it provides added validation and features">
             It may be that your org has rollups defined under the <a href="{!URLFOR($Action.LookupRollupSummary__c.Tab,$ObjectType.LookupRollupSummary__c)}">older Lookup Rollup Summaries tab</a>. It is recommended
                 you move them over.&nbsp;
            <apex:commandLink action="{!hideMessage}" value="Hide this message" /></apex:pageMessage>
        <apex:pageMessage rendered="{!hasTooManyObjects == true}"
            strength="1" escape="false" severity="Error" summary="Your org has too many sObjects, please use the legacy Manage Lookup Rollup Summaries page">
        </apex:pageMessage>
        <apex:pageMessages id="errorconfirm" />
        <apex:outputPanel rendered="{!MetadataConnectionError==true}">
            <apex:outputLink value="{!$Page.welcometab}">Return to the Welcome page</apex:outputLink>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!MetadataConnectionError==false}" id="refreshPb">
            <apex:pageBlock mode="edit" id="rollupDetailView" title="Lookup Rollup Summary Creation Wizard">
                <apex:pageBlockButtons >

                    <apex:commandButton value="Save" action="{!save}" />
                    <!--<apex:commandButton value="Delete" action="{!deleteX}" rendered="{!LookupRollupSummary.Id!=null}"/>
                    <apex:commandButton value="Full Calculate" action="{!URLFOR($Page.rollupcalculatemdt, null, [''id''=LookupRollupSummary.id])}" rendered="{!LookupRollupSummary.Id!=null}"/>
                    <apex:commandButton value="Schedule Full Calculate" action="{!URLFOR($Page.rollupscheduledcalculatemdt, null, [''id''=LookupRollupSummary.id])}" rendered="{!LookupRollupSummary.Id!=null}"/>
                    <apex:commandButton value="Manage Child Trigger" action="{!URLFOR($Page.managetriggermdt, null, [''id''=LookupRollupSummary.id])}" rendered="{!LookupRollupSummary.Id!=null}"/>-->
                </apex:pageBlockButtons>

                <apex:pageBlockSection title="Information" columns="2">
                    <apex:pageBlockSectionItem id="labelInputSection">
                        <apex:outputLabel value="Lookup Rollup Summary Label" />
                        <apex:outputPanel >
                            <div class="requiredInput">
                                <div class="requiredBlock" />
                                <apex:inputText size="32" maxlength="40" value="{!LookupRollupSummary.Label}" id="labelInput"/>
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Lookup Rollup Summary API Name" />
                        <apex:outputPanel >
                            <div class="requiredInput">
                                <div class="requiredBlock" />
                                <script>
                                    function suggestApiName(labelElementId, nameElementId) {
                                        const labelElement = document.getElementById(labelElementId);
                                        const nameElement = document.getElementById(nameElementId);

                                        if (!nameElement.value) {
                                            nameElement.value = convertLabelToApiName(labelElement.value);
                                        }
                                    
                                    }

                                    function convertLabelToApiName(label) {
                                        const oneOrMoreSpaces = / +/g;
                                        const twoOrMoreUnderscores = /__+/g;
                                        const allButAllowedCharacters = /[^a-zA-Z0-9_]/g;
                                        const startsWithNumbersOrUnderscores = /^[0-9_]+/g;
                                        const endsWithUnderscores = /_+$/g;
                                        return label.trim()
                                                .replaceAll(oneOrMoreSpaces, ''_'')
                                                .replaceAll(twoOrMoreUnderscores, ''_'')
                                                .replaceAll(allButAllowedCharacters, '''')
                                                .replaceAll(startsWithNumbersOrUnderscores, '''')
                                                .replaceAll(endsWithUnderscores, '''');
                                    }
                                </script>
                                <apex:inputText onfocus="suggestApiName(''{!JSINHTMLENCODE($Component.labelInputSection.labelInput)}'', ''{!JSINHTMLENCODE($Component.nameInput)}'')" size="32" maxlength="40" id="nameInput" value="{!LookupRollupSummary.DeveloperName}" disabled="{!LookupRollupSummary.Id!=null}" />
                                <img src="/s.gif" class="imgclass" title="{!$ObjectType.LookupRollupSummary2__mdt.Fields.DeveloperName.inlineHelpText}" />
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.Description__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.Description__c.Label}" />
                        <apex:inputTextArea cols="80" rows="3" value="{!LookupRollupSummary.Description__c}" />
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
                <apex:outputPanel >
                    <apex:pageBlockSection title="Lookup Relationship" columns="1" id="refreshChildSection">
                        <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.ParentObject__c.inlineHelpText}">
                            <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.ParentObject__c.Label}" />
                            <apex:outputPanel >
                                <div class="requiredInput" style="display: flex;">
                                    <div class="requiredBlock" />
                                    <apex:selectList size="1" value="{!selectedParentObject}" style="width:27%;" disabled="{!IF(isParentObjectSelected==true,true,false)}">
                                        <apex:selectOptions value="{!ParentObjList}" />
                                    </apex:selectList>
                                    <apex:commandButton status="pStatus" reRender="refreshPb,errorconfirm,,refreshTextLookups" value="Confirm" action="{!confirmParentObject}"
                                        disabled="{!IF(isParentObjectSelected==true,true,false)}" />
                                    <apex:actionStatus id="pStatus">
                                        <apex:facet name="start">
                                            <img src="/img/loading.gif" />
                                        </apex:facet>
                                    </apex:actionStatus>
                                    <apex:inputHidden value="{!LookupRollupSummary.ParentObject__c}" />
                                </div>

                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!isParentObjectSelected}" helpText="{!IF(isParentObjectSelected, $ObjectType.LookupRollupSummary2__mdt.fields.ChildObject__c.inlineHelpText,'''')}">
                            <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.ChildObject__c.Label}" />
                            <apex:outputPanel >
                                <div class="requiredInput" style="display: flex;">
                                    <div class="requiredBlock" />
                                    <apex:selectList size="1" value="{!selectedChildObject}" style="width:27%;" disabled="{!IF(isChildObjectSelected==true,true,false)}">
                                        <apex:selectOptions value="{!childObjectList}" />
                                    </apex:selectList>
                                    <apex:commandButton status="chStatus" reRender="refreshPb,errorconfirm,refreshChildSection,refreshPCFields,refreshTextLookups"
                                        value="Confirm" action="{!confirmChildObject}" disabled="{!IF(isChildObjectSelected==true,true,false)}"
                                    />
                                    <apex:actionStatus id="chStatus">
                                        <apex:facet name="start">
                                            <img src="/img/loading.gif" />
                                        </apex:facet>
                                    </apex:actionStatus>
                                    <apex:inputHidden value="{!LookupRollupSummary.ChildObject__c}" />
                                </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{! (!isMultiSelectRField) && (isChildObjectSelected)}" helpText="{!IF(isChildObjectSelected, $ObjectType.LookupRollupSummary2__mdt.fields.RelationshipField__c.inlineHelpText,'''')}">
                            <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipField__c.Label}" />
                            <apex:outputPanel >
                                <div class="requiredInput">
                                    <div class="requiredBlock" />
                                    <apex:inputText value="{!LookupRollupSummary.RelationshipField__c}" disabled="true" style="width:26%;" />
                                </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!isMultiSelectRField}" helpText="{!IF(isChildObjectSelected, $ObjectType.LookupRollupSummary2__mdt.fields.RelationshipField__c.inlineHelpText,'''')}">
                            <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipField__c.Label}" />
                            <apex:outputPanel >
                                <div class="requiredInput">
                                    <div class="requiredBlock" />
                                    <apex:selectList size="1" value="{!selectedRField}" style="width:26%;" onchange="updateRField()">
                                        <apex:selectOptions value="{!relationshipFields}" />
                                    </apex:selectList>
                                </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!(isParentObjectSelected && isChildObjectSelected)}" helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteria__c.inlineHelpText}">
                            <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteria__c.Label}" />
                            <apex:inputTextArea cols="40" rows="3" value="{!LookupRollupSummary.RelationshipCriteria__c}" />
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!(isParentObjectSelected && isChildObjectSelected)}" helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteriaFields__c.inlineHelpText}">
                            <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteriaFields__c.Label}" />
                            <apex:outputPanel >
                                <div>
                                    <apex:inputTextArea cols="40" rows="3" value="{!LookupRollupSummary.RelationshipCriteriaFields__c}" style="display: inline-block"
                                    />
                                    <img src="/s.gif" class="imgclass" title="{!$ObjectType.LookupRollupSummary2__mdt.Fields.RelationshipCriteriaFields__c.inlineHelpText}"
                                    />
                                </div>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:outputPanel>

                <apex:pageBlockSection rendered="{!(isParentObjectSelected && isChildObjectSelected)}" title="Rollup Details" columns="2"
                    id="refreshPCFields">
                    <apex:pageBlockSectionItem helpText="{!IF(isChildObjectSelected, $ObjectType.LookupRollupSummary2__mdt.fields.FieldToAggregate__c.inlineHelpText,'''')}">
                        <apex:outputLabel style="{!IF(isChildObjectSelected, ''visibility:visible;'', ''visibility:hidden;'')}" value="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToAggregate__c.Label}"
                        />
                        <apex:outputPanel >
                            <div class="requiredInput" style="display: flex;">
                                <div class="requiredBlock" />
                                <apex:selectList size="1" value="{!selectedChildField}" style="width:57%;" onchange="updateChildField()">
                                    <apex:selectOptions value="{!childObjFields}" />
                                </apex:selectList>
                                <apex:inputHidden value="{!LookupRollupSummary.FieldToAggregate__c}" />
                                <img src="/s.gif" class="imgclass" title="{!$ObjectType.LookupRollupSummary2__mdt.Fields.FieldToAggregate__c.inlineHelpText}"
                                />
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.Active__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.Active__c.Label}" />
                        <apex:inputCheckbox value="{!LookupRollupSummary.Active__c}" disabled="{!realtimeSelected}" />
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateOperation__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateOperation__c.Label}" />
                        <apex:outputPanel >
                            <div class="requiredInput">
                                <div class="requiredBlock" />
                                <apex:selectList value="{!LookupRollupSummary.AggregateOperation__c}" size="1" style="width:57%" onchange="updateAggregateField()">
                                    <apex:selectOptions value="{!AggregateOperations}" />
                                </apex:selectList>
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationMode__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationMode__c.Label}" />
                        <apex:outputPanel >
                            <div class="requiredInput">
                                <div class="requiredBlock" />
                                <apex:selectList value="{!LookupRollupSummary.CalculationMode__c}" size="1" onchange="updateCalcMode()">
                                    <apex:selectOptions value="{!CalculationModes}" />
                                </apex:selectList>
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToOrderBy__c.inlineHelpText}" rendered="{!fieldToOrderByNeeded}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToOrderBy__c.Label}" />
                        <apex:outputPanel >
                            <apex:inputText value="{!LookupRollupSummary.FieldToOrderBy__c}" /> &nbsp;
                            <img src="/s.gif" class="imgclass" title="{!$ObjectType.LookupRollupSummary2__mdt.Fields.FieldToOrderBy__c.inlineHelpText}"
                            />
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <!-- below section item added to ensure consistent placement when hidden fields are displayed -->
                    <apex:pageBlockSectionItem rendered="{!NOT(fieldToOrderByNeeded)}" />
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationSharingMode__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationSharingMode__c.Label}" />
                        <apex:outputPanel >
                            <div class="requiredInput">
                                <div class="requiredBlock" />
                                <apex:selectList value="{!LookupRollupSummary.CalculationSharingMode__c}" size="1">
                                    <apex:selectOptions value="{!CalculationSharingModes}" />
                                </apex:selectList>
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!IF(isParentObjectSelected, $ObjectType.LookupRollupSummary2__mdt.fields.AggregateResultField__c.inlineHelpText,'''')}">
                        <apex:outputLabel style="{!IF(isParentObjectSelected, ''visibility:visible;'', ''visibility:hidden;'')}" value="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateResultField__c.Label}"
                        />
                        <apex:outputPanel >
                            <div class="requiredInput" style="display: flex;">
                                <div class="requiredBlock" />
                                <apex:selectList size="1" value="{!selectedParentField}" style="width:57%;" onchange="updateParentField()">
                                    <apex:selectOptions value="{!parentObjFields}" />
                                </apex:selectList>
                                <apex:inputHidden value="{!LookupRollupSummary.AggregateResultField__c}" />
                            </div>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem />
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateAllRows__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateAllRows__c.Label}" />
                        <apex:inputCheckbox value="{!LookupRollupSummary.AggregateAllRows__c}" />
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem />
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RowLimit__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RowLimit__c.Label}" />
                        <apex:outputPanel >
                            <apex:inputText value="{!LookupRollupSummary.RowLimit__c}" />
                            <img src="/s.gif" class="imgclass" title="{!$ObjectType.LookupRollupSummary2__mdt.Fields.RowLimit__c.inlineHelpText}" />
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
                <apex:pageBlockSection rendered="{!(isParentObjectSelected && isChildObjectSelected)}" title="Text Lookups" columns="2">
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.ConcatenateDelimiter__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.ConcatenateDelimiter__c.Label}" />
                        <apex:outputPanel >
                            <apex:inputText value="{!LookupRollupSummary.ConcatenateDelimiter__c}" />
                            <img src="/s.gif" class="imgclass" title="{!$ObjectType.LookupRollupSummary2__mdt.Fields.ConcatenateDelimiter__c.inlineHelpText}"
                            />
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
                <apex:pageBlockSection rendered="{!(isParentObjectSelected && isChildObjectSelected)}" title="Advanced" columns="1">
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCode__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCode2__c.Label}" />
                        <apex:inputTextArea cols="64" rows="5" value="{!LookupRollupSummary.TestCode2__c}" />
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeParent__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeParent__c.Label}" />
                        <apex:inputTextArea cols="64" rows="5" value="{!LookupRollupSummary.TestCodeParent__c}" />
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeSeeAllData__c.inlineHelpText}">
                        <apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeSeeAllData__c.Label}" />
                        <apex:inputCheckbox value="{!LookupRollupSummary.TestCodeSeeAllData__c}" />
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
            </apex:pageBlock>
        </apex:outputPanel>
    </apex:form>
</apex:page>','managelookuprollupsummaries_New','False');
INSERT INTO "ApexPage" VALUES(2,'57.0','False','LookupRollupSummary__c','1','','managetrigger','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:page standardController="LookupRollupSummary__c" extensions="RollupController" sidebar="false" lightningStylesheets="true">
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip.js'')}" />
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip-load.js'')}" />
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip-deflate.js'')}" />
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip-inflate.js'')}" />
	<apex:form id="form">
		<apex:sectionHeader title="Lookup Rollup Summary" subtitle="Manage Apex Trigger for {!RollupSummary.ChildObject}" />
		<apex:pageMessages escape="false" />
		<apex:outputPanel rendered="{!MetadataConnectionError==true}">
			<apex:outputLink value="{!$Page.welcome}?showHeader=1">Return to the Welcome page</apex:outputLink>
		</apex:outputPanel>
		<apex:outputPanel id="code" rendered="{!MetadataConnectionError==false}">
			<apex:pageBlock >
				<apex:pageBlockSection rendered="{!ParentMergeable && NOT(Deployed) && ISNULL(AsyncResult)}">
					<apex:pageBlockSectionItem >
						<apex:outputLabel value="Deploy code to support record merging?" />
						<apex:inputCheckbox value="{!ParentTriggerRequired}">
							<apex:actionSupport event="onclick" reRender="code" />
						</apex:inputCheckbox>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem >
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection rendered="{!ParentTriggerRequired}">
					<pre>{!ParentTriggerCode}</pre>
				</apex:pageBlockSection>
				<apex:pageBlockSection rendered="{!ParentTriggerRequired}">
					<pre>{!ParentTriggerTestCode}</pre>
				</apex:pageBlockSection>
				<apex:pageBlockSection >
					<pre>{!TriggerCode}</pre>
				</apex:pageBlockSection>
				<apex:pageBlockSection >
					<pre>{!TriggerTestCode}</pre>
				</apex:pageBlockSection>
			</apex:pageBlock>
			<apex:actionPoller action="{!checkAsyncRequest}" interval="5" rerender="form" rendered="{!NOT(ISNULL(AsyncResult))}" />
			<apex:actionFunction name="deployZip" action="{!deployZip}" rendered="{!ISNULL(AsyncResult)}" rerender="form">
				<apex:param name="data" assignTo="{!ZipData}" value="" />
			</apex:actionFunction>
			<c:zip name="generateZip" oncomplete="deployZip(data);" rendered="{!ISNULL(AsyncResult)}">
				<c:zipEntry path="package.xml" data="{!PackageXml}" />
				<c:zipEntry path="destructiveChanges.xml" data="{!DestructiveChangesXml}" rendered="{!Deployed}" />
				<!-- Child Trigger and Test Code -->
				<c:zipEntry path="classes/{!RollupTriggerTestName}.cls-meta.xml" data="{!TriggerTestCodeMetadata}" rendered="{!NOT(Deployed)}"
				/>
				<c:zipEntry path="classes/{!RollupTriggerTestName}.cls" data="{!TriggerTestCode}" rendered="{!NOT(Deployed)}" />
				<c:zipEntry path="triggers/{!RollupTriggerName}.trigger-meta.xml" data="{!TriggerCodeMetadata}" rendered="{!NOT(Deployed)}"
				/>
				<c:zipEntry path="triggers/{!RollupTriggerName}.trigger" data="{!TriggerCode}" rendered="{!NOT(Deployed)}" />
				<!-- Parent Trigger and Test Code -->
				<c:zipEntry path="classes/{!RollupParentTriggerTestName}.cls-meta.xml" data="{!ParentTriggerTestCodeMetadata}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
				<c:zipEntry path="classes/{!RollupParentTriggerTestName}.cls" data="{!ParentTriggerTestCode}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
				<c:zipEntry path="triggers/{!RollupParentTriggerName}.trigger-meta.xml" data="{!ParentTriggerCodeMetadata}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
				<c:zipEntry path="triggers/{!RollupParentTriggerName}.trigger" data="{!ParentTriggerCode}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
			</c:zip>
			<apex:outputPanel rendered="{!ISNULL(AsyncResult)}">
				<input type="button" onclick="generateZip();" value="{!IF(Deployed, ''Remove'', ''Deploy'')}" class="btn" />
				<apex:commandButton value="Cancel" action="{!cancel}" />
			</apex:outputPanel>
		</apex:outputPanel>
	</apex:form>
</apex:page>','managetrigger','False');
INSERT INTO "ApexPage" VALUES(3,'57.0','False','LookupRollupSummary2__mdt','1','','managetriggermdt','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:page standardController="LookupRollupSummary2__mdt" tabStyle="ManageLookupRollupSummaries__tab" extensions="RollupController"
 sidebar="false" lightningStylesheets="true">
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip.js'')}" />
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip-load.js'')}" />
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip-deflate.js'')}" />
	<apex:includeScript value="{!URLFOR($Resource.jszip, ''/jszip-inflate.js'')}" />
	<apex:form id="form">
		<apex:sectionHeader title="Lookup Rollup Summary" subtitle="Manage Apex Trigger for {!RollupSummary.ChildObject}" />
		<apex:pageMessages escape="false" />
		<apex:outputPanel rendered="{!MetadataConnectionError==true}">
			<apex:outputLink value="{!$Page.welcome}?showHeader=1">Return to the Welcome page</apex:outputLink>
		</apex:outputPanel>
		<apex:outputPanel id="code" rendered="{!MetadataConnectionError==false}">
			<apex:pageBlock >
				<apex:pageBlockSection rendered="{!ParentMergeable && NOT(Deployed) && ISNULL(AsyncResult)}">
					<apex:pageBlockSectionItem >
						<apex:outputLabel value="Deploy code to support record merging?" />
						<apex:inputCheckbox value="{!ParentTriggerRequired}">
							<apex:actionSupport event="onclick" reRender="code" />
						</apex:inputCheckbox>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem >
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection rendered="{!ParentTriggerRequired}">
					<pre>{!ParentTriggerCode}</pre>
				</apex:pageBlockSection>
				<apex:pageBlockSection rendered="{!ParentTriggerRequired}">
					<pre>{!ParentTriggerTestCode}</pre>
				</apex:pageBlockSection>
				<apex:pageBlockSection >
					<pre>{!TriggerCode}</pre>
				</apex:pageBlockSection>
				<apex:pageBlockSection >
					<pre>{!TriggerTestCode}</pre>
				</apex:pageBlockSection>
			</apex:pageBlock>
			<apex:actionPoller action="{!checkAsyncRequest}" interval="5" rerender="form" rendered="{!NOT(ISNULL(AsyncResult))}" />
			<apex:actionFunction name="deployZip" action="{!deployZip}" rendered="{!ISNULL(AsyncResult)}" rerender="form">
				<apex:param name="data" assignTo="{!ZipData}" value="" />
			</apex:actionFunction>
			<c:zip name="generateZip" oncomplete="deployZip(data);" rendered="{!ISNULL(AsyncResult)}">
				<c:zipEntry path="package.xml" data="{!PackageXml}" />
				<c:zipEntry path="destructiveChanges.xml" data="{!DestructiveChangesXml}" rendered="{!Deployed}" />
				<!-- Child Trigger and Test Code -->
				<c:zipEntry path="classes/{!RollupTriggerTestName}.cls-meta.xml" data="{!TriggerTestCodeMetadata}" rendered="{!NOT(Deployed)}"
				/>
				<c:zipEntry path="classes/{!RollupTriggerTestName}.cls" data="{!TriggerTestCode}" rendered="{!NOT(Deployed)}" />
				<c:zipEntry path="triggers/{!RollupTriggerName}.trigger-meta.xml" data="{!TriggerCodeMetadata}" rendered="{!NOT(Deployed)}"
				/>
				<c:zipEntry path="triggers/{!RollupTriggerName}.trigger" data="{!TriggerCode}" rendered="{!NOT(Deployed)}" />
				<!-- Parent Trigger and Test Code -->
				<c:zipEntry path="classes/{!RollupParentTriggerTestName}.cls-meta.xml" data="{!ParentTriggerTestCodeMetadata}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
				<c:zipEntry path="classes/{!RollupParentTriggerTestName}.cls" data="{!ParentTriggerTestCode}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
				<c:zipEntry path="triggers/{!RollupParentTriggerName}.trigger-meta.xml" data="{!ParentTriggerCodeMetadata}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
				<c:zipEntry path="triggers/{!RollupParentTriggerName}.trigger" data="{!ParentTriggerCode}" rendered="{!NOT(Deployed) && ParentTriggerRequired}"
				/>
			</c:zip>
			<apex:outputPanel rendered="{!ISNULL(AsyncResult)}">
				<input type="button" onclick="generateZip();" value="{!IF(Deployed, ''Remove'', ''Deploy'')}" class="btn" />
				<apex:commandButton value="Cancel" action="{!URLFOR($Page.managelookuprollupsummaries, null, [''id''=Id])}" />
			</apex:outputPanel>
		</apex:outputPanel>
	</apex:form>
</apex:page>','managetriggermdt','False');
INSERT INTO "ApexPage" VALUES(4,'57.0','False','LookupRollupSummary__c','1','','rollupcalculate','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:page standardController="LookupRollupSummary__c" extensions="RollupCalculateController" lightningStylesheets="true">
	<apex:sectionHeader title="{!LookupRollupSummary__c.Name}" subtitle="Run Full Calculate Job" />
	<apex:pageMessages />
	<apex:form >
		<p>Filter parent object
			<B>{!LookupRollupSummary__c.ParentObject__c}</B> records to update using WHERE clause (OPTIONAL):</p>
		<apex:inputTextarea html-placeholder="Name LIKE ''Fred%'' AND Custom__c > 0" cols="80" value="{!masterObjectWhere}" />
		<p/>
		<apex:commandButton action="{!runCalculateJob}" value="Run Full Calculate Job" />
		<apex:commandButton action="{!cancel}" value="Cancel" />
	</apex:form>
</apex:page>','rollupcalculate','False');
INSERT INTO "ApexPage" VALUES(5,'57.0','False','LookupRollupSummary2__mdt','1','','rollupcalculatemdt','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:page standardController="LookupRollupSummary2__mdt" tabStyle="ManageLookupRollupSummaries__tab" extensions="RollupCalculateController"
 lightningStylesheets="true">
	<apex:sectionHeader title="{!LookupRollupSummary2__mdt.Label}" subtitle="Run Full Calculate Job" />
	<apex:pageMessages />
	<apex:form >
		<p>Filter parent object
			<B>{!LookupRollupSummary2__mdt.ParentObject__c}</B> records to update using WHERE clause (OPTIONAL):</p>
		<apex:inputTextarea html-placeholder="Name LIKE ''Fred%'' AND Custom__c > 0" cols="80" value="{!masterObjectWhere}" />
		<p/>
		<apex:commandButton action="{!runCalculateJob}" value="Run Full Calculate Job" />
		<apex:commandButton value="Cancel" action="{!URLFOR($Page.managelookuprollupsummaries, null, [''id''=Id])}" />
	</apex:form>
</apex:page>','rollupcalculatemdt','False');
INSERT INTO "ApexPage" VALUES(6,'57.0','False','LookupRollupSummary__c','1','','rollupscheduledcalculate','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:page standardController="LookupRollupSummary__c" extensions="RollupScheduledCalculateController" lightningStylesheets="true">
	<apex:sectionHeader title="{!LookupRollupSummary__c.Name}" subtitle="Schedule Recurring Full Calculate Job" />
	<apex:pageMessages />
	<apex:form >
		<p>Filter parent object
			<B>{!LookupRollupSummary__c.ParentObject__c}</B> records to update using WHERE clause (OPTIONAL):</p>
		<apex:inputTextarea html-placeholder="Name LIKE ''Fred%'' AND Custom__c > 0" cols="80" value="{!masterObjectWhere}" />
		<p/>
		<apex:pageBlock title="Schedule">
			<apex:pageBlockSection columns="3">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Minute" />
					<apex:selectList value="{!minute}" size="8" multiselect="false" style="width:100px">
						<apex:selectOptions value="{!minutes}" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select Every Hour or one or more hours">
					<apex:outputLabel value="Hour" />
					<apex:selectList value="{!hour}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="*" itemLabel="Every Hour (*)" />
						<apex:selectOption itemValue="0" itemLabel="0" />
						<apex:selectOption itemValue="1" itemLabel="1" />
						<apex:selectOption itemValue="2" itemLabel="2" />
						<apex:selectOption itemValue="3" itemLabel="3" />
						<apex:selectOption itemValue="4" itemLabel="4" />
						<apex:selectOption itemValue="5" itemLabel="5" />
						<apex:selectOption itemValue="6" itemLabel="6" />
						<apex:selectOption itemValue="7" itemLabel="7" />
						<apex:selectOption itemValue="8" itemLabel="8" />
						<apex:selectOption itemValue="9" itemLabel="9" />
						<apex:selectOption itemValue="10" itemLabel="10" />
						<apex:selectOption itemValue="11" itemLabel="11" />
						<apex:selectOption itemValue="12" itemLabel="12" />
						<apex:selectOption itemValue="13" itemLabel="13" />
						<apex:selectOption itemValue="14" itemLabel="14" />
						<apex:selectOption itemValue="15" itemLabel="15" />
						<apex:selectOption itemValue="16" itemLabel="16" />
						<apex:selectOption itemValue="17" itemLabel="17" />
						<apex:selectOption itemValue="18" itemLabel="18" />
						<apex:selectOption itemValue="19" itemLabel="19" />
						<apex:selectOption itemValue="20" itemLabel="20" />
						<apex:selectOption itemValue="21" itemLabel="21" />
						<apex:selectOption itemValue="22" itemLabel="22" />
						<apex:selectOption itemValue="23" itemLabel="23" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select None, Every Day or one or more days of the month">
					<apex:outputLabel value="Day of Month" />
					<apex:selectList value="{!day}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="?" itemLabel="None (?)" />
						<apex:selectOption itemValue="*" itemLabel="Every Day (*)" />
						<apex:selectOption itemValue="1" itemLabel="1" />
						<apex:selectOption itemValue="2" itemLabel="2" />
						<apex:selectOption itemValue="3" itemLabel="3" />
						<apex:selectOption itemValue="4" itemLabel="4" />
						<apex:selectOption itemValue="5" itemLabel="5" />
						<apex:selectOption itemValue="6" itemLabel="6" />
						<apex:selectOption itemValue="7" itemLabel="7" />
						<apex:selectOption itemValue="8" itemLabel="8" />
						<apex:selectOption itemValue="9" itemLabel="9" />
						<apex:selectOption itemValue="10" itemLabel="10" />
						<apex:selectOption itemValue="11" itemLabel="11" />
						<apex:selectOption itemValue="12" itemLabel="12" />
						<apex:selectOption itemValue="13" itemLabel="13" />
						<apex:selectOption itemValue="14" itemLabel="14" />
						<apex:selectOption itemValue="15" itemLabel="15" />
						<apex:selectOption itemValue="16" itemLabel="16" />
						<apex:selectOption itemValue="17" itemLabel="17" />
						<apex:selectOption itemValue="18" itemLabel="18" />
						<apex:selectOption itemValue="19" itemLabel="19" />
						<apex:selectOption itemValue="20" itemLabel="20" />
						<apex:selectOption itemValue="21" itemLabel="21" />
						<apex:selectOption itemValue="22" itemLabel="22" />
						<apex:selectOption itemValue="23" itemLabel="23" />
						<apex:selectOption itemValue="24" itemLabel="24" />
						<apex:selectOption itemValue="25" itemLabel="25" />
						<apex:selectOption itemValue="26" itemLabel="26" />
						<apex:selectOption itemValue="27" itemLabel="27" />
						<apex:selectOption itemValue="28" itemLabel="28" />
						<apex:selectOption itemValue="29" itemLabel="29" />
						<apex:selectOption itemValue="30" itemLabel="30" />
						<apex:selectOption itemValue="31" itemLabel="31" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select Every Month or one or more months">
					<apex:outputLabel value="Month" />
					<apex:selectList value="{!month}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="*" itemLabel="Every Month (*)" />
						<apex:selectOption itemValue="1" itemLabel="January" />
						<apex:selectOption itemValue="2" itemLabel="February" />
						<apex:selectOption itemValue="3" itemLabel="March" />
						<apex:selectOption itemValue="4" itemLabel="April" />
						<apex:selectOption itemValue="5" itemLabel="May" />
						<apex:selectOption itemValue="6" itemLabel="June" />
						<apex:selectOption itemValue="7" itemLabel="July" />
						<apex:selectOption itemValue="8" itemLabel="August" />
						<apex:selectOption itemValue="9" itemLabel="Septemer" />
						<apex:selectOption itemValue="10" itemLabel="October" />
						<apex:selectOption itemValue="11" itemLabel="November" />
						<apex:selectOption itemValue="12" itemLabel="December" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select None, Every Weekday or one or more week days">
					<apex:outputLabel value="Day of Week" />
					<apex:selectList value="{!weekday}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="?" itemLabel="None (?)" />
						<apex:selectOption itemValue="*" itemLabel="Every Weekday (*)" />
						<apex:selectOption itemValue="1" itemLabel="Sunday" />
						<apex:selectOption itemValue="2" itemLabel="Monday" />
						<apex:selectOption itemValue="3" itemLabel="Tuesday" />
						<apex:selectOption itemValue="4" itemLabel="Wednesday" />
						<apex:selectOption itemValue="5" itemLabel="Thursday" />
						<apex:selectOption itemValue="6" itemLabel="Friday" />
						<apex:selectOption itemValue="7" itemLabel="Saturday" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
		</apex:pageBlock>
		<apex:commandButton action="{!scheduleCalculateJob}" value="Schedule Recurring Full Calculate Job" />
		<apex:commandButton action="{!cancel}" value="Cancel" />
	</apex:form>
</apex:page>','rollupscheduledcalculate','False');
INSERT INTO "ApexPage" VALUES(7,'57.0','False','LookupRollupSummary2__mdt','1','','rollupscheduledcalculatemdt','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
-->
<apex:page standardController="LookupRollupSummary2__mdt" tabStyle="ManageLookupRollupSummaries__tab" extensions="RollupScheduledCalculateController"
 lightningStylesheets="true">
	<apex:sectionHeader title="{!LookupRollupSummary2__mdt.Label}" subtitle="Schedule Recurring Full Calculate Job" />
	<apex:pageMessages />
	<apex:form >
		<p>Filter parent object
			<B>{!LookupRollupSummary2__mdt.ParentObject__c}</B> records to update using WHERE clause (OPTIONAL):</p>
		<apex:inputTextarea html-placeholder="Name LIKE ''Fred%'' AND Custom__c > 0" cols="80" value="{!masterObjectWhere}" />
		<p/>
		<apex:pageBlock title="Schedule">
			<apex:pageBlockSection columns="3">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Minute" />
					<apex:selectList value="{!minute}" size="8" multiselect="false" style="width:100px">
						<apex:selectOptions value="{!minutes}" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select Every Hour or one or more hours">
					<apex:outputLabel value="Hour" />
					<apex:selectList value="{!hour}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="*" itemLabel="Every Hour (*)" />
						<apex:selectOption itemValue="0" itemLabel="0" />
						<apex:selectOption itemValue="1" itemLabel="1" />
						<apex:selectOption itemValue="2" itemLabel="2" />
						<apex:selectOption itemValue="3" itemLabel="3" />
						<apex:selectOption itemValue="4" itemLabel="4" />
						<apex:selectOption itemValue="5" itemLabel="5" />
						<apex:selectOption itemValue="6" itemLabel="6" />
						<apex:selectOption itemValue="7" itemLabel="7" />
						<apex:selectOption itemValue="8" itemLabel="8" />
						<apex:selectOption itemValue="9" itemLabel="9" />
						<apex:selectOption itemValue="10" itemLabel="10" />
						<apex:selectOption itemValue="11" itemLabel="11" />
						<apex:selectOption itemValue="12" itemLabel="12" />
						<apex:selectOption itemValue="13" itemLabel="13" />
						<apex:selectOption itemValue="14" itemLabel="14" />
						<apex:selectOption itemValue="15" itemLabel="15" />
						<apex:selectOption itemValue="16" itemLabel="16" />
						<apex:selectOption itemValue="17" itemLabel="17" />
						<apex:selectOption itemValue="18" itemLabel="18" />
						<apex:selectOption itemValue="19" itemLabel="19" />
						<apex:selectOption itemValue="20" itemLabel="20" />
						<apex:selectOption itemValue="21" itemLabel="21" />
						<apex:selectOption itemValue="22" itemLabel="22" />
						<apex:selectOption itemValue="23" itemLabel="23" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select None, Every Day or one or more days of the month">
					<apex:outputLabel value="Day of Month" />
					<apex:selectList value="{!day}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="?" itemLabel="None (?)" />
						<apex:selectOption itemValue="*" itemLabel="Every Day (*)" />
						<apex:selectOption itemValue="1" itemLabel="1" />
						<apex:selectOption itemValue="2" itemLabel="2" />
						<apex:selectOption itemValue="3" itemLabel="3" />
						<apex:selectOption itemValue="4" itemLabel="4" />
						<apex:selectOption itemValue="5" itemLabel="5" />
						<apex:selectOption itemValue="6" itemLabel="6" />
						<apex:selectOption itemValue="7" itemLabel="7" />
						<apex:selectOption itemValue="8" itemLabel="8" />
						<apex:selectOption itemValue="9" itemLabel="9" />
						<apex:selectOption itemValue="10" itemLabel="10" />
						<apex:selectOption itemValue="11" itemLabel="11" />
						<apex:selectOption itemValue="12" itemLabel="12" />
						<apex:selectOption itemValue="13" itemLabel="13" />
						<apex:selectOption itemValue="14" itemLabel="14" />
						<apex:selectOption itemValue="15" itemLabel="15" />
						<apex:selectOption itemValue="16" itemLabel="16" />
						<apex:selectOption itemValue="17" itemLabel="17" />
						<apex:selectOption itemValue="18" itemLabel="18" />
						<apex:selectOption itemValue="19" itemLabel="19" />
						<apex:selectOption itemValue="20" itemLabel="20" />
						<apex:selectOption itemValue="21" itemLabel="21" />
						<apex:selectOption itemValue="22" itemLabel="22" />
						<apex:selectOption itemValue="23" itemLabel="23" />
						<apex:selectOption itemValue="24" itemLabel="24" />
						<apex:selectOption itemValue="25" itemLabel="25" />
						<apex:selectOption itemValue="26" itemLabel="26" />
						<apex:selectOption itemValue="27" itemLabel="27" />
						<apex:selectOption itemValue="28" itemLabel="28" />
						<apex:selectOption itemValue="29" itemLabel="29" />
						<apex:selectOption itemValue="30" itemLabel="30" />
						<apex:selectOption itemValue="31" itemLabel="31" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select Every Month or one or more months">
					<apex:outputLabel value="Month" />
					<apex:selectList value="{!month}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="*" itemLabel="Every Month (*)" />
						<apex:selectOption itemValue="1" itemLabel="January" />
						<apex:selectOption itemValue="2" itemLabel="February" />
						<apex:selectOption itemValue="3" itemLabel="March" />
						<apex:selectOption itemValue="4" itemLabel="April" />
						<apex:selectOption itemValue="5" itemLabel="May" />
						<apex:selectOption itemValue="6" itemLabel="June" />
						<apex:selectOption itemValue="7" itemLabel="July" />
						<apex:selectOption itemValue="8" itemLabel="August" />
						<apex:selectOption itemValue="9" itemLabel="Septemer" />
						<apex:selectOption itemValue="10" itemLabel="October" />
						<apex:selectOption itemValue="11" itemLabel="November" />
						<apex:selectOption itemValue="12" itemLabel="December" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select None, Every Weekday or one or more week days">
					<apex:outputLabel value="Day of Week" />
					<apex:selectList value="{!weekday}" size="8" multiselect="true" style="width:100px">
						<apex:selectOption itemValue="?" itemLabel="None (?)" />
						<apex:selectOption itemValue="*" itemLabel="Every Weekday (*)" />
						<apex:selectOption itemValue="1" itemLabel="Sunday" />
						<apex:selectOption itemValue="2" itemLabel="Monday" />
						<apex:selectOption itemValue="3" itemLabel="Tuesday" />
						<apex:selectOption itemValue="4" itemLabel="Wednesday" />
						<apex:selectOption itemValue="5" itemLabel="Thursday" />
						<apex:selectOption itemValue="6" itemLabel="Friday" />
						<apex:selectOption itemValue="7" itemLabel="Saturday" />
					</apex:selectList>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
		</apex:pageBlock>
		<apex:commandButton action="{!scheduleCalculateJob}" value="Schedule Recurring Full Calculate Job" />
		<apex:commandButton action="{!URLFOR($Page.managelookuprollupsummaries, null, [''id''=Id])}" value="Cancel" />
	</apex:form>
</apex:page>','rollupscheduledcalculatemdt','False');
INSERT INTO "ApexPage" VALUES(8,'57.0','False','LookupRollupSummary__c','1','','rollupsummaryenhanced','<!--
/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

/**
 * Contributed by Wes Weingartner, https://github.com/wes1278
 *
 * https://github.com/afawcett/declarative-lookup-rollup-summaries/pull/15
 **/
-->

<apex:page standardController="LookupRollupSummary__c" extensions="RollupSummaryEnhancedController" showHeader="true" sidebar="true"
 lightningStylesheets="true">

	<script src=''https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js'' />
	<script src=''https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js'' />
	<apex:stylesheet value="https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />

	<apex:sectionHeader title="Lookup Rollup Summary" subtitle="Parent Object" />
	<apex:pageMessages id="msgs" />

	<apex:form id="rusForm">

		<apex:pageBlock id="pbs" mode="edit">
			<apex:pageBlockButtons location="bottom">
				<apex:commandButton action="{!save}" value="Save" />
				<apex:commandButton action="{!cancel}" value="Cancel" />
			</apex:pageBlockButtons>
			<!-- Parent Object -->
			<apex:pageBlockSection collapsible="false" columns="1" showHeader="true" title="Parent Object" id="parent">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Name of lookup definition: " for="childFields" />
					<apex:outputPanel styleClass="requiredInput" layout="block">
						<apex:outputPanel styleClass="requiredBlock" layout="block" />
						<apex:inputField value="{!LookupRollupSummary__c.Name}" />
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Parent Object:" for="parentObject" />
					<apex:outputPanel styleClass="requiredInput" layout="block">
						<apex:outputPanel styleClass="requiredBlock" layout="block" />
						<apex:selectList value="{!LookupRollupSummary__c.ParentObject__c}" id="parentObject" size="1">
							<apex:selectOptions value="{!parentObjects}" />
							<apex:actionSupport event="onchange" rerender="parentFields, childObject" />
						</apex:selectList>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Aggregated Results Field: " for="parentFields" />
					<apex:outputPanel styleClass="requiredInput" layout="block">
						<apex:outputPanel styleClass="requiredBlock" layout="block" />
						<apex:selectList value="{!LookupRollupSummary__c.AggregateResultField__c}" id="parentFields" size="1">
							<apex:selectOptions value="{!parentFields}" />
						</apex:selectList>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>

			<!-- child Object -->
			<apex:pageBlockSection collapsible="false" columns="1" showHeader="true" title="Child Object" id="child">
				<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary__c.Fields.ChildObject__c.inlineHelpText}">
					<apex:outputLabel value="Child Object (Field) : " for="parentFields" />
					<apex:outputPanel styleClass="requiredInput" layout="block">
						<apex:outputPanel styleClass="requiredBlock" layout="block" />
						<apex:selectList value="{!relationshipField}" id="childObject" size="1">
							<apex:selectOptions value="{!childObjects}" />
							<apex:actionSupport event="onchange" action="{!calculateRelationshipField}" reRender="childFields, output" />
						</apex:selectList>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary__c.Fields.AggregateOperation__c.inlineHelpText}">
					<apex:outputLabel value="{!$ObjectType.LookupRollupSummary__c.Fields.AggregateOperation__c.label}" for="childFields" />
					<apex:outputPanel styleClass="requiredInput" layout="block">
						<apex:outputPanel styleClass="requiredBlock" layout="block" />
						<apex:inputField value="{!LookupRollupSummary__c.AggregateOperation__c}">
							<apex:actionSupport event="onchange" reRender="child" />
						</apex:inputField>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary__c.Fields.FieldToAggregate__c.inlineHelpText}" rendered="{!IF(LookupRollupSummary__c.AggregateOperation__c = ''Count'',false,true)}">
					<apex:outputLabel value="Child field to Aggregate: " for="childFields" />
					<apex:outputPanel styleClass="requiredInput" layout="block">
						<apex:outputPanel styleClass="requiredBlock" layout="block" />
						<apex:selectList value="{!LookupRollupSummary__c.FieldToAggregate__c}" id="childFields" size="1">
							<apex:selectOptions value="{!childFields}" />
						</apex:selectList>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
			<apex:pageBlockSection collapsible="false" columns="1" showHeader="true" title="Child Criteria" id="criteria">
				<apex:inputField style="width:400px;" value="{!LookupRollupSummary__c.RelationshipCriteria__c}" />
				<apex:inputField style="width:175px; height:100px;" value="{!LookupRollupSummary__c.RelationshipCriteriaFields__c}" />
			</apex:pageBlockSection>
			<apex:pageBlockSection collapsible="false" columns="1" showHeader="true" title="Calculation" id="mode">
				<apex:inputField value="{!LookupRollupSummary__c.CalculationMode__c}" />
			</apex:pageBlockSection>
		</apex:pageBlock>
	</apex:form>

</apex:page>','rollupsummaryenhanced','False');
INSERT INTO "ApexPage" VALUES(9,'57.0','False','LookupRollupSummary__c','4','','rollupsummaryenhancednew','<apex:page standardController="LookupRollupSummary__c" recordSetVar="records" action="{!URLFOR($Page.rollupsummaryenhanced)}"
/>','rollupsummaryenhancednew','False');
INSERT INTO "ApexPage" VALUES(10,'57.0','False','LookupRollupSummaryLog__c','4','','rollupsummarylogdelete','<apex:page standardController="LookupRollupSummaryLog__c" recordSetVar="logs" extensions="RollupSummaryLogDeleteController"
    lightningStylesheets="true">
    <apex:pageMessage strength="2" escape="false" severity="Info" summary="Click Delete to delete selected log records."></apex:pageMessage>
    <apex:form >
        <apex:commandButton action="{!deleteLog}" value="Delete" />
        <apex:commandButton action="{!cancel}" value="Cancel" />
    </apex:form>
</apex:page>','rollupsummarylogdelete','False');
INSERT INTO "ApexPage" VALUES(11,'57.0','False','WelcomeController','2','','welcome','<apex:page controller="WelcomeController" showHeader="{!IF($CurrentPage.Parameters.ShowHeader == ''1'', true, false)}" sidebar="false"
 tabStyle="LookupRollupSummary__c" standardStylesheets="true" lightningStylesheets="true" action="{!checkMetadataAPIConnection}">
	<script>
		function createRemoteSite() {
			// Disable button 
			document.getElementById(''createremotesitebtn'').disabled = true;
			// Calls the Metdata API from JavaScript to create the Remote Site Setting to permit Apex callouts
			var binding = new XMLHttpRequest();
			var request =
				''<?xml version="1.0" encoding="utf-8"?>'' +
				''<env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'' +
				''<env:Header>'' +
				''<urn:SessionHeader xmlns:urn="http://soap.sforce.com/2006/04/metadata">'' +
				''<urn:sessionId>{!$Api.Session_ID}</urn:sessionId>'' +
				''</urn:SessionHeader>'' +
				''</env:Header>'' +
				''<env:Body>'' +
				''<upsertMetadata xmlns="http://soap.sforce.com/2006/04/metadata">'' +
				''<metadata xsi:type="RemoteSiteSetting">'' +
				''<fullName>{!RemoteSiteName}</fullName>'' +
				''<description>Metadata API Remote Site Setting for Declarative Rollup Tool (DLRS)</description>'' +
				''<disableProtocolSecurity>false</disableProtocolSecurity>'' +
				''<isActive>true</isActive>'' +
				''<url>{!MetadataAPIUrl}</url>'' +
				''</metadata>'' +
				''</upsertMetadata>'' +
				''</env:Body>'' +
				''</env:Envelope>'';
			binding.open(''POST'', ''https://{!Host}/services/Soap/m/31.0'');
			binding.setRequestHeader(''SOAPAction'', ''""'');
			binding.setRequestHeader(''Content-Type'', ''text/xml'');
			binding.onreadystatechange =
				function () {
					if (this.readyState == 4) {
						var parser = new DOMParser();
						var doc = parser.parseFromString(this.response, ''application/xml'');
						var errors = doc.getElementsByTagName(''errors'');
						var messageText = '''';
						for (var errorIdx = 0; errorIdx < errors.length; errorIdx++)
							messageText += errors.item(errorIdx).getElementsByTagName(''message'').item(0).innerHTML + ''\n'';
						if (messageText == '''') {
							messageText = doc.getElementsByTagName(''faultstring'').item(0).innerHTML;
						}
						displayMetadataResponse(messageText);
					}
				}
			binding.send(request);
		}
	</script>

	<body class="homeTab">
		<apex:form id="myForm">
			<apex:actionFunction name="displayMetadataResponse" action="{!displayMetadataResponse}" rerender="myForm">
				<apex:param name="metadataResponse" assignTo="{!metadataResponse}" value="{!metadataResponse}" />
			</apex:actionFunction>
			<apex:sectionHeader title="Declarative Lookup Rollup Summaries" subtitle="Welcome" />
			<apex:pageMessages />
			<table>
				<tr>
					<td>
						<apex:image url="{!$Resource.DLRS_Logo}" width="200" height="200"/>
					</td>
					<td>
						<p>
							<b>Overview:</b> This is a tool that helps address a current platform limitation around rollup summaries. Specifically
							the inability to do rollup summaries between lookup relationships. This is possible between master detail relationships
							using the declarative mode of Force.com, but not between lookup relationships.</p>
						<p>
							<b>Documentation:</b> You can learn more about this tool by reading the documentation
							<a target="_new" href="https://sfdo-community-sprints.github.io/DLRS-Documentation/">here.</a>
						</p>
						<p>
							<b>Support:</b> This is a community driven open source tool there is no official support. Please post questions to this
							<a target="_new" href="https://success.salesforce.com/_ui/core/chatter/groups/GroupProfilePage?g=0F9300000009O5p">community group</a>. Before you post questions please check for past or open issues
							<a target="_new" href="https://github.com/afawcett/declarative-lookup-rollup-summaries/issues">here</a> and also review the
							<b>Lookup Rollup Summaries Tools</b> tab.</p>
					</td>
				</tr>
			</table>
			<apex:outputPanel rendered="{!MetadataConnectionWarning}">
				<h1>Important Post Install Step:</h1>
				<p>In order to
					<b>configure</b> the features of this tool you need to permit the current user access to the
					<b>Salesforce Metadata API</b> of your organization. See
					<a href="https://github.com/afawcett/declarative-lookup-rollup-summaries/wiki/Metadata-API-Connection-Issues-FAQ">FAQ here for more</a>.</p>
				<ul>
					<li>If your Org
						<b>is using My Domain</b> resolve the errors on screen and refersh this page until no more errors are shown.</li>
					<li>
						<p>If your Org
							<b>is not using My Domain</b> a
							<a target="_new" href="http://na1.salesforce.com/help/doc/en/configuring_remoteproxy.htm">Remote Site Setting</a> with this Salesforce Server URL
							<b>{!MetadataAPIUrl}</b>
						</p>
						<p> Click the
							<b>Create/Update Remote Site Setting</b> button to have the tool perform this step for you.</p>
						<input id="createremotesitebtn" type="button" onclick="createRemoteSite();" value="Create/Update Remote Site Setting" />
					</li>
				</ul>
			</apex:outputPanel>
			<apex:outputPanel rendered="{!MetadataConnectionWarning}">
				<p style="color:gray">DEBUG USE ONLY: {!metadataApiException}</p>
			</apex:outputPanel>
		</apex:form>
	</body>
</apex:page>','welcome','False');
INSERT INTO "ApexPage" VALUES(12,'57.0','False','','0','','welcometab','<apex:page showHeader="true" sidebar="false" tabStyle="Welcome__tab" lightningStylesheets="true">
	<apex:include pageName="{!$Page.welcome}" />
</apex:page>','welcometab','False');
INSERT INTO "ApexPage" VALUES(13,'57.0','False','ManageLookupRollupSummariesController','2','','managelookuprollupsummaries','<apex:page controller="ManageLookupRollupSummariesController" lightningStylesheets="true" tabStyle="ManageLookupRollupSummaries__tab"
 showHeader="true" sidebar="true" action="{!init}">
	<apex:form >
		<apex:sectionHeader title="Manage Lookup Rollup Summaries" subtitle="Manage, Deploy, Run and Schedule" />
		<apex:pageMessage rendered="{!$Setup.DeclarativeLookupRollupSummaries__c.HideManageLookupRollupSummariesInfo__c==false}"
		 strength="1" escape="false" severity="Info" summary="This tab provides the ability to store rollup definitions as <b>Custom Metadata</b>. This allows your rollups to be added to <b>Change Sets</b> and <b>Packages</b> and automatically cloned during a <b>Sandbox</b> refresh. Note that you can also change the configuration entered here under the <b>Setup</b> menu <b>Custom Metadata Types</b> page. However, using this page is recommended as it provides added validation and features.">
 		 It may be that your org has rollups defined under the <a href="{!URLFOR($Action.LookupRollupSummary__c.Tab,$ObjectType.LookupRollupSummary__c)}">older Lookup Rollup Summaries tab</a>. It is recommended you move
 				them over.&nbsp;
			<apex:commandLink action="{!hideMessage}" value="Hide this message" /></apex:pageMessage>
		<apex:pageMessages />
		<apex:outputPanel rendered="{!MetadataConnectionError==true}">
			<apex:outputLink value="{!$Page.welcometab}">Return to the Welcome page</apex:outputLink>
		</apex:outputPanel>
		<apex:outputPanel rendered="{!MetadataConnectionError==false}">
			<apex:outputLabel value="Select Lookup Rollup Summary:" />&nbsp;
			<apex:selectList value="{!SelectedLookup}" size="1">
				<apex:actionSupport event="onchange" action="{!load}" reRender="rollupDetailView" />
				<apex:selectOptions value="{!Lookups}" />
			</apex:selectList>
			<apex:commandButton value="Try Our New Wizard" action="{!newWizard}" style="margin-left: 20px;" />
			<p/>
			<apex:pageBlock mode="edit" id="rollupDetailView">
				<apex:pageBlockButtons >
					<apex:commandButton value="Save" action="{!save}" />
					<apex:commandButton value="Clone" action="{!clonex}" rendered="{!LookupRollupSummary.Id!=null}" />
					<apex:commandButton value="Delete" action="{!deleteX}" rendered="{!LookupRollupSummary.Id!=null}" />
					<apex:commandButton value="Full Calculate" action="{!URLFOR($Page.rollupcalculatemdt, null, [''id''=LookupRollupSummary.id])}"
					 rendered="{!LookupRollupSummary.Id!=null}" />
					<apex:commandButton value="Schedule Full Calculate" action="{!URLFOR($Page.rollupscheduledcalculatemdt, null, [''id''=LookupRollupSummary.id])}"
					 rendered="{!LookupRollupSummary.Id!=null}" />
					<apex:commandButton value="Manage Child Trigger" action="{!URLFOR($Page.managetriggermdt, null, [''id''=LookupRollupSummary.id])}"
					 rendered="{!LookupRollupSummary.Id!=null}" />
				</apex:pageBlockButtons>
				<apex:pageBlockSection title="Information" columns="2">
					<apex:pageBlockSectionItem >
						<apex:outputLabel value="Lookup Rollup Summary Name" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText size="32" value="{!LookupRollupSummary.Label}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem >
						<apex:outputLabel value="Lookup Rollup Summary Unique Name" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText size="32" value="{!LookupRollupSummary.DeveloperName}" disabled="{!LookupRollupSummary.Id!=null}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection title="Lookup Relationship" columns="2">
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.ParentObject__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.ParentObject__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText value="{!LookupRollupSummary.ParentObject__c}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipField__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipField__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText value="{!LookupRollupSummary.RelationshipField__c}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.ChildObject__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.ChildObject__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText value="{!LookupRollupSummary.ChildObject__c}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteria__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteria__c.Label}" />
						<apex:inputText size="60" value="{!LookupRollupSummary.RelationshipCriteria__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem />
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteriaFields__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RelationshipCriteriaFields__c.Label}" />
						<apex:inputTextArea cols="40" rows="3" value="{!LookupRollupSummary.RelationshipCriteriaFields__c}" />
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection title="Rollup Details" columns="2">
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToAggregate__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToAggregate__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText value="{!LookupRollupSummary.FieldToAggregate__c}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.Active__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.Active__c.Label}" />
						<apex:inputCheckbox value="{!LookupRollupSummary.Active__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToOrderBy__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.FieldToOrderBy__c.Label}" />
						<apex:inputText value="{!LookupRollupSummary.FieldToOrderBy__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationMode__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationMode__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:selectList value="{!LookupRollupSummary.CalculationMode__c}" size="1">
									<apex:selectOptions value="{!CalculationModes}" />
								</apex:selectList>
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateOperation__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateOperation__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:selectList value="{!LookupRollupSummary.AggregateOperation__c}" size="1">
									<apex:selectOptions value="{!AggregateOperations}" />
								</apex:selectList>
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationSharingMode__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.CalculationSharingMode__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:selectList value="{!LookupRollupSummary.CalculationSharingMode__c}" size="1">
									<apex:selectOptions value="{!CalculationSharingModes}" />
								</apex:selectList>
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateResultField__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateResultField__c.Label}" />
						<apex:outputPanel >
							<div class="requiredInput">
								<div class="requiredBlock" />
								<apex:inputText value="{!LookupRollupSummary.AggregateResultField__c}" />
							</div>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem />
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateAllRows__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.AggregateAllRows__c.Label}" />
						<apex:inputCheckbox value="{!LookupRollupSummary.AggregateAllRows__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem />
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.RowLimit__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.RowLimit__c.Label}" />
						<apex:inputText value="{!LookupRollupSummary.RowLimit__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem >
						<apex:outputPanel style="font-weight: bold; margin-left: 150px; ">
							<apex:outputLabel value="Scheduled Full Calculate - Next Date:" rendered="{!LookupRollupSummary.Id!=null}" />
							<apex:outputText style="color:rgba(255, 166, 0, 0.589)" value="{!RollupSchedule}" rendered="{!LookupRollupSummary.Id!=null && RollupSchedule=''No Schedule for Rollup''}">
							</apex:outputText>
							<apex:outputText style="color:green" value="{!RollupSchedule}" rendered="{!LookupRollupSummary.Id!=null && RollupSchedule !=''No Schedule for Rollup''}">
							</apex:outputText>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection title="Text Lookups" columns="2">
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.ConcatenateDelimiter__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.ConcatenateDelimiter__c.Label}" />
						<apex:inputText value="{!LookupRollupSummary.ConcatenateDelimiter__c}" />
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection title="Description" columns="2">
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.Description__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.Description__c.Label}" />
						<apex:inputTextArea cols="80" rows="3" value="{!LookupRollupSummary.Description__c}" />
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection title="Advanced" columns="1">
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCode__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCode2__c.Label}" />
						<apex:inputTextArea cols="64" rows="5" value="{!LookupRollupSummary.TestCode2__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeParent__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeParent__c.Label}" />
						<apex:inputTextArea cols="64" rows="5" value="{!LookupRollupSummary.TestCodeParent__c}" />
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeSeeAllData__c.inlineHelpText}">
						<apex:outputLabel value="{!$ObjectType.LookupRollupSummary2__mdt.fields.TestCodeSeeAllData__c.Label}" />
						<apex:inputCheckbox value="{!LookupRollupSummary.TestCodeSeeAllData__c}" />
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
			</apex:pageBlock>
		</apex:outputPanel>
	</apex:form>
</apex:page>','managelookuprollupsummaries','False');
INSERT INTO "ApexPage" VALUES(14,'57.0','False','RollupSummaryViewController','2','','RollupSummaryView','<apex:page controller="RollupSummaryViewController" lightningStylesheets="true" showHeader="true" sidebar="true">
    <apex:pageBlock title="List View - All Lookup Rollup Summaries">
        <apex:pageBlockTable value="{!view }" var="v">
            <apex:column headerValue="Rollup Label" value="{! v.label }" />
            <apex:column headerValue="Calculation Mode" value="{! v.calcMode }" />
            <apex:column headerValue="Scheduled Apex Job name (Empty = none)" value="{! v.apexJobName }" />
            <apex:column headerValue="Scheduled Full Calculate - Next Date" value="{! v.ScheduledTime }" />
            <apex:column headerValue="Job Fired Count" value="{! v.JobFiredCount }" />
            <apex:column headerValue="Record ID">
                <apex:form >
                    <apex:commandLink action="{!redirect}" value="{! v.label } [{! v.recordID }]">
                        <apex:param name="newid" value="{! v.recordID}" />
                    </apex:commandLink>
                </apex:form>
            </apex:column>
        </apex:pageBlockTable>
    </apex:pageBlock>
</apex:page>','RollupSummaryView','False');
CREATE TABLE "ApexTestQueueItem" (
	id INTEGER NOT NULL, 
	"ApexClassId" VARCHAR(255), 
	PRIMARY KEY (id)
);
CREATE TABLE "ApexTestResult" (
	id INTEGER NOT NULL, 
	"Message" VARCHAR(255), 
	"MethodName" VARCHAR(255), 
	"Outcome" VARCHAR(255), 
	"RunTime" VARCHAR(255), 
	"StackTrace" VARCHAR(255), 
	"TestTimestamp" VARCHAR(255), 
	"ApexClassId" VARCHAR(255), 
	"ApexTestRunResultId" VARCHAR(255), 
	"QueueItemId" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "ApexTestResult" VALUES(1,'','testTrigger','Pass','141','','2023-03-29T20:27:57.000+0000','118','','');
CREATE TABLE "ApexTestRunResult" (
	id INTEGER NOT NULL, 
	"ClassesEnqueued" VARCHAR(255), 
	"StartTime" VARCHAR(255), 
	"Status" VARCHAR(255), 
	PRIMARY KEY (id)
);
CREATE TABLE "ApexTrigger" (
	id INTEGER NOT NULL, 
	"UsageAfterDelete" VARCHAR(255), 
	"UsageAfterInsert" VARCHAR(255), 
	"UsageAfterUndelete" VARCHAR(255), 
	"UsageAfterUpdate" VARCHAR(255), 
	"ApiVersion" VARCHAR(255), 
	"UsageBeforeDelete" VARCHAR(255), 
	"UsageBeforeInsert" VARCHAR(255), 
	"UsageBeforeUpdate" VARCHAR(255), 
	"Body" VARCHAR(255), 
	"BodyCrc" VARCHAR(255), 
	"TableEnumOrId" VARCHAR(255), 
	"IsValid" VARCHAR(255), 
	"UsageIsBulk" VARCHAR(255), 
	"Name" VARCHAR(255), 
	"LengthWithoutComments" VARCHAR(255), 
	"Status" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "ApexTrigger" VALUES(1,'True','True','True','True','51.0','True','True','True','/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
trigger ContactTrigger on Contact
    (before delete, before insert, before update, after delete, after insert, after undelete, after update)
{
    RollupService.triggerHandler(Contact.SObjectType);
}','4033161715.0','Contact','True','False','ContactTrigger','201','Active');
INSERT INTO "ApexTrigger" VALUES(2,'True','True','False','True','57.0','True','True','True','/**
 * Copyright (c) 2013, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

trigger RollupSummariesTrigger on LookupRollupSummary__c(
  after delete,
  after insert,
  after update,
  before delete,
  before insert,
  before update
) {
  fflib_SObjectDomain.triggerHandler(RollupSummaries.class);
}','2737763783.0','LookupRollupSummary__c','False','False','RollupSummariesTrigger','223','Active');
INSERT INTO "ApexTrigger" VALUES(3,'True','True','True','True','57.0','True','True','True','/**
 * NOTE: DO NOT PACKAGE THIS TRIGGER
 **/

/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
trigger UnpackagedRollupServiceTest2Trigger on LookupChild__c(
  before delete,
  before insert,
  before update,
  after delete,
  after insert,
  after undelete,
  after update
) {
  // Avoids the unit test triggers conflicting with manual testing in the org
  if (Test.isRunningTest()) {
    // Emulate another trigger on the child going in and deleting the parent record!
    // https://github.com/afawcett/declarative-lookup-rollup-summaries/issues/39
    if (
      TestContext.DeleteParentRecord &&
      Trigger.isBefore &&
      Trigger.isDelete
    ) {
      List<LookupParent__c> parentRecordsToDelete = new List<LookupParent__c>();
      for (LookupChild__c child : Trigger.old) {
        parentRecordsToDelete.add(
          new LookupParent__c(Id = child.LookupParent__c)
        );
      }
      delete parentRecordsToDelete;
    }
    // Call regular handler
    RollupService.triggerHandler();
  }
}','4266317205.0','LookupChild__c','True','False','UnpackagedRollupServiceTest2Trigger','645','Active');
INSERT INTO "ApexTrigger" VALUES(4,'True','True','True','True','57.0','True','True','True','/**
 * NOTE: DO NOT PACKAGE THIS TRIGGER
 **/

/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
trigger UnpackagedRollupServiceTest3Trigger on Account(
  before delete,
  before insert,
  before update,
  after delete,
  after insert,
  after undelete,
  after update
) {
  // Avoids the unit test triggers conflicting with manual testing in the org
  if (Test.isRunningTest()) {
    if (TestContext.AccountTestTriggerEnabled) {
      RollupService.triggerHandler();
    }
  }
}','1468917420.0','Account','True','False','UnpackagedRollupServiceTest3Trigger','305','Active');
INSERT INTO "ApexTrigger" VALUES(5,'True','True','True','True','57.0','True','True','True','/**
 * NOTE: DO NOT PACKAGE THIS TRIGGER
 **/

/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
trigger UnpackagedRollupServiceTest4Trigger on Task(
  before delete,
  before insert,
  before update,
  after delete,
  after insert,
  after undelete,
  after update
) {
  // Avoids the unit test triggers conflicting with manual testing in the org
  if (Test.isRunningTest()) {
    RollupService.triggerHandler();
  }
}','810414102.0','Task','True','False','UnpackagedRollupServiceTest4Trigger','245','Active');
INSERT INTO "ApexTrigger" VALUES(6,'True','True','True','True','57.0','True','True','True','/**
 * NOTE: DO NOT PACKAGE THIS TRIGGER
 **/

/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
trigger UnpackagedRollupServiceTest5Trigger on Contact(
  before delete,
  before insert,
  before update,
  after delete,
  after insert,
  after undelete,
  after update
) {
  // Avoids the unit test triggers conflicting with manual testing in the org
  if (Test.isRunningTest()) {
    RollupService.triggerHandler();
  }
}','1293497778.0','Contact','True','False','UnpackagedRollupServiceTest5Trigger','248','Active');
INSERT INTO "ApexTrigger" VALUES(7,'True','True','True','True','57.0','True','True','True','/**
 * NOTE: DO NOT PACKAGE THIS TRIGGER
 **/

/**
 * Auto Generated and Deployed by the Declarative Lookup Rollup Summaries Tool package (dlrs)
 **/
trigger UnpackagedRollupServiceTestTrigger on Opportunity(
  before delete,
  before insert,
  before update,
  after delete,
  after insert,
  after undelete,
  after update
) {
  // Avoids the unit test triggers conflicting with manual testing in the org
  if (Test.isRunningTest()) {
    if (TestContext.OpportunityTestTriggerEnabled) {
      RollupService.triggerHandler();
    }
  }
}','1987505597.0','Opportunity','True','False','UnpackagedRollupServiceTestTrigger','312','Active');
CREATE TABLE "AuraDefinition" (
	id INTEGER NOT NULL, 
	"DefType" VARCHAR(255), 
	"Format" VARCHAR(255), 
	"Source" VARCHAR(255), 
	"AuraDefinitionBundleId" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "AuraDefinition" VALUES(1,'COMPONENT','XML','<aura:component>
    <aura:attribute name="id" type="string"/>    
    <aura:attribute name="message" type="string"/>
    <aura:attribute name="severity" type="string"/>    
    <aura:attribute name="moreInfoURL" type="string"/>     
    <div class="slds-scoped-notification slds-media slds-media_center" role="status">
        <lightning:icon iconName="{!''utility:''+v.severity}" variant="{!v.severity}" size="small" />
        <div class="slds-media__body slds-p-around_small">
            <p>&nbsp;{!v.message}&nbsp;<a target="_new" href="{!v.moreInfoURL}">More Information</a></p>
        </div>
    </div>
</aura:component>','1');
INSERT INTO "AuraDefinition" VALUES(2,'CONTROLLER','JS','({
  myAction: function (component, event, helper) {}
});','1');
INSERT INTO "AuraDefinition" VALUES(3,'HELPER','JS','({
  helperMethod: function () {}
});','1');
INSERT INTO "AuraDefinition" VALUES(4,'STYLE','CSS','.THIS {
}','1');
INSERT INTO "AuraDefinition" VALUES(5,'DESIGN','XML','<design:component >

</design:component>','1');
INSERT INTO "AuraDefinition" VALUES(6,'SVG','SVG','<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<svg
  width="120px"
  height="120px"
  viewBox="0 0 120 120"
  version="1.1"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
>
	<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
		<path
      d="M120,108 C120,114.6 114.6,120 108,120 L12,120 C5.4,120 0,114.6 0,108 L0,12 C0,5.4 5.4,0 12,0 L108,0 C114.6,0 120,5.4 120,12 L120,108 L120,108 Z"
      id="Shape"
      fill="#2A739E"
    />
		<path
      d="M77.7383308,20 L61.1640113,20 L44.7300055,63.2000173 L56.0543288,63.2000173 L40,99.623291 L72.7458388,54.5871812 L60.907727,54.5871812 L77.7383308,20 Z"
      id="Path-1"
      fill="#FFFFFF"
    />
	</g>
</svg>','1');
INSERT INTO "AuraDefinition" VALUES(7,'COMPONENT','XML','<aura:component controller="OptimizerComponentController" implements="flexipage:availableForAllPageTypes" access="global">
    <aura:attribute name="summary" type="object"/>
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>    
    <lightning:card iconName="standard:account" title="Optimizer" footer="Declarative Lookup Rollup Summaries"> 
        <p class="slds-p-horizontal_small">            
            <ui:message title="{!v.summary.title}" severity="{!v.summary.severity}" closable="false">{!v.summary.message}</ui:message>
            <aura:iteration items="{!v.summary.notifications}" var="notification">
                <c:optimizerNotification id="{!notification.id}" severity="{!notification.severity}" message="{!notification.message}" moreInfoURL="{!notification.moreInfoURL}"/>
            </aura:iteration>
        </p>
    </lightning:card>
</aura:component>','2');
INSERT INTO "AuraDefinition" VALUES(8,'CONTROLLER','JS','({
  doInit: function (cmp) {
    // Calls OptimizerService.analyze
    var action = cmp.get("c.analyze");
    action.setCallback(this, function (response) {
      var state = response.getState();
      if (state === "SUCCESS") {
        cmp.set("v.summary", response.getReturnValue());
      } else if (state === "ERROR") {
        var errors = response.getError();
        if (errors) {
          if (errors[0] && errors[0].message) {
            console.log("Error message: " + errors[0].message);
          }
        } else {
          console.log("Unknown error");
        }
      }
    });
    $A.enqueueAction(action);
  }
});','2');
INSERT INTO "AuraDefinition" VALUES(9,'HELPER','JS','({
  helperMethod: function () {}
});','2');
INSERT INTO "AuraDefinition" VALUES(10,'STYLE','CSS','.THIS {
}','2');
INSERT INTO "AuraDefinition" VALUES(11,'DESIGN','XML','<design:component >

</design:component>','2');
INSERT INTO "AuraDefinition" VALUES(12,'SVG','SVG','<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<svg
  width="120px"
  height="120px"
  viewBox="0 0 120 120"
  version="1.1"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
>
	<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
		<path
      d="M120,108 C120,114.6 114.6,120 108,120 L12,120 C5.4,120 0,114.6 0,108 L0,12 C0,5.4 5.4,0 12,0 L108,0 C114.6,0 120,5.4 120,12 L120,108 L120,108 Z"
      id="Shape"
      fill="#2A739E"
    />
		<path
      d="M77.7383308,20 L61.1640113,20 L44.7300055,63.2000173 L56.0543288,63.2000173 L40,99.623291 L72.7458388,54.5871812 L60.907727,54.5871812 L77.7383308,20 Z"
      id="Path-1"
      fill="#FFFFFF"
    />
	</g>
</svg>','2');
CREATE TABLE "AuraDefinitionBundle" (
	id INTEGER NOT NULL, 
	"ApiVersion" VARCHAR(255), 
	"Description" VARCHAR(255), 
	"DeveloperName" VARCHAR(255), 
	"Language" VARCHAR(255), 
	"MasterLabel" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "AuraDefinitionBundle" VALUES(1,'57.0','A Lightning Component Bundle','optimizerNotification','en_US','optimizerNotification');
INSERT INTO "AuraDefinitionBundle" VALUES(2,'57.0','A Lightning Component Bundle','optimizer','en_US','optimizer');
CREATE TABLE "Contact" (
	id INTEGER NOT NULL, 
	"AssistantName" VARCHAR(255), 
	"AssistantPhone" VARCHAR(255), 
	"Birthdate" VARCHAR(255), 
	"Fax" VARCHAR(255), 
	"Phone" VARCHAR(255), 
	"CleanStatus" VARCHAR(255), 
	"Description" VARCHAR(255), 
	"Jigsaw" VARCHAR(255), 
	"Department" VARCHAR(255), 
	"DoNotCall" VARCHAR(255), 
	"Email" VARCHAR(255), 
	"EmailBouncedDate" VARCHAR(255), 
	"EmailBouncedReason" VARCHAR(255), 
	"HasOptedOutOfEmail" VARCHAR(255), 
	"HasOptedOutOfFax" VARCHAR(255), 
	"FirstName" VARCHAR(255), 
	"GenderIdentity" VARCHAR(255), 
	"HomePhone" VARCHAR(255), 
	"LastName" VARCHAR(255), 
	"LeadSource" VARCHAR(255), 
	"MailingCity" VARCHAR(255), 
	"MailingCountry" VARCHAR(255), 
	"MailingGeocodeAccuracy" VARCHAR(255), 
	"MailingLatitude" VARCHAR(255), 
	"MailingLongitude" VARCHAR(255), 
	"MailingState" VARCHAR(255), 
	"MailingStreet" VARCHAR(255), 
	"MailingPostalCode" VARCHAR(255), 
	"MobilePhone" VARCHAR(255), 
	"NUMBER__c" VARCHAR(255), 
	"OtherCity" VARCHAR(255), 
	"OtherCountry" VARCHAR(255), 
	"OtherGeocodeAccuracy" VARCHAR(255), 
	"OtherLatitude" VARCHAR(255), 
	"OtherLongitude" VARCHAR(255), 
	"OtherPhone" VARCHAR(255), 
	"OtherState" VARCHAR(255), 
	"OtherStreet" VARCHAR(255), 
	"OtherPostalCode" VARCHAR(255), 
	"PICKLIST__c" VARCHAR(255), 
	"Pronouns" VARCHAR(255), 
	"Salutation" VARCHAR(255), 
	"Title" VARCHAR(255), 
	"AccountId" VARCHAR(255), 
	"IndividualId" VARCHAR(255), 
	"Network__c" VARCHAR(255), 
	"ReportsToId" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "Contact" VALUES(1,'','','','','','Pending','','','','False','','','','False','False','','','','Last 1','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','1','','3','');
INSERT INTO "Contact" VALUES(2,'','','','','','Pending','','','','False','','','','False','False','','','','Last 2','','','','','','','','','','','6.0','','','','','','','','','','Inactive','','','','2','','5','');
INSERT INTO "Contact" VALUES(3,'','','','','','Pending','','','','False','','','','False','False','','','','Last 3','','','','','','','','','','','5.0','','','','','','','','','','Lapsed','','','','3','','2','');
INSERT INTO "Contact" VALUES(4,'','','','','','Pending','','','','False','','','','False','False','','','','Last 4','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','4','','4','');
INSERT INTO "Contact" VALUES(5,'','','','','','Pending','','','','False','','','','False','False','','','','Last 5','','','','','','','','','','','1.0','','','','','','','','','','Inactive','','','','5','','1','');
INSERT INTO "Contact" VALUES(6,'','','','','','Pending','','','','False','','','','False','False','','','','Last 6','','','','','','','','','','','6.0','','','','','','','','','','Lapsed','','','','6','','3','');
INSERT INTO "Contact" VALUES(7,'','','','','','Pending','','','','False','','','','False','False','','','','Last 7','','','','','','','','','','','9.0','','','','','','','','','','Active','','','','7','','5','');
INSERT INTO "Contact" VALUES(8,'','','','','','Pending','','','','False','','','','False','False','','','','Last 8','','','','','','','','','','','8.0','','','','','','','','','','Inactive','','','','8','','2','');
INSERT INTO "Contact" VALUES(9,'','','','','','Pending','','','','False','','','','False','False','','','','Last 9','','','','','','','','','','','5.0','','','','','','','','','','Lapsed','','','','9','','4','');
INSERT INTO "Contact" VALUES(10,'','','','','','Pending','','','','False','','','','False','False','','','','Last 10','','','','','','','','','','','10.0','','','','','','','','','','Active','','','','10','','1','');
INSERT INTO "Contact" VALUES(11,'','','','','','Pending','','','','False','','','','False','False','','','','Last 11','','','','','','','','','','','9.0','','','','','','','','','','Inactive','','','','11','','3','');
INSERT INTO "Contact" VALUES(12,'','','','','','Pending','','','','False','','','','False','False','','','','Last 12','','','','','','','','','','','8.0','','','','','','','','','','Lapsed','','','','12','','5','');
INSERT INTO "Contact" VALUES(13,'','','','','','Pending','','','','False','','','','False','False','','','','Last 13','','','','','','','','','','','6.0','','','','','','','','','','Active','','','','13','','2','');
INSERT INTO "Contact" VALUES(14,'','','','','','Pending','','','','False','','','','False','False','','','','Last 14','','','','','','','','','','','5.0','','','','','','','','','','Inactive','','','','14','','4','');
INSERT INTO "Contact" VALUES(15,'','','','','','Pending','','','','False','','','','False','False','','','','Last 15','','','','','','','','','','','10.0','','','','','','','','','','Lapsed','','','','15','','1','');
INSERT INTO "Contact" VALUES(16,'','','','','','Pending','','','','False','','','','False','False','','','','Last 16','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','16','','3','');
INSERT INTO "Contact" VALUES(17,'','','','','','Pending','','','','False','','','','False','False','','','','Last 17','','','','','','','','','','','6.0','','','','','','','','','','Inactive','','','','17','','5','');
INSERT INTO "Contact" VALUES(18,'','','','','','Pending','','','','False','','','','False','False','','','','Last 18','','','','','','','','','','','3.0','','','','','','','','','','Lapsed','','','','18','','2','');
INSERT INTO "Contact" VALUES(19,'','','','','','Pending','','','','False','','','','False','False','','','','Last 19','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','19','','4','');
INSERT INTO "Contact" VALUES(20,'','','','','','Pending','','','','False','','','','False','False','','','','Last 20','','','','','','','','','','','1.0','','','','','','','','','','Inactive','','','','20','','1','');
INSERT INTO "Contact" VALUES(21,'','','','','','Pending','','','','False','','','','False','False','','','','Last 21','','','','','','','','','','','10.0','','','','','','','','','','Lapsed','','','','21','','3','');
INSERT INTO "Contact" VALUES(22,'','','','','','Pending','','','','False','','','','False','False','','','','Last 22','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','22','','5','');
INSERT INTO "Contact" VALUES(23,'','','','','','Pending','','','','False','','','','False','False','','','','Last 23','','','','','','','','','','','6.0','','','','','','','','','','Inactive','','','','23','','2','');
INSERT INTO "Contact" VALUES(24,'','','','','','Pending','','','','False','','','','False','False','','','','Last 24','','','','','','','','','','','7.0','','','','','','','','','','Lapsed','','','','24','','4','');
INSERT INTO "Contact" VALUES(25,'','','','','','Pending','','','','False','','','','False','False','','','','Last 25','','','','','','','','','','','9.0','','','','','','','','','','Active','','','','25','','1','');
INSERT INTO "Contact" VALUES(26,'','','','','','Pending','','','','False','','','','False','False','','','','Last 26','','','','','','','','','','','2.0','','','','','','','','','','Inactive','','','','26','','3','');
INSERT INTO "Contact" VALUES(27,'','','','','','Pending','','','','False','','','','False','False','','','','Last 27','','','','','','','','','','','7.0','','','','','','','','','','Lapsed','','','','27','','5','');
INSERT INTO "Contact" VALUES(28,'','','','','','Pending','','','','False','','','','False','False','','','','Last 28','','','','','','','','','','','8.0','','','','','','','','','','Active','','','','28','','2','');
INSERT INTO "Contact" VALUES(29,'','','','','','Pending','','','','False','','','','False','False','','','','Last 29','','','','','','','','','','','2.0','','','','','','','','','','Inactive','','','','29','','4','');
INSERT INTO "Contact" VALUES(30,'','','','','','Pending','','','','False','','','','False','False','','','','Last 30','','','','','','','','','','','8.0','','','','','','','','','','Lapsed','','','','30','','1','');
INSERT INTO "Contact" VALUES(31,'','','','','','Pending','','','','False','','','','False','False','','','','Last 31','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','31','','3','');
INSERT INTO "Contact" VALUES(32,'','','','','','Pending','','','','False','','','','False','False','','','','Last 32','','','','','','','','','','','1.0','','','','','','','','','','Inactive','','','','32','','5','');
INSERT INTO "Contact" VALUES(33,'','','','','','Pending','','','','False','','','','False','False','','','','Last 33','','','','','','','','','','','1.0','','','','','','','','','','Lapsed','','','','33','','2','');
INSERT INTO "Contact" VALUES(34,'','','','','','Pending','','','','False','','','','False','False','','','','Last 34','','','','','','','','','','','1.0','','','','','','','','','','Active','','','','34','','4','');
INSERT INTO "Contact" VALUES(35,'','','','','','Pending','','','','False','','','','False','False','','','','Last 35','','','','','','','','','','','2.0','','','','','','','','','','Inactive','','','','35','','1','');
INSERT INTO "Contact" VALUES(36,'','','','','','Pending','','','','False','','','','False','False','','','','Last 36','','','','','','','','','','','6.0','','','','','','','','','','Lapsed','','','','36','','3','');
INSERT INTO "Contact" VALUES(37,'','','','','','Pending','','','','False','','','','False','False','','','','Last 37','','','','','','','','','','','2.0','','','','','','','','','','Active','','','','37','','5','');
INSERT INTO "Contact" VALUES(38,'','','','','','Pending','','','','False','','','','False','False','','','','Last 38','','','','','','','','','','','3.0','','','','','','','','','','Inactive','','','','38','','2','');
INSERT INTO "Contact" VALUES(39,'','','','','','Pending','','','','False','','','','False','False','','','','Last 39','','','','','','','','','','','6.0','','','','','','','','','','Lapsed','','','','39','','4','');
INSERT INTO "Contact" VALUES(40,'','','','','','Pending','','','','False','','','','False','False','','','','Last 40','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','40','','1','');
INSERT INTO "Contact" VALUES(41,'','','','','','Pending','','','','False','','','','False','False','','','','Last 41','','','','','','','','','','','8.0','','','','','','','','','','Inactive','','','','41','','3','');
INSERT INTO "Contact" VALUES(42,'','','','','','Pending','','','','False','','','','False','False','','','','Last 42','','','','','','','','','','','7.0','','','','','','','','','','Lapsed','','','','42','','5','');
INSERT INTO "Contact" VALUES(43,'','','','','','Pending','','','','False','','','','False','False','','','','Last 43','','','','','','','','','','','3.0','','','','','','','','','','Active','','','','43','','2','');
INSERT INTO "Contact" VALUES(44,'','','','','','Pending','','','','False','','','','False','False','','','','Last 44','','','','','','','','','','','4.0','','','','','','','','','','Inactive','','','','44','','4','');
INSERT INTO "Contact" VALUES(45,'','','','','','Pending','','','','False','','','','False','False','','','','Last 45','','','','','','','','','','','4.0','','','','','','','','','','Lapsed','','','','45','','1','');
INSERT INTO "Contact" VALUES(46,'','','','','','Pending','','','','False','','','','False','False','','','','Last 46','','','','','','','','','','','9.0','','','','','','','','','','Active','','','','46','','3','');
INSERT INTO "Contact" VALUES(47,'','','','','','Pending','','','','False','','','','False','False','','','','Last 47','','','','','','','','','','','5.0','','','','','','','','','','Inactive','','','','47','','5','');
INSERT INTO "Contact" VALUES(48,'','','','','','Pending','','','','False','','','','False','False','','','','Last 48','','','','','','','','','','','8.0','','','','','','','','','','Lapsed','','','','48','','2','');
INSERT INTO "Contact" VALUES(49,'','','','','','Pending','','','','False','','','','False','False','','','','Last 49','','','','','','','','','','','8.0','','','','','','','','','','Active','','','','49','','4','');
INSERT INTO "Contact" VALUES(50,'','','','','','Pending','','','','False','','','','False','False','','','','Last 50','','','','','','','','','','','8.0','','','','','','','','','','Inactive','','','','50','','1','');
INSERT INTO "Contact" VALUES(51,'','','','','','Pending','','','','False','','','','False','False','','','','Last 51','','','','','','','','','','','1.0','','','','','','','','','','Lapsed','','','','51','','3','');
INSERT INTO "Contact" VALUES(52,'','','','','','Pending','','','','False','','','','False','False','','','','Last 52','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','52','','5','');
INSERT INTO "Contact" VALUES(53,'','','','','','Pending','','','','False','','','','False','False','','','','Last 53','','','','','','','','','','','3.0','','','','','','','','','','Inactive','','','','53','','2','');
INSERT INTO "Contact" VALUES(54,'','','','','','Pending','','','','False','','','','False','False','','','','Last 54','','','','','','','','','','','1.0','','','','','','','','','','Lapsed','','','','54','','4','');
INSERT INTO "Contact" VALUES(55,'','','','','','Pending','','','','False','','','','False','False','','','','Last 55','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','55','','1','');
INSERT INTO "Contact" VALUES(56,'','','','','','Pending','','','','False','','','','False','False','','','','Last 56','','','','','','','','','','','1.0','','','','','','','','','','Inactive','','','','56','','3','');
INSERT INTO "Contact" VALUES(57,'','','','','','Pending','','','','False','','','','False','False','','','','Last 57','','','','','','','','','','','5.0','','','','','','','','','','Lapsed','','','','57','','5','');
INSERT INTO "Contact" VALUES(58,'','','','','','Pending','','','','False','','','','False','False','','','','Last 58','','','','','','','','','','','3.0','','','','','','','','','','Active','','','','58','','2','');
INSERT INTO "Contact" VALUES(59,'','','','','','Pending','','','','False','','','','False','False','','','','Last 59','','','','','','','','','','','10.0','','','','','','','','','','Inactive','','','','59','','4','');
INSERT INTO "Contact" VALUES(60,'','','','','','Pending','','','','False','','','','False','False','','','','Last 60','','','','','','','','','','','1.0','','','','','','','','','','Lapsed','','','','60','','1','');
INSERT INTO "Contact" VALUES(61,'','','','','','Pending','','','','False','','','','False','False','','','','Last 61','','','','','','','','','','','9.0','','','','','','','','','','Active','','','','61','','3','');
INSERT INTO "Contact" VALUES(62,'','','','','','Pending','','','','False','','','','False','False','','','','Last 62','','','','','','','','','','','6.0','','','','','','','','','','Inactive','','','','62','','5','');
INSERT INTO "Contact" VALUES(63,'','','','','','Pending','','','','False','','','','False','False','','','','Last 63','','','','','','','','','','','1.0','','','','','','','','','','Lapsed','','','','63','','2','');
INSERT INTO "Contact" VALUES(64,'','','','','','Pending','','','','False','','','','False','False','','','','Last 64','','','','','','','','','','','8.0','','','','','','','','','','Active','','','','64','','4','');
INSERT INTO "Contact" VALUES(65,'','','','','','Pending','','','','False','','','','False','False','','','','Last 65','','','','','','','','','','','1.0','','','','','','','','','','Inactive','','','','65','','1','');
INSERT INTO "Contact" VALUES(66,'','','','','','Pending','','','','False','','','','False','False','','','','Last 66','','','','','','','','','','','6.0','','','','','','','','','','Lapsed','','','','66','','3','');
INSERT INTO "Contact" VALUES(67,'','','','','','Pending','','','','False','','','','False','False','','','','Last 67','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','67','','5','');
INSERT INTO "Contact" VALUES(68,'','','','','','Pending','','','','False','','','','False','False','','','','Last 68','','','','','','','','','','','7.0','','','','','','','','','','Inactive','','','','68','','2','');
INSERT INTO "Contact" VALUES(69,'','','','','','Pending','','','','False','','','','False','False','','','','Last 69','','','','','','','','','','','2.0','','','','','','','','','','Lapsed','','','','69','','4','');
INSERT INTO "Contact" VALUES(70,'','','','','','Pending','','','','False','','','','False','False','','','','Last 70','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','70','','1','');
INSERT INTO "Contact" VALUES(71,'','','','','','Pending','','','','False','','','','False','False','','','','Last 71','','','','','','','','','','','2.0','','','','','','','','','','Inactive','','','','71','','3','');
INSERT INTO "Contact" VALUES(72,'','','','','','Pending','','','','False','','','','False','False','','','','Last 72','','','','','','','','','','','8.0','','','','','','','','','','Lapsed','','','','72','','5','');
INSERT INTO "Contact" VALUES(73,'','','','','','Pending','','','','False','','','','False','False','','','','Last 73','','','','','','','','','','','6.0','','','','','','','','','','Active','','','','73','','2','');
INSERT INTO "Contact" VALUES(74,'','','','','','Pending','','','','False','','','','False','False','','','','Last 74','','','','','','','','','','','10.0','','','','','','','','','','Inactive','','','','74','','4','');
INSERT INTO "Contact" VALUES(75,'','','','','','Pending','','','','False','','','','False','False','','','','Last 75','','','','','','','','','','','4.0','','','','','','','','','','Lapsed','','','','75','','1','');
INSERT INTO "Contact" VALUES(76,'','','','','','Pending','','','','False','','','','False','False','','','','Last 76','','','','','','','','','','','3.0','','','','','','','','','','Active','','','','76','','3','');
INSERT INTO "Contact" VALUES(77,'','','','','','Pending','','','','False','','','','False','False','','','','Last 77','','','','','','','','','','','9.0','','','','','','','','','','Inactive','','','','77','','5','');
INSERT INTO "Contact" VALUES(78,'','','','','','Pending','','','','False','','','','False','False','','','','Last 78','','','','','','','','','','','7.0','','','','','','','','','','Lapsed','','','','78','','2','');
INSERT INTO "Contact" VALUES(79,'','','','','','Pending','','','','False','','','','False','False','','','','Last 79','','','','','','','','','','','7.0','','','','','','','','','','Active','','','','79','','4','');
INSERT INTO "Contact" VALUES(80,'','','','','','Pending','','','','False','','','','False','False','','','','Last 80','','','','','','','','','','','5.0','','','','','','','','','','Inactive','','','','80','','1','');
INSERT INTO "Contact" VALUES(81,'','','','','','Pending','','','','False','','','','False','False','','','','Last 81','','','','','','','','','','','4.0','','','','','','','','','','Lapsed','','','','81','','3','');
INSERT INTO "Contact" VALUES(82,'','','','','','Pending','','','','False','','','','False','False','','','','Last 82','','','','','','','','','','','10.0','','','','','','','','','','Active','','','','82','','5','');
INSERT INTO "Contact" VALUES(83,'','','','','','Pending','','','','False','','','','False','False','','','','Last 83','','','','','','','','','','','10.0','','','','','','','','','','Inactive','','','','83','','2','');
INSERT INTO "Contact" VALUES(84,'','','','','','Pending','','','','False','','','','False','False','','','','Last 84','','','','','','','','','','','6.0','','','','','','','','','','Lapsed','','','','84','','4','');
INSERT INTO "Contact" VALUES(85,'','','','','','Pending','','','','False','','','','False','False','','','','Last 85','','','','','','','','','','','2.0','','','','','','','','','','Active','','','','85','','1','');
INSERT INTO "Contact" VALUES(86,'','','','','','Pending','','','','False','','','','False','False','','','','Last 86','','','','','','','','','','','6.0','','','','','','','','','','Inactive','','','','86','','3','');
INSERT INTO "Contact" VALUES(87,'','','','','','Pending','','','','False','','','','False','False','','','','Last 87','','','','','','','','','','','2.0','','','','','','','','','','Lapsed','','','','87','','5','');
INSERT INTO "Contact" VALUES(88,'','','','','','Pending','','','','False','','','','False','False','','','','Last 88','','','','','','','','','','','2.0','','','','','','','','','','Active','','','','88','','2','');
INSERT INTO "Contact" VALUES(89,'','','','','','Pending','','','','False','','','','False','False','','','','Last 89','','','','','','','','','','','3.0','','','','','','','','','','Active','','','','89','','4','');
INSERT INTO "Contact" VALUES(90,'','','','','','Pending','','','','False','','','','False','False','','','','Last 90','','','','','','','','','','','9.0','','','','','','','','','','Inactive','','','','90','','1','');
INSERT INTO "Contact" VALUES(91,'','','','','','Pending','','','','False','','','','False','False','','','','Last 91','','','','','','','','','','','10.0','','','','','','','','','','Lapsed','','','','91','','3','');
INSERT INTO "Contact" VALUES(92,'','','','','','Pending','','','','False','','','','False','False','','','','Last 92','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','92','','5','');
INSERT INTO "Contact" VALUES(93,'','','','','','Pending','','','','False','','','','False','False','','','','Last 93','','','','','','','','','','','8.0','','','','','','','','','','Inactive','','','','93','','2','');
INSERT INTO "Contact" VALUES(94,'','','','','','Pending','','','','False','','','','False','False','','','','Last 94','','','','','','','','','','','5.0','','','','','','','','','','Lapsed','','','','94','','4','');
INSERT INTO "Contact" VALUES(95,'','','','','','Pending','','','','False','','','','False','False','','','','Last 95','','','','','','','','','','','5.0','','','','','','','','','','Active','','','','95','','1','');
INSERT INTO "Contact" VALUES(96,'','','','','','Pending','','','','False','','','','False','False','','','','Last 96','','','','','','','','','','','7.0','','','','','','','','','','Inactive','','','','96','','3','');
INSERT INTO "Contact" VALUES(97,'','','','','','Pending','','','','False','','','','False','False','','','','Last 97','','','','','','','','','','','3.0','','','','','','','','','','Lapsed','','','','97','','5','');
INSERT INTO "Contact" VALUES(98,'','','','','','Pending','','','','False','','','','False','False','','','','Last 98','','','','','','','','','','','4.0','','','','','','','','','','Active','','','','98','','2','');
INSERT INTO "Contact" VALUES(99,'','','','','','Pending','','','','False','','','','False','False','','','','Last 99','','','','','','','','','','','5.0','','','','','','','','','','Inactive','','','','99','','4','');
INSERT INTO "Contact" VALUES(100,'','','','','','Pending','','','','False','','','','False','False','','','','Last 100','','','','','','','','','','','4.0','','','','','','','','','','Lapsed','','','','100','','1','');
CREATE TABLE "Individual" (
	id INTEGER NOT NULL, 
	"LastName" VARCHAR(255), 
	PRIMARY KEY (id)
);
CREATE TABLE "Network__c" (
	id INTEGER NOT NULL, 
	"AVG__c" VARCHAR(255), 
	"CONCATENATE_DISTINCT__c" VARCHAR(255), 
	"CONCATENATE__c" VARCHAR(255), 
	"COUNT_DISTINCT__c" VARCHAR(255), 
	"COUNT__c" VARCHAR(255), 
	"FIRST__c" VARCHAR(255), 
	"LAST__c" VARCHAR(255), 
	"MAX__c" VARCHAR(255), 
	"MIN__c" VARCHAR(255), 
	"Name" VARCHAR(255), 
	"SUM__c" VARCHAR(255), 
	PRIMARY KEY (id)
);
INSERT INTO "Network__c" VALUES(1,'4.9','Inactive;Lapsed;Active','Inactive;Lapsed;Active;Inactive;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active','3.0','20.0','Inactive','Active','10.0','1.0','Alumni','98.0');
INSERT INTO "Network__c" VALUES(2,'5.1','Lapsed;Active;Inactive','Lapsed;Active;Inactive;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive','3.0','20.0','Lapsed','Inactive','10.0','1.0','Professional','102.0');
INSERT INTO "Network__c" VALUES(3,'5.55','Active;Inactive;Lapsed','Active;Inactive;Lapsed;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed','3.0','20.0','Active','Lapsed','10.0','1.0','InfoSec','111.0');
INSERT INTO "Network__c" VALUES(4,'5.2','Active;Inactive;Lapsed','Active;Inactive;Lapsed;Active;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed;Active;Inactive;Lapsed','3.0','20.0','Active','Lapsed','10.0','1.0','Legal','104.0');
INSERT INTO "Network__c" VALUES(5,'5.65','Inactive;Active;Lapsed','Inactive;Active;Lapsed;Inactive;Active;Lapsed;Inactive;Active;Lapsed;Inactive;Active;Lapsed;Inactive;Active;Lapsed;Inactive;Active;Lapsed;Active;Lapsed','3.0','20.0','Inactive','Lapsed','10.0','1.0','Sports','113.0');
COMMIT;
